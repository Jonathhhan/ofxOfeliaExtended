/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040201
#define SWIGLUA
#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4
#define SWIG_POINTER_CLEAR         0x8
#define SWIG_POINTER_RELEASE       (SWIG_POINTER_CLEAR | SWIG_POINTER_DISOWN)

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
/* Runtime errors are < 0 */
#define SWIG_ERROR                 (-1)
/* Errors in range -1 to -99 are in swigerrors.swg (errors for all languages including those not using the runtime) */
/* Errors in range -100 to -199 are language specific errors defined in *errors.swg */
/* Errors < -200 are generic runtime specific errors */
#define SWIG_ERROR_RELEASE_NOT_OWNED (-200)

#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporary objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del object mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  Choose the last
     name. It should be the most specific; a fully resolved name
     but not necessarily with default template parameters expanded. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13


/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif

/* lua_tolstring() was added in Lua 5.1.  It should be a little more
   efficient than making two separate calls and it avoids problems with order
   of evaluation so SWIG calls lua_tolstring() when it wants the length and
   we provide a compatibility implementation for Lua 5.0.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
static const char *(lua_tolstring)(lua_State *L, int idx, size_t *len) {
  /* Call lua_tostring() first as it may convert the value from number to
     string. */
  const char *result = lua_tostring(L, idx);
  if (len) *len = lua_strlen(L, idx);
  return result;
}
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the location of the innermost Lua call-point
   (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the
   location of the innermost Lua call-point (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

#endif

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;


struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitrary amount of data */
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  do { if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } } while (0)


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers
it gets the address, casts it, then dereferences it */
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State *L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        }
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member)
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;

fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);

}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get_item(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  (void)first_arg;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get_item,ret);
  return bases_search_result;  /* sorry not known */
}


/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  (void)first_arg;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  result = SWIG_Lua_class_do_get_item(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  swig_lua_userdata* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = (swig_lua_userdata*)lua_touserdata(L,1); /* get the userdata address */

  lua_pushfstring(L, "<userdata of type '%s' at %p>", userData->type->str, userData->ptr);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */

  usr->own = 0; /* clear our ownership */
  return 0;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    SWIG_Lua_create_class_registry(L);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file.
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN void SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN void SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN void SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN void  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all its bases (recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metamethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows skipping searching metamethod in the given class and immediately going to searching in bases. skip_check
 * is not carried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */

  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);

  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));

  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1);

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index);

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);

      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success;
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metamethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  int ret = SWIG_ERROR;
  swig_lua_userdata *usr;
  swig_cast_info *cast;
  /* special case: lua nil => NULL pointer */
  if (lua_isnil(L,index))
  {
    *ptr=0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  if (lua_islightuserdata(L,index))
  {
    *ptr=lua_touserdata(L,index);
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (((flags & SWIG_POINTER_RELEASE) == SWIG_POINTER_RELEASE) && !usr->own)
    {
      return SWIG_ERROR_RELEASE_NOT_OWNED;
    }
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
      usr->own = 0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      ret = SWIG_OK;
    }
    else
    {
      cast=SWIG_TypeCheck(usr->type->name,type); /* performs normal type checking */
      if (cast)
      {
        int newmemory = 0;
        *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
        ret = SWIG_OK;
      }
    }
    if ((ret == SWIG_OK) && (flags & SWIG_POINTER_CLEAR))
    {
      usr->ptr = 0;
    }
  }
  return ret;
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result = 0;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata *usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushinteger(L,(lua_Integer)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      {
        char c = (char)constants[i].lvalue;
        lua_pushlstring(L,&c,1);
      }
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int
SWIG_Lua_dostring(lua_State *L, const char *str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Base swig_types[0]
#define SWIGTYPE_p_BaseTheme swig_types[1]
#define SWIGTYPE_p_ColorType swig_types[2]
#define SWIGTYPE_p_CreEPS_BOOL swig_types[3]
#define SWIGTYPE_p_CreEPS_CHAR swig_types[4]
#define SWIGTYPE_p_CreEPS_FLOAT swig_types[5]
#define SWIGTYPE_p_CreEPS_INT swig_types[6]
#define SWIGTYPE_p_FILE swig_types[7]
#define SWIGTYPE_p_ImFont swig_types[8]
#define SWIGTYPE_p_ImFontConfig swig_types[9]
#define SWIGTYPE_p_ImGuiConfigFlags swig_types[10]
#define SWIGTYPE_p_ImGuiContext swig_types[11]
#define SWIGTYPE_p_ImWchar swig_types[12]
#define SWIGTYPE_p_IplImage swig_types[13]
#define SWIGTYPE_p_Node swig_types[14]
#define SWIGTYPE_p_NormalType swig_types[15]
#define SWIGTYPE_p_SortMode swig_types[16]
#define SWIGTYPE_p_TexCoordType swig_types[17]
#define SWIGTYPE_p_VertexType swig_types[18]
#define SWIGTYPE_p__XDisplay swig_types[19]
#define SWIGTYPE_p_a_2__CreEPS_FLOAT swig_types[20]
#define SWIGTYPE_p_aiAnimation swig_types[21]
#define SWIGTYPE_p_aiScene swig_types[22]
#define SWIGTYPE_p_cv__Mat swig_types[23]
#define SWIGTYPE_p_difference_type swig_types[24]
#define SWIGTYPE_p_f_enum_sd_log_level_t_p_q_const__char_p_void__void swig_types[25]
#define SWIGTYPE_p_f_int_int_float_p_void__void swig_types[26]
#define SWIGTYPE_p_f_q_const__p_q_const__CreEPS_CHAR_v_______void swig_types[27]
#define SWIGTYPE_p_float swig_types[28]
#define SWIGTYPE_p_glm__mat4 swig_types[29]
#define SWIGTYPE_p_glm__vec2 swig_types[30]
#define SWIGTYPE_p_glm__vec3 swig_types[31]
#define SWIGTYPE_p_int swig_types[32]
#define SWIGTYPE_p_long_long swig_types[33]
#define SWIGTYPE_p_ns_creeps__CAt swig_types[34]
#define SWIGTYPE_p_ns_creeps__CAtBackgroundColor swig_types[35]
#define SWIGTYPE_p_ns_creeps__CAtCheckerboardFilling swig_types[36]
#define SWIGTYPE_p_ns_creeps__CAtColor swig_types[37]
#define SWIGTYPE_p_ns_creeps__CAtFont swig_types[38]
#define SWIGTYPE_p_ns_creeps__CAtGrayScale swig_types[39]
#define SWIGTYPE_p_ns_creeps__CAtHexDotFilling swig_types[40]
#define SWIGTYPE_p_ns_creeps__CAtLineCap swig_types[41]
#define SWIGTYPE_p_ns_creeps__CAtLineDash swig_types[42]
#define SWIGTYPE_p_ns_creeps__CAtLineJoin swig_types[43]
#define SWIGTYPE_p_ns_creeps__CAtLineThickness swig_types[44]
#define SWIGTYPE_p_ns_creeps__CAtStripeFilling swig_types[45]
#define SWIGTYPE_p_ns_creeps__CAtTextAlignment swig_types[46]
#define SWIGTYPE_p_ns_creeps__CAtTransparentBackground swig_types[47]
#define SWIGTYPE_p_ns_creeps__CreEPS swig_types[48]
#define SWIGTYPE_p_ofAbstractImage swig_types[49]
#define SWIGTYPE_p_ofBaseDraws swig_types[50]
#define SWIGTYPE_p_ofBaseImage_T_unsigned_char_t swig_types[51]
#define SWIGTYPE_p_ofBaseVideoDraws swig_types[52]
#define SWIGTYPE_p_ofBuffer swig_types[53]
#define SWIGTYPE_p_ofColor_T_float_t swig_types[54]
#define SWIGTYPE_p_ofColor_T_unsigned_char_t swig_types[55]
#define SWIGTYPE_p_ofColor_T_unsigned_short_t swig_types[56]
#define SWIGTYPE_p_ofEventArgs swig_types[57]
#define SWIGTYPE_p_ofFbo swig_types[58]
#define SWIGTYPE_p_ofImage_T_float_t swig_types[59]
#define SWIGTYPE_p_ofImage_T_unsigned_char_t swig_types[60]
#define SWIGTYPE_p_ofImage_T_unsigned_short_t swig_types[61]
#define SWIGTYPE_p_ofKeyEventArgs swig_types[62]
#define SWIGTYPE_p_ofMaterial swig_types[63]
#define SWIGTYPE_p_ofMeshFace_T_ofDefaultVertexType_ofDefaultNormalType_ofDefaultColorType_ofDefaultTexCoordType_t swig_types[64]
#define SWIGTYPE_p_ofMesh_T_ofDefaultVertexType_ofDefaultNormalType_ofDefaultColorType_ofDefaultTexCoordType_t swig_types[65]
#define SWIGTYPE_p_ofMessage swig_types[66]
#define SWIGTYPE_p_ofMouseEventArgs swig_types[67]
#define SWIGTYPE_p_ofPixels_T_float_t swig_types[68]
#define SWIGTYPE_p_ofPixels_T_unsigned_char_t swig_types[69]
#define SWIGTYPE_p_ofPixels_T_unsigned_short_t swig_types[70]
#define SWIGTYPE_p_ofPolyline_T_ofDefaultVertexType_t swig_types[71]
#define SWIGTYPE_p_ofRectangle swig_types[72]
#define SWIGTYPE_p_ofResizeEventArgs swig_types[73]
#define SWIGTYPE_p_ofTexture swig_types[74]
#define SWIGTYPE_p_ofTouchEventArgs swig_types[75]
#define SWIGTYPE_p_ofVboMesh swig_types[76]
#define SWIGTYPE_p_ofVec3f swig_types[77]
#define SWIGTYPE_p_ofVideoGrabber swig_types[78]
#define SWIGTYPE_p_ofVideoPlayer swig_types[79]
#define SWIGTYPE_p_ofWindowPosEventArgs swig_types[80]
#define SWIGTYPE_p_ofxAssimpAnimation swig_types[81]
#define SWIGTYPE_p_ofxAssimpMeshHelper swig_types[82]
#define SWIGTYPE_p_ofxAssimpModelLoader swig_types[83]
#define SWIGTYPE_p_ofxCvBlob swig_types[84]
#define SWIGTYPE_p_ofxCvColorImage swig_types[85]
#define SWIGTYPE_p_ofxCvContourFinder swig_types[86]
#define SWIGTYPE_p_ofxCvFloatImage swig_types[87]
#define SWIGTYPE_p_ofxCvGrayscaleImage swig_types[88]
#define SWIGTYPE_p_ofxCvHaarFinder swig_types[89]
#define SWIGTYPE_p_ofxCvImage swig_types[90]
#define SWIGTYPE_p_ofxCvShortImage swig_types[91]
#define SWIGTYPE_p_ofxImGuiContext swig_types[92]
#define SWIGTYPE_p_ofxImGui__Gui swig_types[93]
#define SWIGTYPE_p_ofxImageSequencePlayer swig_types[94]
#define SWIGTYPE_p_ofxTextureData3d swig_types[95]
#define SWIGTYPE_p_ofxVectorGraphics swig_types[96]
#define SWIGTYPE_p_ofxVolumetrics swig_types[97]
#define SWIGTYPE_p_sd_ctx_t swig_types[98]
#define SWIGTYPE_p_sd_image_t swig_types[99]
#define SWIGTYPE_p_short swig_types[100]
#define SWIGTYPE_p_signed_char swig_types[101]
#define SWIGTYPE_p_size_type swig_types[102]
#define SWIGTYPE_p_std__shared_ptrT_aiScene_const_t swig_types[103]
#define SWIGTYPE_p_std__shared_ptrT_ofAppBaseWindow_t swig_types[104]
#define SWIGTYPE_p_std__vectorT_glm__vec3_t swig_types[105]
#define SWIGTYPE_p_std__vectorT_ofxCvBlob_t swig_types[106]
#define SWIGTYPE_p_std__vectorT_std__string_t swig_types[107]
#define SWIGTYPE_p_string swig_types[108]
#define SWIGTYPE_p_unsigned_char swig_types[109]
#define SWIGTYPE_p_unsigned_int swig_types[110]
#define SWIGTYPE_p_unsigned_long swig_types[111]
#define SWIGTYPE_p_unsigned_long_long swig_types[112]
#define SWIGTYPE_p_unsigned_short swig_types[113]
#define SWIGTYPE_p_upscaler_ctx_t swig_types[114]
#define SWIGTYPE_p_value_type swig_types[115]
static swig_type_info *swig_types[117];
static swig_module_info swig_module = {swig_types, 116, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "ofx"
#define SWIG_init      luaopen_ofx
#define SWIG_init_user luaopen_ofx_user

#define SWIG_LUACODE   luaopen_ofx_luacode

#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


	#include "../../ofxVectorGraphics/src/ofxVectorGraphics.h"
	#include "../../ofxOpenCv/src/ofxOpenCv.h"
	#include "../../ofxAssimpModelLoader/src/ofxAssimpModelLoader.h"
	#include "../../ofxVolumetrics/src/ofxVolumetrics.h"
	#include "../../ofxStableDiffusion/libs/stable-diffusion/include/stable-diffusion.h"
	#include "../../ofxImGui/src/Gui.h"
	using namespace ofxImGui;
	using namespace ns_creeps;


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}


#include <memory>

#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_CAt__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CAt *result = 0 ;
    SWIG_check_num_args("ns_creeps::CAt::CAt",0,0) result = (ns_creeps::CAt *)new ns_creeps::CAt();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ns_creeps__CAt,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_new_CAt__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CAt *arg1 = 0 ; ns_creeps::CAt *result = 0 ;
    SWIG_check_num_args("ns_creeps::CAt::CAt",1,1)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("ns_creeps::CAt::CAt",1,"ns_creeps::CAt const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("new_CAt",1,SWIGTYPE_p_ns_creeps__CAt); } 
    result = (ns_creeps::CAt *)new ns_creeps::CAt((ns_creeps::CAt const &)*arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ns_creeps__CAt,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_new_CAt(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_CAt__SWIG_0(L);}  if (argc == 1) { int _v = 0; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CAt, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_CAt__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CAt'\n" "  Possible C/C++ prototypes are:\n"
  "    ns_creeps::CAt::CAt()\n" "    ns_creeps::CAt::CAt(ns_creeps::CAt const &)\n"); lua_error(L);return 0; }
static int _wrap_CAt_getLineJoin(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CAt *arg1 = (ns_creeps::CAt *) 0 ;
    CreEPS_INT result; SWIG_check_num_args("ns_creeps::CAt::getLineJoin",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CAt::getLineJoin",1,"ns_creeps::CAt const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("CAt_getLineJoin",1,SWIGTYPE_p_ns_creeps__CAt); }  result = ((ns_creeps::CAt const *)arg1)->getLineJoin(); {
      CreEPS_INT * resultptr = new CreEPS_INT(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CreEPS_INT,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CAt_getLineCap(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CAt *arg1 = (ns_creeps::CAt *) 0 ;
    CreEPS_INT result; SWIG_check_num_args("ns_creeps::CAt::getLineCap",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CAt::getLineCap",1,"ns_creeps::CAt const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("CAt_getLineCap",1,SWIGTYPE_p_ns_creeps__CAt); }  result = ((ns_creeps::CAt const *)arg1)->getLineCap(); {
      CreEPS_INT * resultptr = new CreEPS_INT(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CreEPS_INT,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CAt_getLineDashType(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CAt *arg1 = (ns_creeps::CAt *) 0 ;
    CreEPS_INT result; SWIG_check_num_args("ns_creeps::CAt::getLineDashType",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CAt::getLineDashType",1,"ns_creeps::CAt const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("CAt_getLineDashType",1,SWIGTYPE_p_ns_creeps__CAt); } 
    result = ((ns_creeps::CAt const *)arg1)->getLineDashType(); { CreEPS_INT * resultptr = new CreEPS_INT(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CreEPS_INT,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CAt_getTextAlignment(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CAt *arg1 = (ns_creeps::CAt *) 0 ;
    CreEPS_INT result; SWIG_check_num_args("ns_creeps::CAt::getTextAlignment",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CAt::getTextAlignment",1,"ns_creeps::CAt const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("CAt_getTextAlignment",1,SWIGTYPE_p_ns_creeps__CAt); } 
    result = ((ns_creeps::CAt const *)arg1)->getTextAlignment(); { CreEPS_INT * resultptr = new CreEPS_INT(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CreEPS_INT,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CAt_getFillingPattern(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CAt *arg1 = (ns_creeps::CAt *) 0 ;
    CreEPS_INT result; SWIG_check_num_args("ns_creeps::CAt::getFillingPattern",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CAt::getFillingPattern",1,"ns_creeps::CAt const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("CAt_getFillingPattern",1,SWIGTYPE_p_ns_creeps__CAt); } 
    result = ((ns_creeps::CAt const *)arg1)->getFillingPattern(); { CreEPS_INT * resultptr = new CreEPS_INT(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CreEPS_INT,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CAt_getLineThickness(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CAt *arg1 = (ns_creeps::CAt *) 0 ;
    CreEPS_FLOAT result; SWIG_check_num_args("ns_creeps::CAt::getLineThickness",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CAt::getLineThickness",1,"ns_creeps::CAt const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("CAt_getLineThickness",1,SWIGTYPE_p_ns_creeps__CAt); } 
    result = ((ns_creeps::CAt const *)arg1)->getLineThickness(); { CreEPS_FLOAT * resultptr = new CreEPS_FLOAT(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CreEPS_FLOAT,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CAt_getLineDashOffset(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CAt *arg1 = (ns_creeps::CAt *) 0 ;
    CreEPS_FLOAT result; SWIG_check_num_args("ns_creeps::CAt::getLineDashOffset",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CAt::getLineDashOffset",1,"ns_creeps::CAt const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("CAt_getLineDashOffset",1,SWIGTYPE_p_ns_creeps__CAt); } 
    result = ((ns_creeps::CAt const *)arg1)->getLineDashOffset(); { CreEPS_FLOAT * resultptr = new CreEPS_FLOAT(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CreEPS_FLOAT,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CAt_getLineDashFactor(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CAt *arg1 = (ns_creeps::CAt *) 0 ;
    CreEPS_FLOAT result; SWIG_check_num_args("ns_creeps::CAt::getLineDashFactor",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CAt::getLineDashFactor",1,"ns_creeps::CAt const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("CAt_getLineDashFactor",1,SWIGTYPE_p_ns_creeps__CAt); } 
    result = ((ns_creeps::CAt const *)arg1)->getLineDashFactor(); { CreEPS_FLOAT * resultptr = new CreEPS_FLOAT(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CreEPS_FLOAT,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CAt_getRed(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CAt *arg1 = (ns_creeps::CAt *) 0 ;
    CreEPS_FLOAT result; SWIG_check_num_args("ns_creeps::CAt::getRed",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CAt::getRed",1,"ns_creeps::CAt const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("CAt_getRed",1,SWIGTYPE_p_ns_creeps__CAt); }  result = ((ns_creeps::CAt const *)arg1)->getRed(); {
      CreEPS_FLOAT * resultptr = new CreEPS_FLOAT(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CreEPS_FLOAT,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CAt_getGreen(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CAt *arg1 = (ns_creeps::CAt *) 0 ;
    CreEPS_FLOAT result; SWIG_check_num_args("ns_creeps::CAt::getGreen",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CAt::getGreen",1,"ns_creeps::CAt const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("CAt_getGreen",1,SWIGTYPE_p_ns_creeps__CAt); }  result = ((ns_creeps::CAt const *)arg1)->getGreen(); {
      CreEPS_FLOAT * resultptr = new CreEPS_FLOAT(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CreEPS_FLOAT,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CAt_getBlue(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CAt *arg1 = (ns_creeps::CAt *) 0 ;
    CreEPS_FLOAT result; SWIG_check_num_args("ns_creeps::CAt::getBlue",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CAt::getBlue",1,"ns_creeps::CAt const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("CAt_getBlue",1,SWIGTYPE_p_ns_creeps__CAt); }  result = ((ns_creeps::CAt const *)arg1)->getBlue(); {
      CreEPS_FLOAT * resultptr = new CreEPS_FLOAT(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CreEPS_FLOAT,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CAt_getBackgroundRed(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CAt *arg1 = (ns_creeps::CAt *) 0 ;
    CreEPS_FLOAT result; SWIG_check_num_args("ns_creeps::CAt::getBackgroundRed",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CAt::getBackgroundRed",1,"ns_creeps::CAt const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("CAt_getBackgroundRed",1,SWIGTYPE_p_ns_creeps__CAt); } 
    result = ((ns_creeps::CAt const *)arg1)->getBackgroundRed(); { CreEPS_FLOAT * resultptr = new CreEPS_FLOAT(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CreEPS_FLOAT,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CAt_getBackgroundGreen(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CAt *arg1 = (ns_creeps::CAt *) 0 ;
    CreEPS_FLOAT result; SWIG_check_num_args("ns_creeps::CAt::getBackgroundGreen",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CAt::getBackgroundGreen",1,"ns_creeps::CAt const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("CAt_getBackgroundGreen",1,SWIGTYPE_p_ns_creeps__CAt); } 
    result = ((ns_creeps::CAt const *)arg1)->getBackgroundGreen(); { CreEPS_FLOAT * resultptr = new CreEPS_FLOAT(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CreEPS_FLOAT,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CAt_getBackgroundBlue(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CAt *arg1 = (ns_creeps::CAt *) 0 ;
    CreEPS_FLOAT result; SWIG_check_num_args("ns_creeps::CAt::getBackgroundBlue",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CAt::getBackgroundBlue",1,"ns_creeps::CAt const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("CAt_getBackgroundBlue",1,SWIGTYPE_p_ns_creeps__CAt); } 
    result = ((ns_creeps::CAt const *)arg1)->getBackgroundBlue(); { CreEPS_FLOAT * resultptr = new CreEPS_FLOAT(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CreEPS_FLOAT,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CAt_getFontScale(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CAt *arg1 = (ns_creeps::CAt *) 0 ;
    CreEPS_FLOAT result; SWIG_check_num_args("ns_creeps::CAt::getFontScale",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CAt::getFontScale",1,"ns_creeps::CAt const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("CAt_getFontScale",1,SWIGTYPE_p_ns_creeps__CAt); }  result = ((ns_creeps::CAt const *)arg1)->getFontScale();
    { CreEPS_FLOAT * resultptr = new CreEPS_FLOAT(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CreEPS_FLOAT,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CAt_getLineDashString(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CAt *arg1 = (ns_creeps::CAt *) 0 ;
    CreEPS_CHAR *result = 0 ; SWIG_check_num_args("ns_creeps::CAt::getLineDashString",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CAt::getLineDashString",1,"ns_creeps::CAt const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("CAt_getLineDashString",1,SWIGTYPE_p_ns_creeps__CAt); } 
    result = (CreEPS_CHAR *)((ns_creeps::CAt const *)arg1)->getLineDashString();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CreEPS_CHAR,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_CAt_getFontString(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CAt *arg1 = (ns_creeps::CAt *) 0 ;
    CreEPS_CHAR *result = 0 ; SWIG_check_num_args("ns_creeps::CAt::getFontString",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CAt::getFontString",1,"ns_creeps::CAt const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("CAt_getFontString",1,SWIGTYPE_p_ns_creeps__CAt); } 
    result = (CreEPS_CHAR *)((ns_creeps::CAt const *)arg1)->getFontString();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CreEPS_CHAR,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_CAt_inheritAttributes__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CAt *arg1 = (ns_creeps::CAt *) 0 ;
    ns_creeps::CAt *arg2 = 0 ; FILE *arg3 = (FILE *) 0 ; CreEPS_BOOL arg4 ; CreEPS_BOOL *argp4 ; CreEPS_BOOL result;
    SWIG_check_num_args("ns_creeps::CAt::inheritAttributes",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CAt::inheritAttributes",1,"ns_creeps::CAt *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CAt::inheritAttributes",2,"ns_creeps::CAt const &");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ns_creeps::CAt::inheritAttributes",3,"FILE *");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CAt::inheritAttributes",4,"CreEPS_BOOL");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("CAt_inheritAttributes",1,SWIGTYPE_p_ns_creeps__CAt); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("CAt_inheritAttributes",2,SWIGTYPE_p_ns_creeps__CAt); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FILE,0))){
      SWIG_fail_ptr("CAt_inheritAttributes",3,SWIGTYPE_p_FILE); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_BOOL,0))){
      SWIG_fail_ptr("CAt_inheritAttributes",4,SWIGTYPE_p_CreEPS_BOOL); }  arg4 = *argp4;
    result = (arg1)->inheritAttributes((ns_creeps::CAt const &)*arg2,arg3,arg4); {
      CreEPS_BOOL * resultptr = new CreEPS_BOOL(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CreEPS_BOOL,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CAt_inheritAttributes__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CAt *arg1 = (ns_creeps::CAt *) 0 ;
    ns_creeps::CAt *arg2 = 0 ; FILE *arg3 = (FILE *) 0 ; CreEPS_BOOL result;
    SWIG_check_num_args("ns_creeps::CAt::inheritAttributes",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CAt::inheritAttributes",1,"ns_creeps::CAt *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CAt::inheritAttributes",2,"ns_creeps::CAt const &");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ns_creeps::CAt::inheritAttributes",3,"FILE *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("CAt_inheritAttributes",1,SWIGTYPE_p_ns_creeps__CAt); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("CAt_inheritAttributes",2,SWIGTYPE_p_ns_creeps__CAt); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FILE,0))){
      SWIG_fail_ptr("CAt_inheritAttributes",3,SWIGTYPE_p_FILE); } 
    result = (arg1)->inheritAttributes((ns_creeps::CAt const &)*arg2,arg3); { CreEPS_BOOL * resultptr = new CreEPS_BOOL(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CreEPS_BOOL,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CAt_inheritAttributes__SWIG_2(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CAt *arg1 = (ns_creeps::CAt *) 0 ;
    ns_creeps::CAt *arg2 = 0 ; CreEPS_BOOL result; SWIG_check_num_args("ns_creeps::CAt::inheritAttributes",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CAt::inheritAttributes",1,"ns_creeps::CAt *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CAt::inheritAttributes",2,"ns_creeps::CAt const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("CAt_inheritAttributes",1,SWIGTYPE_p_ns_creeps__CAt); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("CAt_inheritAttributes",2,SWIGTYPE_p_ns_creeps__CAt); } 
    result = (arg1)->inheritAttributes((ns_creeps::CAt const &)*arg2); { CreEPS_BOOL * resultptr = new CreEPS_BOOL(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CreEPS_BOOL,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CAt_inheritAttributes(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 2) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CAt, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ns_creeps__CAt, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CAt_inheritAttributes__SWIG_2(L);}  }  }  if (argc == 3) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CAt, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ns_creeps__CAt, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FILE, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_CAt_inheritAttributes__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v = 0;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CAt, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ns_creeps__CAt, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FILE, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CreEPS_BOOL, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CAt_inheritAttributes__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CAt_inheritAttributes'\n"
  "  Possible C/C++ prototypes are:\n" "    ns_creeps::CAt::inheritAttributes(ns_creeps::CAt const &,FILE *,CreEPS_BOOL)\n"
  "    ns_creeps::CAt::inheritAttributes(ns_creeps::CAt const &,FILE *)\n"
  "    ns_creeps::CAt::inheritAttributes(ns_creeps::CAt const &)\n"); lua_error(L);return 0; }
static int _wrap_CAt_writeChanges(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CAt *arg1 = (ns_creeps::CAt *) 0 ;
    ns_creeps::CAt *arg2 = 0 ; FILE *arg3 = (FILE *) 0 ; CreEPS_BOOL result;
    SWIG_check_num_args("ns_creeps::CAt::writeChanges",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CAt::writeChanges",1,"ns_creeps::CAt *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CAt::writeChanges",2,"ns_creeps::CAt const &");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ns_creeps::CAt::writeChanges",3,"FILE *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("CAt_writeChanges",1,SWIGTYPE_p_ns_creeps__CAt); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("CAt_writeChanges",2,SWIGTYPE_p_ns_creeps__CAt); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FILE,0))){ SWIG_fail_ptr("CAt_writeChanges",3,SWIGTYPE_p_FILE); }
     result = (arg1)->writeChanges((ns_creeps::CAt const &)*arg2,arg3); { CreEPS_BOOL * resultptr = new CreEPS_BOOL(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CreEPS_BOOL,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CAt_setAttributes(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CAt *arg1 = (ns_creeps::CAt *) 0 ;
    ns_creeps::CAt *arg2 = 0 ; FILE *arg3 = (FILE *) 0 ; CreEPS_BOOL result;
    SWIG_check_num_args("ns_creeps::CAt::setAttributes",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CAt::setAttributes",1,"ns_creeps::CAt *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CAt::setAttributes",2,"ns_creeps::CAt const &");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ns_creeps::CAt::setAttributes",3,"FILE *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("CAt_setAttributes",1,SWIGTYPE_p_ns_creeps__CAt); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("CAt_setAttributes",2,SWIGTYPE_p_ns_creeps__CAt); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FILE,0))){
      SWIG_fail_ptr("CAt_setAttributes",3,SWIGTYPE_p_FILE); } 
    result = (arg1)->setAttributes((ns_creeps::CAt const &)*arg2,arg3); { CreEPS_BOOL * resultptr = new CreEPS_BOOL(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CreEPS_BOOL,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static void swig_delete_CAt(void *obj) {
ns_creeps::CAt *arg1 = (ns_creeps::CAt *) obj;
delete arg1;
}
static int _proxy__wrap_new_CAt(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CAt);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CAt_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CAt_methods[]= {
    { "getLineJoin", _wrap_CAt_getLineJoin},
    { "getLineCap", _wrap_CAt_getLineCap},
    { "getLineDashType", _wrap_CAt_getLineDashType},
    { "getTextAlignment", _wrap_CAt_getTextAlignment},
    { "getFillingPattern", _wrap_CAt_getFillingPattern},
    { "getLineThickness", _wrap_CAt_getLineThickness},
    { "getLineDashOffset", _wrap_CAt_getLineDashOffset},
    { "getLineDashFactor", _wrap_CAt_getLineDashFactor},
    { "getRed", _wrap_CAt_getRed},
    { "getGreen", _wrap_CAt_getGreen},
    { "getBlue", _wrap_CAt_getBlue},
    { "getBackgroundRed", _wrap_CAt_getBackgroundRed},
    { "getBackgroundGreen", _wrap_CAt_getBackgroundGreen},
    { "getBackgroundBlue", _wrap_CAt_getBackgroundBlue},
    { "getFontScale", _wrap_CAt_getFontScale},
    { "getLineDashString", _wrap_CAt_getLineDashString},
    { "getFontString", _wrap_CAt_getFontString},
    { "inheritAttributes", _wrap_CAt_inheritAttributes},
    { "writeChanges", _wrap_CAt_writeChanges},
    { "setAttributes", _wrap_CAt_setAttributes},
    {0,0}
};
static swig_lua_method swig_CAt_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CAt_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CAt_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("LJ_KEEP", (ns_creeps::CAt::LJ_KEEP))},
    {SWIG_LUA_CONSTTAB_INT("MITER", (ns_creeps::CAt::MITER))},
    {SWIG_LUA_CONSTTAB_INT("LJ_ROUND", (ns_creeps::CAt::LJ_ROUND))},
    {SWIG_LUA_CONSTTAB_INT("BEVEL", (ns_creeps::CAt::BEVEL))},
    {SWIG_LUA_CONSTTAB_INT("LC_KEEP", (ns_creeps::CAt::LC_KEEP))},
    {SWIG_LUA_CONSTTAB_INT("BUTT", (ns_creeps::CAt::BUTT))},
    {SWIG_LUA_CONSTTAB_INT("LC_ROUND", (ns_creeps::CAt::LC_ROUND))},
    {SWIG_LUA_CONSTTAB_INT("SQUARE", (ns_creeps::CAt::SQUARE))},
    {SWIG_LUA_CONSTTAB_INT("TA_KEEP", (ns_creeps::CAt::TA_KEEP))},
    {SWIG_LUA_CONSTTAB_INT("LEFT", (ns_creeps::CAt::LEFT))},
    {SWIG_LUA_CONSTTAB_INT("HCENTER", (ns_creeps::CAt::HCENTER))},
    {SWIG_LUA_CONSTTAB_INT("RIGHT", (ns_creeps::CAt::RIGHT))},
    {SWIG_LUA_CONSTTAB_INT("BOTTOM", (ns_creeps::CAt::BOTTOM))},
    {SWIG_LUA_CONSTTAB_INT("BASELINE", (ns_creeps::CAt::BASELINE))},
    {SWIG_LUA_CONSTTAB_INT("VCENTER", (ns_creeps::CAt::VCENTER))},
    {SWIG_LUA_CONSTTAB_INT("TOP", (ns_creeps::CAt::TOP))},
    {SWIG_LUA_CONSTTAB_INT("CENTER", (ns_creeps::CAt::CENTER))},
    {SWIG_LUA_CONSTTAB_INT("DEFAULT", (ns_creeps::CAt::DEFAULT))},
    {SWIG_LUA_CONSTTAB_INT("LD_KEEP", (ns_creeps::CAt::LD_KEEP))},
    {SWIG_LUA_CONSTTAB_INT("SOLID", (ns_creeps::CAt::SOLID))},
    {SWIG_LUA_CONSTTAB_INT("DOT", (ns_creeps::CAt::DOT))},
    {SWIG_LUA_CONSTTAB_INT("DASH", (ns_creeps::CAt::DASH))},
    {SWIG_LUA_CONSTTAB_INT("DOTDASH", (ns_creeps::CAt::DOTDASH))},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CAt_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CAt_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CAt_Sf_SwigStatic = {
    "CAt",
    swig_CAt_Sf_SwigStatic_methods,
    swig_CAt_Sf_SwigStatic_attributes,
    swig_CAt_Sf_SwigStatic_constants,
    swig_CAt_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CAt_bases[] = {0};
static const char *swig_CAt_base_names[] = {0};
static swig_lua_class _wrap_class_CAt = { "CAt", "CAt", &SWIGTYPE_p_ns_creeps__CAt,_proxy__wrap_new_CAt, swig_delete_CAt, swig_CAt_methods, swig_CAt_attributes, &swig_CAt_Sf_SwigStatic, swig_CAt_meta, swig_CAt_bases, swig_CAt_base_names };

static int _wrap_new_CAtLineThickness__SWIG_0(lua_State* L) { { int SWIG_arg = 0; CreEPS_FLOAT arg1 ; ns_creeps::CAt *arg2 = 0 ;
    CreEPS_FLOAT *argp1 ; ns_creeps::CAtLineThickness *result = 0 ;
    SWIG_check_num_args("ns_creeps::CAtLineThickness::CAtLineThickness",2,2)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("ns_creeps::CAtLineThickness::CAtLineThickness",1,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CAtLineThickness::CAtLineThickness",2,"ns_creeps::CAt const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CAtLineThickness",1,SWIGTYPE_p_CreEPS_FLOAT); }  arg1 = *argp1;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("new_CAtLineThickness",2,SWIGTYPE_p_ns_creeps__CAt); } 
    result = (ns_creeps::CAtLineThickness *)new ns_creeps::CAtLineThickness(arg1,(ns_creeps::CAt const &)*arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ns_creeps__CAtLineThickness,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_new_CAtLineThickness__SWIG_1(lua_State* L) { { int SWIG_arg = 0; CreEPS_FLOAT arg1 ; CreEPS_FLOAT *argp1 ;
    ns_creeps::CAtLineThickness *result = 0 ; SWIG_check_num_args("ns_creeps::CAtLineThickness::CAtLineThickness",1,1)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("ns_creeps::CAtLineThickness::CAtLineThickness",1,"CreEPS_FLOAT const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CAtLineThickness",1,SWIGTYPE_p_CreEPS_FLOAT); }  arg1 = *argp1;
    result = (ns_creeps::CAtLineThickness *)new ns_creeps::CAtLineThickness(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ns_creeps__CAtLineThickness,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_new_CAtLineThickness(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v = 0; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_CAtLineThickness__SWIG_1(L);}  }  if (argc == 2) {
    int _v = 0; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ns_creeps__CAt, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_CAtLineThickness__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CAtLineThickness'\n"
  "  Possible C/C++ prototypes are:\n"
  "    ns_creeps::CAtLineThickness::CAtLineThickness(CreEPS_FLOAT const,ns_creeps::CAt const &)\n"
  "    ns_creeps::CAtLineThickness::CAtLineThickness(CreEPS_FLOAT const)\n"); lua_error(L);return 0; }
static void swig_delete_CAtLineThickness(void *obj) {
ns_creeps::CAtLineThickness *arg1 = (ns_creeps::CAtLineThickness *) obj;
delete arg1;
}
static int _proxy__wrap_new_CAtLineThickness(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CAtLineThickness);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CAtLineThickness_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CAtLineThickness_methods[]= {
    {0,0}
};
static swig_lua_method swig_CAtLineThickness_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CAtLineThickness_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CAtLineThickness_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CAtLineThickness_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CAtLineThickness_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CAtLineThickness_Sf_SwigStatic = {
    "CAtLineThickness",
    swig_CAtLineThickness_Sf_SwigStatic_methods,
    swig_CAtLineThickness_Sf_SwigStatic_attributes,
    swig_CAtLineThickness_Sf_SwigStatic_constants,
    swig_CAtLineThickness_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CAtLineThickness_bases[] = {0,0};
static const char *swig_CAtLineThickness_base_names[] = {"ns_creeps::CAt *",0};
static swig_lua_class _wrap_class_CAtLineThickness = { "CAtLineThickness", "CAtLineThickness", &SWIGTYPE_p_ns_creeps__CAtLineThickness,_proxy__wrap_new_CAtLineThickness, swig_delete_CAtLineThickness, swig_CAtLineThickness_methods, swig_CAtLineThickness_attributes, &swig_CAtLineThickness_Sf_SwigStatic, swig_CAtLineThickness_meta, swig_CAtLineThickness_bases, swig_CAtLineThickness_base_names };

static int _wrap_new_CAtLineJoin__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CAt::LINEJOIN arg1 ;
    ns_creeps::CAt *arg2 = 0 ; ns_creeps::CAtLineJoin *result = 0 ;
    SWIG_check_num_args("ns_creeps::CAtLineJoin::CAtLineJoin",2,2)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ns_creeps::CAtLineJoin::CAtLineJoin",1,"ns_creeps::CAt::LINEJOIN const");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CAtLineJoin::CAtLineJoin",2,"ns_creeps::CAt const &");
    arg1 = (ns_creeps::CAt::LINEJOIN const)(int)lua_tonumber(L, 1);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("new_CAtLineJoin",2,SWIGTYPE_p_ns_creeps__CAt); } 
    result = (ns_creeps::CAtLineJoin *)new ns_creeps::CAtLineJoin(arg1,(ns_creeps::CAt const &)*arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ns_creeps__CAtLineJoin,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_new_CAtLineJoin__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CAt::LINEJOIN arg1 ;
    ns_creeps::CAtLineJoin *result = 0 ; SWIG_check_num_args("ns_creeps::CAtLineJoin::CAtLineJoin",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ns_creeps::CAtLineJoin::CAtLineJoin",1,"ns_creeps::CAt::LINEJOIN const");
    arg1 = (ns_creeps::CAt::LINEJOIN const)(int)lua_tonumber(L, 1);
    result = (ns_creeps::CAtLineJoin *)new ns_creeps::CAtLineJoin(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ns_creeps__CAtLineJoin,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_new_CAtLineJoin(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v = 0; { _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_new_CAtLineJoin__SWIG_1(L);}  }  if (argc == 2) {
    int _v = 0; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ns_creeps__CAt, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_CAtLineJoin__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CAtLineJoin'\n" "  Possible C/C++ prototypes are:\n"
  "    ns_creeps::CAtLineJoin::CAtLineJoin(ns_creeps::CAt::LINEJOIN const,ns_creeps::CAt const &)\n"
  "    ns_creeps::CAtLineJoin::CAtLineJoin(ns_creeps::CAt::LINEJOIN const)\n"); lua_error(L);return 0; }
static void swig_delete_CAtLineJoin(void *obj) {
ns_creeps::CAtLineJoin *arg1 = (ns_creeps::CAtLineJoin *) obj;
delete arg1;
}
static int _proxy__wrap_new_CAtLineJoin(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CAtLineJoin);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CAtLineJoin_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CAtLineJoin_methods[]= {
    {0,0}
};
static swig_lua_method swig_CAtLineJoin_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CAtLineJoin_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CAtLineJoin_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CAtLineJoin_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CAtLineJoin_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CAtLineJoin_Sf_SwigStatic = {
    "CAtLineJoin",
    swig_CAtLineJoin_Sf_SwigStatic_methods,
    swig_CAtLineJoin_Sf_SwigStatic_attributes,
    swig_CAtLineJoin_Sf_SwigStatic_constants,
    swig_CAtLineJoin_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CAtLineJoin_bases[] = {0,0};
static const char *swig_CAtLineJoin_base_names[] = {"ns_creeps::CAt *",0};
static swig_lua_class _wrap_class_CAtLineJoin = { "CAtLineJoin", "CAtLineJoin", &SWIGTYPE_p_ns_creeps__CAtLineJoin,_proxy__wrap_new_CAtLineJoin, swig_delete_CAtLineJoin, swig_CAtLineJoin_methods, swig_CAtLineJoin_attributes, &swig_CAtLineJoin_Sf_SwigStatic, swig_CAtLineJoin_meta, swig_CAtLineJoin_bases, swig_CAtLineJoin_base_names };

static int _wrap_new_CAtLineCap__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CAt::LINECAP arg1 ;
    ns_creeps::CAt *arg2 = 0 ; ns_creeps::CAtLineCap *result = 0 ; SWIG_check_num_args("ns_creeps::CAtLineCap::CAtLineCap",2,2)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ns_creeps::CAtLineCap::CAtLineCap",1,"ns_creeps::CAt::LINECAP const");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CAtLineCap::CAtLineCap",2,"ns_creeps::CAt const &");
    arg1 = (ns_creeps::CAt::LINECAP const)(int)lua_tonumber(L, 1);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("new_CAtLineCap",2,SWIGTYPE_p_ns_creeps__CAt); } 
    result = (ns_creeps::CAtLineCap *)new ns_creeps::CAtLineCap(arg1,(ns_creeps::CAt const &)*arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ns_creeps__CAtLineCap,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_new_CAtLineCap__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CAt::LINECAP arg1 ;
    ns_creeps::CAtLineCap *result = 0 ; SWIG_check_num_args("ns_creeps::CAtLineCap::CAtLineCap",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ns_creeps::CAtLineCap::CAtLineCap",1,"ns_creeps::CAt::LINECAP const");
    arg1 = (ns_creeps::CAt::LINECAP const)(int)lua_tonumber(L, 1);
    result = (ns_creeps::CAtLineCap *)new ns_creeps::CAtLineCap(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ns_creeps__CAtLineCap,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_new_CAtLineCap(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v = 0; { _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_new_CAtLineCap__SWIG_1(L);}  }  if (argc == 2) {
    int _v = 0; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ns_creeps__CAt, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_CAtLineCap__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CAtLineCap'\n" "  Possible C/C++ prototypes are:\n"
  "    ns_creeps::CAtLineCap::CAtLineCap(ns_creeps::CAt::LINECAP const,ns_creeps::CAt const &)\n"
  "    ns_creeps::CAtLineCap::CAtLineCap(ns_creeps::CAt::LINECAP const)\n"); lua_error(L);return 0; }
static void swig_delete_CAtLineCap(void *obj) {
ns_creeps::CAtLineCap *arg1 = (ns_creeps::CAtLineCap *) obj;
delete arg1;
}
static int _proxy__wrap_new_CAtLineCap(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CAtLineCap);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CAtLineCap_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CAtLineCap_methods[]= {
    {0,0}
};
static swig_lua_method swig_CAtLineCap_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CAtLineCap_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CAtLineCap_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CAtLineCap_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CAtLineCap_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CAtLineCap_SwigStatic = {
    "CAtLineCap",
    swig_CAtLineCap_SwigStatic_methods,
    swig_CAtLineCap_SwigStatic_attributes,
    swig_CAtLineCap_SwigStatic_constants,
    swig_CAtLineCap_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CAtLineCap_bases[] = {0,0};
static const char *swig_CAtLineCap_base_names[] = {"ns_creeps::CAt *",0};
static swig_lua_class _wrap_class_CAtLineCap = { "CAtLineCap", "CAtLineCap", &SWIGTYPE_p_ns_creeps__CAtLineCap,_proxy__wrap_new_CAtLineCap, swig_delete_CAtLineCap, swig_CAtLineCap_methods, swig_CAtLineCap_attributes, &swig_CAtLineCap_SwigStatic, swig_CAtLineCap_meta, swig_CAtLineCap_bases, swig_CAtLineCap_base_names };

static int _wrap_new_CAtLineDash__SWIG_0(lua_State* L) { { int SWIG_arg = 0;
    CreEPS_CHAR *arg1 = (CreEPS_CHAR *) (CreEPS_CHAR *)0 ; CreEPS_FLOAT arg2 ; ns_creeps::CAt *arg3 = 0 ; CreEPS_FLOAT *argp2 ;
    ns_creeps::CAtLineDash *result = 0 ; SWIG_check_num_args("ns_creeps::CAtLineDash::CAtLineDash",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CAtLineDash::CAtLineDash",1,"CreEPS_CHAR const *const");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CAtLineDash::CAtLineDash",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CAtLineDash::CAtLineDash",3,"ns_creeps::CAt const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CreEPS_CHAR,0))){
      SWIG_fail_ptr("new_CAtLineDash",1,SWIGTYPE_p_CreEPS_CHAR); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CAtLineDash",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("new_CAtLineDash",3,SWIGTYPE_p_ns_creeps__CAt); } 
    result = (ns_creeps::CAtLineDash *)new ns_creeps::CAtLineDash((CreEPS_CHAR const *)arg1,arg2,(ns_creeps::CAt const &)*arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ns_creeps__CAtLineDash,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_new_CAtLineDash__SWIG_1(lua_State* L) { { int SWIG_arg = 0;
    CreEPS_CHAR *arg1 = (CreEPS_CHAR *) (CreEPS_CHAR *)0 ; CreEPS_FLOAT arg2 ; CreEPS_FLOAT *argp2 ;
    ns_creeps::CAtLineDash *result = 0 ; SWIG_check_num_args("ns_creeps::CAtLineDash::CAtLineDash",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CAtLineDash::CAtLineDash",1,"CreEPS_CHAR const *const");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CAtLineDash::CAtLineDash",2,"CreEPS_FLOAT const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CreEPS_CHAR,0))){
      SWIG_fail_ptr("new_CAtLineDash",1,SWIGTYPE_p_CreEPS_CHAR); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CAtLineDash",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    result = (ns_creeps::CAtLineDash *)new ns_creeps::CAtLineDash((CreEPS_CHAR const *)arg1,arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ns_creeps__CAtLineDash,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_new_CAtLineDash__SWIG_2(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CAt::LINEDASH arg1 ; CreEPS_FLOAT arg2 ;
    ns_creeps::CAt *arg3 = 0 ; CreEPS_FLOAT *argp2 ; ns_creeps::CAtLineDash *result = 0 ;
    SWIG_check_num_args("ns_creeps::CAtLineDash::CAtLineDash",3,3)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ns_creeps::CAtLineDash::CAtLineDash",1,"ns_creeps::CAt::LINEDASH const");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CAtLineDash::CAtLineDash",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CAtLineDash::CAtLineDash",3,"ns_creeps::CAt const &");
    arg1 = (ns_creeps::CAt::LINEDASH const)(int)lua_tonumber(L, 1);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CAtLineDash",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("new_CAtLineDash",3,SWIGTYPE_p_ns_creeps__CAt); } 
    result = (ns_creeps::CAtLineDash *)new ns_creeps::CAtLineDash(arg1,arg2,(ns_creeps::CAt const &)*arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ns_creeps__CAtLineDash,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_new_CAtLineDash__SWIG_3(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CAt::LINEDASH arg1 ; CreEPS_FLOAT arg2 ;
    CreEPS_FLOAT *argp2 ; ns_creeps::CAtLineDash *result = 0 ; SWIG_check_num_args("ns_creeps::CAtLineDash::CAtLineDash",2,2)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ns_creeps::CAtLineDash::CAtLineDash",1,"ns_creeps::CAt::LINEDASH const");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CAtLineDash::CAtLineDash",2,"CreEPS_FLOAT const");
    arg1 = (ns_creeps::CAt::LINEDASH const)(int)lua_tonumber(L, 1);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CAtLineDash",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    result = (ns_creeps::CAtLineDash *)new ns_creeps::CAtLineDash(arg1,arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ns_creeps__CAtLineDash,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_new_CAtLineDash(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CreEPS_CHAR, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_CAtLineDash__SWIG_1(L);}  }  }  if (argc == 2) {
    int _v = 0; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_CAtLineDash__SWIG_3(L);}  }  }  if (argc == 3) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CreEPS_CHAR, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ns_creeps__CAt, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_CAtLineDash__SWIG_0(L);}  }  }  }  if (argc == 3) {
    int _v = 0; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ns_creeps__CAt, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_CAtLineDash__SWIG_2(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CAtLineDash'\n" "  Possible C/C++ prototypes are:\n"
  "    ns_creeps::CAtLineDash::CAtLineDash(CreEPS_CHAR const *const,CreEPS_FLOAT const,ns_creeps::CAt const &)\n"
  "    ns_creeps::CAtLineDash::CAtLineDash(CreEPS_CHAR const *const,CreEPS_FLOAT const)\n"
  "    ns_creeps::CAtLineDash::CAtLineDash(ns_creeps::CAt::LINEDASH const,CreEPS_FLOAT const,ns_creeps::CAt const &)\n"
  "    ns_creeps::CAtLineDash::CAtLineDash(ns_creeps::CAt::LINEDASH const,CreEPS_FLOAT const)\n"); lua_error(L);return 0; }
static void swig_delete_CAtLineDash(void *obj) {
ns_creeps::CAtLineDash *arg1 = (ns_creeps::CAtLineDash *) obj;
delete arg1;
}
static int _proxy__wrap_new_CAtLineDash(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CAtLineDash);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CAtLineDash_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CAtLineDash_methods[]= {
    {0,0}
};
static swig_lua_method swig_CAtLineDash_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CAtLineDash_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CAtLineDash_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CAtLineDash_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CAtLineDash_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CAtLineDash_Sf_SwigStatic = {
    "CAtLineDash",
    swig_CAtLineDash_Sf_SwigStatic_methods,
    swig_CAtLineDash_Sf_SwigStatic_attributes,
    swig_CAtLineDash_Sf_SwigStatic_constants,
    swig_CAtLineDash_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CAtLineDash_bases[] = {0,0};
static const char *swig_CAtLineDash_base_names[] = {"ns_creeps::CAt *",0};
static swig_lua_class _wrap_class_CAtLineDash = { "CAtLineDash", "CAtLineDash", &SWIGTYPE_p_ns_creeps__CAtLineDash,_proxy__wrap_new_CAtLineDash, swig_delete_CAtLineDash, swig_CAtLineDash_methods, swig_CAtLineDash_attributes, &swig_CAtLineDash_Sf_SwigStatic, swig_CAtLineDash_meta, swig_CAtLineDash_bases, swig_CAtLineDash_base_names };

static int _wrap_new_CAtColor__SWIG_0(lua_State* L) { { int SWIG_arg = 0; CreEPS_FLOAT arg1 ; CreEPS_FLOAT arg2 ;
    CreEPS_FLOAT arg3 ; ns_creeps::CAt *arg4 = 0 ; CreEPS_FLOAT *argp1 ; CreEPS_FLOAT *argp2 ; CreEPS_FLOAT *argp3 ;
    ns_creeps::CAtColor *result = 0 ; SWIG_check_num_args("ns_creeps::CAtColor::CAtColor",4,4)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("ns_creeps::CAtColor::CAtColor",1,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CAtColor::CAtColor",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CAtColor::CAtColor",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CAtColor::CAtColor",4,"ns_creeps::CAt const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CAtColor",1,SWIGTYPE_p_CreEPS_FLOAT); }  arg1 = *argp1;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CAtColor",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CAtColor",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("new_CAtColor",4,SWIGTYPE_p_ns_creeps__CAt); } 
    result = (ns_creeps::CAtColor *)new ns_creeps::CAtColor(arg1,arg2,arg3,(ns_creeps::CAt const &)*arg4);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ns_creeps__CAtColor,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_new_CAtColor__SWIG_1(lua_State* L) { { int SWIG_arg = 0; CreEPS_FLOAT arg1 ; CreEPS_FLOAT arg2 ;
    CreEPS_FLOAT arg3 ; CreEPS_FLOAT *argp1 ; CreEPS_FLOAT *argp2 ; CreEPS_FLOAT *argp3 ; ns_creeps::CAtColor *result = 0 ;
    SWIG_check_num_args("ns_creeps::CAtColor::CAtColor",3,3)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("ns_creeps::CAtColor::CAtColor",1,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CAtColor::CAtColor",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CAtColor::CAtColor",3,"CreEPS_FLOAT const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CAtColor",1,SWIGTYPE_p_CreEPS_FLOAT); }  arg1 = *argp1;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CAtColor",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CAtColor",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    result = (ns_creeps::CAtColor *)new ns_creeps::CAtColor(arg1,arg2,arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ns_creeps__CAtColor,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_new_CAtColor(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 3) {
    int _v = 0; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_CAtColor__SWIG_1(L);}  }  }  }  if (argc == 4) {
    int _v = 0; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ns_creeps__CAt, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_CAtColor__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CAtColor'\n" "  Possible C/C++ prototypes are:\n"
  "    ns_creeps::CAtColor::CAtColor(CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,ns_creeps::CAt const &)\n"
  "    ns_creeps::CAtColor::CAtColor(CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const)\n"); lua_error(L);return 0; }
static void swig_delete_CAtColor(void *obj) {
ns_creeps::CAtColor *arg1 = (ns_creeps::CAtColor *) obj;
delete arg1;
}
static int _proxy__wrap_new_CAtColor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CAtColor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CAtColor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CAtColor_methods[]= {
    {0,0}
};
static swig_lua_method swig_CAtColor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CAtColor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CAtColor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CAtColor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CAtColor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CAtColor_Sf_SwigStatic = {
    "CAtColor",
    swig_CAtColor_Sf_SwigStatic_methods,
    swig_CAtColor_Sf_SwigStatic_attributes,
    swig_CAtColor_Sf_SwigStatic_constants,
    swig_CAtColor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CAtColor_bases[] = {0,0};
static const char *swig_CAtColor_base_names[] = {"ns_creeps::CAt *",0};
static swig_lua_class _wrap_class_CAtColor = { "CAtColor", "CAtColor", &SWIGTYPE_p_ns_creeps__CAtColor,_proxy__wrap_new_CAtColor, swig_delete_CAtColor, swig_CAtColor_methods, swig_CAtColor_attributes, &swig_CAtColor_Sf_SwigStatic, swig_CAtColor_meta, swig_CAtColor_bases, swig_CAtColor_base_names };

static int _wrap_new_CAtBackgroundColor__SWIG_0(lua_State* L) { { int SWIG_arg = 0; CreEPS_FLOAT arg1 ; CreEPS_FLOAT arg2 ;
    CreEPS_FLOAT arg3 ; ns_creeps::CAt *arg4 = 0 ; CreEPS_FLOAT *argp1 ; CreEPS_FLOAT *argp2 ; CreEPS_FLOAT *argp3 ;
    ns_creeps::CAtBackgroundColor *result = 0 ; SWIG_check_num_args("ns_creeps::CAtBackgroundColor::CAtBackgroundColor",4,4)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("ns_creeps::CAtBackgroundColor::CAtBackgroundColor",1,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CAtBackgroundColor::CAtBackgroundColor",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CAtBackgroundColor::CAtBackgroundColor",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CAtBackgroundColor::CAtBackgroundColor",4,"ns_creeps::CAt const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CAtBackgroundColor",1,SWIGTYPE_p_CreEPS_FLOAT); }  arg1 = *argp1;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CAtBackgroundColor",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CAtBackgroundColor",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("new_CAtBackgroundColor",4,SWIGTYPE_p_ns_creeps__CAt); } 
    result = (ns_creeps::CAtBackgroundColor *)new ns_creeps::CAtBackgroundColor(arg1,arg2,arg3,(ns_creeps::CAt const &)*arg4);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ns_creeps__CAtBackgroundColor,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_new_CAtBackgroundColor__SWIG_1(lua_State* L) { { int SWIG_arg = 0; CreEPS_FLOAT arg1 ; CreEPS_FLOAT arg2 ;
    CreEPS_FLOAT arg3 ; CreEPS_FLOAT *argp1 ; CreEPS_FLOAT *argp2 ; CreEPS_FLOAT *argp3 ;
    ns_creeps::CAtBackgroundColor *result = 0 ; SWIG_check_num_args("ns_creeps::CAtBackgroundColor::CAtBackgroundColor",3,3)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("ns_creeps::CAtBackgroundColor::CAtBackgroundColor",1,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CAtBackgroundColor::CAtBackgroundColor",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CAtBackgroundColor::CAtBackgroundColor",3,"CreEPS_FLOAT const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CAtBackgroundColor",1,SWIGTYPE_p_CreEPS_FLOAT); }  arg1 = *argp1;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CAtBackgroundColor",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CAtBackgroundColor",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    result = (ns_creeps::CAtBackgroundColor *)new ns_creeps::CAtBackgroundColor(arg1,arg2,arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ns_creeps__CAtBackgroundColor,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_new_CAtBackgroundColor(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 3) { int _v = 0; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_CAtBackgroundColor__SWIG_1(L);}  }  }  } 
  if (argc == 4) { int _v = 0; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ns_creeps__CAt, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_CAtBackgroundColor__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CAtBackgroundColor'\n"
  "  Possible C/C++ prototypes are:\n"
  "    ns_creeps::CAtBackgroundColor::CAtBackgroundColor(CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,ns_creeps::CAt const &)\n"
  "    ns_creeps::CAtBackgroundColor::CAtBackgroundColor(CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const)\n");
  lua_error(L);return 0; }
static void swig_delete_CAtBackgroundColor(void *obj) {
ns_creeps::CAtBackgroundColor *arg1 = (ns_creeps::CAtBackgroundColor *) obj;
delete arg1;
}
static int _proxy__wrap_new_CAtBackgroundColor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CAtBackgroundColor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CAtBackgroundColor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CAtBackgroundColor_methods[]= {
    {0,0}
};
static swig_lua_method swig_CAtBackgroundColor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CAtBackgroundColor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CAtBackgroundColor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CAtBackgroundColor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CAtBackgroundColor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CAtBackgroundColor_Sf_SwigStatic = {
    "CAtBackgroundColor",
    swig_CAtBackgroundColor_Sf_SwigStatic_methods,
    swig_CAtBackgroundColor_Sf_SwigStatic_attributes,
    swig_CAtBackgroundColor_Sf_SwigStatic_constants,
    swig_CAtBackgroundColor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CAtBackgroundColor_bases[] = {0,0};
static const char *swig_CAtBackgroundColor_base_names[] = {"ns_creeps::CAt *",0};
static swig_lua_class _wrap_class_CAtBackgroundColor = { "CAtBackgroundColor", "CAtBackgroundColor", &SWIGTYPE_p_ns_creeps__CAtBackgroundColor,_proxy__wrap_new_CAtBackgroundColor, swig_delete_CAtBackgroundColor, swig_CAtBackgroundColor_methods, swig_CAtBackgroundColor_attributes, &swig_CAtBackgroundColor_Sf_SwigStatic, swig_CAtBackgroundColor_meta, swig_CAtBackgroundColor_bases, swig_CAtBackgroundColor_base_names };

static int _wrap_new_CAtTransparentBackground__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CAt *arg1 = 0 ;
    ns_creeps::CAtTransparentBackground *result = 0 ;
    SWIG_check_num_args("ns_creeps::CAtTransparentBackground::CAtTransparentBackground",1,1)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("ns_creeps::CAtTransparentBackground::CAtTransparentBackground",1,"ns_creeps::CAt const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("new_CAtTransparentBackground",1,SWIGTYPE_p_ns_creeps__CAt); } 
    result = (ns_creeps::CAtTransparentBackground *)new ns_creeps::CAtTransparentBackground((ns_creeps::CAt const &)*arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ns_creeps__CAtTransparentBackground,1); SWIG_arg++;  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_CAtTransparentBackground__SWIG_1(lua_State* L) { { int SWIG_arg = 0;
    ns_creeps::CAtTransparentBackground *result = 0 ;
    SWIG_check_num_args("ns_creeps::CAtTransparentBackground::CAtTransparentBackground",0,0)
    result = (ns_creeps::CAtTransparentBackground *)new ns_creeps::CAtTransparentBackground();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ns_creeps__CAtTransparentBackground,1); SWIG_arg++;  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_CAtTransparentBackground(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L);
  if (argc == 0) { return _wrap_new_CAtTransparentBackground__SWIG_1(L);}  if (argc == 1) { int _v = 0; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CAt, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_CAtTransparentBackground__SWIG_0(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CAtTransparentBackground'\n"
  "  Possible C/C++ prototypes are:\n"
  "    ns_creeps::CAtTransparentBackground::CAtTransparentBackground(ns_creeps::CAt const &)\n"
  "    ns_creeps::CAtTransparentBackground::CAtTransparentBackground()\n"); lua_error(L);return 0; }
static void swig_delete_CAtTransparentBackground(void *obj) {
ns_creeps::CAtTransparentBackground *arg1 = (ns_creeps::CAtTransparentBackground *) obj;
delete arg1;
}
static int _proxy__wrap_new_CAtTransparentBackground(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CAtTransparentBackground);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CAtTransparentBackground_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CAtTransparentBackground_methods[]= {
    {0,0}
};
static swig_lua_method swig_CAtTransparentBackground_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CAtTransparentBackground_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CAtTransparentBackground_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CAtTransparentBackground_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CAtTransparentBackground_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CAtTransparentBackground_Sf_SwigStatic = {
    "CAtTransparentBackground",
    swig_CAtTransparentBackground_Sf_SwigStatic_methods,
    swig_CAtTransparentBackground_Sf_SwigStatic_attributes,
    swig_CAtTransparentBackground_Sf_SwigStatic_constants,
    swig_CAtTransparentBackground_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CAtTransparentBackground_bases[] = {0,0};
static const char *swig_CAtTransparentBackground_base_names[] = {"ns_creeps::CAt *",0};
static swig_lua_class _wrap_class_CAtTransparentBackground = { "CAtTransparentBackground", "CAtTransparentBackground", &SWIGTYPE_p_ns_creeps__CAtTransparentBackground,_proxy__wrap_new_CAtTransparentBackground, swig_delete_CAtTransparentBackground, swig_CAtTransparentBackground_methods, swig_CAtTransparentBackground_attributes, &swig_CAtTransparentBackground_Sf_SwigStatic, swig_CAtTransparentBackground_meta, swig_CAtTransparentBackground_bases, swig_CAtTransparentBackground_base_names };

static int _wrap_new_CAtFont__SWIG_0(lua_State* L) { { int SWIG_arg = 0; CreEPS_CHAR *arg1 = (CreEPS_CHAR *) 0 ;
    CreEPS_FLOAT arg2 ; ns_creeps::CAt *arg3 = 0 ; CreEPS_FLOAT *argp2 ; ns_creeps::CAtFont *result = 0 ;
    SWIG_check_num_args("ns_creeps::CAtFont::CAtFont",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CAtFont::CAtFont",1,"CreEPS_CHAR const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CAtFont::CAtFont",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CAtFont::CAtFont",3,"ns_creeps::CAt const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CreEPS_CHAR,0))){
      SWIG_fail_ptr("new_CAtFont",1,SWIGTYPE_p_CreEPS_CHAR); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CAtFont",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("new_CAtFont",3,SWIGTYPE_p_ns_creeps__CAt); } 
    result = (ns_creeps::CAtFont *)new ns_creeps::CAtFont((CreEPS_CHAR const *)arg1,arg2,(ns_creeps::CAt const &)*arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ns_creeps__CAtFont,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_new_CAtFont__SWIG_1(lua_State* L) { { int SWIG_arg = 0; CreEPS_CHAR *arg1 = (CreEPS_CHAR *) 0 ;
    CreEPS_FLOAT arg2 ; CreEPS_FLOAT *argp2 ; ns_creeps::CAtFont *result = 0 ;
    SWIG_check_num_args("ns_creeps::CAtFont::CAtFont",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CAtFont::CAtFont",1,"CreEPS_CHAR const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CAtFont::CAtFont",2,"CreEPS_FLOAT const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CreEPS_CHAR,0))){
      SWIG_fail_ptr("new_CAtFont",1,SWIGTYPE_p_CreEPS_CHAR); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CAtFont",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    result = (ns_creeps::CAtFont *)new ns_creeps::CAtFont((CreEPS_CHAR const *)arg1,arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ns_creeps__CAtFont,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_new_CAtFont__SWIG_2(lua_State* L) { { int SWIG_arg = 0; CreEPS_CHAR *arg1 = (CreEPS_CHAR *) 0 ;
    ns_creeps::CAt *arg2 = 0 ; ns_creeps::CAtFont *result = 0 ; SWIG_check_num_args("ns_creeps::CAtFont::CAtFont",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CAtFont::CAtFont",1,"CreEPS_CHAR const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CAtFont::CAtFont",2,"ns_creeps::CAt const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CreEPS_CHAR,0))){
      SWIG_fail_ptr("new_CAtFont",1,SWIGTYPE_p_CreEPS_CHAR); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("new_CAtFont",2,SWIGTYPE_p_ns_creeps__CAt); } 
    result = (ns_creeps::CAtFont *)new ns_creeps::CAtFont((CreEPS_CHAR const *)arg1,(ns_creeps::CAt const &)*arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ns_creeps__CAtFont,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_new_CAtFont__SWIG_3(lua_State* L) { { int SWIG_arg = 0; CreEPS_CHAR *arg1 = (CreEPS_CHAR *) 0 ;
    ns_creeps::CAtFont *result = 0 ; SWIG_check_num_args("ns_creeps::CAtFont::CAtFont",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CAtFont::CAtFont",1,"CreEPS_CHAR const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CreEPS_CHAR,0))){
      SWIG_fail_ptr("new_CAtFont",1,SWIGTYPE_p_CreEPS_CHAR); } 
    result = (ns_creeps::CAtFont *)new ns_creeps::CAtFont((CreEPS_CHAR const *)arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ns_creeps__CAtFont,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_new_CAtFont__SWIG_4(lua_State* L) { { int SWIG_arg = 0; CreEPS_FLOAT arg1 ; ns_creeps::CAt *arg2 = 0 ;
    CreEPS_FLOAT *argp1 ; ns_creeps::CAtFont *result = 0 ; SWIG_check_num_args("ns_creeps::CAtFont::CAtFont",2,2)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("ns_creeps::CAtFont::CAtFont",1,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CAtFont::CAtFont",2,"ns_creeps::CAt const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CAtFont",1,SWIGTYPE_p_CreEPS_FLOAT); }  arg1 = *argp1;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("new_CAtFont",2,SWIGTYPE_p_ns_creeps__CAt); } 
    result = (ns_creeps::CAtFont *)new ns_creeps::CAtFont(arg1,(ns_creeps::CAt const &)*arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ns_creeps__CAtFont,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_new_CAtFont__SWIG_5(lua_State* L) { { int SWIG_arg = 0; CreEPS_FLOAT arg1 ; CreEPS_FLOAT *argp1 ;
    ns_creeps::CAtFont *result = 0 ; SWIG_check_num_args("ns_creeps::CAtFont::CAtFont",1,1)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("ns_creeps::CAtFont::CAtFont",1,"CreEPS_FLOAT const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CAtFont",1,SWIGTYPE_p_CreEPS_FLOAT); }  arg1 = *argp1;
    result = (ns_creeps::CAtFont *)new ns_creeps::CAtFont(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ns_creeps__CAtFont,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_new_CAtFont(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 1) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CreEPS_CHAR, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_new_CAtFont__SWIG_3(L);}  }  if (argc == 1) { int _v = 0; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_CAtFont__SWIG_5(L);}  }  if (argc == 2) { int _v = 0; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CreEPS_CHAR, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_CAtFont__SWIG_1(L);}  }  }  if (argc == 2) { int _v = 0; {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ns_creeps__CAt, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_CAtFont__SWIG_4(L);}  }  }  if (argc == 2) { int _v = 0; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CreEPS_CHAR, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ns_creeps__CAt, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_CAtFont__SWIG_2(L);}  }  }  if (argc == 3) { int _v = 0; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CreEPS_CHAR, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ns_creeps__CAt, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_CAtFont__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CAtFont'\n" "  Possible C/C++ prototypes are:\n"
  "    ns_creeps::CAtFont::CAtFont(CreEPS_CHAR const *,CreEPS_FLOAT const,ns_creeps::CAt const &)\n"
  "    ns_creeps::CAtFont::CAtFont(CreEPS_CHAR const *,CreEPS_FLOAT const)\n"
  "    ns_creeps::CAtFont::CAtFont(CreEPS_CHAR const *,ns_creeps::CAt const &)\n"
  "    ns_creeps::CAtFont::CAtFont(CreEPS_CHAR const *)\n"
  "    ns_creeps::CAtFont::CAtFont(CreEPS_FLOAT const,ns_creeps::CAt const &)\n"
  "    ns_creeps::CAtFont::CAtFont(CreEPS_FLOAT const)\n"); lua_error(L);return 0; }
static void swig_delete_CAtFont(void *obj) {
ns_creeps::CAtFont *arg1 = (ns_creeps::CAtFont *) obj;
delete arg1;
}
static int _proxy__wrap_new_CAtFont(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CAtFont);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CAtFont_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CAtFont_methods[]= {
    {0,0}
};
static swig_lua_method swig_CAtFont_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CAtFont_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CAtFont_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CAtFont_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CAtFont_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CAtFont_Sf_SwigStatic = {
    "CAtFont",
    swig_CAtFont_Sf_SwigStatic_methods,
    swig_CAtFont_Sf_SwigStatic_attributes,
    swig_CAtFont_Sf_SwigStatic_constants,
    swig_CAtFont_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CAtFont_bases[] = {0,0};
static const char *swig_CAtFont_base_names[] = {"ns_creeps::CAt *",0};
static swig_lua_class _wrap_class_CAtFont = { "CAtFont", "CAtFont", &SWIGTYPE_p_ns_creeps__CAtFont,_proxy__wrap_new_CAtFont, swig_delete_CAtFont, swig_CAtFont_methods, swig_CAtFont_attributes, &swig_CAtFont_Sf_SwigStatic, swig_CAtFont_meta, swig_CAtFont_bases, swig_CAtFont_base_names };

static int _wrap_new_CAtGrayScale__SWIG_0(lua_State* L) { { int SWIG_arg = 0; CreEPS_FLOAT arg1 ; ns_creeps::CAt *arg2 = 0 ;
    CreEPS_FLOAT *argp1 ; ns_creeps::CAtGrayScale *result = 0 ; SWIG_check_num_args("ns_creeps::CAtGrayScale::CAtGrayScale",2,2)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("ns_creeps::CAtGrayScale::CAtGrayScale",1,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CAtGrayScale::CAtGrayScale",2,"ns_creeps::CAt const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CAtGrayScale",1,SWIGTYPE_p_CreEPS_FLOAT); }  arg1 = *argp1;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("new_CAtGrayScale",2,SWIGTYPE_p_ns_creeps__CAt); } 
    result = (ns_creeps::CAtGrayScale *)new ns_creeps::CAtGrayScale(arg1,(ns_creeps::CAt const &)*arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ns_creeps__CAtGrayScale,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_new_CAtGrayScale__SWIG_1(lua_State* L) { { int SWIG_arg = 0; CreEPS_FLOAT arg1 ; CreEPS_FLOAT *argp1 ;
    ns_creeps::CAtGrayScale *result = 0 ; SWIG_check_num_args("ns_creeps::CAtGrayScale::CAtGrayScale",1,1)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("ns_creeps::CAtGrayScale::CAtGrayScale",1,"CreEPS_FLOAT const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CAtGrayScale",1,SWIGTYPE_p_CreEPS_FLOAT); }  arg1 = *argp1;
    result = (ns_creeps::CAtGrayScale *)new ns_creeps::CAtGrayScale(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ns_creeps__CAtGrayScale,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_new_CAtGrayScale(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v = 0; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_CAtGrayScale__SWIG_1(L);}  }  if (argc == 2) { int _v = 0; {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ns_creeps__CAt, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_CAtGrayScale__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CAtGrayScale'\n" "  Possible C/C++ prototypes are:\n"
  "    ns_creeps::CAtGrayScale::CAtGrayScale(CreEPS_FLOAT const,ns_creeps::CAt const &)\n"
  "    ns_creeps::CAtGrayScale::CAtGrayScale(CreEPS_FLOAT const)\n"); lua_error(L);return 0; }
static void swig_delete_CAtGrayScale(void *obj) {
ns_creeps::CAtGrayScale *arg1 = (ns_creeps::CAtGrayScale *) obj;
delete arg1;
}
static int _proxy__wrap_new_CAtGrayScale(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CAtGrayScale);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CAtGrayScale_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CAtGrayScale_methods[]= {
    {0,0}
};
static swig_lua_method swig_CAtGrayScale_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CAtGrayScale_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CAtGrayScale_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CAtGrayScale_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CAtGrayScale_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CAtGrayScale_Sf_SwigStatic = {
    "CAtGrayScale",
    swig_CAtGrayScale_Sf_SwigStatic_methods,
    swig_CAtGrayScale_Sf_SwigStatic_attributes,
    swig_CAtGrayScale_Sf_SwigStatic_constants,
    swig_CAtGrayScale_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CAtGrayScale_bases[] = {0,0};
static const char *swig_CAtGrayScale_base_names[] = {"ns_creeps::CAt *",0};
static swig_lua_class _wrap_class_CAtGrayScale = { "CAtGrayScale", "CAtGrayScale", &SWIGTYPE_p_ns_creeps__CAtGrayScale,_proxy__wrap_new_CAtGrayScale, swig_delete_CAtGrayScale, swig_CAtGrayScale_methods, swig_CAtGrayScale_attributes, &swig_CAtGrayScale_Sf_SwigStatic, swig_CAtGrayScale_meta, swig_CAtGrayScale_bases, swig_CAtGrayScale_base_names };

static int _wrap_new_CAtTextAlignment__SWIG_0(lua_State* L) { { int SWIG_arg = 0; CreEPS_INT arg1 ; ns_creeps::CAt *arg2 = 0 ;
    CreEPS_INT *argp1 ; ns_creeps::CAtTextAlignment *result = 0 ;
    SWIG_check_num_args("ns_creeps::CAtTextAlignment::CAtTextAlignment",2,2)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("ns_creeps::CAtTextAlignment::CAtTextAlignment",1,"CreEPS_INT const");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CAtTextAlignment::CAtTextAlignment",2,"ns_creeps::CAt const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_CreEPS_INT,0))){
      SWIG_fail_ptr("new_CAtTextAlignment",1,SWIGTYPE_p_CreEPS_INT); }  arg1 = *argp1;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("new_CAtTextAlignment",2,SWIGTYPE_p_ns_creeps__CAt); } 
    result = (ns_creeps::CAtTextAlignment *)new ns_creeps::CAtTextAlignment(arg1,(ns_creeps::CAt const &)*arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ns_creeps__CAtTextAlignment,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_new_CAtTextAlignment__SWIG_1(lua_State* L) { { int SWIG_arg = 0; CreEPS_INT arg1 ; CreEPS_INT *argp1 ;
    ns_creeps::CAtTextAlignment *result = 0 ; SWIG_check_num_args("ns_creeps::CAtTextAlignment::CAtTextAlignment",1,1)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("ns_creeps::CAtTextAlignment::CAtTextAlignment",1,"CreEPS_INT const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_CreEPS_INT,0))){
      SWIG_fail_ptr("new_CAtTextAlignment",1,SWIGTYPE_p_CreEPS_INT); }  arg1 = *argp1;
    result = (ns_creeps::CAtTextAlignment *)new ns_creeps::CAtTextAlignment(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ns_creeps__CAtTextAlignment,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_new_CAtTextAlignment(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v = 0; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CreEPS_INT, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_CAtTextAlignment__SWIG_1(L);}  }  if (argc == 2) {
    int _v = 0; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CreEPS_INT, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ns_creeps__CAt, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_CAtTextAlignment__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CAtTextAlignment'\n"
  "  Possible C/C++ prototypes are:\n"
  "    ns_creeps::CAtTextAlignment::CAtTextAlignment(CreEPS_INT const,ns_creeps::CAt const &)\n"
  "    ns_creeps::CAtTextAlignment::CAtTextAlignment(CreEPS_INT const)\n"); lua_error(L);return 0; }
static void swig_delete_CAtTextAlignment(void *obj) {
ns_creeps::CAtTextAlignment *arg1 = (ns_creeps::CAtTextAlignment *) obj;
delete arg1;
}
static int _proxy__wrap_new_CAtTextAlignment(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CAtTextAlignment);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CAtTextAlignment_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CAtTextAlignment_methods[]= {
    {0,0}
};
static swig_lua_method swig_CAtTextAlignment_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CAtTextAlignment_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CAtTextAlignment_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CAtTextAlignment_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CAtTextAlignment_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CAtTextAlignment_Sf_SwigStatic = {
    "CAtTextAlignment",
    swig_CAtTextAlignment_Sf_SwigStatic_methods,
    swig_CAtTextAlignment_Sf_SwigStatic_attributes,
    swig_CAtTextAlignment_Sf_SwigStatic_constants,
    swig_CAtTextAlignment_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CAtTextAlignment_bases[] = {0,0};
static const char *swig_CAtTextAlignment_base_names[] = {"ns_creeps::CAt *",0};
static swig_lua_class _wrap_class_CAtTextAlignment = { "CAtTextAlignment", "CAtTextAlignment", &SWIGTYPE_p_ns_creeps__CAtTextAlignment,_proxy__wrap_new_CAtTextAlignment, swig_delete_CAtTextAlignment, swig_CAtTextAlignment_methods, swig_CAtTextAlignment_attributes, &swig_CAtTextAlignment_Sf_SwigStatic, swig_CAtTextAlignment_meta, swig_CAtTextAlignment_bases, swig_CAtTextAlignment_base_names };

static int _wrap_new_CAtHexDotFilling__SWIG_0(lua_State* L) { { int SWIG_arg = 0; CreEPS_FLOAT arg1 ; CreEPS_FLOAT arg2 ;
    ns_creeps::CAt *arg3 = 0 ; CreEPS_FLOAT *argp1 ; CreEPS_FLOAT *argp2 ; ns_creeps::CAtHexDotFilling *result = 0 ;
    SWIG_check_num_args("ns_creeps::CAtHexDotFilling::CAtHexDotFilling",3,3)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("ns_creeps::CAtHexDotFilling::CAtHexDotFilling",1,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CAtHexDotFilling::CAtHexDotFilling",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CAtHexDotFilling::CAtHexDotFilling",3,"ns_creeps::CAt const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CAtHexDotFilling",1,SWIGTYPE_p_CreEPS_FLOAT); }  arg1 = *argp1;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CAtHexDotFilling",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("new_CAtHexDotFilling",3,SWIGTYPE_p_ns_creeps__CAt); } 
    result = (ns_creeps::CAtHexDotFilling *)new ns_creeps::CAtHexDotFilling(arg1,arg2,(ns_creeps::CAt const &)*arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ns_creeps__CAtHexDotFilling,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_new_CAtHexDotFilling__SWIG_1(lua_State* L) { { int SWIG_arg = 0; CreEPS_FLOAT arg1 ; CreEPS_FLOAT arg2 ;
    CreEPS_FLOAT *argp1 ; CreEPS_FLOAT *argp2 ; ns_creeps::CAtHexDotFilling *result = 0 ;
    SWIG_check_num_args("ns_creeps::CAtHexDotFilling::CAtHexDotFilling",2,2)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("ns_creeps::CAtHexDotFilling::CAtHexDotFilling",1,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CAtHexDotFilling::CAtHexDotFilling",2,"CreEPS_FLOAT const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CAtHexDotFilling",1,SWIGTYPE_p_CreEPS_FLOAT); }  arg1 = *argp1;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CAtHexDotFilling",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    result = (ns_creeps::CAtHexDotFilling *)new ns_creeps::CAtHexDotFilling(arg1,arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ns_creeps__CAtHexDotFilling,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_new_CAtHexDotFilling(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v = 0; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_CAtHexDotFilling__SWIG_1(L);}  }  }  if (argc == 3) {
    int _v = 0; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ns_creeps__CAt, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_CAtHexDotFilling__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CAtHexDotFilling'\n"
  "  Possible C/C++ prototypes are:\n"
  "    ns_creeps::CAtHexDotFilling::CAtHexDotFilling(CreEPS_FLOAT const,CreEPS_FLOAT const,ns_creeps::CAt const &)\n"
  "    ns_creeps::CAtHexDotFilling::CAtHexDotFilling(CreEPS_FLOAT const,CreEPS_FLOAT const)\n"); lua_error(L);return 0; }
static void swig_delete_CAtHexDotFilling(void *obj) {
ns_creeps::CAtHexDotFilling *arg1 = (ns_creeps::CAtHexDotFilling *) obj;
delete arg1;
}
static int _proxy__wrap_new_CAtHexDotFilling(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CAtHexDotFilling);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CAtHexDotFilling_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CAtHexDotFilling_methods[]= {
    {0,0}
};
static swig_lua_method swig_CAtHexDotFilling_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CAtHexDotFilling_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CAtHexDotFilling_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CAtHexDotFilling_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CAtHexDotFilling_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CAtHexDotFilling_Sf_SwigStatic = {
    "CAtHexDotFilling",
    swig_CAtHexDotFilling_Sf_SwigStatic_methods,
    swig_CAtHexDotFilling_Sf_SwigStatic_attributes,
    swig_CAtHexDotFilling_Sf_SwigStatic_constants,
    swig_CAtHexDotFilling_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CAtHexDotFilling_bases[] = {0,0};
static const char *swig_CAtHexDotFilling_base_names[] = {"ns_creeps::CAt *",0};
static swig_lua_class _wrap_class_CAtHexDotFilling = { "CAtHexDotFilling", "CAtHexDotFilling", &SWIGTYPE_p_ns_creeps__CAtHexDotFilling,_proxy__wrap_new_CAtHexDotFilling, swig_delete_CAtHexDotFilling, swig_CAtHexDotFilling_methods, swig_CAtHexDotFilling_attributes, &swig_CAtHexDotFilling_Sf_SwigStatic, swig_CAtHexDotFilling_meta, swig_CAtHexDotFilling_bases, swig_CAtHexDotFilling_base_names };

static int _wrap_new_CAtCheckerboardFilling__SWIG_0(lua_State* L) { { int SWIG_arg = 0; CreEPS_FLOAT arg1 ; CreEPS_FLOAT arg2 ;
    ns_creeps::CAt *arg3 = 0 ; CreEPS_FLOAT *argp1 ; CreEPS_FLOAT *argp2 ; ns_creeps::CAtCheckerboardFilling *result = 0 ;
    SWIG_check_num_args("ns_creeps::CAtCheckerboardFilling::CAtCheckerboardFilling",3,3)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("ns_creeps::CAtCheckerboardFilling::CAtCheckerboardFilling",1,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CAtCheckerboardFilling::CAtCheckerboardFilling",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CAtCheckerboardFilling::CAtCheckerboardFilling",3,"ns_creeps::CAt const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CAtCheckerboardFilling",1,SWIGTYPE_p_CreEPS_FLOAT); }  arg1 = *argp1;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CAtCheckerboardFilling",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("new_CAtCheckerboardFilling",3,SWIGTYPE_p_ns_creeps__CAt); } 
    result = (ns_creeps::CAtCheckerboardFilling *)new ns_creeps::CAtCheckerboardFilling(arg1,arg2,(ns_creeps::CAt const &)*arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ns_creeps__CAtCheckerboardFilling,1); SWIG_arg++;  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_CAtCheckerboardFilling__SWIG_1(lua_State* L) { { int SWIG_arg = 0; CreEPS_FLOAT arg1 ; CreEPS_FLOAT arg2 ;
    CreEPS_FLOAT *argp1 ; CreEPS_FLOAT *argp2 ; ns_creeps::CAtCheckerboardFilling *result = 0 ;
    SWIG_check_num_args("ns_creeps::CAtCheckerboardFilling::CAtCheckerboardFilling",2,2)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("ns_creeps::CAtCheckerboardFilling::CAtCheckerboardFilling",1,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CAtCheckerboardFilling::CAtCheckerboardFilling",2,"CreEPS_FLOAT const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CAtCheckerboardFilling",1,SWIGTYPE_p_CreEPS_FLOAT); }  arg1 = *argp1;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CAtCheckerboardFilling",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    result = (ns_creeps::CAtCheckerboardFilling *)new ns_creeps::CAtCheckerboardFilling(arg1,arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ns_creeps__CAtCheckerboardFilling,1); SWIG_arg++;  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_CAtCheckerboardFilling(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { int _v = 0; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_CAtCheckerboardFilling__SWIG_1(L);}  }  }  if (argc == 3) {
    int _v = 0; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ns_creeps__CAt, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_CAtCheckerboardFilling__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CAtCheckerboardFilling'\n"
  "  Possible C/C++ prototypes are:\n"
  "    ns_creeps::CAtCheckerboardFilling::CAtCheckerboardFilling(CreEPS_FLOAT const,CreEPS_FLOAT const,ns_creeps::CAt const &)\n"
  "    ns_creeps::CAtCheckerboardFilling::CAtCheckerboardFilling(CreEPS_FLOAT const,CreEPS_FLOAT const)\n");
  lua_error(L);return 0; }
static void swig_delete_CAtCheckerboardFilling(void *obj) {
ns_creeps::CAtCheckerboardFilling *arg1 = (ns_creeps::CAtCheckerboardFilling *) obj;
delete arg1;
}
static int _proxy__wrap_new_CAtCheckerboardFilling(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CAtCheckerboardFilling);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CAtCheckerboardFilling_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CAtCheckerboardFilling_methods[]= {
    {0,0}
};
static swig_lua_method swig_CAtCheckerboardFilling_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CAtCheckerboardFilling_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CAtCheckerboardFilling_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CAtCheckerboardFilling_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CAtCheckerboardFilling_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CAtCheckerboardFilling_Sf_SwigStatic = {
    "CAtCheckerboardFilling",
    swig_CAtCheckerboardFilling_Sf_SwigStatic_methods,
    swig_CAtCheckerboardFilling_Sf_SwigStatic_attributes,
    swig_CAtCheckerboardFilling_Sf_SwigStatic_constants,
    swig_CAtCheckerboardFilling_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CAtCheckerboardFilling_bases[] = {0,0};
static const char *swig_CAtCheckerboardFilling_base_names[] = {"ns_creeps::CAt *",0};
static swig_lua_class _wrap_class_CAtCheckerboardFilling = { "CAtCheckerboardFilling", "CAtCheckerboardFilling", &SWIGTYPE_p_ns_creeps__CAtCheckerboardFilling,_proxy__wrap_new_CAtCheckerboardFilling, swig_delete_CAtCheckerboardFilling, swig_CAtCheckerboardFilling_methods, swig_CAtCheckerboardFilling_attributes, &swig_CAtCheckerboardFilling_Sf_SwigStatic, swig_CAtCheckerboardFilling_meta, swig_CAtCheckerboardFilling_bases, swig_CAtCheckerboardFilling_base_names };

static int _wrap_new_CAtStripeFilling__SWIG_0(lua_State* L) { { int SWIG_arg = 0; CreEPS_FLOAT arg1 ; CreEPS_FLOAT arg2 ;
    CreEPS_INT arg3 ; ns_creeps::CAt *arg4 = 0 ; CreEPS_FLOAT *argp1 ; CreEPS_FLOAT *argp2 ; CreEPS_INT *argp3 ;
    ns_creeps::CAtStripeFilling *result = 0 ; SWIG_check_num_args("ns_creeps::CAtStripeFilling::CAtStripeFilling",4,4)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("ns_creeps::CAtStripeFilling::CAtStripeFilling",1,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CAtStripeFilling::CAtStripeFilling",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CAtStripeFilling::CAtStripeFilling",3,"CreEPS_INT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CAtStripeFilling::CAtStripeFilling",4,"ns_creeps::CAt const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CAtStripeFilling",1,SWIGTYPE_p_CreEPS_FLOAT); }  arg1 = *argp1;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CAtStripeFilling",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_INT,0))){
      SWIG_fail_ptr("new_CAtStripeFilling",3,SWIGTYPE_p_CreEPS_INT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("new_CAtStripeFilling",4,SWIGTYPE_p_ns_creeps__CAt); } 
    result = (ns_creeps::CAtStripeFilling *)new ns_creeps::CAtStripeFilling(arg1,arg2,arg3,(ns_creeps::CAt const &)*arg4);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ns_creeps__CAtStripeFilling,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_new_CAtStripeFilling__SWIG_1(lua_State* L) { { int SWIG_arg = 0; CreEPS_FLOAT arg1 ; CreEPS_FLOAT arg2 ;
    CreEPS_INT arg3 ; CreEPS_FLOAT *argp1 ; CreEPS_FLOAT *argp2 ; CreEPS_INT *argp3 ; ns_creeps::CAtStripeFilling *result = 0 ;
    SWIG_check_num_args("ns_creeps::CAtStripeFilling::CAtStripeFilling",3,3)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("ns_creeps::CAtStripeFilling::CAtStripeFilling",1,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CAtStripeFilling::CAtStripeFilling",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CAtStripeFilling::CAtStripeFilling",3,"CreEPS_INT const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CAtStripeFilling",1,SWIGTYPE_p_CreEPS_FLOAT); }  arg1 = *argp1;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CAtStripeFilling",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_INT,0))){
      SWIG_fail_ptr("new_CAtStripeFilling",3,SWIGTYPE_p_CreEPS_INT); }  arg3 = *argp3;
    result = (ns_creeps::CAtStripeFilling *)new ns_creeps::CAtStripeFilling(arg1,arg2,arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ns_creeps__CAtStripeFilling,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_new_CAtStripeFilling(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 3) { int _v = 0; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_INT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_CAtStripeFilling__SWIG_1(L);}  }  }  }  if (argc == 4) {
    int _v = 0; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_INT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ns_creeps__CAt, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_CAtStripeFilling__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CAtStripeFilling'\n"
  "  Possible C/C++ prototypes are:\n"
  "    ns_creeps::CAtStripeFilling::CAtStripeFilling(CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_INT const,ns_creeps::CAt const &)\n"
  "    ns_creeps::CAtStripeFilling::CAtStripeFilling(CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_INT const)\n");
  lua_error(L);return 0; }
static void swig_delete_CAtStripeFilling(void *obj) {
ns_creeps::CAtStripeFilling *arg1 = (ns_creeps::CAtStripeFilling *) obj;
delete arg1;
}
static int _proxy__wrap_new_CAtStripeFilling(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CAtStripeFilling);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CAtStripeFilling_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CAtStripeFilling_methods[]= {
    {0,0}
};
static swig_lua_method swig_CAtStripeFilling_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CAtStripeFilling_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CAtStripeFilling_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CAtStripeFilling_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CAtStripeFilling_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CAtStripeFilling_Sf_SwigStatic = {
    "CAtStripeFilling",
    swig_CAtStripeFilling_Sf_SwigStatic_methods,
    swig_CAtStripeFilling_Sf_SwigStatic_attributes,
    swig_CAtStripeFilling_Sf_SwigStatic_constants,
    swig_CAtStripeFilling_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CAtStripeFilling_bases[] = {0,0};
static const char *swig_CAtStripeFilling_base_names[] = {"ns_creeps::CAt *",0};
static swig_lua_class _wrap_class_CAtStripeFilling = { "CAtStripeFilling", "CAtStripeFilling", &SWIGTYPE_p_ns_creeps__CAtStripeFilling,_proxy__wrap_new_CAtStripeFilling, swig_delete_CAtStripeFilling, swig_CAtStripeFilling_methods, swig_CAtStripeFilling_attributes, &swig_CAtStripeFilling_Sf_SwigStatic, swig_CAtStripeFilling_meta, swig_CAtStripeFilling_bases, swig_CAtStripeFilling_base_names };

static int _wrap_new_CreEPS__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *result = 0 ;
    SWIG_check_num_args("ns_creeps::CreEPS::CreEPS",0,0) result = (ns_creeps::CreEPS *)new ns_creeps::CreEPS();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ns_creeps__CreEPS,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_new_CreEPS__SWIG_1(lua_State* L) { { int SWIG_arg = 0; CreEPS_CHAR *arg1 = (CreEPS_CHAR *) 0 ;
    CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT arg4 ; CreEPS_FLOAT arg5 ; CreEPS_BOOL arg6 ;
    CreEPS_CHAR *arg7 = (CreEPS_CHAR *) 0 ; CreEPS_FLOAT *argp2 ; CreEPS_FLOAT *argp3 ; CreEPS_FLOAT *argp4 ;
    CreEPS_FLOAT *argp5 ; CreEPS_BOOL *argp6 ; ns_creeps::CreEPS *result = 0 ;
    SWIG_check_num_args("ns_creeps::CreEPS::CreEPS",7,7)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::CreEPS",1,"CreEPS_CHAR const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::CreEPS",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::CreEPS",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::CreEPS",4,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ns_creeps::CreEPS::CreEPS",5,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,6)) SWIG_fail_arg("ns_creeps::CreEPS::CreEPS",6,"CreEPS_BOOL const");
    if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("ns_creeps::CreEPS::CreEPS",7,"CreEPS_CHAR const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CreEPS_CHAR,0))){
      SWIG_fail_ptr("new_CreEPS",1,SWIGTYPE_p_CreEPS_CHAR); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CreEPS",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CreEPS",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CreEPS",4,SWIGTYPE_p_CreEPS_FLOAT); }  arg4 = *argp4;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CreEPS",5,SWIGTYPE_p_CreEPS_FLOAT); }  arg5 = *argp5;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_CreEPS_BOOL,0))){
      SWIG_fail_ptr("new_CreEPS",6,SWIGTYPE_p_CreEPS_BOOL); }  arg6 = *argp6;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_CreEPS_CHAR,0))){
      SWIG_fail_ptr("new_CreEPS",7,SWIGTYPE_p_CreEPS_CHAR); } 
    result = (ns_creeps::CreEPS *)new ns_creeps::CreEPS((CreEPS_CHAR const *)arg1,arg2,arg3,arg4,arg5,arg6,(CreEPS_CHAR const *)arg7);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ns_creeps__CreEPS,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_new_CreEPS__SWIG_2(lua_State* L) { { int SWIG_arg = 0; CreEPS_CHAR *arg1 = (CreEPS_CHAR *) 0 ;
    CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT arg4 ; CreEPS_FLOAT arg5 ; CreEPS_BOOL arg6 ; CreEPS_FLOAT *argp2 ;
    CreEPS_FLOAT *argp3 ; CreEPS_FLOAT *argp4 ; CreEPS_FLOAT *argp5 ; CreEPS_BOOL *argp6 ; ns_creeps::CreEPS *result = 0 ;
    SWIG_check_num_args("ns_creeps::CreEPS::CreEPS",6,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::CreEPS",1,"CreEPS_CHAR const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::CreEPS",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::CreEPS",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::CreEPS",4,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ns_creeps::CreEPS::CreEPS",5,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,6)) SWIG_fail_arg("ns_creeps::CreEPS::CreEPS",6,"CreEPS_BOOL const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CreEPS_CHAR,0))){
      SWIG_fail_ptr("new_CreEPS",1,SWIGTYPE_p_CreEPS_CHAR); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CreEPS",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CreEPS",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CreEPS",4,SWIGTYPE_p_CreEPS_FLOAT); }  arg4 = *argp4;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CreEPS",5,SWIGTYPE_p_CreEPS_FLOAT); }  arg5 = *argp5;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_CreEPS_BOOL,0))){
      SWIG_fail_ptr("new_CreEPS",6,SWIGTYPE_p_CreEPS_BOOL); }  arg6 = *argp6;
    result = (ns_creeps::CreEPS *)new ns_creeps::CreEPS((CreEPS_CHAR const *)arg1,arg2,arg3,arg4,arg5,arg6);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ns_creeps__CreEPS,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_new_CreEPS__SWIG_3(lua_State* L) { { int SWIG_arg = 0; CreEPS_CHAR *arg1 = (CreEPS_CHAR *) 0 ;
    CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT arg4 ; CreEPS_FLOAT arg5 ; CreEPS_FLOAT *argp2 ; CreEPS_FLOAT *argp3 ;
    CreEPS_FLOAT *argp4 ; CreEPS_FLOAT *argp5 ; ns_creeps::CreEPS *result = 0 ;
    SWIG_check_num_args("ns_creeps::CreEPS::CreEPS",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::CreEPS",1,"CreEPS_CHAR const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::CreEPS",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::CreEPS",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::CreEPS",4,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ns_creeps::CreEPS::CreEPS",5,"CreEPS_FLOAT const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CreEPS_CHAR,0))){
      SWIG_fail_ptr("new_CreEPS",1,SWIGTYPE_p_CreEPS_CHAR); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CreEPS",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CreEPS",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CreEPS",4,SWIGTYPE_p_CreEPS_FLOAT); }  arg4 = *argp4;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CreEPS",5,SWIGTYPE_p_CreEPS_FLOAT); }  arg5 = *argp5;
    result = (ns_creeps::CreEPS *)new ns_creeps::CreEPS((CreEPS_CHAR const *)arg1,arg2,arg3,arg4,arg5);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ns_creeps__CreEPS,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_new_CreEPS__SWIG_4(lua_State* L) { { int SWIG_arg = 0; CreEPS_CHAR *arg1 = (CreEPS_CHAR *) 0 ;
    CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_BOOL arg4 ; CreEPS_CHAR *arg5 = (CreEPS_CHAR *) 0 ; CreEPS_FLOAT *argp2 ;
    CreEPS_FLOAT *argp3 ; CreEPS_BOOL *argp4 ; ns_creeps::CreEPS *result = 0 ;
    SWIG_check_num_args("ns_creeps::CreEPS::CreEPS",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::CreEPS",1,"CreEPS_CHAR const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::CreEPS",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::CreEPS",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::CreEPS",4,"CreEPS_BOOL const");
    if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ns_creeps::CreEPS::CreEPS",5,"CreEPS_CHAR const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CreEPS_CHAR,0))){
      SWIG_fail_ptr("new_CreEPS",1,SWIGTYPE_p_CreEPS_CHAR); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CreEPS",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CreEPS",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_BOOL,0))){
      SWIG_fail_ptr("new_CreEPS",4,SWIGTYPE_p_CreEPS_BOOL); }  arg4 = *argp4;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_CreEPS_CHAR,0))){
      SWIG_fail_ptr("new_CreEPS",5,SWIGTYPE_p_CreEPS_CHAR); } 
    result = (ns_creeps::CreEPS *)new ns_creeps::CreEPS((CreEPS_CHAR const *)arg1,arg2,arg3,arg4,(CreEPS_CHAR const *)arg5);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ns_creeps__CreEPS,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_new_CreEPS__SWIG_5(lua_State* L) { { int SWIG_arg = 0; CreEPS_CHAR *arg1 = (CreEPS_CHAR *) 0 ;
    CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_BOOL arg4 ; CreEPS_FLOAT *argp2 ; CreEPS_FLOAT *argp3 ; CreEPS_BOOL *argp4 ;
    ns_creeps::CreEPS *result = 0 ; SWIG_check_num_args("ns_creeps::CreEPS::CreEPS",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::CreEPS",1,"CreEPS_CHAR const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::CreEPS",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::CreEPS",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::CreEPS",4,"CreEPS_BOOL const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CreEPS_CHAR,0))){
      SWIG_fail_ptr("new_CreEPS",1,SWIGTYPE_p_CreEPS_CHAR); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CreEPS",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CreEPS",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_BOOL,0))){
      SWIG_fail_ptr("new_CreEPS",4,SWIGTYPE_p_CreEPS_BOOL); }  arg4 = *argp4;
    result = (ns_creeps::CreEPS *)new ns_creeps::CreEPS((CreEPS_CHAR const *)arg1,arg2,arg3,arg4);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ns_creeps__CreEPS,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_new_CreEPS__SWIG_6(lua_State* L) { { int SWIG_arg = 0; CreEPS_CHAR *arg1 = (CreEPS_CHAR *) 0 ;
    CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT *argp2 ; CreEPS_FLOAT *argp3 ; ns_creeps::CreEPS *result = 0 ;
    SWIG_check_num_args("ns_creeps::CreEPS::CreEPS",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::CreEPS",1,"CreEPS_CHAR const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::CreEPS",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::CreEPS",3,"CreEPS_FLOAT const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CreEPS_CHAR,0))){
      SWIG_fail_ptr("new_CreEPS",1,SWIGTYPE_p_CreEPS_CHAR); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CreEPS",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("new_CreEPS",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    result = (ns_creeps::CreEPS *)new ns_creeps::CreEPS((CreEPS_CHAR const *)arg1,arg2,arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ns_creeps__CreEPS,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_new_CreEPS(lua_State* L) { int argc; int argv[8]={ 1,2,3,4,5,6,7,8} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_CreEPS__SWIG_0(L);}  if (argc == 3) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CreEPS_CHAR, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_CreEPS__SWIG_6(L);}  }  }  }  if (argc == 4) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CreEPS_CHAR, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CreEPS_BOOL, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_CreEPS__SWIG_5(L);}  }  }  }  }  if (argc == 5) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CreEPS_CHAR, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_CreEPS__SWIG_3(L);}  }  }  }  }  }  if (argc == 5) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CreEPS_CHAR, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CreEPS_BOOL, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_CreEPS_CHAR, 0)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_CreEPS__SWIG_4(L);}  }  }  }  }  }  if (argc == 6) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CreEPS_CHAR, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_CreEPS_BOOL, SWIG_POINTER_NO_NULL)) {
                  _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_CreEPS__SWIG_2(L);}  }  }  }  }  }  } 
  if (argc == 7) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CreEPS_CHAR, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_CreEPS_BOOL, SWIG_POINTER_NO_NULL)) {
                  _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                  if (SWIG_isptrtype(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_CreEPS_CHAR, 0)) {
                    _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_CreEPS__SWIG_1(L);}  }  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CreEPS'\n" "  Possible C/C++ prototypes are:\n"
  "    ns_creeps::CreEPS::CreEPS()\n"
  "    ns_creeps::CreEPS::CreEPS(CreEPS_CHAR const *,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_BOOL const,CreEPS_CHAR const *)\n"
  "    ns_creeps::CreEPS::CreEPS(CreEPS_CHAR const *,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_BOOL const)\n"
  "    ns_creeps::CreEPS::CreEPS(CreEPS_CHAR const *,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const)\n"
  "    ns_creeps::CreEPS::CreEPS(CreEPS_CHAR const *,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_BOOL const,CreEPS_CHAR const *)\n"
  "    ns_creeps::CreEPS::CreEPS(CreEPS_CHAR const *,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_BOOL const)\n"
  "    ns_creeps::CreEPS::CreEPS(CreEPS_CHAR const *,CreEPS_FLOAT const,CreEPS_FLOAT const)\n"); lua_error(L);return 0; }
static int _wrap_CreEPS_getWarningMessageHandler(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS::MessageHandler result;
    SWIG_check_num_args("ns_creeps::CreEPS::getWarningMessageHandler",0,0)
    result = (ns_creeps::CreEPS::MessageHandler)ns_creeps::CreEPS::getWarningMessageHandler();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_q_const__p_q_const__CreEPS_CHAR_v_______void,0); SWIG_arg++;  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_getErrorMessageHandler(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS::MessageHandler result;
    SWIG_check_num_args("ns_creeps::CreEPS::getErrorMessageHandler",0,0)
    result = (ns_creeps::CreEPS::MessageHandler)ns_creeps::CreEPS::getErrorMessageHandler();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_q_const__p_q_const__CreEPS_CHAR_v_______void,0); SWIG_arg++;  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_setWarningMessageHandler(lua_State* L) { { int SWIG_arg = 0;
    ns_creeps::CreEPS::MessageHandler arg1 = (ns_creeps::CreEPS::MessageHandler) 0 ; ns_creeps::CreEPS::MessageHandler result;
    SWIG_check_num_args("ns_creeps::CreEPS::setWarningMessageHandler",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::setWarningMessageHandler",1,"ns_creeps::CreEPS::MessageHandler");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_f_q_const__p_q_const__CreEPS_CHAR_v_______void,0))){
      SWIG_fail_ptr("CreEPS_setWarningMessageHandler",1,SWIGTYPE_p_f_q_const__p_q_const__CreEPS_CHAR_v_______void); } 
    result = (ns_creeps::CreEPS::MessageHandler)ns_creeps::CreEPS::setWarningMessageHandler(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_q_const__p_q_const__CreEPS_CHAR_v_______void,0); SWIG_arg++;  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_setErrorMessageHandler(lua_State* L) { { int SWIG_arg = 0;
    ns_creeps::CreEPS::MessageHandler arg1 = (ns_creeps::CreEPS::MessageHandler) 0 ; ns_creeps::CreEPS::MessageHandler result;
    SWIG_check_num_args("ns_creeps::CreEPS::setErrorMessageHandler",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::setErrorMessageHandler",1,"ns_creeps::CreEPS::MessageHandler");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_f_q_const__p_q_const__CreEPS_CHAR_v_______void,0))){
      SWIG_fail_ptr("CreEPS_setErrorMessageHandler",1,SWIGTYPE_p_f_q_const__p_q_const__CreEPS_CHAR_v_______void); } 
    result = (ns_creeps::CreEPS::MessageHandler)ns_creeps::CreEPS::setErrorMessageHandler(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_q_const__p_q_const__CreEPS_CHAR_v_______void,0); SWIG_arg++;  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_startPath__SWIG_0(lua_State* L) { { int SWIG_arg = 0;
    ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ; CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT *argp2 ;
    CreEPS_FLOAT *argp3 ; SWIG_check_num_args("ns_creeps::CreEPS::startPath",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::startPath",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::startPath",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::startPath",3,"CreEPS_FLOAT const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_startPath",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_startPath",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_startPath",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3; (arg1)->startPath(arg2,arg3);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_startPath__SWIG_1(lua_State* L) { { int SWIG_arg = 0;
    ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ; SWIG_check_num_args("ns_creeps::CreEPS::startPath",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::startPath",1,"ns_creeps::CreEPS *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_startPath",1,SWIGTYPE_p_ns_creeps__CreEPS); }  (arg1)->startPath(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_startPath(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 1) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CreEPS_startPath__SWIG_1(L);}  }  if (argc == 3) { int _v = 0; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CreEPS_startPath__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CreEPS_startPath'\n" "  Possible C/C++ prototypes are:\n"
  "    ns_creeps::CreEPS::startPath(CreEPS_FLOAT const,CreEPS_FLOAT const)\n" "    ns_creeps::CreEPS::startPath()\n");
  lua_error(L);return 0; }
static int _wrap_CreEPS_endPath__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    SWIG_check_num_args("ns_creeps::CreEPS::endPath",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::endPath",1,"ns_creeps::CreEPS *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_endPath",1,SWIGTYPE_p_ns_creeps__CreEPS); }  (arg1)->endPath(); return SWIG_arg; fail: SWIGUNUSED; }
   lua_error(L); return 0; }
static int _wrap_CreEPS_endPath__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    ns_creeps::CreEPS::DrawMode arg2 ; ns_creeps::CAt *arg3 = 0 ; SWIG_check_num_args("ns_creeps::CreEPS::endPath",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::endPath",1,"ns_creeps::CreEPS *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::endPath",2,"ns_creeps::CreEPS::DrawMode const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::endPath",3,"ns_creeps::CAt const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_endPath",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    arg2 = (ns_creeps::CreEPS::DrawMode const)(int)lua_tonumber(L, 2);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("CreEPS_endPath",3,SWIGTYPE_p_ns_creeps__CAt); }  (arg1)->endPath(arg2,(ns_creeps::CAt const &)*arg3);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_endPath__SWIG_2(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    ns_creeps::CreEPS::DrawMode arg2 ; SWIG_check_num_args("ns_creeps::CreEPS::endPath",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::endPath",1,"ns_creeps::CreEPS *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::endPath",2,"ns_creeps::CreEPS::DrawMode const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_endPath",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    arg2 = (ns_creeps::CreEPS::DrawMode const)(int)lua_tonumber(L, 2); (arg1)->endPath(arg2); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_endPath__SWIG_3(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    ns_creeps::CreEPS::DrawMode arg2 ; ns_creeps::CreEPS::DrawMode arg3 ; ns_creeps::CAt *arg4 = 0 ; ns_creeps::CAt *arg5 = 0 ;
    SWIG_check_num_args("ns_creeps::CreEPS::endPath",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::endPath",1,"ns_creeps::CreEPS *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::endPath",2,"ns_creeps::CreEPS::DrawMode const");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::endPath",3,"ns_creeps::CreEPS::DrawMode const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::endPath",4,"ns_creeps::CAt const &");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ns_creeps::CreEPS::endPath",5,"ns_creeps::CAt const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_endPath",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    arg2 = (ns_creeps::CreEPS::DrawMode const)(int)lua_tonumber(L, 2);
    arg3 = (ns_creeps::CreEPS::DrawMode const)(int)lua_tonumber(L, 3);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("CreEPS_endPath",4,SWIGTYPE_p_ns_creeps__CAt); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("CreEPS_endPath",5,SWIGTYPE_p_ns_creeps__CAt); } 
    (arg1)->endPath(arg2,arg3,(ns_creeps::CAt const &)*arg4,(ns_creeps::CAt const &)*arg5); return SWIG_arg; fail: SWIGUNUSED; }
   lua_error(L); return 0; }
static int _wrap_CreEPS_endPath__SWIG_4(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    ns_creeps::CreEPS::DrawMode arg2 ; ns_creeps::CreEPS::DrawMode arg3 ; ns_creeps::CAt *arg4 = 0 ;
    SWIG_check_num_args("ns_creeps::CreEPS::endPath",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::endPath",1,"ns_creeps::CreEPS *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::endPath",2,"ns_creeps::CreEPS::DrawMode const");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::endPath",3,"ns_creeps::CreEPS::DrawMode const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::endPath",4,"ns_creeps::CAt const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_endPath",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    arg2 = (ns_creeps::CreEPS::DrawMode const)(int)lua_tonumber(L, 2);
    arg3 = (ns_creeps::CreEPS::DrawMode const)(int)lua_tonumber(L, 3);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("CreEPS_endPath",4,SWIGTYPE_p_ns_creeps__CAt); }  (arg1)->endPath(arg2,arg3,(ns_creeps::CAt const &)*arg4);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_endPath__SWIG_5(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    ns_creeps::CreEPS::DrawMode arg2 ; ns_creeps::CreEPS::DrawMode arg3 ; SWIG_check_num_args("ns_creeps::CreEPS::endPath",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::endPath",1,"ns_creeps::CreEPS *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::endPath",2,"ns_creeps::CreEPS::DrawMode const");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::endPath",3,"ns_creeps::CreEPS::DrawMode const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_endPath",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    arg2 = (ns_creeps::CreEPS::DrawMode const)(int)lua_tonumber(L, 2);
    arg3 = (ns_creeps::CreEPS::DrawMode const)(int)lua_tonumber(L, 3); (arg1)->endPath(arg2,arg3); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_endPath(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 1) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CreEPS_endPath__SWIG_0(L);}  }  if (argc == 2) { int _v = 0; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_CreEPS_endPath__SWIG_2(L);}  }  }  if (argc == 3) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ns_creeps__CAt, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CreEPS_endPath__SWIG_1(L);}  }  }  }  if (argc == 3) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_CreEPS_endPath__SWIG_5(L);}  }  }  }  if (argc == 4) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ns_creeps__CAt, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CreEPS_endPath__SWIG_4(L);}  }  }  }  }  if (argc == 5) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ns_creeps__CAt, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ns_creeps__CAt, SWIG_POINTER_NO_NULL)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CreEPS_endPath__SWIG_3(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CreEPS_endPath'\n" "  Possible C/C++ prototypes are:\n"
  "    ns_creeps::CreEPS::endPath()\n"
  "    ns_creeps::CreEPS::endPath(ns_creeps::CreEPS::DrawMode const,ns_creeps::CAt const &)\n"
  "    ns_creeps::CreEPS::endPath(ns_creeps::CreEPS::DrawMode const)\n"
  "    ns_creeps::CreEPS::endPath(ns_creeps::CreEPS::DrawMode const,ns_creeps::CreEPS::DrawMode const,ns_creeps::CAt const &,ns_creeps::CAt const &)\n"
  "    ns_creeps::CreEPS::endPath(ns_creeps::CreEPS::DrawMode const,ns_creeps::CreEPS::DrawMode const,ns_creeps::CAt const &)\n"
  "    ns_creeps::CreEPS::endPath(ns_creeps::CreEPS::DrawMode const,ns_creeps::CreEPS::DrawMode const)\n");
  lua_error(L);return 0; }
static int _wrap_CreEPS_usePath__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    ns_creeps::CreEPS::DrawMode arg2 ; ns_creeps::CAt *arg3 = 0 ; SWIG_check_num_args("ns_creeps::CreEPS::usePath",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::usePath",1,"ns_creeps::CreEPS *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::usePath",2,"ns_creeps::CreEPS::DrawMode const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::usePath",3,"ns_creeps::CAt const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_usePath",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    arg2 = (ns_creeps::CreEPS::DrawMode const)(int)lua_tonumber(L, 2);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("CreEPS_usePath",3,SWIGTYPE_p_ns_creeps__CAt); }  (arg1)->usePath(arg2,(ns_creeps::CAt const &)*arg3);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_usePath__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    ns_creeps::CreEPS::DrawMode arg2 ; SWIG_check_num_args("ns_creeps::CreEPS::usePath",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::usePath",1,"ns_creeps::CreEPS *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::usePath",2,"ns_creeps::CreEPS::DrawMode const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_usePath",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    arg2 = (ns_creeps::CreEPS::DrawMode const)(int)lua_tonumber(L, 2); (arg1)->usePath(arg2); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_usePath(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_CreEPS_usePath__SWIG_1(L);}  }  }  if (argc == 3) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ns_creeps__CAt, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CreEPS_usePath__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CreEPS_usePath'\n" "  Possible C/C++ prototypes are:\n"
  "    ns_creeps::CreEPS::usePath(ns_creeps::CreEPS::DrawMode const,ns_creeps::CAt const &)\n"
  "    ns_creeps::CreEPS::usePath(ns_creeps::CreEPS::DrawMode const)\n"); lua_error(L);return 0; }
static int _wrap_CreEPS_closeSubpath(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    SWIG_check_num_args("ns_creeps::CreEPS::closeSubpath",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::closeSubpath",1,"ns_creeps::CreEPS *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_closeSubpath",1,SWIGTYPE_p_ns_creeps__CreEPS); }  (arg1)->closeSubpath(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_addMove(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT *argp2 ; CreEPS_FLOAT *argp3 ;
    SWIG_check_num_args("ns_creeps::CreEPS::addMove",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::addMove",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::addMove",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::addMove",3,"CreEPS_FLOAT const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_addMove",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addMove",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addMove",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3; (arg1)->addMove(arg2,arg3); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_addRelativeMove(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT *argp2 ; CreEPS_FLOAT *argp3 ;
    SWIG_check_num_args("ns_creeps::CreEPS::addRelativeMove",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::addRelativeMove",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::addRelativeMove",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::addRelativeMove",3,"CreEPS_FLOAT const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_addRelativeMove",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addRelativeMove",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addRelativeMove",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3; (arg1)->addRelativeMove(arg2,arg3);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_addLine(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT *argp2 ; CreEPS_FLOAT *argp3 ;
    SWIG_check_num_args("ns_creeps::CreEPS::addLine",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::addLine",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::addLine",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::addLine",3,"CreEPS_FLOAT const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_addLine",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addLine",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addLine",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3; (arg1)->addLine(arg2,arg3); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_addRelativeLine(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT *argp2 ; CreEPS_FLOAT *argp3 ;
    SWIG_check_num_args("ns_creeps::CreEPS::addRelativeLine",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::addRelativeLine",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::addRelativeLine",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::addRelativeLine",3,"CreEPS_FLOAT const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_addRelativeLine",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addRelativeLine",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addRelativeLine",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3; (arg1)->addRelativeLine(arg2,arg3);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_addArc(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT arg4 ; CreEPS_FLOAT arg5 ; CreEPS_FLOAT arg6 ; CreEPS_FLOAT *argp2 ;
    CreEPS_FLOAT *argp3 ; CreEPS_FLOAT *argp4 ; CreEPS_FLOAT *argp5 ; CreEPS_FLOAT *argp6 ;
    SWIG_check_num_args("ns_creeps::CreEPS::addArc",6,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::addArc",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::addArc",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::addArc",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::addArc",4,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ns_creeps::CreEPS::addArc",5,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,6)) SWIG_fail_arg("ns_creeps::CreEPS::addArc",6,"CreEPS_FLOAT const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_addArc",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addArc",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addArc",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addArc",4,SWIGTYPE_p_CreEPS_FLOAT); }  arg4 = *argp4;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addArc",5,SWIGTYPE_p_CreEPS_FLOAT); }  arg5 = *argp5;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addArc",6,SWIGTYPE_p_CreEPS_FLOAT); }  arg6 = *argp6; (arg1)->addArc(arg2,arg3,arg4,arg5,arg6);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_addArcN(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT arg4 ; CreEPS_FLOAT arg5 ; CreEPS_FLOAT arg6 ; CreEPS_FLOAT *argp2 ;
    CreEPS_FLOAT *argp3 ; CreEPS_FLOAT *argp4 ; CreEPS_FLOAT *argp5 ; CreEPS_FLOAT *argp6 ;
    SWIG_check_num_args("ns_creeps::CreEPS::addArcN",6,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::addArcN",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::addArcN",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::addArcN",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::addArcN",4,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ns_creeps::CreEPS::addArcN",5,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,6)) SWIG_fail_arg("ns_creeps::CreEPS::addArcN",6,"CreEPS_FLOAT const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_addArcN",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addArcN",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addArcN",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addArcN",4,SWIGTYPE_p_CreEPS_FLOAT); }  arg4 = *argp4;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addArcN",5,SWIGTYPE_p_CreEPS_FLOAT); }  arg5 = *argp5;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addArcN",6,SWIGTYPE_p_CreEPS_FLOAT); }  arg6 = *argp6; (arg1)->addArcN(arg2,arg3,arg4,arg5,arg6);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_addCircle(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT arg4 ; CreEPS_FLOAT *argp2 ; CreEPS_FLOAT *argp3 ;
    CreEPS_FLOAT *argp4 ; SWIG_check_num_args("ns_creeps::CreEPS::addCircle",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::addCircle",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::addCircle",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::addCircle",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::addCircle",4,"CreEPS_FLOAT const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_addCircle",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addCircle",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addCircle",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addCircle",4,SWIGTYPE_p_CreEPS_FLOAT); }  arg4 = *argp4; (arg1)->addCircle(arg2,arg3,arg4);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_addEllipseArc__SWIG_0(lua_State* L) { { int SWIG_arg = 0;
    ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ; CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT arg4 ;
    CreEPS_FLOAT arg5 ; CreEPS_FLOAT arg6 ; CreEPS_FLOAT arg7 ; CreEPS_FLOAT arg8 ; CreEPS_FLOAT *argp2 ; CreEPS_FLOAT *argp3 ;
    CreEPS_FLOAT *argp4 ; CreEPS_FLOAT *argp5 ; CreEPS_FLOAT *argp6 ; CreEPS_FLOAT *argp7 ; CreEPS_FLOAT *argp8 ;
    SWIG_check_num_args("ns_creeps::CreEPS::addEllipseArc",8,8)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::addEllipseArc",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::addEllipseArc",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::addEllipseArc",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::addEllipseArc",4,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ns_creeps::CreEPS::addEllipseArc",5,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,6)) SWIG_fail_arg("ns_creeps::CreEPS::addEllipseArc",6,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,7)) SWIG_fail_arg("ns_creeps::CreEPS::addEllipseArc",7,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,8)) SWIG_fail_arg("ns_creeps::CreEPS::addEllipseArc",8,"CreEPS_FLOAT const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_addEllipseArc",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addEllipseArc",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addEllipseArc",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addEllipseArc",4,SWIGTYPE_p_CreEPS_FLOAT); }  arg4 = *argp4;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addEllipseArc",5,SWIGTYPE_p_CreEPS_FLOAT); }  arg5 = *argp5;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addEllipseArc",6,SWIGTYPE_p_CreEPS_FLOAT); }  arg6 = *argp6;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addEllipseArc",7,SWIGTYPE_p_CreEPS_FLOAT); }  arg7 = *argp7;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addEllipseArc",8,SWIGTYPE_p_CreEPS_FLOAT); }  arg8 = *argp8;
    (arg1)->addEllipseArc(arg2,arg3,arg4,arg5,arg6,arg7,arg8); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_addEllipseArc__SWIG_1(lua_State* L) { { int SWIG_arg = 0;
    ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ; CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT arg4 ;
    CreEPS_FLOAT arg5 ; CreEPS_FLOAT arg6 ; CreEPS_FLOAT arg7 ; CreEPS_FLOAT *argp2 ; CreEPS_FLOAT *argp3 ;
    CreEPS_FLOAT *argp4 ; CreEPS_FLOAT *argp5 ; CreEPS_FLOAT *argp6 ; CreEPS_FLOAT *argp7 ;
    SWIG_check_num_args("ns_creeps::CreEPS::addEllipseArc",7,7)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::addEllipseArc",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::addEllipseArc",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::addEllipseArc",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::addEllipseArc",4,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ns_creeps::CreEPS::addEllipseArc",5,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,6)) SWIG_fail_arg("ns_creeps::CreEPS::addEllipseArc",6,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,7)) SWIG_fail_arg("ns_creeps::CreEPS::addEllipseArc",7,"CreEPS_FLOAT const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_addEllipseArc",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addEllipseArc",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addEllipseArc",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addEllipseArc",4,SWIGTYPE_p_CreEPS_FLOAT); }  arg4 = *argp4;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addEllipseArc",5,SWIGTYPE_p_CreEPS_FLOAT); }  arg5 = *argp5;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addEllipseArc",6,SWIGTYPE_p_CreEPS_FLOAT); }  arg6 = *argp6;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addEllipseArc",7,SWIGTYPE_p_CreEPS_FLOAT); }  arg7 = *argp7;
    (arg1)->addEllipseArc(arg2,arg3,arg4,arg5,arg6,arg7); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_addEllipseArc(lua_State* L) { int argc; int argv[9]={ 1,2,3,4,5,6,7,8,9} ; argc = lua_gettop(L);
  if (argc == 7) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                  _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                    _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CreEPS_addEllipseArc__SWIG_1(L);}  }  }  }  }  }  }  }
   if (argc == 8) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                  _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                    _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                      _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CreEPS_addEllipseArc__SWIG_0(L);}  }  }  }  }  }  }
       }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CreEPS_addEllipseArc'\n"
  "  Possible C/C++ prototypes are:\n"
  "    ns_creeps::CreEPS::addEllipseArc(CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const)\n"
  "    ns_creeps::CreEPS::addEllipseArc(CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const)\n");
  lua_error(L);return 0; }
static int _wrap_CreEPS_addEllipseArcN__SWIG_0(lua_State* L) { { int SWIG_arg = 0;
    ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ; CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT arg4 ;
    CreEPS_FLOAT arg5 ; CreEPS_FLOAT arg6 ; CreEPS_FLOAT arg7 ; CreEPS_FLOAT arg8 ; CreEPS_FLOAT *argp2 ; CreEPS_FLOAT *argp3 ;
    CreEPS_FLOAT *argp4 ; CreEPS_FLOAT *argp5 ; CreEPS_FLOAT *argp6 ; CreEPS_FLOAT *argp7 ; CreEPS_FLOAT *argp8 ;
    SWIG_check_num_args("ns_creeps::CreEPS::addEllipseArcN",8,8)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::addEllipseArcN",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::addEllipseArcN",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::addEllipseArcN",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::addEllipseArcN",4,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ns_creeps::CreEPS::addEllipseArcN",5,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,6)) SWIG_fail_arg("ns_creeps::CreEPS::addEllipseArcN",6,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,7)) SWIG_fail_arg("ns_creeps::CreEPS::addEllipseArcN",7,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,8)) SWIG_fail_arg("ns_creeps::CreEPS::addEllipseArcN",8,"CreEPS_FLOAT const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_addEllipseArcN",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addEllipseArcN",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addEllipseArcN",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addEllipseArcN",4,SWIGTYPE_p_CreEPS_FLOAT); }  arg4 = *argp4;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addEllipseArcN",5,SWIGTYPE_p_CreEPS_FLOAT); }  arg5 = *argp5;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addEllipseArcN",6,SWIGTYPE_p_CreEPS_FLOAT); }  arg6 = *argp6;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addEllipseArcN",7,SWIGTYPE_p_CreEPS_FLOAT); }  arg7 = *argp7;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addEllipseArcN",8,SWIGTYPE_p_CreEPS_FLOAT); }  arg8 = *argp8;
    (arg1)->addEllipseArcN(arg2,arg3,arg4,arg5,arg6,arg7,arg8); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_addEllipseArcN__SWIG_1(lua_State* L) { { int SWIG_arg = 0;
    ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ; CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT arg4 ;
    CreEPS_FLOAT arg5 ; CreEPS_FLOAT arg6 ; CreEPS_FLOAT arg7 ; CreEPS_FLOAT *argp2 ; CreEPS_FLOAT *argp3 ;
    CreEPS_FLOAT *argp4 ; CreEPS_FLOAT *argp5 ; CreEPS_FLOAT *argp6 ; CreEPS_FLOAT *argp7 ;
    SWIG_check_num_args("ns_creeps::CreEPS::addEllipseArcN",7,7)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::addEllipseArcN",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::addEllipseArcN",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::addEllipseArcN",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::addEllipseArcN",4,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ns_creeps::CreEPS::addEllipseArcN",5,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,6)) SWIG_fail_arg("ns_creeps::CreEPS::addEllipseArcN",6,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,7)) SWIG_fail_arg("ns_creeps::CreEPS::addEllipseArcN",7,"CreEPS_FLOAT const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_addEllipseArcN",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addEllipseArcN",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addEllipseArcN",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addEllipseArcN",4,SWIGTYPE_p_CreEPS_FLOAT); }  arg4 = *argp4;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addEllipseArcN",5,SWIGTYPE_p_CreEPS_FLOAT); }  arg5 = *argp5;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addEllipseArcN",6,SWIGTYPE_p_CreEPS_FLOAT); }  arg6 = *argp6;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addEllipseArcN",7,SWIGTYPE_p_CreEPS_FLOAT); }  arg7 = *argp7;
    (arg1)->addEllipseArcN(arg2,arg3,arg4,arg5,arg6,arg7); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_addEllipseArcN(lua_State* L) { int argc; int argv[9]={ 1,2,3,4,5,6,7,8,9} ; argc = lua_gettop(L);
  if (argc == 7) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                  _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                    _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CreEPS_addEllipseArcN__SWIG_1(L);}  }  }  }  }  }  }
     }  if (argc == 8) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                  _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                    _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                      _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CreEPS_addEllipseArcN__SWIG_0(L);}  }  }  }  }  }  }
       }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CreEPS_addEllipseArcN'\n"
  "  Possible C/C++ prototypes are:\n"
  "    ns_creeps::CreEPS::addEllipseArcN(CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const)\n"
  "    ns_creeps::CreEPS::addEllipseArcN(CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const)\n");
  lua_error(L);return 0; }
static int _wrap_CreEPS_addEllipse__SWIG_0(lua_State* L) { { int SWIG_arg = 0;
    ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ; CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT arg4 ;
    CreEPS_FLOAT arg5 ; CreEPS_FLOAT arg6 ; CreEPS_FLOAT *argp2 ; CreEPS_FLOAT *argp3 ; CreEPS_FLOAT *argp4 ;
    CreEPS_FLOAT *argp5 ; CreEPS_FLOAT *argp6 ; SWIG_check_num_args("ns_creeps::CreEPS::addEllipse",6,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::addEllipse",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::addEllipse",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::addEllipse",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::addEllipse",4,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ns_creeps::CreEPS::addEllipse",5,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,6)) SWIG_fail_arg("ns_creeps::CreEPS::addEllipse",6,"CreEPS_FLOAT const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_addEllipse",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addEllipse",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addEllipse",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addEllipse",4,SWIGTYPE_p_CreEPS_FLOAT); }  arg4 = *argp4;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addEllipse",5,SWIGTYPE_p_CreEPS_FLOAT); }  arg5 = *argp5;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addEllipse",6,SWIGTYPE_p_CreEPS_FLOAT); }  arg6 = *argp6;
    (arg1)->addEllipse(arg2,arg3,arg4,arg5,arg6); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_addEllipse__SWIG_1(lua_State* L) { { int SWIG_arg = 0;
    ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ; CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT arg4 ;
    CreEPS_FLOAT arg5 ; CreEPS_FLOAT *argp2 ; CreEPS_FLOAT *argp3 ; CreEPS_FLOAT *argp4 ; CreEPS_FLOAT *argp5 ;
    SWIG_check_num_args("ns_creeps::CreEPS::addEllipse",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::addEllipse",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::addEllipse",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::addEllipse",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::addEllipse",4,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ns_creeps::CreEPS::addEllipse",5,"CreEPS_FLOAT const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_addEllipse",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addEllipse",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addEllipse",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addEllipse",4,SWIGTYPE_p_CreEPS_FLOAT); }  arg4 = *argp4;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addEllipse",5,SWIGTYPE_p_CreEPS_FLOAT); }  arg5 = *argp5; (arg1)->addEllipse(arg2,arg3,arg4,arg5);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_addEllipse(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L);
  if (argc == 5) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CreEPS_addEllipse__SWIG_1(L);}  }  }  }  }  } 
  if (argc == 6) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                  _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CreEPS_addEllipse__SWIG_0(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CreEPS_addEllipse'\n" "  Possible C/C++ prototypes are:\n"
  "    ns_creeps::CreEPS::addEllipse(CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const)\n"
  "    ns_creeps::CreEPS::addEllipse(CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const)\n");
  lua_error(L);return 0; }
static int _wrap_CreEPS_addArcT(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT arg4 ; CreEPS_FLOAT arg5 ; CreEPS_FLOAT arg6 ; CreEPS_FLOAT *argp2 ;
    CreEPS_FLOAT *argp3 ; CreEPS_FLOAT *argp4 ; CreEPS_FLOAT *argp5 ; CreEPS_FLOAT *argp6 ;
    SWIG_check_num_args("ns_creeps::CreEPS::addArcT",6,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::addArcT",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::addArcT",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::addArcT",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::addArcT",4,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ns_creeps::CreEPS::addArcT",5,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,6)) SWIG_fail_arg("ns_creeps::CreEPS::addArcT",6,"CreEPS_FLOAT const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_addArcT",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addArcT",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addArcT",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addArcT",4,SWIGTYPE_p_CreEPS_FLOAT); }  arg4 = *argp4;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addArcT",5,SWIGTYPE_p_CreEPS_FLOAT); }  arg5 = *argp5;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addArcT",6,SWIGTYPE_p_CreEPS_FLOAT); }  arg6 = *argp6; (arg1)->addArcT(arg2,arg3,arg4,arg5,arg6);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_addArcTLine(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT arg4 ; CreEPS_FLOAT arg5 ; CreEPS_FLOAT arg6 ; CreEPS_FLOAT *argp2 ;
    CreEPS_FLOAT *argp3 ; CreEPS_FLOAT *argp4 ; CreEPS_FLOAT *argp5 ; CreEPS_FLOAT *argp6 ;
    SWIG_check_num_args("ns_creeps::CreEPS::addArcTLine",6,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::addArcTLine",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::addArcTLine",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::addArcTLine",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::addArcTLine",4,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ns_creeps::CreEPS::addArcTLine",5,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,6)) SWIG_fail_arg("ns_creeps::CreEPS::addArcTLine",6,"CreEPS_FLOAT const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_addArcTLine",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addArcTLine",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addArcTLine",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addArcTLine",4,SWIGTYPE_p_CreEPS_FLOAT); }  arg4 = *argp4;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addArcTLine",5,SWIGTYPE_p_CreEPS_FLOAT); }  arg5 = *argp5;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addArcTLine",6,SWIGTYPE_p_CreEPS_FLOAT); }  arg6 = *argp6;
    (arg1)->addArcTLine(arg2,arg3,arg4,arg5,arg6); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_addCurve(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT arg4 ; CreEPS_FLOAT arg5 ; CreEPS_FLOAT arg6 ; CreEPS_FLOAT arg7 ;
    CreEPS_FLOAT *argp2 ; CreEPS_FLOAT *argp3 ; CreEPS_FLOAT *argp4 ; CreEPS_FLOAT *argp5 ; CreEPS_FLOAT *argp6 ;
    CreEPS_FLOAT *argp7 ; SWIG_check_num_args("ns_creeps::CreEPS::addCurve",7,7)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::addCurve",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::addCurve",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::addCurve",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::addCurve",4,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ns_creeps::CreEPS::addCurve",5,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,6)) SWIG_fail_arg("ns_creeps::CreEPS::addCurve",6,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,7)) SWIG_fail_arg("ns_creeps::CreEPS::addCurve",7,"CreEPS_FLOAT const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_addCurve",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addCurve",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addCurve",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addCurve",4,SWIGTYPE_p_CreEPS_FLOAT); }  arg4 = *argp4;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addCurve",5,SWIGTYPE_p_CreEPS_FLOAT); }  arg5 = *argp5;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addCurve",6,SWIGTYPE_p_CreEPS_FLOAT); }  arg6 = *argp6;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addCurve",7,SWIGTYPE_p_CreEPS_FLOAT); }  arg7 = *argp7;
    (arg1)->addCurve(arg2,arg3,arg4,arg5,arg6,arg7); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_addRelativeCurve(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT arg4 ; CreEPS_FLOAT arg5 ; CreEPS_FLOAT arg6 ; CreEPS_FLOAT arg7 ;
    CreEPS_FLOAT *argp2 ; CreEPS_FLOAT *argp3 ; CreEPS_FLOAT *argp4 ; CreEPS_FLOAT *argp5 ; CreEPS_FLOAT *argp6 ;
    CreEPS_FLOAT *argp7 ; SWIG_check_num_args("ns_creeps::CreEPS::addRelativeCurve",7,7)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::addRelativeCurve",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::addRelativeCurve",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::addRelativeCurve",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::addRelativeCurve",4,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ns_creeps::CreEPS::addRelativeCurve",5,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,6)) SWIG_fail_arg("ns_creeps::CreEPS::addRelativeCurve",6,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,7)) SWIG_fail_arg("ns_creeps::CreEPS::addRelativeCurve",7,"CreEPS_FLOAT const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_addRelativeCurve",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addRelativeCurve",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addRelativeCurve",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addRelativeCurve",4,SWIGTYPE_p_CreEPS_FLOAT); }  arg4 = *argp4;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addRelativeCurve",5,SWIGTYPE_p_CreEPS_FLOAT); }  arg5 = *argp5;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addRelativeCurve",6,SWIGTYPE_p_CreEPS_FLOAT); }  arg6 = *argp6;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_addRelativeCurve",7,SWIGTYPE_p_CreEPS_FLOAT); }  arg7 = *argp7;
    (arg1)->addRelativeCurve(arg2,arg3,arg4,arg5,arg6,arg7); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_line__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT arg4 ; CreEPS_FLOAT arg5 ; ns_creeps::CAt *arg6 = 0 ;
    CreEPS_FLOAT *argp2 ; CreEPS_FLOAT *argp3 ; CreEPS_FLOAT *argp4 ; CreEPS_FLOAT *argp5 ;
    SWIG_check_num_args("ns_creeps::CreEPS::line",6,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::line",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::line",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::line",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::line",4,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ns_creeps::CreEPS::line",5,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,6)) SWIG_fail_arg("ns_creeps::CreEPS::line",6,"ns_creeps::CAt const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_line",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_line",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_line",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_line",4,SWIGTYPE_p_CreEPS_FLOAT); }  arg4 = *argp4;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_line",5,SWIGTYPE_p_CreEPS_FLOAT); }  arg5 = *argp5;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("CreEPS_line",6,SWIGTYPE_p_ns_creeps__CAt); } 
    (arg1)->line(arg2,arg3,arg4,arg5,(ns_creeps::CAt const &)*arg6); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_CreEPS_line__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT arg4 ; CreEPS_FLOAT arg5 ; CreEPS_FLOAT *argp2 ; CreEPS_FLOAT *argp3 ;
    CreEPS_FLOAT *argp4 ; CreEPS_FLOAT *argp5 ; SWIG_check_num_args("ns_creeps::CreEPS::line",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::line",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::line",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::line",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::line",4,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ns_creeps::CreEPS::line",5,"CreEPS_FLOAT const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_line",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_line",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_line",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_line",4,SWIGTYPE_p_CreEPS_FLOAT); }  arg4 = *argp4;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_line",5,SWIGTYPE_p_CreEPS_FLOAT); }  arg5 = *argp5; (arg1)->line(arg2,arg3,arg4,arg5);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_line(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L); if (argc == 5) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CreEPS_line__SWIG_1(L);}  }  }  }  }  }  if (argc == 6) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_ns_creeps__CAt, SWIG_POINTER_NO_NULL)) {
                  _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CreEPS_line__SWIG_0(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CreEPS_line'\n" "  Possible C/C++ prototypes are:\n"
  "    ns_creeps::CreEPS::line(CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,ns_creeps::CAt const &)\n"
  "    ns_creeps::CreEPS::line(CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const)\n");
  lua_error(L);return 0; }
static int _wrap_CreEPS_rectStroke__SWIG_0(lua_State* L) { { int SWIG_arg = 0;
    ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ; CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT arg4 ;
    CreEPS_FLOAT arg5 ; ns_creeps::CAt *arg6 = 0 ; CreEPS_FLOAT *argp2 ; CreEPS_FLOAT *argp3 ; CreEPS_FLOAT *argp4 ;
    CreEPS_FLOAT *argp5 ; SWIG_check_num_args("ns_creeps::CreEPS::rectStroke",6,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::rectStroke",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::rectStroke",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::rectStroke",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::rectStroke",4,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ns_creeps::CreEPS::rectStroke",5,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,6)) SWIG_fail_arg("ns_creeps::CreEPS::rectStroke",6,"ns_creeps::CAt const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_rectStroke",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_rectStroke",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_rectStroke",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_rectStroke",4,SWIGTYPE_p_CreEPS_FLOAT); }  arg4 = *argp4;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_rectStroke",5,SWIGTYPE_p_CreEPS_FLOAT); }  arg5 = *argp5;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("CreEPS_rectStroke",6,SWIGTYPE_p_ns_creeps__CAt); } 
    (arg1)->rectStroke(arg2,arg3,arg4,arg5,(ns_creeps::CAt const &)*arg6); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_CreEPS_rectStroke__SWIG_1(lua_State* L) { { int SWIG_arg = 0;
    ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ; CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT arg4 ;
    CreEPS_FLOAT arg5 ; CreEPS_FLOAT *argp2 ; CreEPS_FLOAT *argp3 ; CreEPS_FLOAT *argp4 ; CreEPS_FLOAT *argp5 ;
    SWIG_check_num_args("ns_creeps::CreEPS::rectStroke",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::rectStroke",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::rectStroke",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::rectStroke",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::rectStroke",4,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ns_creeps::CreEPS::rectStroke",5,"CreEPS_FLOAT const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_rectStroke",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_rectStroke",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_rectStroke",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_rectStroke",4,SWIGTYPE_p_CreEPS_FLOAT); }  arg4 = *argp4;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_rectStroke",5,SWIGTYPE_p_CreEPS_FLOAT); }  arg5 = *argp5; (arg1)->rectStroke(arg2,arg3,arg4,arg5);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_rectStroke(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L);
  if (argc == 5) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CreEPS_rectStroke__SWIG_1(L);}  }  }  }  }  } 
  if (argc == 6) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_ns_creeps__CAt, SWIG_POINTER_NO_NULL)) {
                  _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CreEPS_rectStroke__SWIG_0(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CreEPS_rectStroke'\n" "  Possible C/C++ prototypes are:\n"
  "    ns_creeps::CreEPS::rectStroke(CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,ns_creeps::CAt const &)\n"
  "    ns_creeps::CreEPS::rectStroke(CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const)\n");
  lua_error(L);return 0; }
static int _wrap_CreEPS_rectFill__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT arg4 ; CreEPS_FLOAT arg5 ; ns_creeps::CAt *arg6 = 0 ;
    CreEPS_FLOAT *argp2 ; CreEPS_FLOAT *argp3 ; CreEPS_FLOAT *argp4 ; CreEPS_FLOAT *argp5 ;
    SWIG_check_num_args("ns_creeps::CreEPS::rectFill",6,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::rectFill",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::rectFill",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::rectFill",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::rectFill",4,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ns_creeps::CreEPS::rectFill",5,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,6)) SWIG_fail_arg("ns_creeps::CreEPS::rectFill",6,"ns_creeps::CAt const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_rectFill",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_rectFill",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_rectFill",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_rectFill",4,SWIGTYPE_p_CreEPS_FLOAT); }  arg4 = *argp4;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_rectFill",5,SWIGTYPE_p_CreEPS_FLOAT); }  arg5 = *argp5;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("CreEPS_rectFill",6,SWIGTYPE_p_ns_creeps__CAt); } 
    (arg1)->rectFill(arg2,arg3,arg4,arg5,(ns_creeps::CAt const &)*arg6); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_CreEPS_rectFill__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT arg4 ; CreEPS_FLOAT arg5 ; CreEPS_FLOAT *argp2 ; CreEPS_FLOAT *argp3 ;
    CreEPS_FLOAT *argp4 ; CreEPS_FLOAT *argp5 ; SWIG_check_num_args("ns_creeps::CreEPS::rectFill",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::rectFill",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::rectFill",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::rectFill",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::rectFill",4,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ns_creeps::CreEPS::rectFill",5,"CreEPS_FLOAT const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_rectFill",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_rectFill",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_rectFill",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_rectFill",4,SWIGTYPE_p_CreEPS_FLOAT); }  arg4 = *argp4;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_rectFill",5,SWIGTYPE_p_CreEPS_FLOAT); }  arg5 = *argp5; (arg1)->rectFill(arg2,arg3,arg4,arg5);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_rectFill(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L); if (argc == 5) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CreEPS_rectFill__SWIG_1(L);}  }  }  }  }  } 
  if (argc == 6) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_ns_creeps__CAt, SWIG_POINTER_NO_NULL)) {
                  _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CreEPS_rectFill__SWIG_0(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CreEPS_rectFill'\n" "  Possible C/C++ prototypes are:\n"
  "    ns_creeps::CreEPS::rectFill(CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,ns_creeps::CAt const &)\n"
  "    ns_creeps::CreEPS::rectFill(CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const)\n");
  lua_error(L);return 0; }
static int _wrap_CreEPS_curve__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT arg4 ; CreEPS_FLOAT arg5 ; CreEPS_FLOAT arg6 ; CreEPS_FLOAT arg7 ;
    CreEPS_FLOAT arg8 ; CreEPS_FLOAT arg9 ; ns_creeps::CAt *arg10 = 0 ; CreEPS_FLOAT *argp2 ; CreEPS_FLOAT *argp3 ;
    CreEPS_FLOAT *argp4 ; CreEPS_FLOAT *argp5 ; CreEPS_FLOAT *argp6 ; CreEPS_FLOAT *argp7 ; CreEPS_FLOAT *argp8 ;
    CreEPS_FLOAT *argp9 ; SWIG_check_num_args("ns_creeps::CreEPS::curve",10,10)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::curve",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::curve",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::curve",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::curve",4,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ns_creeps::CreEPS::curve",5,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,6)) SWIG_fail_arg("ns_creeps::CreEPS::curve",6,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,7)) SWIG_fail_arg("ns_creeps::CreEPS::curve",7,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,8)) SWIG_fail_arg("ns_creeps::CreEPS::curve",8,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,9)) SWIG_fail_arg("ns_creeps::CreEPS::curve",9,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,10)) SWIG_fail_arg("ns_creeps::CreEPS::curve",10,"ns_creeps::CAt const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_curve",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_curve",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_curve",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_curve",4,SWIGTYPE_p_CreEPS_FLOAT); }  arg4 = *argp4;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_curve",5,SWIGTYPE_p_CreEPS_FLOAT); }  arg5 = *argp5;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_curve",6,SWIGTYPE_p_CreEPS_FLOAT); }  arg6 = *argp6;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_curve",7,SWIGTYPE_p_CreEPS_FLOAT); }  arg7 = *argp7;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_curve",8,SWIGTYPE_p_CreEPS_FLOAT); }  arg8 = *argp8;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_curve",9,SWIGTYPE_p_CreEPS_FLOAT); }  arg9 = *argp9;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("CreEPS_curve",10,SWIGTYPE_p_ns_creeps__CAt); } 
    (arg1)->curve(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,(ns_creeps::CAt const &)*arg10); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CreEPS_curve__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT arg4 ; CreEPS_FLOAT arg5 ; CreEPS_FLOAT arg6 ; CreEPS_FLOAT arg7 ;
    CreEPS_FLOAT arg8 ; CreEPS_FLOAT arg9 ; CreEPS_FLOAT *argp2 ; CreEPS_FLOAT *argp3 ; CreEPS_FLOAT *argp4 ;
    CreEPS_FLOAT *argp5 ; CreEPS_FLOAT *argp6 ; CreEPS_FLOAT *argp7 ; CreEPS_FLOAT *argp8 ; CreEPS_FLOAT *argp9 ;
    SWIG_check_num_args("ns_creeps::CreEPS::curve",9,9)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::curve",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::curve",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::curve",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::curve",4,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ns_creeps::CreEPS::curve",5,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,6)) SWIG_fail_arg("ns_creeps::CreEPS::curve",6,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,7)) SWIG_fail_arg("ns_creeps::CreEPS::curve",7,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,8)) SWIG_fail_arg("ns_creeps::CreEPS::curve",8,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,9)) SWIG_fail_arg("ns_creeps::CreEPS::curve",9,"CreEPS_FLOAT const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_curve",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_curve",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_curve",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_curve",4,SWIGTYPE_p_CreEPS_FLOAT); }  arg4 = *argp4;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_curve",5,SWIGTYPE_p_CreEPS_FLOAT); }  arg5 = *argp5;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_curve",6,SWIGTYPE_p_CreEPS_FLOAT); }  arg6 = *argp6;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_curve",7,SWIGTYPE_p_CreEPS_FLOAT); }  arg7 = *argp7;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_curve",8,SWIGTYPE_p_CreEPS_FLOAT); }  arg8 = *argp8;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_curve",9,SWIGTYPE_p_CreEPS_FLOAT); }  arg9 = *argp9;
    (arg1)->curve(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_curve(lua_State* L) { int argc; int argv[11]={ 1,2,3,4,5,6,7,8,9,10,11} ; argc = lua_gettop(L);
  if (argc == 9) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                  _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                    _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                      _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                      if (lua_isuserdata(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CreEPS_curve__SWIG_1(L);}  }  }  }  }  }  }  }  }
     }  if (argc == 10) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                  _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                    _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                      _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                      if (lua_isuserdata(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                        if (lua_isuserdata(L,argv[9])==0 || SWIG_ConvertPtr(L,argv[9], (void **) &ptr, SWIGTYPE_p_ns_creeps__CAt, SWIG_POINTER_NO_NULL)) {
                          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CreEPS_curve__SWIG_0(L);}  }  }  }  }  }  }  }
         }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CreEPS_curve'\n"
  "  Possible C/C++ prototypes are:\n"
  "    ns_creeps::CreEPS::curve(CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,ns_creeps::CAt const &)\n"
  "    ns_creeps::CreEPS::curve(CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const)\n");
  lua_error(L);return 0; }
static int _wrap_CreEPS_arc__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT arg4 ; CreEPS_FLOAT arg5 ; CreEPS_FLOAT arg6 ;
    ns_creeps::CAt *arg7 = 0 ; CreEPS_FLOAT *argp2 ; CreEPS_FLOAT *argp3 ; CreEPS_FLOAT *argp4 ; CreEPS_FLOAT *argp5 ;
    CreEPS_FLOAT *argp6 ; SWIG_check_num_args("ns_creeps::CreEPS::arc",7,7)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::arc",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::arc",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::arc",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::arc",4,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ns_creeps::CreEPS::arc",5,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,6)) SWIG_fail_arg("ns_creeps::CreEPS::arc",6,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,7)) SWIG_fail_arg("ns_creeps::CreEPS::arc",7,"ns_creeps::CAt const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_arc",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_arc",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_arc",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_arc",4,SWIGTYPE_p_CreEPS_FLOAT); }  arg4 = *argp4;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_arc",5,SWIGTYPE_p_CreEPS_FLOAT); }  arg5 = *argp5;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_arc",6,SWIGTYPE_p_CreEPS_FLOAT); }  arg6 = *argp6;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("CreEPS_arc",7,SWIGTYPE_p_ns_creeps__CAt); } 
    (arg1)->arc(arg2,arg3,arg4,arg5,arg6,(ns_creeps::CAt const &)*arg7); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_CreEPS_arc__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT arg4 ; CreEPS_FLOAT arg5 ; CreEPS_FLOAT arg6 ; CreEPS_FLOAT *argp2 ;
    CreEPS_FLOAT *argp3 ; CreEPS_FLOAT *argp4 ; CreEPS_FLOAT *argp5 ; CreEPS_FLOAT *argp6 ;
    SWIG_check_num_args("ns_creeps::CreEPS::arc",6,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::arc",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::arc",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::arc",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::arc",4,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ns_creeps::CreEPS::arc",5,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,6)) SWIG_fail_arg("ns_creeps::CreEPS::arc",6,"CreEPS_FLOAT const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_arc",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_arc",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_arc",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_arc",4,SWIGTYPE_p_CreEPS_FLOAT); }  arg4 = *argp4;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_arc",5,SWIGTYPE_p_CreEPS_FLOAT); }  arg5 = *argp5;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_arc",6,SWIGTYPE_p_CreEPS_FLOAT); }  arg6 = *argp6; (arg1)->arc(arg2,arg3,arg4,arg5,arg6);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_arc(lua_State* L) { int argc; int argv[8]={ 1,2,3,4,5,6,7,8} ; argc = lua_gettop(L); if (argc == 6) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                  _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CreEPS_arc__SWIG_1(L);}  }  }  }  }  }  } 
  if (argc == 7) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                  _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_ns_creeps__CAt, SWIG_POINTER_NO_NULL)) {
                    _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CreEPS_arc__SWIG_0(L);}  }  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CreEPS_arc'\n" "  Possible C/C++ prototypes are:\n"
  "    ns_creeps::CreEPS::arc(CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,ns_creeps::CAt const &)\n"
  "    ns_creeps::CreEPS::arc(CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const)\n");
  lua_error(L);return 0; }
static int _wrap_CreEPS_circle__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT arg4 ; ns_creeps::CAt *arg5 = 0 ; CreEPS_FLOAT *argp2 ;
    CreEPS_FLOAT *argp3 ; CreEPS_FLOAT *argp4 ; SWIG_check_num_args("ns_creeps::CreEPS::circle",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::circle",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::circle",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::circle",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::circle",4,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ns_creeps::CreEPS::circle",5,"ns_creeps::CAt const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_circle",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_circle",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_circle",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_circle",4,SWIGTYPE_p_CreEPS_FLOAT); }  arg4 = *argp4;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("CreEPS_circle",5,SWIGTYPE_p_ns_creeps__CAt); } 
    (arg1)->circle(arg2,arg3,arg4,(ns_creeps::CAt const &)*arg5); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_circle__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT arg4 ; CreEPS_FLOAT *argp2 ; CreEPS_FLOAT *argp3 ;
    CreEPS_FLOAT *argp4 ; SWIG_check_num_args("ns_creeps::CreEPS::circle",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::circle",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::circle",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::circle",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::circle",4,"CreEPS_FLOAT const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_circle",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_circle",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_circle",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_circle",4,SWIGTYPE_p_CreEPS_FLOAT); }  arg4 = *argp4; (arg1)->circle(arg2,arg3,arg4);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_circle(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 4) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CreEPS_circle__SWIG_1(L);}  }  }  }  }  if (argc == 5) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ns_creeps__CAt, SWIG_POINTER_NO_NULL)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CreEPS_circle__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CreEPS_circle'\n" "  Possible C/C++ prototypes are:\n"
  "    ns_creeps::CreEPS::circle(CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,ns_creeps::CAt const &)\n"
  "    ns_creeps::CreEPS::circle(CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const)\n"); lua_error(L);return 0; }
static int _wrap_CreEPS_ellipseArc__SWIG_0(lua_State* L) { { int SWIG_arg = 0;
    ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ; CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT arg4 ;
    CreEPS_FLOAT arg5 ; CreEPS_FLOAT arg6 ; CreEPS_FLOAT arg7 ; ns_creeps::CAt *arg8 = 0 ; CreEPS_FLOAT *argp2 ;
    CreEPS_FLOAT *argp3 ; CreEPS_FLOAT *argp4 ; CreEPS_FLOAT *argp5 ; CreEPS_FLOAT *argp6 ; CreEPS_FLOAT *argp7 ;
    SWIG_check_num_args("ns_creeps::CreEPS::ellipseArc",8,8)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::ellipseArc",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::ellipseArc",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::ellipseArc",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::ellipseArc",4,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ns_creeps::CreEPS::ellipseArc",5,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,6)) SWIG_fail_arg("ns_creeps::CreEPS::ellipseArc",6,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,7)) SWIG_fail_arg("ns_creeps::CreEPS::ellipseArc",7,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,8)) SWIG_fail_arg("ns_creeps::CreEPS::ellipseArc",8,"ns_creeps::CAt const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_ellipseArc",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_ellipseArc",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_ellipseArc",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_ellipseArc",4,SWIGTYPE_p_CreEPS_FLOAT); }  arg4 = *argp4;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_ellipseArc",5,SWIGTYPE_p_CreEPS_FLOAT); }  arg5 = *argp5;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_ellipseArc",6,SWIGTYPE_p_CreEPS_FLOAT); }  arg6 = *argp6;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_ellipseArc",7,SWIGTYPE_p_CreEPS_FLOAT); }  arg7 = *argp7;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("CreEPS_ellipseArc",8,SWIGTYPE_p_ns_creeps__CAt); } 
    (arg1)->ellipseArc(arg2,arg3,arg4,arg5,arg6,arg7,(ns_creeps::CAt const &)*arg8); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CreEPS_ellipseArc__SWIG_1(lua_State* L) { { int SWIG_arg = 0;
    ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ; CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT arg4 ;
    CreEPS_FLOAT arg5 ; CreEPS_FLOAT arg6 ; CreEPS_FLOAT arg7 ; CreEPS_FLOAT *argp2 ; CreEPS_FLOAT *argp3 ;
    CreEPS_FLOAT *argp4 ; CreEPS_FLOAT *argp5 ; CreEPS_FLOAT *argp6 ; CreEPS_FLOAT *argp7 ;
    SWIG_check_num_args("ns_creeps::CreEPS::ellipseArc",7,7)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::ellipseArc",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::ellipseArc",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::ellipseArc",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::ellipseArc",4,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ns_creeps::CreEPS::ellipseArc",5,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,6)) SWIG_fail_arg("ns_creeps::CreEPS::ellipseArc",6,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,7)) SWIG_fail_arg("ns_creeps::CreEPS::ellipseArc",7,"CreEPS_FLOAT const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_ellipseArc",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_ellipseArc",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_ellipseArc",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_ellipseArc",4,SWIGTYPE_p_CreEPS_FLOAT); }  arg4 = *argp4;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_ellipseArc",5,SWIGTYPE_p_CreEPS_FLOAT); }  arg5 = *argp5;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_ellipseArc",6,SWIGTYPE_p_CreEPS_FLOAT); }  arg6 = *argp6;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_ellipseArc",7,SWIGTYPE_p_CreEPS_FLOAT); }  arg7 = *argp7;
    (arg1)->ellipseArc(arg2,arg3,arg4,arg5,arg6,arg7); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_ellipseArc__SWIG_2(lua_State* L) { { int SWIG_arg = 0;
    ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ; CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT arg4 ;
    CreEPS_FLOAT arg5 ; CreEPS_FLOAT arg6 ; CreEPS_FLOAT arg7 ; CreEPS_FLOAT arg8 ; ns_creeps::CAt *arg9 = 0 ;
    CreEPS_FLOAT *argp2 ; CreEPS_FLOAT *argp3 ; CreEPS_FLOAT *argp4 ; CreEPS_FLOAT *argp5 ; CreEPS_FLOAT *argp6 ;
    CreEPS_FLOAT *argp7 ; CreEPS_FLOAT *argp8 ; SWIG_check_num_args("ns_creeps::CreEPS::ellipseArc",9,9)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::ellipseArc",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::ellipseArc",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::ellipseArc",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::ellipseArc",4,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ns_creeps::CreEPS::ellipseArc",5,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,6)) SWIG_fail_arg("ns_creeps::CreEPS::ellipseArc",6,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,7)) SWIG_fail_arg("ns_creeps::CreEPS::ellipseArc",7,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,8)) SWIG_fail_arg("ns_creeps::CreEPS::ellipseArc",8,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,9)) SWIG_fail_arg("ns_creeps::CreEPS::ellipseArc",9,"ns_creeps::CAt const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_ellipseArc",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_ellipseArc",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_ellipseArc",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_ellipseArc",4,SWIGTYPE_p_CreEPS_FLOAT); }  arg4 = *argp4;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_ellipseArc",5,SWIGTYPE_p_CreEPS_FLOAT); }  arg5 = *argp5;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_ellipseArc",6,SWIGTYPE_p_CreEPS_FLOAT); }  arg6 = *argp6;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_ellipseArc",7,SWIGTYPE_p_CreEPS_FLOAT); }  arg7 = *argp7;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_ellipseArc",8,SWIGTYPE_p_CreEPS_FLOAT); }  arg8 = *argp8;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("CreEPS_ellipseArc",9,SWIGTYPE_p_ns_creeps__CAt); } 
    (arg1)->ellipseArc(arg2,arg3,arg4,arg5,arg6,arg7,arg8,(ns_creeps::CAt const &)*arg9); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CreEPS_ellipseArc__SWIG_3(lua_State* L) { { int SWIG_arg = 0;
    ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ; CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT arg4 ;
    CreEPS_FLOAT arg5 ; CreEPS_FLOAT arg6 ; CreEPS_FLOAT arg7 ; CreEPS_FLOAT arg8 ; CreEPS_FLOAT *argp2 ; CreEPS_FLOAT *argp3 ;
    CreEPS_FLOAT *argp4 ; CreEPS_FLOAT *argp5 ; CreEPS_FLOAT *argp6 ; CreEPS_FLOAT *argp7 ; CreEPS_FLOAT *argp8 ;
    SWIG_check_num_args("ns_creeps::CreEPS::ellipseArc",8,8)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::ellipseArc",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::ellipseArc",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::ellipseArc",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::ellipseArc",4,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ns_creeps::CreEPS::ellipseArc",5,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,6)) SWIG_fail_arg("ns_creeps::CreEPS::ellipseArc",6,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,7)) SWIG_fail_arg("ns_creeps::CreEPS::ellipseArc",7,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,8)) SWIG_fail_arg("ns_creeps::CreEPS::ellipseArc",8,"CreEPS_FLOAT const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_ellipseArc",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_ellipseArc",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_ellipseArc",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_ellipseArc",4,SWIGTYPE_p_CreEPS_FLOAT); }  arg4 = *argp4;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_ellipseArc",5,SWIGTYPE_p_CreEPS_FLOAT); }  arg5 = *argp5;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_ellipseArc",6,SWIGTYPE_p_CreEPS_FLOAT); }  arg6 = *argp6;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_ellipseArc",7,SWIGTYPE_p_CreEPS_FLOAT); }  arg7 = *argp7;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_ellipseArc",8,SWIGTYPE_p_CreEPS_FLOAT); }  arg8 = *argp8;
    (arg1)->ellipseArc(arg2,arg3,arg4,arg5,arg6,arg7,arg8); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_ellipseArc(lua_State* L) { int argc; int argv[10]={ 1,2,3,4,5,6,7,8,9,10} ; argc = lua_gettop(L);
  if (argc == 7) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                  _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                    _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CreEPS_ellipseArc__SWIG_1(L);}  }  }  }  }  }  }  } 
  if (argc == 8) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                  _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                    _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_ns_creeps__CAt, SWIG_POINTER_NO_NULL)) {
                      _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CreEPS_ellipseArc__SWIG_0(L);}  }  }  }  }  }  }  }
     }  if (argc == 8) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                  _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                    _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                      _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CreEPS_ellipseArc__SWIG_3(L);}  }  }  }  }  }  }  }
     }  if (argc == 9) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                  _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                    _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                      _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                      if (lua_isuserdata(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_p_ns_creeps__CAt, SWIG_POINTER_NO_NULL)) {
                        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CreEPS_ellipseArc__SWIG_2(L);}  }  }  }  }  }  }
         }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CreEPS_ellipseArc'\n"
  "  Possible C/C++ prototypes are:\n"
  "    ns_creeps::CreEPS::ellipseArc(CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,ns_creeps::CAt const &)\n"
  "    ns_creeps::CreEPS::ellipseArc(CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const)\n"
  "    ns_creeps::CreEPS::ellipseArc(CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,ns_creeps::CAt const &)\n"
  "    ns_creeps::CreEPS::ellipseArc(CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const)\n");
  lua_error(L);return 0; }
static int _wrap_CreEPS_ellipse__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT arg4 ; CreEPS_FLOAT arg5 ; ns_creeps::CAt *arg6 = 0 ;
    CreEPS_FLOAT *argp2 ; CreEPS_FLOAT *argp3 ; CreEPS_FLOAT *argp4 ; CreEPS_FLOAT *argp5 ;
    SWIG_check_num_args("ns_creeps::CreEPS::ellipse",6,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::ellipse",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::ellipse",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::ellipse",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::ellipse",4,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ns_creeps::CreEPS::ellipse",5,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,6)) SWIG_fail_arg("ns_creeps::CreEPS::ellipse",6,"ns_creeps::CAt const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_ellipse",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_ellipse",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_ellipse",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_ellipse",4,SWIGTYPE_p_CreEPS_FLOAT); }  arg4 = *argp4;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_ellipse",5,SWIGTYPE_p_CreEPS_FLOAT); }  arg5 = *argp5;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("CreEPS_ellipse",6,SWIGTYPE_p_ns_creeps__CAt); } 
    (arg1)->ellipse(arg2,arg3,arg4,arg5,(ns_creeps::CAt const &)*arg6); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_CreEPS_ellipse__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT arg4 ; CreEPS_FLOAT arg5 ; CreEPS_FLOAT *argp2 ; CreEPS_FLOAT *argp3 ;
    CreEPS_FLOAT *argp4 ; CreEPS_FLOAT *argp5 ; SWIG_check_num_args("ns_creeps::CreEPS::ellipse",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::ellipse",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::ellipse",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::ellipse",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::ellipse",4,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ns_creeps::CreEPS::ellipse",5,"CreEPS_FLOAT const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_ellipse",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_ellipse",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_ellipse",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_ellipse",4,SWIGTYPE_p_CreEPS_FLOAT); }  arg4 = *argp4;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_ellipse",5,SWIGTYPE_p_CreEPS_FLOAT); }  arg5 = *argp5; (arg1)->ellipse(arg2,arg3,arg4,arg5);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_ellipse__SWIG_2(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT arg4 ; CreEPS_FLOAT arg5 ; CreEPS_FLOAT arg6 ;
    ns_creeps::CAt *arg7 = 0 ; CreEPS_FLOAT *argp2 ; CreEPS_FLOAT *argp3 ; CreEPS_FLOAT *argp4 ; CreEPS_FLOAT *argp5 ;
    CreEPS_FLOAT *argp6 ; SWIG_check_num_args("ns_creeps::CreEPS::ellipse",7,7)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::ellipse",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::ellipse",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::ellipse",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::ellipse",4,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ns_creeps::CreEPS::ellipse",5,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,6)) SWIG_fail_arg("ns_creeps::CreEPS::ellipse",6,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,7)) SWIG_fail_arg("ns_creeps::CreEPS::ellipse",7,"ns_creeps::CAt const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_ellipse",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_ellipse",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_ellipse",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_ellipse",4,SWIGTYPE_p_CreEPS_FLOAT); }  arg4 = *argp4;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_ellipse",5,SWIGTYPE_p_CreEPS_FLOAT); }  arg5 = *argp5;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_ellipse",6,SWIGTYPE_p_CreEPS_FLOAT); }  arg6 = *argp6;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("CreEPS_ellipse",7,SWIGTYPE_p_ns_creeps__CAt); } 
    (arg1)->ellipse(arg2,arg3,arg4,arg5,arg6,(ns_creeps::CAt const &)*arg7); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_CreEPS_ellipse__SWIG_3(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT arg4 ; CreEPS_FLOAT arg5 ; CreEPS_FLOAT arg6 ; CreEPS_FLOAT *argp2 ;
    CreEPS_FLOAT *argp3 ; CreEPS_FLOAT *argp4 ; CreEPS_FLOAT *argp5 ; CreEPS_FLOAT *argp6 ;
    SWIG_check_num_args("ns_creeps::CreEPS::ellipse",6,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::ellipse",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::ellipse",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::ellipse",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::ellipse",4,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ns_creeps::CreEPS::ellipse",5,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,6)) SWIG_fail_arg("ns_creeps::CreEPS::ellipse",6,"CreEPS_FLOAT const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_ellipse",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_ellipse",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_ellipse",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_ellipse",4,SWIGTYPE_p_CreEPS_FLOAT); }  arg4 = *argp4;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_ellipse",5,SWIGTYPE_p_CreEPS_FLOAT); }  arg5 = *argp5;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_ellipse",6,SWIGTYPE_p_CreEPS_FLOAT); }  arg6 = *argp6; (arg1)->ellipse(arg2,arg3,arg4,arg5,arg6);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_ellipse(lua_State* L) { int argc; int argv[8]={ 1,2,3,4,5,6,7,8} ; argc = lua_gettop(L);
  if (argc == 5) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CreEPS_ellipse__SWIG_1(L);}  }  }  }  }  } 
  if (argc == 6) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_ns_creeps__CAt, SWIG_POINTER_NO_NULL)) {
                  _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CreEPS_ellipse__SWIG_0(L);}  }  }  }  }  }  } 
  if (argc == 6) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                  _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CreEPS_ellipse__SWIG_3(L);}  }  }  }  }  }  } 
  if (argc == 7) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                  _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_ns_creeps__CAt, SWIG_POINTER_NO_NULL)) {
                    _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CreEPS_ellipse__SWIG_2(L);}  }  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CreEPS_ellipse'\n" "  Possible C/C++ prototypes are:\n"
  "    ns_creeps::CreEPS::ellipse(CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,ns_creeps::CAt const &)\n"
  "    ns_creeps::CreEPS::ellipse(CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const)\n"
  "    ns_creeps::CreEPS::ellipse(CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,ns_creeps::CAt const &)\n"
  "    ns_creeps::CreEPS::ellipse(CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const)\n");
  lua_error(L);return 0; }
static int _wrap_CreEPS_disk__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT arg4 ; ns_creeps::CAt *arg5 = 0 ; CreEPS_FLOAT *argp2 ;
    CreEPS_FLOAT *argp3 ; CreEPS_FLOAT *argp4 ; SWIG_check_num_args("ns_creeps::CreEPS::disk",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::disk",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::disk",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::disk",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::disk",4,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ns_creeps::CreEPS::disk",5,"ns_creeps::CAt const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_disk",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_disk",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_disk",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_disk",4,SWIGTYPE_p_CreEPS_FLOAT); }  arg4 = *argp4;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("CreEPS_disk",5,SWIGTYPE_p_ns_creeps__CAt); }  (arg1)->disk(arg2,arg3,arg4,(ns_creeps::CAt const &)*arg5);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_disk__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT arg4 ; CreEPS_FLOAT *argp2 ; CreEPS_FLOAT *argp3 ;
    CreEPS_FLOAT *argp4 ; SWIG_check_num_args("ns_creeps::CreEPS::disk",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::disk",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::disk",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::disk",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::disk",4,"CreEPS_FLOAT const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_disk",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_disk",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_disk",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_disk",4,SWIGTYPE_p_CreEPS_FLOAT); }  arg4 = *argp4; (arg1)->disk(arg2,arg3,arg4); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_disk(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 4) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CreEPS_disk__SWIG_1(L);}  }  }  }  }  if (argc == 5) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ns_creeps__CAt, SWIG_POINTER_NO_NULL)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CreEPS_disk__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CreEPS_disk'\n" "  Possible C/C++ prototypes are:\n"
  "    ns_creeps::CreEPS::disk(CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,ns_creeps::CAt const &)\n"
  "    ns_creeps::CreEPS::disk(CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const)\n"); lua_error(L);return 0; }
static int _wrap_CreEPS_print__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_CHAR *arg4 = (CreEPS_CHAR *) 0 ; ns_creeps::CAt *arg5 = 0 ;
    CreEPS_FLOAT *argp2 ; CreEPS_FLOAT *argp3 ; SWIG_check_num_args("ns_creeps::CreEPS::print",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::print",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::print",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::print",3,"CreEPS_FLOAT const");
    if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::print",4,"CreEPS_CHAR const *");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ns_creeps::CreEPS::print",5,"ns_creeps::CAt const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_print",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_print",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_print",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CreEPS_CHAR,0))){
      SWIG_fail_ptr("CreEPS_print",4,SWIGTYPE_p_CreEPS_CHAR); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("CreEPS_print",5,SWIGTYPE_p_ns_creeps__CAt); } 
    (arg1)->print(arg2,arg3,(CreEPS_CHAR const *)arg4,(ns_creeps::CAt const &)*arg5); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CreEPS_print__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_CHAR *arg4 = (CreEPS_CHAR *) 0 ; CreEPS_FLOAT *argp2 ; CreEPS_FLOAT *argp3 ;
    SWIG_check_num_args("ns_creeps::CreEPS::print",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::print",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::print",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::print",3,"CreEPS_FLOAT const");
    if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::print",4,"CreEPS_CHAR const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_print",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_print",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_print",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CreEPS_CHAR,0))){
      SWIG_fail_ptr("CreEPS_print",4,SWIGTYPE_p_CreEPS_CHAR); }  (arg1)->print(arg2,arg3,(CreEPS_CHAR const *)arg4);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_print__SWIG_2(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT arg4 ; CreEPS_CHAR *arg5 = (CreEPS_CHAR *) 0 ;
    ns_creeps::CAt *arg6 = 0 ; CreEPS_FLOAT *argp2 ; CreEPS_FLOAT *argp3 ; CreEPS_FLOAT *argp4 ;
    SWIG_check_num_args("ns_creeps::CreEPS::print",6,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::print",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::print",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::print",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::print",4,"CreEPS_FLOAT const");
    if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ns_creeps::CreEPS::print",5,"CreEPS_CHAR const *");
    if(!lua_isuserdata(L,6)) SWIG_fail_arg("ns_creeps::CreEPS::print",6,"ns_creeps::CAt const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_print",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_print",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_print",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_print",4,SWIGTYPE_p_CreEPS_FLOAT); }  arg4 = *argp4;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_CreEPS_CHAR,0))){
      SWIG_fail_ptr("CreEPS_print",5,SWIGTYPE_p_CreEPS_CHAR); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("CreEPS_print",6,SWIGTYPE_p_ns_creeps__CAt); } 
    (arg1)->print(arg2,arg3,arg4,(CreEPS_CHAR const *)arg5,(ns_creeps::CAt const &)*arg6); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CreEPS_print__SWIG_3(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT arg4 ; CreEPS_CHAR *arg5 = (CreEPS_CHAR *) 0 ; CreEPS_FLOAT *argp2 ;
    CreEPS_FLOAT *argp3 ; CreEPS_FLOAT *argp4 ; SWIG_check_num_args("ns_creeps::CreEPS::print",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::print",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::print",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::print",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::print",4,"CreEPS_FLOAT const");
    if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ns_creeps::CreEPS::print",5,"CreEPS_CHAR const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_print",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_print",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_print",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_print",4,SWIGTYPE_p_CreEPS_FLOAT); }  arg4 = *argp4;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_CreEPS_CHAR,0))){
      SWIG_fail_ptr("CreEPS_print",5,SWIGTYPE_p_CreEPS_CHAR); }  (arg1)->print(arg2,arg3,arg4,(CreEPS_CHAR const *)arg5);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_print(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L); if (argc == 4) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CreEPS_CHAR, 0)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CreEPS_print__SWIG_1(L);}  }  }  }  }  if (argc == 5) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CreEPS_CHAR, 0)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ns_creeps__CAt, SWIG_POINTER_NO_NULL)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CreEPS_print__SWIG_0(L);}  }  }  }  }  } 
  if (argc == 5) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_CreEPS_CHAR, 0)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CreEPS_print__SWIG_3(L);}  }  }  }  }  } 
  if (argc == 6) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_CreEPS_CHAR, 0)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_ns_creeps__CAt, SWIG_POINTER_NO_NULL)) {
                  _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CreEPS_print__SWIG_2(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CreEPS_print'\n" "  Possible C/C++ prototypes are:\n"
  "    ns_creeps::CreEPS::print(CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_CHAR const *,ns_creeps::CAt const &)\n"
  "    ns_creeps::CreEPS::print(CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_CHAR const *)\n"
  "    ns_creeps::CreEPS::print(CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_CHAR const *,ns_creeps::CAt const &)\n"
  "    ns_creeps::CreEPS::print(CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_CHAR const *)\n");
  lua_error(L);return 0; }
static int _wrap_CreEPS_printf__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    ns_creeps::CAt *arg2 = 0 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT arg4 ; CreEPS_CHAR *arg5 = (CreEPS_CHAR *) 0 ; void *arg6 = 0 ;
    CreEPS_FLOAT *argp3 ; CreEPS_FLOAT *argp4 ; SWIG_check_num_args("ns_creeps::CreEPS::printf",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::printf",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::printf",2,"ns_creeps::CAt const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::printf",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::printf",4,"CreEPS_FLOAT const");
    if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ns_creeps::CreEPS::printf",5,"CreEPS_CHAR const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_printf",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("CreEPS_printf",2,SWIGTYPE_p_ns_creeps__CAt); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_printf",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_printf",4,SWIGTYPE_p_CreEPS_FLOAT); }  arg4 = *argp4;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_CreEPS_CHAR,0))){
      SWIG_fail_ptr("CreEPS_printf",5,SWIGTYPE_p_CreEPS_CHAR); } 
    (arg1)->printf((ns_creeps::CAt const &)*arg2,arg3,arg4,(CreEPS_CHAR const *)arg5,arg6); return SWIG_arg; fail: SWIGUNUSED; }
   lua_error(L); return 0; }
static int _wrap_CreEPS_printf__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    ns_creeps::CAt *arg2 = 0 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT arg4 ; CreEPS_FLOAT arg5 ;
    CreEPS_CHAR *arg6 = (CreEPS_CHAR *) 0 ; void *arg7 = 0 ; CreEPS_FLOAT *argp3 ; CreEPS_FLOAT *argp4 ; CreEPS_FLOAT *argp5 ;
    SWIG_check_num_args("ns_creeps::CreEPS::printf",6,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::printf",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::printf",2,"ns_creeps::CAt const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::printf",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::printf",4,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ns_creeps::CreEPS::printf",5,"CreEPS_FLOAT const");
    if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ns_creeps::CreEPS::printf",6,"CreEPS_CHAR const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_printf",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("CreEPS_printf",2,SWIGTYPE_p_ns_creeps__CAt); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_printf",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_printf",4,SWIGTYPE_p_CreEPS_FLOAT); }  arg4 = *argp4;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_printf",5,SWIGTYPE_p_CreEPS_FLOAT); }  arg5 = *argp5;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_CreEPS_CHAR,0))){
      SWIG_fail_ptr("CreEPS_printf",6,SWIGTYPE_p_CreEPS_CHAR); } 
    (arg1)->printf((ns_creeps::CAt const &)*arg2,arg3,arg4,arg5,(CreEPS_CHAR const *)arg6,arg7); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_printf__SWIG_2(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_CHAR *arg4 = (CreEPS_CHAR *) 0 ; void *arg5 = 0 ; CreEPS_FLOAT *argp2 ;
    CreEPS_FLOAT *argp3 ; SWIG_check_num_args("ns_creeps::CreEPS::printf",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::printf",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::printf",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::printf",3,"CreEPS_FLOAT const");
    if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::printf",4,"CreEPS_CHAR const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_printf",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_printf",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_printf",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_CreEPS_CHAR,0))){
      SWIG_fail_ptr("CreEPS_printf",4,SWIGTYPE_p_CreEPS_CHAR); }  (arg1)->printf(arg2,arg3,(CreEPS_CHAR const *)arg4,arg5);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_printf__SWIG_3(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT arg4 ; CreEPS_CHAR *arg5 = (CreEPS_CHAR *) 0 ; void *arg6 = 0 ;
    CreEPS_FLOAT *argp2 ; CreEPS_FLOAT *argp3 ; CreEPS_FLOAT *argp4 ; SWIG_check_num_args("ns_creeps::CreEPS::printf",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::printf",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::printf",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::printf",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::printf",4,"CreEPS_FLOAT const");
    if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ns_creeps::CreEPS::printf",5,"CreEPS_CHAR const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_printf",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_printf",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_printf",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_printf",4,SWIGTYPE_p_CreEPS_FLOAT); }  arg4 = *argp4;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_CreEPS_CHAR,0))){
      SWIG_fail_ptr("CreEPS_printf",5,SWIGTYPE_p_CreEPS_CHAR); }  (arg1)->printf(arg2,arg3,arg4,(CreEPS_CHAR const *)arg5,arg6);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_printf(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L); if (argc == 4) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CreEPS_CHAR, 0)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { if (argc <= 4) { return _wrap_CreEPS_printf__SWIG_2(L);} 
            return _wrap_CreEPS_printf__SWIG_2(L);}  }  }  }  }  if (argc == 5) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ns_creeps__CAt, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_CreEPS_CHAR, 0)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { if (argc <= 5) { return _wrap_CreEPS_printf__SWIG_0(L);} 
              return _wrap_CreEPS_printf__SWIG_0(L);}  }  }  }  }  }  if (argc == 5) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_CreEPS_CHAR, 0)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { if (argc <= 5) { return _wrap_CreEPS_printf__SWIG_3(L);} 
              return _wrap_CreEPS_printf__SWIG_3(L);}  }  }  }  }  }  if (argc == 6) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ns_creeps__CAt, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_CreEPS_CHAR, 0)) {
                  _v = 0; }  else { _v = 1; }  }  if (_v) { if (argc <= 6) { return _wrap_CreEPS_printf__SWIG_1(L);} 
                return _wrap_CreEPS_printf__SWIG_1(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CreEPS_printf'\n" "  Possible C/C++ prototypes are:\n"
  "    ns_creeps::CreEPS::printf(ns_creeps::CAt const &,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_CHAR const *,...)\n"
  "    ns_creeps::CreEPS::printf(ns_creeps::CAt const &,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_CHAR const *,...)\n"
  "    ns_creeps::CreEPS::printf(CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_CHAR const *,...)\n"
  "    ns_creeps::CreEPS::printf(CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_CHAR const *,...)\n");
  lua_error(L);return 0; }
static int _wrap_CreEPS_applyRotation(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    CreEPS_FLOAT arg2 ; CreEPS_FLOAT *argp2 ; SWIG_check_num_args("ns_creeps::CreEPS::applyRotation",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::applyRotation",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::applyRotation",2,"CreEPS_FLOAT const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_applyRotation",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_applyRotation",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2; (arg1)->applyRotation(arg2);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_applyTranslation(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT *argp2 ; CreEPS_FLOAT *argp3 ;
    SWIG_check_num_args("ns_creeps::CreEPS::applyTranslation",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::applyTranslation",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::applyTranslation",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::applyTranslation",3,"CreEPS_FLOAT const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_applyTranslation",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_applyTranslation",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_applyTranslation",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3; (arg1)->applyTranslation(arg2,arg3);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_applyScaling__SWIG_0(lua_State* L) { { int SWIG_arg = 0;
    ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ; CreEPS_FLOAT arg2 ; CreEPS_FLOAT *argp2 ;
    SWIG_check_num_args("ns_creeps::CreEPS::applyScaling",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::applyScaling",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::applyScaling",2,"CreEPS_FLOAT const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_applyScaling",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_applyScaling",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2; (arg1)->applyScaling(arg2);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_applyScaling__SWIG_1(lua_State* L) { { int SWIG_arg = 0;
    ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ; CreEPS_FLOAT arg2 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT *argp2 ;
    CreEPS_FLOAT *argp3 ; SWIG_check_num_args("ns_creeps::CreEPS::applyScaling",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::applyScaling",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::applyScaling",2,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::applyScaling",3,"CreEPS_FLOAT const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_applyScaling",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_applyScaling",2,SWIGTYPE_p_CreEPS_FLOAT); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_applyScaling",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3; (arg1)->applyScaling(arg2,arg3);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_applyScaling(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CreEPS_applyScaling__SWIG_0(L);}  }  }  if (argc == 3) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CreEPS_applyScaling__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CreEPS_applyScaling'\n"
  "  Possible C/C++ prototypes are:\n" "    ns_creeps::CreEPS::applyScaling(CreEPS_FLOAT const)\n"
  "    ns_creeps::CreEPS::applyScaling(CreEPS_FLOAT const,CreEPS_FLOAT const)\n"); lua_error(L);return 0; }
static int _wrap_CreEPS_applyTransformation(lua_State* L) { { int SWIG_arg = 0;
    ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ; CreEPS_FLOAT (*arg2)[2] = (CreEPS_FLOAT (*)[2]) (CreEPS_FLOAT (*)[2])0 ;
    SWIG_check_num_args("ns_creeps::CreEPS::applyTransformation",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::applyTransformation",1,"ns_creeps::CreEPS *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::applyTransformation",2,"CreEPS_FLOAT const [3][2]");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_applyTransformation",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_a_2__CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_applyTransformation",2,SWIGTYPE_p_a_2__CreEPS_FLOAT); } 
    (arg1)->applyTransformation((CreEPS_FLOAT const (*)[2])arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_saveTransformation(lua_State* L) { { int SWIG_arg = 0;
    ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ; SWIG_check_num_args("ns_creeps::CreEPS::saveTransformation",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::saveTransformation",1,"ns_creeps::CreEPS *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_saveTransformation",1,SWIGTYPE_p_ns_creeps__CreEPS); }  (arg1)->saveTransformation();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_loadTransformation(lua_State* L) { { int SWIG_arg = 0;
    ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ; CreEPS_BOOL result;
    SWIG_check_num_args("ns_creeps::CreEPS::loadTransformation",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::loadTransformation",1,"ns_creeps::CreEPS *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_loadTransformation",1,SWIGTYPE_p_ns_creeps__CreEPS); }  result = (arg1)->loadTransformation(); {
      CreEPS_BOOL * resultptr = new CreEPS_BOOL(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CreEPS_BOOL,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CreEPS_resetTransformations(lua_State* L) { { int SWIG_arg = 0;
    ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ; SWIG_check_num_args("ns_creeps::CreEPS::resetTransformations",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::resetTransformations",1,"ns_creeps::CreEPS *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_resetTransformations",1,SWIGTYPE_p_ns_creeps__CreEPS); }  (arg1)->resetTransformations();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_special(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    CreEPS_CHAR *arg2 = (CreEPS_CHAR *) 0 ; void *arg3 = 0 ; SWIG_check_num_args("ns_creeps::CreEPS::special",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::special",1,"ns_creeps::CreEPS *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::special",2,"CreEPS_CHAR const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_special",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CreEPS_CHAR,0))){
      SWIG_fail_ptr("CreEPS_special",2,SWIGTYPE_p_CreEPS_CHAR); }  (arg1)->special((CreEPS_CHAR const *)arg2,arg3);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_setAttributes(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    ns_creeps::CAt *arg2 = 0 ; SWIG_check_num_args("ns_creeps::CreEPS::setAttributes",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::setAttributes",1,"ns_creeps::CreEPS *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::setAttributes",2,"ns_creeps::CAt const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_setAttributes",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ns_creeps__CAt,0))){
      SWIG_fail_ptr("CreEPS_setAttributes",2,SWIGTYPE_p_ns_creeps__CAt); } 
    (arg1)->setAttributes((ns_creeps::CAt const &)*arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_resetClipping(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    SWIG_check_num_args("ns_creeps::CreEPS::resetClipping",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::resetClipping",1,"ns_creeps::CreEPS *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_resetClipping",1,SWIGTYPE_p_ns_creeps__CreEPS); }  (arg1)->resetClipping(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_newFile__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    CreEPS_CHAR *arg2 = (CreEPS_CHAR *) 0 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT arg4 ; CreEPS_FLOAT arg5 ; CreEPS_FLOAT arg6 ;
    CreEPS_BOOL arg7 ; CreEPS_CHAR *arg8 = (CreEPS_CHAR *) 0 ; CreEPS_FLOAT *argp3 ; CreEPS_FLOAT *argp4 ; CreEPS_FLOAT *argp5 ;
    CreEPS_FLOAT *argp6 ; CreEPS_BOOL *argp7 ; SWIG_check_num_args("ns_creeps::CreEPS::newFile",8,8)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::newFile",1,"ns_creeps::CreEPS *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::newFile",2,"CreEPS_CHAR const *");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::newFile",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::newFile",4,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ns_creeps::CreEPS::newFile",5,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,6)) SWIG_fail_arg("ns_creeps::CreEPS::newFile",6,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,7)) SWIG_fail_arg("ns_creeps::CreEPS::newFile",7,"CreEPS_BOOL const");
    if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("ns_creeps::CreEPS::newFile",8,"CreEPS_CHAR const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_newFile",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CreEPS_CHAR,0))){
      SWIG_fail_ptr("CreEPS_newFile",2,SWIGTYPE_p_CreEPS_CHAR); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_newFile",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_newFile",4,SWIGTYPE_p_CreEPS_FLOAT); }  arg4 = *argp4;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_newFile",5,SWIGTYPE_p_CreEPS_FLOAT); }  arg5 = *argp5;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_newFile",6,SWIGTYPE_p_CreEPS_FLOAT); }  arg6 = *argp6;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_CreEPS_BOOL,0))){
      SWIG_fail_ptr("CreEPS_newFile",7,SWIGTYPE_p_CreEPS_BOOL); }  arg7 = *argp7;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_CreEPS_CHAR,0))){
      SWIG_fail_ptr("CreEPS_newFile",8,SWIGTYPE_p_CreEPS_CHAR); } 
    (arg1)->newFile((CreEPS_CHAR const *)arg2,arg3,arg4,arg5,arg6,arg7,(CreEPS_CHAR const *)arg8); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_newFile__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    CreEPS_CHAR *arg2 = (CreEPS_CHAR *) 0 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT arg4 ; CreEPS_FLOAT arg5 ; CreEPS_FLOAT arg6 ;
    CreEPS_BOOL arg7 ; CreEPS_FLOAT *argp3 ; CreEPS_FLOAT *argp4 ; CreEPS_FLOAT *argp5 ; CreEPS_FLOAT *argp6 ;
    CreEPS_BOOL *argp7 ; SWIG_check_num_args("ns_creeps::CreEPS::newFile",7,7)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::newFile",1,"ns_creeps::CreEPS *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::newFile",2,"CreEPS_CHAR const *");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::newFile",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::newFile",4,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ns_creeps::CreEPS::newFile",5,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,6)) SWIG_fail_arg("ns_creeps::CreEPS::newFile",6,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,7)) SWIG_fail_arg("ns_creeps::CreEPS::newFile",7,"CreEPS_BOOL const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_newFile",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CreEPS_CHAR,0))){
      SWIG_fail_ptr("CreEPS_newFile",2,SWIGTYPE_p_CreEPS_CHAR); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_newFile",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_newFile",4,SWIGTYPE_p_CreEPS_FLOAT); }  arg4 = *argp4;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_newFile",5,SWIGTYPE_p_CreEPS_FLOAT); }  arg5 = *argp5;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_newFile",6,SWIGTYPE_p_CreEPS_FLOAT); }  arg6 = *argp6;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_CreEPS_BOOL,0))){
      SWIG_fail_ptr("CreEPS_newFile",7,SWIGTYPE_p_CreEPS_BOOL); }  arg7 = *argp7;
    (arg1)->newFile((CreEPS_CHAR const *)arg2,arg3,arg4,arg5,arg6,arg7); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_CreEPS_newFile__SWIG_2(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    CreEPS_CHAR *arg2 = (CreEPS_CHAR *) 0 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT arg4 ; CreEPS_FLOAT arg5 ; CreEPS_FLOAT arg6 ;
    CreEPS_FLOAT *argp3 ; CreEPS_FLOAT *argp4 ; CreEPS_FLOAT *argp5 ; CreEPS_FLOAT *argp6 ;
    SWIG_check_num_args("ns_creeps::CreEPS::newFile",6,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::newFile",1,"ns_creeps::CreEPS *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::newFile",2,"CreEPS_CHAR const *");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::newFile",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::newFile",4,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ns_creeps::CreEPS::newFile",5,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,6)) SWIG_fail_arg("ns_creeps::CreEPS::newFile",6,"CreEPS_FLOAT const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_newFile",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CreEPS_CHAR,0))){
      SWIG_fail_ptr("CreEPS_newFile",2,SWIGTYPE_p_CreEPS_CHAR); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_newFile",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_newFile",4,SWIGTYPE_p_CreEPS_FLOAT); }  arg4 = *argp4;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_newFile",5,SWIGTYPE_p_CreEPS_FLOAT); }  arg5 = *argp5;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_newFile",6,SWIGTYPE_p_CreEPS_FLOAT); }  arg6 = *argp6;
    (arg1)->newFile((CreEPS_CHAR const *)arg2,arg3,arg4,arg5,arg6); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_CreEPS_newFile__SWIG_3(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    CreEPS_CHAR *arg2 = (CreEPS_CHAR *) 0 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT arg4 ; CreEPS_BOOL arg5 ;
    CreEPS_CHAR *arg6 = (CreEPS_CHAR *) 0 ; CreEPS_FLOAT *argp3 ; CreEPS_FLOAT *argp4 ; CreEPS_BOOL *argp5 ;
    SWIG_check_num_args("ns_creeps::CreEPS::newFile",6,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::newFile",1,"ns_creeps::CreEPS *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::newFile",2,"CreEPS_CHAR const *");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::newFile",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::newFile",4,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ns_creeps::CreEPS::newFile",5,"CreEPS_BOOL const");
    if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ns_creeps::CreEPS::newFile",6,"CreEPS_CHAR const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_newFile",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CreEPS_CHAR,0))){
      SWIG_fail_ptr("CreEPS_newFile",2,SWIGTYPE_p_CreEPS_CHAR); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_newFile",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_newFile",4,SWIGTYPE_p_CreEPS_FLOAT); }  arg4 = *argp4;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_CreEPS_BOOL,0))){
      SWIG_fail_ptr("CreEPS_newFile",5,SWIGTYPE_p_CreEPS_BOOL); }  arg5 = *argp5;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_CreEPS_CHAR,0))){
      SWIG_fail_ptr("CreEPS_newFile",6,SWIGTYPE_p_CreEPS_CHAR); } 
    (arg1)->newFile((CreEPS_CHAR const *)arg2,arg3,arg4,arg5,(CreEPS_CHAR const *)arg6); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CreEPS_newFile__SWIG_4(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    CreEPS_CHAR *arg2 = (CreEPS_CHAR *) 0 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT arg4 ; CreEPS_BOOL arg5 ; CreEPS_FLOAT *argp3 ;
    CreEPS_FLOAT *argp4 ; CreEPS_BOOL *argp5 ; SWIG_check_num_args("ns_creeps::CreEPS::newFile",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::newFile",1,"ns_creeps::CreEPS *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::newFile",2,"CreEPS_CHAR const *");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::newFile",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::newFile",4,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ns_creeps::CreEPS::newFile",5,"CreEPS_BOOL const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_newFile",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CreEPS_CHAR,0))){
      SWIG_fail_ptr("CreEPS_newFile",2,SWIGTYPE_p_CreEPS_CHAR); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_newFile",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_newFile",4,SWIGTYPE_p_CreEPS_FLOAT); }  arg4 = *argp4;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_CreEPS_BOOL,0))){
      SWIG_fail_ptr("CreEPS_newFile",5,SWIGTYPE_p_CreEPS_BOOL); }  arg5 = *argp5;
    (arg1)->newFile((CreEPS_CHAR const *)arg2,arg3,arg4,arg5); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_newFile__SWIG_5(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    CreEPS_CHAR *arg2 = (CreEPS_CHAR *) 0 ; CreEPS_FLOAT arg3 ; CreEPS_FLOAT arg4 ; CreEPS_FLOAT *argp3 ; CreEPS_FLOAT *argp4 ;
    SWIG_check_num_args("ns_creeps::CreEPS::newFile",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::newFile",1,"ns_creeps::CreEPS *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::newFile",2,"CreEPS_CHAR const *");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ns_creeps::CreEPS::newFile",3,"CreEPS_FLOAT const");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ns_creeps::CreEPS::newFile",4,"CreEPS_FLOAT const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_newFile",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CreEPS_CHAR,0))){
      SWIG_fail_ptr("CreEPS_newFile",2,SWIGTYPE_p_CreEPS_CHAR); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_newFile",3,SWIGTYPE_p_CreEPS_FLOAT); }  arg3 = *argp3;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_CreEPS_FLOAT,0))){
      SWIG_fail_ptr("CreEPS_newFile",4,SWIGTYPE_p_CreEPS_FLOAT); }  arg4 = *argp4;
    (arg1)->newFile((CreEPS_CHAR const *)arg2,arg3,arg4); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_newFile(lua_State* L) { int argc; int argv[9]={ 1,2,3,4,5,6,7,8,9} ; argc = lua_gettop(L);
  if (argc == 4) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_CHAR, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CreEPS_newFile__SWIG_5(L);}  }  }  }  }  if (argc == 5) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_CHAR, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_CreEPS_BOOL, SWIG_POINTER_NO_NULL)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CreEPS_newFile__SWIG_4(L);}  }  }  }  }  } 
  if (argc == 6) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_CHAR, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                  _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CreEPS_newFile__SWIG_2(L);}  }  }  }  }  }  } 
  if (argc == 6) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_CHAR, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_CreEPS_BOOL, SWIG_POINTER_NO_NULL)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_CreEPS_CHAR, 0)) {
                  _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CreEPS_newFile__SWIG_3(L);}  }  }  }  }  }  } 
  if (argc == 7) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_CHAR, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                  _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_CreEPS_BOOL, SWIG_POINTER_NO_NULL)) {
                    _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CreEPS_newFile__SWIG_1(L);}  }  }  }  }  }  }  } 
  if (argc == 8) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ns_creeps__CreEPS, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CreEPS_CHAR, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_CreEPS_FLOAT, SWIG_POINTER_NO_NULL)) {
                  _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_CreEPS_BOOL, SWIG_POINTER_NO_NULL)) {
                    _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                    if (SWIG_isptrtype(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_CreEPS_CHAR, 0)) {
                      _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CreEPS_newFile__SWIG_0(L);}  }  }  }  }  }  }  }  }
   SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CreEPS_newFile'\n" "  Possible C/C++ prototypes are:\n"
  "    ns_creeps::CreEPS::newFile(CreEPS_CHAR const *,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_BOOL const,CreEPS_CHAR const *)\n"
  "    ns_creeps::CreEPS::newFile(CreEPS_CHAR const *,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_BOOL const)\n"
  "    ns_creeps::CreEPS::newFile(CreEPS_CHAR const *,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_FLOAT const)\n"
  "    ns_creeps::CreEPS::newFile(CreEPS_CHAR const *,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_BOOL const,CreEPS_CHAR const *)\n"
  "    ns_creeps::CreEPS::newFile(CreEPS_CHAR const *,CreEPS_FLOAT const,CreEPS_FLOAT const,CreEPS_BOOL const)\n"
  "    ns_creeps::CreEPS::newFile(CreEPS_CHAR const *,CreEPS_FLOAT const,CreEPS_FLOAT const)\n"); lua_error(L);return 0; }
static int _wrap_CreEPS_finalize(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    SWIG_check_num_args("ns_creeps::CreEPS::finalize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::finalize",1,"ns_creeps::CreEPS *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_finalize",1,SWIGTYPE_p_ns_creeps__CreEPS); }  (arg1)->finalize(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CreEPS_embedEPS(lua_State* L) { { int SWIG_arg = 0; ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) 0 ;
    CreEPS_CHAR *arg2 = (CreEPS_CHAR *) (CreEPS_CHAR *)0 ; CreEPS_BOOL result;
    SWIG_check_num_args("ns_creeps::CreEPS::embedEPS",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ns_creeps::CreEPS::embedEPS",1,"ns_creeps::CreEPS *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ns_creeps::CreEPS::embedEPS",2,"CreEPS_CHAR const *const");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("CreEPS_embedEPS",1,SWIGTYPE_p_ns_creeps__CreEPS); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CreEPS_CHAR,0))){
      SWIG_fail_ptr("CreEPS_embedEPS",2,SWIGTYPE_p_CreEPS_CHAR); }  result = (arg1)->embedEPS((CreEPS_CHAR const *)arg2); {
      CreEPS_BOOL * resultptr = new CreEPS_BOOL(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CreEPS_BOOL,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CreEPS_getMajorVersion(lua_State* L) { { int SWIG_arg = 0; CreEPS_INT result;
    SWIG_check_num_args("ns_creeps::CreEPS::getMajorVersion",0,0) result = ns_creeps::CreEPS::getMajorVersion(); {
      CreEPS_INT * resultptr = new CreEPS_INT(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CreEPS_INT,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CreEPS_getMinorVersion(lua_State* L) { { int SWIG_arg = 0; CreEPS_INT result;
    SWIG_check_num_args("ns_creeps::CreEPS::getMinorVersion",0,0) result = ns_creeps::CreEPS::getMinorVersion(); {
      CreEPS_INT * resultptr = new CreEPS_INT(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CreEPS_INT,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static void swig_delete_CreEPS(void *obj) {
ns_creeps::CreEPS *arg1 = (ns_creeps::CreEPS *) obj;
delete arg1;
}
static int _proxy__wrap_new_CreEPS(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CreEPS);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CreEPS_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CreEPS_methods[]= {
    { "startPath", _wrap_CreEPS_startPath},
    { "endPath", _wrap_CreEPS_endPath},
    { "usePath", _wrap_CreEPS_usePath},
    { "closeSubpath", _wrap_CreEPS_closeSubpath},
    { "addMove", _wrap_CreEPS_addMove},
    { "addRelativeMove", _wrap_CreEPS_addRelativeMove},
    { "addLine", _wrap_CreEPS_addLine},
    { "addRelativeLine", _wrap_CreEPS_addRelativeLine},
    { "addArc", _wrap_CreEPS_addArc},
    { "addArcN", _wrap_CreEPS_addArcN},
    { "addCircle", _wrap_CreEPS_addCircle},
    { "addEllipseArc", _wrap_CreEPS_addEllipseArc},
    { "addEllipseArcN", _wrap_CreEPS_addEllipseArcN},
    { "addEllipse", _wrap_CreEPS_addEllipse},
    { "addArcT", _wrap_CreEPS_addArcT},
    { "addArcTLine", _wrap_CreEPS_addArcTLine},
    { "addCurve", _wrap_CreEPS_addCurve},
    { "addRelativeCurve", _wrap_CreEPS_addRelativeCurve},
    { "line", _wrap_CreEPS_line},
    { "rectStroke", _wrap_CreEPS_rectStroke},
    { "rectFill", _wrap_CreEPS_rectFill},
    { "curve", _wrap_CreEPS_curve},
    { "arc", _wrap_CreEPS_arc},
    { "circle", _wrap_CreEPS_circle},
    { "ellipseArc", _wrap_CreEPS_ellipseArc},
    { "ellipse", _wrap_CreEPS_ellipse},
    { "disk", _wrap_CreEPS_disk},
    { "print", _wrap_CreEPS_print},
    { "printf", _wrap_CreEPS_printf},
    { "applyRotation", _wrap_CreEPS_applyRotation},
    { "applyTranslation", _wrap_CreEPS_applyTranslation},
    { "applyScaling", _wrap_CreEPS_applyScaling},
    { "applyTransformation", _wrap_CreEPS_applyTransformation},
    { "saveTransformation", _wrap_CreEPS_saveTransformation},
    { "loadTransformation", _wrap_CreEPS_loadTransformation},
    { "resetTransformations", _wrap_CreEPS_resetTransformations},
    { "special", _wrap_CreEPS_special},
    { "setAttributes", _wrap_CreEPS_setAttributes},
    { "resetClipping", _wrap_CreEPS_resetClipping},
    { "newFile", _wrap_CreEPS_newFile},
    { "finalize", _wrap_CreEPS_finalize},
    { "embedEPS", _wrap_CreEPS_embedEPS},
    {0,0}
};
static swig_lua_method swig_CreEPS_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CreEPS_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CreEPS_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("FILL", (ns_creeps::CreEPS::FILL))},
    {SWIG_LUA_CONSTTAB_INT("EOFILL", (ns_creeps::CreEPS::EOFILL))},
    {SWIG_LUA_CONSTTAB_INT("STROKE", (ns_creeps::CreEPS::STROKE))},
    {SWIG_LUA_CONSTTAB_INT("CLIP", (ns_creeps::CreEPS::CLIP))},
    {SWIG_LUA_CONSTTAB_INT("EOCLIP", (ns_creeps::CreEPS::EOCLIP))},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CreEPS_Sf_SwigStatic_methods[]= {
    { "getWarningMessageHandler", _wrap_CreEPS_getWarningMessageHandler},
    { "getErrorMessageHandler", _wrap_CreEPS_getErrorMessageHandler},
    { "setWarningMessageHandler", _wrap_CreEPS_setWarningMessageHandler},
    { "setErrorMessageHandler", _wrap_CreEPS_setErrorMessageHandler},
    { "getMajorVersion", _wrap_CreEPS_getMajorVersion},
    { "getMinorVersion", _wrap_CreEPS_getMinorVersion},
    {0,0}
};
static swig_lua_class* swig_CreEPS_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CreEPS_Sf_SwigStatic = {
    "CreEPS",
    swig_CreEPS_Sf_SwigStatic_methods,
    swig_CreEPS_Sf_SwigStatic_attributes,
    swig_CreEPS_Sf_SwigStatic_constants,
    swig_CreEPS_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CreEPS_bases[] = {0};
static const char *swig_CreEPS_base_names[] = {0};
static swig_lua_class _wrap_class_CreEPS = { "CreEPS", "CreEPS", &SWIGTYPE_p_ns_creeps__CreEPS,_proxy__wrap_new_CreEPS, swig_delete_CreEPS, swig_CreEPS_methods, swig_CreEPS_attributes, &swig_CreEPS_Sf_SwigStatic, swig_CreEPS_meta, swig_CreEPS_bases, swig_CreEPS_base_names };

static int _wrap_new_VectorGraphics(lua_State* L) { { int SWIG_arg = 0; ofxVectorGraphics *result = 0 ;
    SWIG_check_num_args("ofxVectorGraphics::ofxVectorGraphics",0,0) result = (ofxVectorGraphics *)new ofxVectorGraphics();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxVectorGraphics,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_VectorGraphics_beginEPS__SWIG_0(lua_State* L) { { int SWIG_arg = 0;
    ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ; std::string arg2 ; int arg3 ; int arg4 ; int arg5 ; int arg6 ;
    SWIG_check_num_args("ofxVectorGraphics::beginEPS",6,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::beginEPS",1,"ofxVectorGraphics *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxVectorGraphics::beginEPS",2,"std::string");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxVectorGraphics::beginEPS",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxVectorGraphics::beginEPS",4,"int");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxVectorGraphics::beginEPS",5,"int");
    if(!lua_isnumber(L,6)) SWIG_fail_arg("ofxVectorGraphics::beginEPS",6,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
      SWIG_fail_ptr("VectorGraphics_beginEPS",1,SWIGTYPE_p_ofxVectorGraphics); }  { size_t len;
      const char *ptr = lua_tolstring(L, 2, &len); (&arg2)->assign(ptr, len); }  arg3 = (int)lua_tonumber(L, 3);
    arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); arg6 = (int)lua_tonumber(L, 6);
    (arg1)->beginEPS(arg2,arg3,arg4,arg5,arg6); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_VectorGraphics_beginEPS__SWIG_1(lua_State* L) { { int SWIG_arg = 0;
    ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ; std::string arg2 ; int arg3 ; int arg4 ; int arg5 ;
    SWIG_check_num_args("ofxVectorGraphics::beginEPS",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::beginEPS",1,"ofxVectorGraphics *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxVectorGraphics::beginEPS",2,"std::string");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxVectorGraphics::beginEPS",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxVectorGraphics::beginEPS",4,"int");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxVectorGraphics::beginEPS",5,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
      SWIG_fail_ptr("VectorGraphics_beginEPS",1,SWIGTYPE_p_ofxVectorGraphics); }  { size_t len;
      const char *ptr = lua_tolstring(L, 2, &len); (&arg2)->assign(ptr, len); }  arg3 = (int)lua_tonumber(L, 3);
    arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); (arg1)->beginEPS(arg2,arg3,arg4,arg5); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_VectorGraphics_beginEPS__SWIG_2(lua_State* L) { { int SWIG_arg = 0;
    ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ; std::string arg2 ; int arg3 ; int arg4 ;
    SWIG_check_num_args("ofxVectorGraphics::beginEPS",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::beginEPS",1,"ofxVectorGraphics *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxVectorGraphics::beginEPS",2,"std::string");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxVectorGraphics::beginEPS",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxVectorGraphics::beginEPS",4,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
      SWIG_fail_ptr("VectorGraphics_beginEPS",1,SWIGTYPE_p_ofxVectorGraphics); }  { size_t len;
      const char *ptr = lua_tolstring(L, 2, &len); (&arg2)->assign(ptr, len); }  arg3 = (int)lua_tonumber(L, 3);
    arg4 = (int)lua_tonumber(L, 4); (arg1)->beginEPS(arg2,arg3,arg4); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_VectorGraphics_beginEPS__SWIG_3(lua_State* L) { { int SWIG_arg = 0;
    ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ; std::string arg2 ; int arg3 ;
    SWIG_check_num_args("ofxVectorGraphics::beginEPS",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::beginEPS",1,"ofxVectorGraphics *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxVectorGraphics::beginEPS",2,"std::string");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxVectorGraphics::beginEPS",3,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
      SWIG_fail_ptr("VectorGraphics_beginEPS",1,SWIGTYPE_p_ofxVectorGraphics); }  { size_t len;
      const char *ptr = lua_tolstring(L, 2, &len); (&arg2)->assign(ptr, len); }  arg3 = (int)lua_tonumber(L, 3);
    (arg1)->beginEPS(arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_VectorGraphics_beginEPS__SWIG_4(lua_State* L) { { int SWIG_arg = 0;
    ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ; std::string arg2 ;
    SWIG_check_num_args("ofxVectorGraphics::beginEPS",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::beginEPS",1,"ofxVectorGraphics *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxVectorGraphics::beginEPS",2,"std::string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
      SWIG_fail_ptr("VectorGraphics_beginEPS",1,SWIGTYPE_p_ofxVectorGraphics); }  { size_t len;
      const char *ptr = lua_tolstring(L, 2, &len); (&arg2)->assign(ptr, len); }  (arg1)->beginEPS(arg2); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_VectorGraphics_beginEPS(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L);
  if (argc == 2) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxVectorGraphics, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_VectorGraphics_beginEPS__SWIG_4(L);}  }  }  if (argc == 3) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxVectorGraphics, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_VectorGraphics_beginEPS__SWIG_3(L);}  }  }  }  if (argc == 4) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxVectorGraphics, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_VectorGraphics_beginEPS__SWIG_2(L);}  }  }  }  } 
  if (argc == 5) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxVectorGraphics, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_VectorGraphics_beginEPS__SWIG_1(L);}  }  }  }  }  }  if (argc == 6) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxVectorGraphics, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { return _wrap_VectorGraphics_beginEPS__SWIG_0(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'VectorGraphics_beginEPS'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxVectorGraphics::beginEPS(std::string,int,int,int,int)\n"
  "    ofxVectorGraphics::beginEPS(std::string,int,int,int)\n" "    ofxVectorGraphics::beginEPS(std::string,int,int)\n"
  "    ofxVectorGraphics::beginEPS(std::string,int)\n" "    ofxVectorGraphics::beginEPS(std::string)\n");
  lua_error(L);return 0; }
static int _wrap_VectorGraphics_endEPS(lua_State* L) { { int SWIG_arg = 0; ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ;
    SWIG_check_num_args("ofxVectorGraphics::endEPS",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::endEPS",1,"ofxVectorGraphics *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
      SWIG_fail_ptr("VectorGraphics_endEPS",1,SWIGTYPE_p_ofxVectorGraphics); }  (arg1)->endEPS(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_VectorGraphics_enableDraw(lua_State* L) { { int SWIG_arg = 0;
    ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ; SWIG_check_num_args("ofxVectorGraphics::enableDraw",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::enableDraw",1,"ofxVectorGraphics *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
      SWIG_fail_ptr("VectorGraphics_enableDraw",1,SWIGTYPE_p_ofxVectorGraphics); }  (arg1)->enableDraw(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_VectorGraphics_disableDraw(lua_State* L) { { int SWIG_arg = 0;
    ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ; SWIG_check_num_args("ofxVectorGraphics::disableDraw",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::disableDraw",1,"ofxVectorGraphics *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
      SWIG_fail_ptr("VectorGraphics_disableDraw",1,SWIGTYPE_p_ofxVectorGraphics); }  (arg1)->disableDraw(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_VectorGraphics_enableCenterRect(lua_State* L) { { int SWIG_arg = 0;
    ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ; SWIG_check_num_args("ofxVectorGraphics::enableCenterRect",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::enableCenterRect",1,"ofxVectorGraphics *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
      SWIG_fail_ptr("VectorGraphics_enableCenterRect",1,SWIGTYPE_p_ofxVectorGraphics); }  (arg1)->enableCenterRect();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_VectorGraphics_disableCenterRect(lua_State* L) { { int SWIG_arg = 0;
    ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ; SWIG_check_num_args("ofxVectorGraphics::disableCenterRect",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::disableCenterRect",1,"ofxVectorGraphics *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
      SWIG_fail_ptr("VectorGraphics_disableCenterRect",1,SWIGTYPE_p_ofxVectorGraphics); }  (arg1)->disableCenterRect();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_VectorGraphics_fill(lua_State* L) { { int SWIG_arg = 0; ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ;
    SWIG_check_num_args("ofxVectorGraphics::fill",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::fill",1,"ofxVectorGraphics *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
      SWIG_fail_ptr("VectorGraphics_fill",1,SWIGTYPE_p_ofxVectorGraphics); }  (arg1)->fill(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_VectorGraphics_noFill(lua_State* L) { { int SWIG_arg = 0; ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ;
    SWIG_check_num_args("ofxVectorGraphics::noFill",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::noFill",1,"ofxVectorGraphics *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
      SWIG_fail_ptr("VectorGraphics_noFill",1,SWIGTYPE_p_ofxVectorGraphics); }  (arg1)->noFill(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_VectorGraphics_setLineWidth(lua_State* L) { { int SWIG_arg = 0;
    ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ; float arg2 ; SWIG_check_num_args("ofxVectorGraphics::setLineWidth",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::setLineWidth",1,"ofxVectorGraphics *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxVectorGraphics::setLineWidth",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
      SWIG_fail_ptr("VectorGraphics_setLineWidth",1,SWIGTYPE_p_ofxVectorGraphics); }  arg2 = (float)lua_tonumber(L, 2);
    (arg1)->setLineWidth(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_VectorGraphics_setColor__SWIG_0(lua_State* L) { { int SWIG_arg = 0;
    ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ; int arg2 ; int arg3 ; int arg4 ;
    SWIG_check_num_args("ofxVectorGraphics::setColor",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::setColor",1,"ofxVectorGraphics *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxVectorGraphics::setColor",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxVectorGraphics::setColor",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxVectorGraphics::setColor",4,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
      SWIG_fail_ptr("VectorGraphics_setColor",1,SWIGTYPE_p_ofxVectorGraphics); }  arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); (arg1)->setColor(arg2,arg3,arg4); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_VectorGraphics_setColor__SWIG_1(lua_State* L) { { int SWIG_arg = 0;
    ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ; int arg2 ; SWIG_check_num_args("ofxVectorGraphics::setColor",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::setColor",1,"ofxVectorGraphics *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxVectorGraphics::setColor",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
      SWIG_fail_ptr("VectorGraphics_setColor",1,SWIGTYPE_p_ofxVectorGraphics); }  arg2 = (int)lua_tonumber(L, 2);
    (arg1)->setColor(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_VectorGraphics_setColor(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 2) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxVectorGraphics, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_VectorGraphics_setColor__SWIG_1(L);}  }  }  if (argc == 4) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxVectorGraphics, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_VectorGraphics_setColor__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'VectorGraphics_setColor'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxVectorGraphics::setColor(int,int,int)\n"
  "    ofxVectorGraphics::setColor(int)\n"); lua_error(L);return 0; }
static int _wrap_VectorGraphics_changeColor(lua_State* L) { { int SWIG_arg = 0;
    ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ; float arg2 ; float arg3 ; float arg4 ;
    SWIG_check_num_args("ofxVectorGraphics::changeColor",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::changeColor",1,"ofxVectorGraphics *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxVectorGraphics::changeColor",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxVectorGraphics::changeColor",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxVectorGraphics::changeColor",4,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
      SWIG_fail_ptr("VectorGraphics_changeColor",1,SWIGTYPE_p_ofxVectorGraphics); }  arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->changeColor(arg2,arg3,arg4); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_VectorGraphics_rect(lua_State* L) { { int SWIG_arg = 0; ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ;
    float arg2 ; float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("ofxVectorGraphics::rect",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::rect",1,"ofxVectorGraphics *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxVectorGraphics::rect",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxVectorGraphics::rect",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxVectorGraphics::rect",4,"float");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxVectorGraphics::rect",5,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
      SWIG_fail_ptr("VectorGraphics_rect",1,SWIGTYPE_p_ofxVectorGraphics); }  arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
    (arg1)->rect(arg2,arg3,arg4,arg5); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_VectorGraphics_triangle(lua_State* L) { { int SWIG_arg = 0; ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ;
    float arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ;
    SWIG_check_num_args("ofxVectorGraphics::triangle",7,7)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::triangle",1,"ofxVectorGraphics *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxVectorGraphics::triangle",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxVectorGraphics::triangle",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxVectorGraphics::triangle",4,"float");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxVectorGraphics::triangle",5,"float");
    if(!lua_isnumber(L,6)) SWIG_fail_arg("ofxVectorGraphics::triangle",6,"float");
    if(!lua_isnumber(L,7)) SWIG_fail_arg("ofxVectorGraphics::triangle",7,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
      SWIG_fail_ptr("VectorGraphics_triangle",1,SWIGTYPE_p_ofxVectorGraphics); }  arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
    arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); (arg1)->triangle(arg2,arg3,arg4,arg5,arg6,arg7);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_VectorGraphics_circle(lua_State* L) { { int SWIG_arg = 0; ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ;
    float arg2 ; float arg3 ; float arg4 ; SWIG_check_num_args("ofxVectorGraphics::circle",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::circle",1,"ofxVectorGraphics *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxVectorGraphics::circle",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxVectorGraphics::circle",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxVectorGraphics::circle",4,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
      SWIG_fail_ptr("VectorGraphics_circle",1,SWIGTYPE_p_ofxVectorGraphics); }  arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->circle(arg2,arg3,arg4); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_VectorGraphics_ellipse(lua_State* L) { { int SWIG_arg = 0; ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ;
    float arg2 ; float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("ofxVectorGraphics::ellipse",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::ellipse",1,"ofxVectorGraphics *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxVectorGraphics::ellipse",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxVectorGraphics::ellipse",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxVectorGraphics::ellipse",4,"float");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxVectorGraphics::ellipse",5,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
      SWIG_fail_ptr("VectorGraphics_ellipse",1,SWIGTYPE_p_ofxVectorGraphics); }  arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
    (arg1)->ellipse(arg2,arg3,arg4,arg5); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_VectorGraphics_line(lua_State* L) { { int SWIG_arg = 0; ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ;
    float arg2 ; float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("ofxVectorGraphics::line",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::line",1,"ofxVectorGraphics *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxVectorGraphics::line",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxVectorGraphics::line",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxVectorGraphics::line",4,"float");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxVectorGraphics::line",5,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
      SWIG_fail_ptr("VectorGraphics_line",1,SWIGTYPE_p_ofxVectorGraphics); }  arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
    (arg1)->line(arg2,arg3,arg4,arg5); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_VectorGraphics_arc(lua_State* L) { { int SWIG_arg = 0; ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ;
    float arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; SWIG_check_num_args("ofxVectorGraphics::arc",6,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::arc",1,"ofxVectorGraphics *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxVectorGraphics::arc",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxVectorGraphics::arc",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxVectorGraphics::arc",4,"float");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxVectorGraphics::arc",5,"float");
    if(!lua_isnumber(L,6)) SWIG_fail_arg("ofxVectorGraphics::arc",6,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
      SWIG_fail_ptr("VectorGraphics_arc",1,SWIGTYPE_p_ofxVectorGraphics); }  arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
    arg6 = (float)lua_tonumber(L, 6); (arg1)->arc(arg2,arg3,arg4,arg5,arg6); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_VectorGraphics_bezier(lua_State* L) { { int SWIG_arg = 0; ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ;
    float arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; float arg8 ; float arg9 ;
    SWIG_check_num_args("ofxVectorGraphics::bezier",9,9)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::bezier",1,"ofxVectorGraphics *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxVectorGraphics::bezier",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxVectorGraphics::bezier",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxVectorGraphics::bezier",4,"float");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxVectorGraphics::bezier",5,"float");
    if(!lua_isnumber(L,6)) SWIG_fail_arg("ofxVectorGraphics::bezier",6,"float");
    if(!lua_isnumber(L,7)) SWIG_fail_arg("ofxVectorGraphics::bezier",7,"float");
    if(!lua_isnumber(L,8)) SWIG_fail_arg("ofxVectorGraphics::bezier",8,"float");
    if(!lua_isnumber(L,9)) SWIG_fail_arg("ofxVectorGraphics::bezier",9,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
      SWIG_fail_ptr("VectorGraphics_bezier",1,SWIGTYPE_p_ofxVectorGraphics); }  arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
    arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
    arg9 = (float)lua_tonumber(L, 9); (arg1)->bezier(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_VectorGraphics_curve(lua_State* L) { { int SWIG_arg = 0; ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ;
    float arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; float arg8 ; float arg9 ;
    SWIG_check_num_args("ofxVectorGraphics::curve",9,9)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::curve",1,"ofxVectorGraphics *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxVectorGraphics::curve",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxVectorGraphics::curve",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxVectorGraphics::curve",4,"float");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxVectorGraphics::curve",5,"float");
    if(!lua_isnumber(L,6)) SWIG_fail_arg("ofxVectorGraphics::curve",6,"float");
    if(!lua_isnumber(L,7)) SWIG_fail_arg("ofxVectorGraphics::curve",7,"float");
    if(!lua_isnumber(L,8)) SWIG_fail_arg("ofxVectorGraphics::curve",8,"float");
    if(!lua_isnumber(L,9)) SWIG_fail_arg("ofxVectorGraphics::curve",9,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
      SWIG_fail_ptr("VectorGraphics_curve",1,SWIGTYPE_p_ofxVectorGraphics); }  arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
    arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
    arg9 = (float)lua_tonumber(L, 9); (arg1)->curve(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_VectorGraphics_beginShape(lua_State* L) { { int SWIG_arg = 0;
    ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ; SWIG_check_num_args("ofxVectorGraphics::beginShape",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::beginShape",1,"ofxVectorGraphics *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
      SWIG_fail_ptr("VectorGraphics_beginShape",1,SWIGTYPE_p_ofxVectorGraphics); }  (arg1)->beginShape(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_VectorGraphics_polyVertex(lua_State* L) { { int SWIG_arg = 0;
    ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ; float arg2 ; float arg3 ;
    SWIG_check_num_args("ofxVectorGraphics::polyVertex",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::polyVertex",1,"ofxVectorGraphics *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxVectorGraphics::polyVertex",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxVectorGraphics::polyVertex",3,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
      SWIG_fail_ptr("VectorGraphics_polyVertex",1,SWIGTYPE_p_ofxVectorGraphics); }  arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3); (arg1)->polyVertex(arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_VectorGraphics_bezierVertex(lua_State* L) { { int SWIG_arg = 0;
    ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ;
    float arg7 ; SWIG_check_num_args("ofxVectorGraphics::bezierVertex",7,7)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::bezierVertex",1,"ofxVectorGraphics *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxVectorGraphics::bezierVertex",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxVectorGraphics::bezierVertex",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxVectorGraphics::bezierVertex",4,"float");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxVectorGraphics::bezierVertex",5,"float");
    if(!lua_isnumber(L,6)) SWIG_fail_arg("ofxVectorGraphics::bezierVertex",6,"float");
    if(!lua_isnumber(L,7)) SWIG_fail_arg("ofxVectorGraphics::bezierVertex",7,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
      SWIG_fail_ptr("VectorGraphics_bezierVertex",1,SWIGTYPE_p_ofxVectorGraphics); }  arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
    arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); (arg1)->bezierVertex(arg2,arg3,arg4,arg5,arg6,arg7);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_VectorGraphics_curveVertex(lua_State* L) { { int SWIG_arg = 0;
    ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ; float arg2 ; float arg3 ;
    SWIG_check_num_args("ofxVectorGraphics::curveVertex",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::curveVertex",1,"ofxVectorGraphics *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxVectorGraphics::curveVertex",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxVectorGraphics::curveVertex",3,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
      SWIG_fail_ptr("VectorGraphics_curveVertex",1,SWIGTYPE_p_ofxVectorGraphics); }  arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3); (arg1)->curveVertex(arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_VectorGraphics_endShape__SWIG_0(lua_State* L) { { int SWIG_arg = 0;
    ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ; bool arg2 ; SWIG_check_num_args("ofxVectorGraphics::endShape",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::endShape",1,"ofxVectorGraphics *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxVectorGraphics::endShape",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
      SWIG_fail_ptr("VectorGraphics_endShape",1,SWIGTYPE_p_ofxVectorGraphics); }  arg2 = (lua_toboolean(L, 2)!=0);
    (arg1)->endShape(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_VectorGraphics_endShape__SWIG_1(lua_State* L) { { int SWIG_arg = 0;
    ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ; SWIG_check_num_args("ofxVectorGraphics::endShape",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::endShape",1,"ofxVectorGraphics *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
      SWIG_fail_ptr("VectorGraphics_endShape",1,SWIGTYPE_p_ofxVectorGraphics); }  (arg1)->endShape(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_VectorGraphics_endShape(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxVectorGraphics, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_VectorGraphics_endShape__SWIG_1(L);}  }  if (argc == 2) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxVectorGraphics, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) {
        return _wrap_VectorGraphics_endShape__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'VectorGraphics_endShape'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxVectorGraphics::endShape(bool)\n" "    ofxVectorGraphics::endShape()\n");
  lua_error(L);return 0; }
static int _wrap_VectorGraphics_creeps_set(lua_State* L) { { int SWIG_arg = 0;
    ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ; ns_creeps::CreEPS *arg2 = (ns_creeps::CreEPS *) 0 ;
    SWIG_check_num_args("ofxVectorGraphics::creeps",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::creeps",1,"ofxVectorGraphics *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxVectorGraphics::creeps",2,"ns_creeps::CreEPS *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
      SWIG_fail_ptr("VectorGraphics_creeps_set",1,SWIGTYPE_p_ofxVectorGraphics); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ns_creeps__CreEPS,0))){
      SWIG_fail_ptr("VectorGraphics_creeps_set",2,SWIGTYPE_p_ns_creeps__CreEPS); }  if (arg1) (arg1)->creeps = *arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_VectorGraphics_creeps_get(lua_State* L) { { int SWIG_arg = 0;
    ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ; ns_creeps::CreEPS *result = 0 ;
    SWIG_check_num_args("ofxVectorGraphics::creeps",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::creeps",1,"ofxVectorGraphics *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
      SWIG_fail_ptr("VectorGraphics_creeps_get",1,SWIGTYPE_p_ofxVectorGraphics); } 
    result = (ns_creeps::CreEPS *)& ((arg1)->creeps); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ns_creeps__CreEPS,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static void swig_delete_VectorGraphics(void *obj) {
ofxVectorGraphics *arg1 = (ofxVectorGraphics *) obj;
delete arg1;
}
static int _proxy__wrap_new_VectorGraphics(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_VectorGraphics);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_VectorGraphics_attributes[] = {
    { "creeps", _wrap_VectorGraphics_creeps_get, _wrap_VectorGraphics_creeps_set },
    {0,0,0}
};
static swig_lua_method swig_VectorGraphics_methods[]= {
    { "beginEPS", _wrap_VectorGraphics_beginEPS},
    { "endEPS", _wrap_VectorGraphics_endEPS},
    { "enableDraw", _wrap_VectorGraphics_enableDraw},
    { "disableDraw", _wrap_VectorGraphics_disableDraw},
    { "enableCenterRect", _wrap_VectorGraphics_enableCenterRect},
    { "disableCenterRect", _wrap_VectorGraphics_disableCenterRect},
    { "fill", _wrap_VectorGraphics_fill},
    { "noFill", _wrap_VectorGraphics_noFill},
    { "setLineWidth", _wrap_VectorGraphics_setLineWidth},
    { "setColor", _wrap_VectorGraphics_setColor},
    { "changeColor", _wrap_VectorGraphics_changeColor},
    { "rect", _wrap_VectorGraphics_rect},
    { "triangle", _wrap_VectorGraphics_triangle},
    { "circle", _wrap_VectorGraphics_circle},
    { "ellipse", _wrap_VectorGraphics_ellipse},
    { "line", _wrap_VectorGraphics_line},
    { "arc", _wrap_VectorGraphics_arc},
    { "bezier", _wrap_VectorGraphics_bezier},
    { "curve", _wrap_VectorGraphics_curve},
    { "beginShape", _wrap_VectorGraphics_beginShape},
    { "polyVertex", _wrap_VectorGraphics_polyVertex},
    { "bezierVertex", _wrap_VectorGraphics_bezierVertex},
    { "curveVertex", _wrap_VectorGraphics_curveVertex},
    { "endShape", _wrap_VectorGraphics_endShape},
    {0,0}
};
static swig_lua_method swig_VectorGraphics_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_VectorGraphics_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_VectorGraphics_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_VectorGraphics_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_VectorGraphics_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_VectorGraphics_Sf_SwigStatic = {
    "VectorGraphics",
    swig_VectorGraphics_Sf_SwigStatic_methods,
    swig_VectorGraphics_Sf_SwigStatic_attributes,
    swig_VectorGraphics_Sf_SwigStatic_constants,
    swig_VectorGraphics_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_VectorGraphics_bases[] = {0};
static const char *swig_VectorGraphics_base_names[] = {0};
static swig_lua_class _wrap_class_VectorGraphics = { "VectorGraphics", "VectorGraphics", &SWIGTYPE_p_ofxVectorGraphics,_proxy__wrap_new_VectorGraphics, swig_delete_VectorGraphics, swig_VectorGraphics_methods, swig_VectorGraphics_attributes, &swig_VectorGraphics_Sf_SwigStatic, swig_VectorGraphics_meta, swig_VectorGraphics_bases, swig_VectorGraphics_base_names };

static int _wrap_CvBlob_area_set(lua_State* L) { { int SWIG_arg = 0; ofxCvBlob *arg1 = (ofxCvBlob *) 0 ; float arg2 ;
    SWIG_check_num_args("ofxCvBlob::area",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvBlob::area",1,"ofxCvBlob *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvBlob::area",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvBlob,0))){
      SWIG_fail_ptr("CvBlob_area_set",1,SWIGTYPE_p_ofxCvBlob); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->area = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvBlob_area_get(lua_State* L) { { int SWIG_arg = 0; ofxCvBlob *arg1 = (ofxCvBlob *) 0 ; float result;
    SWIG_check_num_args("ofxCvBlob::area",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvBlob::area",1,"ofxCvBlob *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvBlob,0))){
      SWIG_fail_ptr("CvBlob_area_get",1,SWIGTYPE_p_ofxCvBlob); }  result = (float) ((arg1)->area);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvBlob_length_set(lua_State* L) { { int SWIG_arg = 0; ofxCvBlob *arg1 = (ofxCvBlob *) 0 ; float arg2 ;
    SWIG_check_num_args("ofxCvBlob::length",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvBlob::length",1,"ofxCvBlob *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvBlob::length",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvBlob,0))){
      SWIG_fail_ptr("CvBlob_length_set",1,SWIGTYPE_p_ofxCvBlob); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->length = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvBlob_length_get(lua_State* L) { { int SWIG_arg = 0; ofxCvBlob *arg1 = (ofxCvBlob *) 0 ; float result;
    SWIG_check_num_args("ofxCvBlob::length",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvBlob::length",1,"ofxCvBlob *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvBlob,0))){
      SWIG_fail_ptr("CvBlob_length_get",1,SWIGTYPE_p_ofxCvBlob); }  result = (float) ((arg1)->length);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvBlob_boundingRect_set(lua_State* L) { { int SWIG_arg = 0; ofxCvBlob *arg1 = (ofxCvBlob *) 0 ;
    ofRectangle *arg2 = (ofRectangle *) 0 ; SWIG_check_num_args("ofxCvBlob::boundingRect",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvBlob::boundingRect",1,"ofxCvBlob *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxCvBlob::boundingRect",2,"ofRectangle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvBlob,0))){
      SWIG_fail_ptr("CvBlob_boundingRect_set",1,SWIGTYPE_p_ofxCvBlob); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
      SWIG_fail_ptr("CvBlob_boundingRect_set",2,SWIGTYPE_p_ofRectangle); }  if (arg1) (arg1)->boundingRect = *arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvBlob_boundingRect_get(lua_State* L) { { int SWIG_arg = 0; ofxCvBlob *arg1 = (ofxCvBlob *) 0 ;
    ofRectangle *result = 0 ; SWIG_check_num_args("ofxCvBlob::boundingRect",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvBlob::boundingRect",1,"ofxCvBlob *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvBlob,0))){
      SWIG_fail_ptr("CvBlob_boundingRect_get",1,SWIGTYPE_p_ofxCvBlob); }  result = (ofRectangle *)& ((arg1)->boundingRect);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofRectangle,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_CvBlob_centroid_set(lua_State* L) { { int SWIG_arg = 0; ofxCvBlob *arg1 = (ofxCvBlob *) 0 ;
    ofDefaultVec3 *arg2 = (ofDefaultVec3 *) 0 ; SWIG_check_num_args("ofxCvBlob::centroid",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvBlob::centroid",1,"ofxCvBlob *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxCvBlob::centroid",2,"ofDefaultVec3 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvBlob,0))){
      SWIG_fail_ptr("CvBlob_centroid_set",1,SWIGTYPE_p_ofxCvBlob); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_glm__vec3,0))){
      SWIG_fail_ptr("CvBlob_centroid_set",2,SWIGTYPE_p_glm__vec3); }  if (arg1) (arg1)->centroid = *arg2; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvBlob_centroid_get(lua_State* L) { { int SWIG_arg = 0; ofxCvBlob *arg1 = (ofxCvBlob *) 0 ;
    ofDefaultVec3 *result = 0 ; SWIG_check_num_args("ofxCvBlob::centroid",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvBlob::centroid",1,"ofxCvBlob *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvBlob,0))){
      SWIG_fail_ptr("CvBlob_centroid_get",1,SWIGTYPE_p_ofxCvBlob); }  result = (ofDefaultVec3 *)& ((arg1)->centroid);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_glm__vec3,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_CvBlob_hole_set(lua_State* L) { { int SWIG_arg = 0; ofxCvBlob *arg1 = (ofxCvBlob *) 0 ; bool arg2 ;
    SWIG_check_num_args("ofxCvBlob::hole",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvBlob::hole",1,"ofxCvBlob *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxCvBlob::hole",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvBlob,0))){
      SWIG_fail_ptr("CvBlob_hole_set",1,SWIGTYPE_p_ofxCvBlob); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->hole = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvBlob_hole_get(lua_State* L) { { int SWIG_arg = 0; ofxCvBlob *arg1 = (ofxCvBlob *) 0 ; bool result;
    SWIG_check_num_args("ofxCvBlob::hole",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvBlob::hole",1,"ofxCvBlob *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvBlob,0))){
      SWIG_fail_ptr("CvBlob_hole_get",1,SWIGTYPE_p_ofxCvBlob); }  result = (bool) ((arg1)->hole);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvBlob_pts_set(lua_State* L) { { int SWIG_arg = 0; ofxCvBlob *arg1 = (ofxCvBlob *) 0 ;
    std::vector< ofDefaultVec3 > *arg2 = (std::vector< ofDefaultVec3 > *) 0 ; SWIG_check_num_args("ofxCvBlob::pts",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvBlob::pts",1,"ofxCvBlob *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxCvBlob::pts",2,"std::vector< ofDefaultVec3 > *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvBlob,0))){
      SWIG_fail_ptr("CvBlob_pts_set",1,SWIGTYPE_p_ofxCvBlob); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_glm__vec3_t,0))){
      SWIG_fail_ptr("CvBlob_pts_set",2,SWIGTYPE_p_std__vectorT_glm__vec3_t); }  if (arg1) (arg1)->pts = *arg2; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvBlob_pts_get(lua_State* L) { { int SWIG_arg = 0; ofxCvBlob *arg1 = (ofxCvBlob *) 0 ;
    std::vector< ofDefaultVec3 > *result = 0 ; SWIG_check_num_args("ofxCvBlob::pts",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvBlob::pts",1,"ofxCvBlob *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvBlob,0))){
      SWIG_fail_ptr("CvBlob_pts_get",1,SWIGTYPE_p_ofxCvBlob); }  result = (std::vector< ofDefaultVec3 > *)& ((arg1)->pts);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_glm__vec3_t,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CvBlob_nPts_set(lua_State* L) { { int SWIG_arg = 0; ofxCvBlob *arg1 = (ofxCvBlob *) 0 ; int arg2 ;
    SWIG_check_num_args("ofxCvBlob::nPts",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvBlob::nPts",1,"ofxCvBlob *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvBlob::nPts",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvBlob,0))){
      SWIG_fail_ptr("CvBlob_nPts_set",1,SWIGTYPE_p_ofxCvBlob); }  arg2 = (int)lua_tonumber(L, 2); if (arg1) (arg1)->nPts = arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvBlob_nPts_get(lua_State* L) { { int SWIG_arg = 0; ofxCvBlob *arg1 = (ofxCvBlob *) 0 ; int result;
    SWIG_check_num_args("ofxCvBlob::nPts",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvBlob::nPts",1,"ofxCvBlob *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvBlob,0))){
      SWIG_fail_ptr("CvBlob_nPts_get",1,SWIGTYPE_p_ofxCvBlob); }  result = (int) ((arg1)->nPts);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_CvBlob(lua_State* L) { { int SWIG_arg = 0; ofxCvBlob *result = 0 ;
    SWIG_check_num_args("ofxCvBlob::ofxCvBlob",0,0) result = (ofxCvBlob *)new ofxCvBlob();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxCvBlob,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_CvBlob_draw__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxCvBlob *arg1 = (ofxCvBlob *) 0 ; float arg2 ;
    float arg3 ; SWIG_check_num_args("ofxCvBlob::draw",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvBlob::draw",1,"ofxCvBlob *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvBlob::draw",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvBlob::draw",3,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvBlob,0))){
      SWIG_fail_ptr("CvBlob_draw",1,SWIGTYPE_p_ofxCvBlob); }  arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3); (arg1)->draw(arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvBlob_draw__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxCvBlob *arg1 = (ofxCvBlob *) 0 ; float arg2 ;
    SWIG_check_num_args("ofxCvBlob::draw",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvBlob::draw",1,"ofxCvBlob *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvBlob::draw",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvBlob,0))){
      SWIG_fail_ptr("CvBlob_draw",1,SWIGTYPE_p_ofxCvBlob); }  arg2 = (float)lua_tonumber(L, 2); (arg1)->draw(arg2);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvBlob_draw__SWIG_2(lua_State* L) { { int SWIG_arg = 0; ofxCvBlob *arg1 = (ofxCvBlob *) 0 ;
    SWIG_check_num_args("ofxCvBlob::draw",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvBlob::draw",1,"ofxCvBlob *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvBlob,0))){
      SWIG_fail_ptr("CvBlob_draw",1,SWIGTYPE_p_ofxCvBlob); }  (arg1)->draw(); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CvBlob_draw(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 1) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvBlob, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_CvBlob_draw__SWIG_2(L);}  }  if (argc == 2) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvBlob, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_CvBlob_draw__SWIG_1(L);}  }  } 
  if (argc == 3) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvBlob, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_CvBlob_draw__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvBlob_draw'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxCvBlob::draw(float,float)\n" "    ofxCvBlob::draw(float)\n" "    ofxCvBlob::draw()\n"); lua_error(L);return 0; }
static void swig_delete_CvBlob(void *obj) {
ofxCvBlob *arg1 = (ofxCvBlob *) obj;
delete arg1;
}
static int _proxy__wrap_new_CvBlob(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CvBlob);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CvBlob_attributes[] = {
    { "area", _wrap_CvBlob_area_get, _wrap_CvBlob_area_set },
    { "length", _wrap_CvBlob_length_get, _wrap_CvBlob_length_set },
    { "boundingRect", _wrap_CvBlob_boundingRect_get, _wrap_CvBlob_boundingRect_set },
    { "centroid", _wrap_CvBlob_centroid_get, _wrap_CvBlob_centroid_set },
    { "hole", _wrap_CvBlob_hole_get, _wrap_CvBlob_hole_set },
    { "pts", _wrap_CvBlob_pts_get, _wrap_CvBlob_pts_set },
    { "nPts", _wrap_CvBlob_nPts_get, _wrap_CvBlob_nPts_set },
    {0,0,0}
};
static swig_lua_method swig_CvBlob_methods[]= {
    { "draw", _wrap_CvBlob_draw},
    {0,0}
};
static swig_lua_method swig_CvBlob_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CvBlob_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CvBlob_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CvBlob_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CvBlob_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CvBlob_Sf_SwigStatic = {
    "CvBlob",
    swig_CvBlob_Sf_SwigStatic_methods,
    swig_CvBlob_Sf_SwigStatic_attributes,
    swig_CvBlob_Sf_SwigStatic_constants,
    swig_CvBlob_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CvBlob_bases[] = {0};
static const char *swig_CvBlob_base_names[] = {0};
static swig_lua_class _wrap_class_CvBlob = { "CvBlob", "CvBlob", &SWIGTYPE_p_ofxCvBlob,_proxy__wrap_new_CvBlob, swig_delete_CvBlob, swig_CvBlob_methods, swig_CvBlob_attributes, &swig_CvBlob_Sf_SwigStatic, swig_CvBlob_meta, swig_CvBlob_bases, swig_CvBlob_base_names };

static int _wrap_CvHaarFinder_blobs_set(lua_State* L) { { int SWIG_arg = 0; ofxCvHaarFinder *arg1 = (ofxCvHaarFinder *) 0 ;
    std::vector< ofxCvBlob > *arg2 = (std::vector< ofxCvBlob > *) 0 ; SWIG_check_num_args("ofxCvHaarFinder::blobs",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvHaarFinder::blobs",1,"ofxCvHaarFinder *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxCvHaarFinder::blobs",2,"std::vector< ofxCvBlob > *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvHaarFinder,0))){
      SWIG_fail_ptr("CvHaarFinder_blobs_set",1,SWIGTYPE_p_ofxCvHaarFinder); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_ofxCvBlob_t,0))){
      SWIG_fail_ptr("CvHaarFinder_blobs_set",2,SWIGTYPE_p_std__vectorT_ofxCvBlob_t); }  if (arg1) (arg1)->blobs = *arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvHaarFinder_blobs_get(lua_State* L) { { int SWIG_arg = 0; ofxCvHaarFinder *arg1 = (ofxCvHaarFinder *) 0 ;
    std::vector< ofxCvBlob > *result = 0 ; SWIG_check_num_args("ofxCvHaarFinder::blobs",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvHaarFinder::blobs",1,"ofxCvHaarFinder *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvHaarFinder,0))){
      SWIG_fail_ptr("CvHaarFinder_blobs_get",1,SWIGTYPE_p_ofxCvHaarFinder); } 
    result = (std::vector< ofxCvBlob > *)& ((arg1)->blobs);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_ofxCvBlob_t,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CvHaarFinder_nBlobs_set(lua_State* L) { { int SWIG_arg = 0; ofxCvHaarFinder *arg1 = (ofxCvHaarFinder *) 0 ;
    int arg2 ; SWIG_check_num_args("ofxCvHaarFinder::nBlobs",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvHaarFinder::nBlobs",1,"ofxCvHaarFinder *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvHaarFinder::nBlobs",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvHaarFinder,0))){
      SWIG_fail_ptr("CvHaarFinder_nBlobs_set",1,SWIGTYPE_p_ofxCvHaarFinder); }  arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->nBlobs = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvHaarFinder_nBlobs_get(lua_State* L) { { int SWIG_arg = 0; ofxCvHaarFinder *arg1 = (ofxCvHaarFinder *) 0 ;
    int result; SWIG_check_num_args("ofxCvHaarFinder::nBlobs",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvHaarFinder::nBlobs",1,"ofxCvHaarFinder *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvHaarFinder,0))){
      SWIG_fail_ptr("CvHaarFinder_nBlobs_get",1,SWIGTYPE_p_ofxCvHaarFinder); }  result = (int) ((arg1)->nBlobs);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_CvHaarFinder__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxCvHaarFinder *result = 0 ;
    SWIG_check_num_args("ofxCvHaarFinder::ofxCvHaarFinder",0,0) result = (ofxCvHaarFinder *)new ofxCvHaarFinder();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxCvHaarFinder,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_new_CvHaarFinder__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxCvHaarFinder *arg1 = 0 ;
    ofxCvHaarFinder *result = 0 ; SWIG_check_num_args("ofxCvHaarFinder::ofxCvHaarFinder",1,1)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofxCvHaarFinder::ofxCvHaarFinder",1,"ofxCvHaarFinder const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvHaarFinder,0))){
      SWIG_fail_ptr("new_CvHaarFinder",1,SWIGTYPE_p_ofxCvHaarFinder); } 
    result = (ofxCvHaarFinder *)new ofxCvHaarFinder((ofxCvHaarFinder const &)*arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxCvHaarFinder,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_new_CvHaarFinder(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_CvHaarFinder__SWIG_0(L);}  if (argc == 1) { int _v = 0; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvHaarFinder, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_CvHaarFinder__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CvHaarFinder'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxCvHaarFinder::ofxCvHaarFinder()\n" "    ofxCvHaarFinder::ofxCvHaarFinder(ofxCvHaarFinder const &)\n");
  lua_error(L);return 0; }
static int _wrap_CvHaarFinder_setup(lua_State* L) { { int SWIG_arg = 0; ofxCvHaarFinder *arg1 = (ofxCvHaarFinder *) 0 ;
    std::string arg2 ; SWIG_check_num_args("ofxCvHaarFinder::setup",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvHaarFinder::setup",1,"ofxCvHaarFinder *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxCvHaarFinder::setup",2,"std::string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvHaarFinder,0))){
      SWIG_fail_ptr("CvHaarFinder_setup",1,SWIGTYPE_p_ofxCvHaarFinder); }  { size_t len;
      const char *ptr = lua_tolstring(L, 2, &len); (&arg2)->assign(ptr, len); }  (arg1)->setup(arg2); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvHaarFinder_setScaleHaar(lua_State* L) { { int SWIG_arg = 0; ofxCvHaarFinder *arg1 = (ofxCvHaarFinder *) 0 ;
    float arg2 ; SWIG_check_num_args("ofxCvHaarFinder::setScaleHaar",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvHaarFinder::setScaleHaar",1,"ofxCvHaarFinder *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvHaarFinder::setScaleHaar",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvHaarFinder,0))){
      SWIG_fail_ptr("CvHaarFinder_setScaleHaar",1,SWIGTYPE_p_ofxCvHaarFinder); }  arg2 = (float)lua_tonumber(L, 2);
    (arg1)->setScaleHaar(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvHaarFinder_setNeighbors(lua_State* L) { { int SWIG_arg = 0; ofxCvHaarFinder *arg1 = (ofxCvHaarFinder *) 0 ;
    unsigned int arg2 ; SWIG_check_num_args("ofxCvHaarFinder::setNeighbors",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvHaarFinder::setNeighbors",1,"ofxCvHaarFinder *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvHaarFinder::setNeighbors",2,"unsigned int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvHaarFinder,0))){
      SWIG_fail_ptr("CvHaarFinder_setNeighbors",1,SWIGTYPE_p_ofxCvHaarFinder); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (unsigned int)lua_tonumber(L, 2);
    (arg1)->setNeighbors(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvHaarFinder_findHaarObjects__SWIG_0(lua_State* L) { { int SWIG_arg = 0;
    ofxCvHaarFinder *arg1 = (ofxCvHaarFinder *) 0 ; ofImage *arg2 = 0 ; int arg3 ; int arg4 ; int result;
    SWIG_check_num_args("ofxCvHaarFinder::findHaarObjects",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",1,"ofxCvHaarFinder *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",2,"ofImage &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",4,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvHaarFinder,0))){
      SWIG_fail_ptr("CvHaarFinder_findHaarObjects",1,SWIGTYPE_p_ofxCvHaarFinder); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
      SWIG_fail_ptr("CvHaarFinder_findHaarObjects",2,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg3 = (int)lua_tonumber(L, 3);
    arg4 = (int)lua_tonumber(L, 4); result = (int)(arg1)->findHaarObjects(*arg2,arg3,arg4);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvHaarFinder_findHaarObjects__SWIG_1(lua_State* L) { { int SWIG_arg = 0;
    ofxCvHaarFinder *arg1 = (ofxCvHaarFinder *) 0 ; ofImage *arg2 = 0 ; int arg3 ; int result;
    SWIG_check_num_args("ofxCvHaarFinder::findHaarObjects",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",1,"ofxCvHaarFinder *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",2,"ofImage &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",3,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvHaarFinder,0))){
      SWIG_fail_ptr("CvHaarFinder_findHaarObjects",1,SWIGTYPE_p_ofxCvHaarFinder); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
      SWIG_fail_ptr("CvHaarFinder_findHaarObjects",2,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg3 = (int)lua_tonumber(L, 3);
    result = (int)(arg1)->findHaarObjects(*arg2,arg3); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvHaarFinder_findHaarObjects__SWIG_2(lua_State* L) { { int SWIG_arg = 0;
    ofxCvHaarFinder *arg1 = (ofxCvHaarFinder *) 0 ; ofImage *arg2 = 0 ; int result;
    SWIG_check_num_args("ofxCvHaarFinder::findHaarObjects",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",1,"ofxCvHaarFinder *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",2,"ofImage &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvHaarFinder,0))){
      SWIG_fail_ptr("CvHaarFinder_findHaarObjects",1,SWIGTYPE_p_ofxCvHaarFinder); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
      SWIG_fail_ptr("CvHaarFinder_findHaarObjects",2,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
    result = (int)(arg1)->findHaarObjects(*arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvHaarFinder_findHaarObjects__SWIG_3(lua_State* L) { { int SWIG_arg = 0;
    ofxCvHaarFinder *arg1 = (ofxCvHaarFinder *) 0 ; ofxCvGrayscaleImage *arg2 = 0 ; int arg3 ; int arg4 ; int result;
    SWIG_check_num_args("ofxCvHaarFinder::findHaarObjects",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",1,"ofxCvHaarFinder *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",2,"ofxCvGrayscaleImage const &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",4,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvHaarFinder,0))){
      SWIG_fail_ptr("CvHaarFinder_findHaarObjects",1,SWIGTYPE_p_ofxCvHaarFinder); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
      SWIG_fail_ptr("CvHaarFinder_findHaarObjects",2,SWIGTYPE_p_ofxCvGrayscaleImage); }  arg3 = (int)lua_tonumber(L, 3);
    arg4 = (int)lua_tonumber(L, 4); result = (int)(arg1)->findHaarObjects((ofxCvGrayscaleImage const &)*arg2,arg3,arg4);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvHaarFinder_findHaarObjects__SWIG_4(lua_State* L) { { int SWIG_arg = 0;
    ofxCvHaarFinder *arg1 = (ofxCvHaarFinder *) 0 ; ofxCvGrayscaleImage *arg2 = 0 ; int arg3 ; int result;
    SWIG_check_num_args("ofxCvHaarFinder::findHaarObjects",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",1,"ofxCvHaarFinder *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",2,"ofxCvGrayscaleImage const &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",3,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvHaarFinder,0))){
      SWIG_fail_ptr("CvHaarFinder_findHaarObjects",1,SWIGTYPE_p_ofxCvHaarFinder); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
      SWIG_fail_ptr("CvHaarFinder_findHaarObjects",2,SWIGTYPE_p_ofxCvGrayscaleImage); }  arg3 = (int)lua_tonumber(L, 3);
    result = (int)(arg1)->findHaarObjects((ofxCvGrayscaleImage const &)*arg2,arg3);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvHaarFinder_findHaarObjects__SWIG_5(lua_State* L) { { int SWIG_arg = 0;
    ofxCvHaarFinder *arg1 = (ofxCvHaarFinder *) 0 ; ofxCvGrayscaleImage *arg2 = 0 ; int result;
    SWIG_check_num_args("ofxCvHaarFinder::findHaarObjects",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",1,"ofxCvHaarFinder *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",2,"ofxCvGrayscaleImage const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvHaarFinder,0))){
      SWIG_fail_ptr("CvHaarFinder_findHaarObjects",1,SWIGTYPE_p_ofxCvHaarFinder); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
      SWIG_fail_ptr("CvHaarFinder_findHaarObjects",2,SWIGTYPE_p_ofxCvGrayscaleImage); } 
    result = (int)(arg1)->findHaarObjects((ofxCvGrayscaleImage const &)*arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvHaarFinder_findHaarObjects__SWIG_6(lua_State* L) { { int SWIG_arg = 0;
    ofxCvHaarFinder *arg1 = (ofxCvHaarFinder *) 0 ; ofxCvGrayscaleImage *arg2 = 0 ; ofRectangle *arg3 = 0 ; int arg4 ;
    int arg5 ; int result; SWIG_check_num_args("ofxCvHaarFinder::findHaarObjects",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",1,"ofxCvHaarFinder *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",2,"ofxCvGrayscaleImage const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",3,"ofRectangle &");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",4,"int");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",5,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvHaarFinder,0))){
      SWIG_fail_ptr("CvHaarFinder_findHaarObjects",1,SWIGTYPE_p_ofxCvHaarFinder); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
      SWIG_fail_ptr("CvHaarFinder_findHaarObjects",2,SWIGTYPE_p_ofxCvGrayscaleImage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofRectangle,0))){
      SWIG_fail_ptr("CvHaarFinder_findHaarObjects",3,SWIGTYPE_p_ofRectangle); }  arg4 = (int)lua_tonumber(L, 4);
    arg5 = (int)lua_tonumber(L, 5); result = (int)(arg1)->findHaarObjects((ofxCvGrayscaleImage const &)*arg2,*arg3,arg4,arg5);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvHaarFinder_findHaarObjects__SWIG_7(lua_State* L) { { int SWIG_arg = 0;
    ofxCvHaarFinder *arg1 = (ofxCvHaarFinder *) 0 ; ofxCvGrayscaleImage *arg2 = 0 ; ofRectangle *arg3 = 0 ; int arg4 ;
    int result; SWIG_check_num_args("ofxCvHaarFinder::findHaarObjects",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",1,"ofxCvHaarFinder *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",2,"ofxCvGrayscaleImage const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",3,"ofRectangle &");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",4,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvHaarFinder,0))){
      SWIG_fail_ptr("CvHaarFinder_findHaarObjects",1,SWIGTYPE_p_ofxCvHaarFinder); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
      SWIG_fail_ptr("CvHaarFinder_findHaarObjects",2,SWIGTYPE_p_ofxCvGrayscaleImage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofRectangle,0))){
      SWIG_fail_ptr("CvHaarFinder_findHaarObjects",3,SWIGTYPE_p_ofRectangle); }  arg4 = (int)lua_tonumber(L, 4);
    result = (int)(arg1)->findHaarObjects((ofxCvGrayscaleImage const &)*arg2,*arg3,arg4);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvHaarFinder_findHaarObjects__SWIG_8(lua_State* L) { { int SWIG_arg = 0;
    ofxCvHaarFinder *arg1 = (ofxCvHaarFinder *) 0 ; ofxCvGrayscaleImage *arg2 = 0 ; ofRectangle *arg3 = 0 ; int result;
    SWIG_check_num_args("ofxCvHaarFinder::findHaarObjects",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",1,"ofxCvHaarFinder *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",2,"ofxCvGrayscaleImage const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",3,"ofRectangle &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvHaarFinder,0))){
      SWIG_fail_ptr("CvHaarFinder_findHaarObjects",1,SWIGTYPE_p_ofxCvHaarFinder); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
      SWIG_fail_ptr("CvHaarFinder_findHaarObjects",2,SWIGTYPE_p_ofxCvGrayscaleImage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofRectangle,0))){
      SWIG_fail_ptr("CvHaarFinder_findHaarObjects",3,SWIGTYPE_p_ofRectangle); } 
    result = (int)(arg1)->findHaarObjects((ofxCvGrayscaleImage const &)*arg2,*arg3);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvHaarFinder_findHaarObjects__SWIG_9(lua_State* L) { { int SWIG_arg = 0;
    ofxCvHaarFinder *arg1 = (ofxCvHaarFinder *) 0 ; ofxCvGrayscaleImage *arg2 = 0 ; int arg3 ; int arg4 ; int arg5 ; int arg6 ;
    int arg7 ; int arg8 ; int result; SWIG_check_num_args("ofxCvHaarFinder::findHaarObjects",8,8)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",1,"ofxCvHaarFinder *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",2,"ofxCvGrayscaleImage const &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",4,"int");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",5,"int");
    if(!lua_isnumber(L,6)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",6,"int");
    if(!lua_isnumber(L,7)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",7,"int");
    if(!lua_isnumber(L,8)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",8,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvHaarFinder,0))){
      SWIG_fail_ptr("CvHaarFinder_findHaarObjects",1,SWIGTYPE_p_ofxCvHaarFinder); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
      SWIG_fail_ptr("CvHaarFinder_findHaarObjects",2,SWIGTYPE_p_ofxCvGrayscaleImage); }  arg3 = (int)lua_tonumber(L, 3);
    arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); arg6 = (int)lua_tonumber(L, 6);
    arg7 = (int)lua_tonumber(L, 7); arg8 = (int)lua_tonumber(L, 8);
    result = (int)(arg1)->findHaarObjects((ofxCvGrayscaleImage const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvHaarFinder_findHaarObjects__SWIG_10(lua_State* L) { { int SWIG_arg = 0;
    ofxCvHaarFinder *arg1 = (ofxCvHaarFinder *) 0 ; ofxCvGrayscaleImage *arg2 = 0 ; int arg3 ; int arg4 ; int arg5 ; int arg6 ;
    int arg7 ; int result; SWIG_check_num_args("ofxCvHaarFinder::findHaarObjects",7,7)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",1,"ofxCvHaarFinder *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",2,"ofxCvGrayscaleImage const &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",4,"int");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",5,"int");
    if(!lua_isnumber(L,6)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",6,"int");
    if(!lua_isnumber(L,7)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",7,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvHaarFinder,0))){
      SWIG_fail_ptr("CvHaarFinder_findHaarObjects",1,SWIGTYPE_p_ofxCvHaarFinder); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
      SWIG_fail_ptr("CvHaarFinder_findHaarObjects",2,SWIGTYPE_p_ofxCvGrayscaleImage); }  arg3 = (int)lua_tonumber(L, 3);
    arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); arg6 = (int)lua_tonumber(L, 6);
    arg7 = (int)lua_tonumber(L, 7);
    result = (int)(arg1)->findHaarObjects((ofxCvGrayscaleImage const &)*arg2,arg3,arg4,arg5,arg6,arg7);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvHaarFinder_findHaarObjects__SWIG_11(lua_State* L) { { int SWIG_arg = 0;
    ofxCvHaarFinder *arg1 = (ofxCvHaarFinder *) 0 ; ofxCvGrayscaleImage *arg2 = 0 ; int arg3 ; int arg4 ; int arg5 ; int arg6 ;
    int result; SWIG_check_num_args("ofxCvHaarFinder::findHaarObjects",6,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",1,"ofxCvHaarFinder *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",2,"ofxCvGrayscaleImage const &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",4,"int");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",5,"int");
    if(!lua_isnumber(L,6)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",6,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvHaarFinder,0))){
      SWIG_fail_ptr("CvHaarFinder_findHaarObjects",1,SWIGTYPE_p_ofxCvHaarFinder); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
      SWIG_fail_ptr("CvHaarFinder_findHaarObjects",2,SWIGTYPE_p_ofxCvGrayscaleImage); }  arg3 = (int)lua_tonumber(L, 3);
    arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); arg6 = (int)lua_tonumber(L, 6);
    result = (int)(arg1)->findHaarObjects((ofxCvGrayscaleImage const &)*arg2,arg3,arg4,arg5,arg6);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvHaarFinder_findHaarObjects__SWIG_12(lua_State* L) { { int SWIG_arg = 0;
    ofxCvHaarFinder *arg1 = (ofxCvHaarFinder *) 0 ; ofPixels *arg2 = 0 ; int arg3 ; int arg4 ; int result;
    SWIG_check_num_args("ofxCvHaarFinder::findHaarObjects",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",1,"ofxCvHaarFinder *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",2,"ofPixels &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",4,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvHaarFinder,0))){
      SWIG_fail_ptr("CvHaarFinder_findHaarObjects",1,SWIGTYPE_p_ofxCvHaarFinder); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
      SWIG_fail_ptr("CvHaarFinder_findHaarObjects",2,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg3 = (int)lua_tonumber(L, 3);
    arg4 = (int)lua_tonumber(L, 4); result = (int)(arg1)->findHaarObjects(*arg2,arg3,arg4);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvHaarFinder_findHaarObjects__SWIG_13(lua_State* L) { { int SWIG_arg = 0;
    ofxCvHaarFinder *arg1 = (ofxCvHaarFinder *) 0 ; ofPixels *arg2 = 0 ; int arg3 ; int result;
    SWIG_check_num_args("ofxCvHaarFinder::findHaarObjects",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",1,"ofxCvHaarFinder *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",2,"ofPixels &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",3,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvHaarFinder,0))){
      SWIG_fail_ptr("CvHaarFinder_findHaarObjects",1,SWIGTYPE_p_ofxCvHaarFinder); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
      SWIG_fail_ptr("CvHaarFinder_findHaarObjects",2,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg3 = (int)lua_tonumber(L, 3);
    result = (int)(arg1)->findHaarObjects(*arg2,arg3); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvHaarFinder_findHaarObjects__SWIG_14(lua_State* L) { { int SWIG_arg = 0;
    ofxCvHaarFinder *arg1 = (ofxCvHaarFinder *) 0 ; ofPixels *arg2 = 0 ; int result;
    SWIG_check_num_args("ofxCvHaarFinder::findHaarObjects",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",1,"ofxCvHaarFinder *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",2,"ofPixels &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvHaarFinder,0))){
      SWIG_fail_ptr("CvHaarFinder_findHaarObjects",1,SWIGTYPE_p_ofxCvHaarFinder); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
      SWIG_fail_ptr("CvHaarFinder_findHaarObjects",2,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
    result = (int)(arg1)->findHaarObjects(*arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvHaarFinder_findHaarObjects(lua_State* L) { int argc; int argv[9]={ 1,2,3,4,5,6,7,8,9} ; argc = lua_gettop(L);
  if (argc == 2) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvHaarFinder, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CvHaarFinder_findHaarObjects__SWIG_2(L);}  }  } 
  if (argc == 2) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvHaarFinder, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CvHaarFinder_findHaarObjects__SWIG_5(L);}  }  } 
  if (argc == 2) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvHaarFinder, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CvHaarFinder_findHaarObjects__SWIG_14(L);}  }  } 
  if (argc == 3) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvHaarFinder, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_CvHaarFinder_findHaarObjects__SWIG_1(L);}  }  }  }  if (argc == 3) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvHaarFinder, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofRectangle, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CvHaarFinder_findHaarObjects__SWIG_8(L);}  }  }  } 
  if (argc == 3) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvHaarFinder, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_CvHaarFinder_findHaarObjects__SWIG_13(L);}  }  }  }  if (argc == 3) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvHaarFinder, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_CvHaarFinder_findHaarObjects__SWIG_4(L);}  }  }  }  if (argc == 4) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvHaarFinder, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_CvHaarFinder_findHaarObjects__SWIG_0(L);}  }  }  }  } 
  if (argc == 4) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvHaarFinder, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_CvHaarFinder_findHaarObjects__SWIG_12(L);}  }  }  }  } 
  if (argc == 4) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvHaarFinder, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofRectangle, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) {
            return _wrap_CvHaarFinder_findHaarObjects__SWIG_7(L);}  }  }  }  }  if (argc == 4) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvHaarFinder, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_CvHaarFinder_findHaarObjects__SWIG_3(L);}  }  }  }  } 
  if (argc == 5) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvHaarFinder, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofRectangle, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_CvHaarFinder_findHaarObjects__SWIG_6(L);}  }  }  }  }  } 
  if (argc == 6) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvHaarFinder, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { return _wrap_CvHaarFinder_findHaarObjects__SWIG_11(L);}  }  }  }  }  }
     }  if (argc == 7) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvHaarFinder, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) {
                  return _wrap_CvHaarFinder_findHaarObjects__SWIG_10(L);}  }  }  }  }  }  }  }  if (argc == 8) { int _v = 0; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvHaarFinder, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { return _wrap_CvHaarFinder_findHaarObjects__SWIG_9(L);}  }  }  }  }
           }  }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvHaarFinder_findHaarObjects'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxCvHaarFinder::findHaarObjects(ofImage &,int,int)\n"
  "    ofxCvHaarFinder::findHaarObjects(ofImage &,int)\n" "    ofxCvHaarFinder::findHaarObjects(ofImage &)\n"
  "    ofxCvHaarFinder::findHaarObjects(ofxCvGrayscaleImage const &,int,int)\n"
  "    ofxCvHaarFinder::findHaarObjects(ofxCvGrayscaleImage const &,int)\n"
  "    ofxCvHaarFinder::findHaarObjects(ofxCvGrayscaleImage const &)\n"
  "    ofxCvHaarFinder::findHaarObjects(ofxCvGrayscaleImage const &,ofRectangle &,int,int)\n"
  "    ofxCvHaarFinder::findHaarObjects(ofxCvGrayscaleImage const &,ofRectangle &,int)\n"
  "    ofxCvHaarFinder::findHaarObjects(ofxCvGrayscaleImage const &,ofRectangle &)\n"
  "    ofxCvHaarFinder::findHaarObjects(ofxCvGrayscaleImage const &,int,int,int,int,int,int)\n"
  "    ofxCvHaarFinder::findHaarObjects(ofxCvGrayscaleImage const &,int,int,int,int,int)\n"
  "    ofxCvHaarFinder::findHaarObjects(ofxCvGrayscaleImage const &,int,int,int,int)\n"
  "    ofxCvHaarFinder::findHaarObjects(ofPixels &,int,int)\n" "    ofxCvHaarFinder::findHaarObjects(ofPixels &,int)\n"
  "    ofxCvHaarFinder::findHaarObjects(ofPixels &)\n"); lua_error(L);return 0; }
static int _wrap_CvHaarFinder_getWidth(lua_State* L) { { int SWIG_arg = 0; ofxCvHaarFinder *arg1 = (ofxCvHaarFinder *) 0 ;
    float result; SWIG_check_num_args("ofxCvHaarFinder::getWidth",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvHaarFinder::getWidth",1,"ofxCvHaarFinder *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvHaarFinder,0))){
      SWIG_fail_ptr("CvHaarFinder_getWidth",1,SWIGTYPE_p_ofxCvHaarFinder); }  result = (float)(arg1)->getWidth();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvHaarFinder_getHeight(lua_State* L) { { int SWIG_arg = 0; ofxCvHaarFinder *arg1 = (ofxCvHaarFinder *) 0 ;
    float result; SWIG_check_num_args("ofxCvHaarFinder::getHeight",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvHaarFinder::getHeight",1,"ofxCvHaarFinder *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvHaarFinder,0))){
      SWIG_fail_ptr("CvHaarFinder_getHeight",1,SWIGTYPE_p_ofxCvHaarFinder); }  result = (float)(arg1)->getHeight();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvHaarFinder_draw(lua_State* L) { { int SWIG_arg = 0; ofxCvHaarFinder *arg1 = (ofxCvHaarFinder *) 0 ;
    float arg2 ; float arg3 ; SWIG_check_num_args("ofxCvHaarFinder::draw",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvHaarFinder::draw",1,"ofxCvHaarFinder *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvHaarFinder::draw",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvHaarFinder::draw",3,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvHaarFinder,0))){
      SWIG_fail_ptr("CvHaarFinder_draw",1,SWIGTYPE_p_ofxCvHaarFinder); }  arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3); (arg1)->draw(arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static void swig_delete_CvHaarFinder(void *obj) {
ofxCvHaarFinder *arg1 = (ofxCvHaarFinder *) obj;
delete arg1;
}
static int _proxy__wrap_new_CvHaarFinder(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CvHaarFinder);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CvHaarFinder_attributes[] = {
    { "blobs", _wrap_CvHaarFinder_blobs_get, _wrap_CvHaarFinder_blobs_set },
    { "nBlobs", _wrap_CvHaarFinder_nBlobs_get, _wrap_CvHaarFinder_nBlobs_set },
    {0,0,0}
};
static swig_lua_method swig_CvHaarFinder_methods[]= {
    { "setup", _wrap_CvHaarFinder_setup},
    { "setScaleHaar", _wrap_CvHaarFinder_setScaleHaar},
    { "setNeighbors", _wrap_CvHaarFinder_setNeighbors},
    { "findHaarObjects", _wrap_CvHaarFinder_findHaarObjects},
    { "getWidth", _wrap_CvHaarFinder_getWidth},
    { "getHeight", _wrap_CvHaarFinder_getHeight},
    { "draw", _wrap_CvHaarFinder_draw},
    {0,0}
};
static swig_lua_method swig_CvHaarFinder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CvHaarFinder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CvHaarFinder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CvHaarFinder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CvHaarFinder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CvHaarFinder_Sf_SwigStatic = {
    "CvHaarFinder",
    swig_CvHaarFinder_Sf_SwigStatic_methods,
    swig_CvHaarFinder_Sf_SwigStatic_attributes,
    swig_CvHaarFinder_Sf_SwigStatic_constants,
    swig_CvHaarFinder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CvHaarFinder_bases[] = {0};
static const char *swig_CvHaarFinder_base_names[] = {0};
static swig_lua_class _wrap_class_CvHaarFinder = { "CvHaarFinder", "CvHaarFinder", &SWIGTYPE_p_ofxCvHaarFinder,_proxy__wrap_new_CvHaarFinder, swig_delete_CvHaarFinder, swig_CvHaarFinder_methods, swig_CvHaarFinder_attributes, &swig_CvHaarFinder_Sf_SwigStatic, swig_CvHaarFinder_meta, swig_CvHaarFinder_bases, swig_CvHaarFinder_base_names };

static int _wrap_CvContourFinder_blobs_set(lua_State* L) { { int SWIG_arg = 0;
    ofxCvContourFinder *arg1 = (ofxCvContourFinder *) 0 ; std::vector< ofxCvBlob > *arg2 = (std::vector< ofxCvBlob > *) 0 ;
    SWIG_check_num_args("ofxCvContourFinder::blobs",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvContourFinder::blobs",1,"ofxCvContourFinder *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxCvContourFinder::blobs",2,"std::vector< ofxCvBlob > *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvContourFinder,0))){
      SWIG_fail_ptr("CvContourFinder_blobs_set",1,SWIGTYPE_p_ofxCvContourFinder); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_ofxCvBlob_t,0))){
      SWIG_fail_ptr("CvContourFinder_blobs_set",2,SWIGTYPE_p_std__vectorT_ofxCvBlob_t); }  if (arg1) (arg1)->blobs = *arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvContourFinder_blobs_get(lua_State* L) { { int SWIG_arg = 0;
    ofxCvContourFinder *arg1 = (ofxCvContourFinder *) 0 ; std::vector< ofxCvBlob > *result = 0 ;
    SWIG_check_num_args("ofxCvContourFinder::blobs",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvContourFinder::blobs",1,"ofxCvContourFinder *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvContourFinder,0))){
      SWIG_fail_ptr("CvContourFinder_blobs_get",1,SWIGTYPE_p_ofxCvContourFinder); } 
    result = (std::vector< ofxCvBlob > *)& ((arg1)->blobs);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_ofxCvBlob_t,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CvContourFinder_nBlobs_set(lua_State* L) { { int SWIG_arg = 0;
    ofxCvContourFinder *arg1 = (ofxCvContourFinder *) 0 ; int arg2 ; SWIG_check_num_args("ofxCvContourFinder::nBlobs",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvContourFinder::nBlobs",1,"ofxCvContourFinder *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvContourFinder::nBlobs",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvContourFinder,0))){
      SWIG_fail_ptr("CvContourFinder_nBlobs_set",1,SWIGTYPE_p_ofxCvContourFinder); }  arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->nBlobs = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvContourFinder_nBlobs_get(lua_State* L) { { int SWIG_arg = 0;
    ofxCvContourFinder *arg1 = (ofxCvContourFinder *) 0 ; int result; SWIG_check_num_args("ofxCvContourFinder::nBlobs",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvContourFinder::nBlobs",1,"ofxCvContourFinder *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvContourFinder,0))){
      SWIG_fail_ptr("CvContourFinder_nBlobs_get",1,SWIGTYPE_p_ofxCvContourFinder); }  result = (int) ((arg1)->nBlobs);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_CvContourFinder(lua_State* L) { { int SWIG_arg = 0; ofxCvContourFinder *result = 0 ;
    SWIG_check_num_args("ofxCvContourFinder::ofxCvContourFinder",0,0) result = (ofxCvContourFinder *)new ofxCvContourFinder();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxCvContourFinder,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CvContourFinder_getWidth(lua_State* L) { { int SWIG_arg = 0;
    ofxCvContourFinder *arg1 = (ofxCvContourFinder *) 0 ; float result; SWIG_check_num_args("ofxCvContourFinder::getWidth",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvContourFinder::getWidth",1,"ofxCvContourFinder const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvContourFinder,0))){
      SWIG_fail_ptr("CvContourFinder_getWidth",1,SWIGTYPE_p_ofxCvContourFinder); } 
    result = (float)((ofxCvContourFinder const *)arg1)->getWidth(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvContourFinder_getHeight(lua_State* L) { { int SWIG_arg = 0;
    ofxCvContourFinder *arg1 = (ofxCvContourFinder *) 0 ; float result; SWIG_check_num_args("ofxCvContourFinder::getHeight",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvContourFinder::getHeight",1,"ofxCvContourFinder const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvContourFinder,0))){
      SWIG_fail_ptr("CvContourFinder_getHeight",1,SWIGTYPE_p_ofxCvContourFinder); } 
    result = (float)((ofxCvContourFinder const *)arg1)->getHeight(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvContourFinder_findContours__SWIG_0(lua_State* L) { { int SWIG_arg = 0;
    ofxCvContourFinder *arg1 = (ofxCvContourFinder *) 0 ; ofxCvGrayscaleImage *arg2 = 0 ; int arg3 ; int arg4 ; int arg5 ;
    bool arg6 ; bool arg7 ; int result; SWIG_check_num_args("ofxCvContourFinder::findContours",7,7)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvContourFinder::findContours",1,"ofxCvContourFinder *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvContourFinder::findContours",2,"ofxCvGrayscaleImage &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvContourFinder::findContours",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvContourFinder::findContours",4,"int");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxCvContourFinder::findContours",5,"int");
    if(!lua_isboolean(L,6)) SWIG_fail_arg("ofxCvContourFinder::findContours",6,"bool");
    if(!lua_isboolean(L,7)) SWIG_fail_arg("ofxCvContourFinder::findContours",7,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvContourFinder,0))){
      SWIG_fail_ptr("CvContourFinder_findContours",1,SWIGTYPE_p_ofxCvContourFinder); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
      SWIG_fail_ptr("CvContourFinder_findContours",2,SWIGTYPE_p_ofxCvGrayscaleImage); }  arg3 = (int)lua_tonumber(L, 3);
    arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); arg6 = (lua_toboolean(L, 6)!=0);
    arg7 = (lua_toboolean(L, 7)!=0); result = (int)(arg1)->findContours(*arg2,arg3,arg4,arg5,arg6,arg7);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvContourFinder_findContours__SWIG_1(lua_State* L) { { int SWIG_arg = 0;
    ofxCvContourFinder *arg1 = (ofxCvContourFinder *) 0 ; ofxCvGrayscaleImage *arg2 = 0 ; int arg3 ; int arg4 ; int arg5 ;
    bool arg6 ; int result; SWIG_check_num_args("ofxCvContourFinder::findContours",6,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvContourFinder::findContours",1,"ofxCvContourFinder *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvContourFinder::findContours",2,"ofxCvGrayscaleImage &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvContourFinder::findContours",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvContourFinder::findContours",4,"int");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxCvContourFinder::findContours",5,"int");
    if(!lua_isboolean(L,6)) SWIG_fail_arg("ofxCvContourFinder::findContours",6,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvContourFinder,0))){
      SWIG_fail_ptr("CvContourFinder_findContours",1,SWIGTYPE_p_ofxCvContourFinder); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
      SWIG_fail_ptr("CvContourFinder_findContours",2,SWIGTYPE_p_ofxCvGrayscaleImage); }  arg3 = (int)lua_tonumber(L, 3);
    arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); arg6 = (lua_toboolean(L, 6)!=0);
    result = (int)(arg1)->findContours(*arg2,arg3,arg4,arg5,arg6); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvContourFinder_findContours(lua_State* L) { int argc; int argv[8]={ 1,2,3,4,5,6,7,8} ; argc = lua_gettop(L);
  if (argc == 6) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvContourFinder, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isboolean(L,argv[5]); }  if (_v) { return _wrap_CvContourFinder_findContours__SWIG_1(L);}  }  }  }  }  }
     }  if (argc == 7) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvContourFinder, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isboolean(L,argv[5]); }  if (_v) { { _v = lua_isboolean(L,argv[6]); }  if (_v) {
                  return _wrap_CvContourFinder_findContours__SWIG_0(L);}  }  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvContourFinder_findContours'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxCvContourFinder::findContours(ofxCvGrayscaleImage &,int,int,int,bool,bool)\n"
  "    ofxCvContourFinder::findContours(ofxCvGrayscaleImage &,int,int,int,bool)\n"); lua_error(L);return 0; }
static int _wrap_CvContourFinder_draw__SWIG_0(lua_State* L) { { int SWIG_arg = 0;
    ofxCvContourFinder *arg1 = (ofxCvContourFinder *) 0 ; SWIG_check_num_args("ofxCvContourFinder::draw",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvContourFinder::draw",1,"ofxCvContourFinder const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvContourFinder,0))){
      SWIG_fail_ptr("CvContourFinder_draw",1,SWIGTYPE_p_ofxCvContourFinder); }  ((ofxCvContourFinder const *)arg1)->draw();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvContourFinder_draw__SWIG_1(lua_State* L) { { int SWIG_arg = 0;
    ofxCvContourFinder *arg1 = (ofxCvContourFinder *) 0 ; float arg2 ; float arg3 ;
    SWIG_check_num_args("ofxCvContourFinder::draw",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvContourFinder::draw",1,"ofxCvContourFinder const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvContourFinder::draw",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvContourFinder::draw",3,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvContourFinder,0))){
      SWIG_fail_ptr("CvContourFinder_draw",1,SWIGTYPE_p_ofxCvContourFinder); }  arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3); ((ofxCvContourFinder const *)arg1)->draw(arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CvContourFinder_draw__SWIG_2(lua_State* L) { { int SWIG_arg = 0;
    ofxCvContourFinder *arg1 = (ofxCvContourFinder *) 0 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ;
    SWIG_check_num_args("ofxCvContourFinder::draw",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvContourFinder::draw",1,"ofxCvContourFinder const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvContourFinder::draw",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvContourFinder::draw",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvContourFinder::draw",4,"float");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxCvContourFinder::draw",5,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvContourFinder,0))){
      SWIG_fail_ptr("CvContourFinder_draw",1,SWIGTYPE_p_ofxCvContourFinder); }  arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
    ((ofxCvContourFinder const *)arg1)->draw(arg2,arg3,arg4,arg5); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_CvContourFinder_draw__SWIG_3(lua_State* L) { { int SWIG_arg = 0;
    ofxCvContourFinder *arg1 = (ofxCvContourFinder *) 0 ; glm::vec2 *arg2 = 0 ;
    SWIG_check_num_args("ofxCvContourFinder::draw",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvContourFinder::draw",1,"ofxCvContourFinder const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvContourFinder::draw",2,"glm::vec2 const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvContourFinder,0))){
      SWIG_fail_ptr("CvContourFinder_draw",1,SWIGTYPE_p_ofxCvContourFinder); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_glm__vec2,0))){
      SWIG_fail_ptr("CvContourFinder_draw",2,SWIGTYPE_p_glm__vec2); } 
    ((ofxCvContourFinder const *)arg1)->draw((glm::vec2 const &)*arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_CvContourFinder_draw__SWIG_4(lua_State* L) { { int SWIG_arg = 0;
    ofxCvContourFinder *arg1 = (ofxCvContourFinder *) 0 ; ofRectangle *arg2 = 0 ;
    SWIG_check_num_args("ofxCvContourFinder::draw",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvContourFinder::draw",1,"ofxCvContourFinder const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvContourFinder::draw",2,"ofRectangle const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvContourFinder,0))){
      SWIG_fail_ptr("CvContourFinder_draw",1,SWIGTYPE_p_ofxCvContourFinder); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
      SWIG_fail_ptr("CvContourFinder_draw",2,SWIGTYPE_p_ofRectangle); } 
    ((ofxCvContourFinder const *)arg1)->draw((ofRectangle const &)*arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_CvContourFinder_draw(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 1) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvContourFinder, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CvContourFinder_draw__SWIG_0(L);}  }  if (argc == 2) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvContourFinder, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_glm__vec2, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CvContourFinder_draw__SWIG_3(L);}  }  }  if (argc == 2) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvContourFinder, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CvContourFinder_draw__SWIG_4(L);}  }  }  if (argc == 3) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvContourFinder, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_CvContourFinder_draw__SWIG_1(L);}  }  }  }  if (argc == 5) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvContourFinder, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_CvContourFinder_draw__SWIG_2(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvContourFinder_draw'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxCvContourFinder::draw() const\n"
  "    ofxCvContourFinder::draw(float,float) const\n" "    ofxCvContourFinder::draw(float,float,float,float) const\n"
  "    ofxCvContourFinder::draw(glm::vec2 const &) const\n" "    ofxCvContourFinder::draw(ofRectangle const &) const\n");
  lua_error(L);return 0; }
static int _wrap_CvContourFinder_setAnchorPercent(lua_State* L) { { int SWIG_arg = 0;
    ofxCvContourFinder *arg1 = (ofxCvContourFinder *) 0 ; float arg2 ; float arg3 ;
    SWIG_check_num_args("ofxCvContourFinder::setAnchorPercent",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvContourFinder::setAnchorPercent",1,"ofxCvContourFinder *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvContourFinder::setAnchorPercent",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvContourFinder::setAnchorPercent",3,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvContourFinder,0))){
      SWIG_fail_ptr("CvContourFinder_setAnchorPercent",1,SWIGTYPE_p_ofxCvContourFinder); }  arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3); (arg1)->setAnchorPercent(arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_CvContourFinder_setAnchorPoint(lua_State* L) { { int SWIG_arg = 0;
    ofxCvContourFinder *arg1 = (ofxCvContourFinder *) 0 ; int arg2 ; int arg3 ;
    SWIG_check_num_args("ofxCvContourFinder::setAnchorPoint",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvContourFinder::setAnchorPoint",1,"ofxCvContourFinder *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvContourFinder::setAnchorPoint",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvContourFinder::setAnchorPoint",3,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvContourFinder,0))){
      SWIG_fail_ptr("CvContourFinder_setAnchorPoint",1,SWIGTYPE_p_ofxCvContourFinder); }  arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3); (arg1)->setAnchorPoint(arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_CvContourFinder_resetAnchor(lua_State* L) { { int SWIG_arg = 0;
    ofxCvContourFinder *arg1 = (ofxCvContourFinder *) 0 ; SWIG_check_num_args("ofxCvContourFinder::resetAnchor",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvContourFinder::resetAnchor",1,"ofxCvContourFinder *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvContourFinder,0))){
      SWIG_fail_ptr("CvContourFinder_resetAnchor",1,SWIGTYPE_p_ofxCvContourFinder); }  (arg1)->resetAnchor(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static void swig_delete_CvContourFinder(void *obj) {
ofxCvContourFinder *arg1 = (ofxCvContourFinder *) obj;
delete arg1;
}
static int _proxy__wrap_new_CvContourFinder(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CvContourFinder);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CvContourFinder_attributes[] = {
    { "blobs", _wrap_CvContourFinder_blobs_get, _wrap_CvContourFinder_blobs_set },
    { "nBlobs", _wrap_CvContourFinder_nBlobs_get, _wrap_CvContourFinder_nBlobs_set },
    {0,0,0}
};
static swig_lua_method swig_CvContourFinder_methods[]= {
    { "getWidth", _wrap_CvContourFinder_getWidth},
    { "getHeight", _wrap_CvContourFinder_getHeight},
    { "findContours", _wrap_CvContourFinder_findContours},
    { "draw", _wrap_CvContourFinder_draw},
    { "setAnchorPercent", _wrap_CvContourFinder_setAnchorPercent},
    { "setAnchorPoint", _wrap_CvContourFinder_setAnchorPoint},
    { "resetAnchor", _wrap_CvContourFinder_resetAnchor},
    {0,0}
};
static swig_lua_method swig_CvContourFinder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CvContourFinder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CvContourFinder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CvContourFinder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CvContourFinder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CvContourFinder_Sf_SwigStatic = {
    "CvContourFinder",
    swig_CvContourFinder_Sf_SwigStatic_methods,
    swig_CvContourFinder_Sf_SwigStatic_attributes,
    swig_CvContourFinder_Sf_SwigStatic_constants,
    swig_CvContourFinder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CvContourFinder_bases[] = {0};
static const char *swig_CvContourFinder_base_names[] = {0};
static swig_lua_class _wrap_class_CvContourFinder = { "CvContourFinder", "CvContourFinder", &SWIGTYPE_p_ofxCvContourFinder,_proxy__wrap_new_CvContourFinder, swig_delete_CvContourFinder, swig_CvContourFinder_methods, swig_CvContourFinder_attributes, &swig_CvContourFinder_Sf_SwigStatic, swig_CvContourFinder_meta, swig_CvContourFinder_bases, swig_CvContourFinder_base_names };

static int _wrap_CvImage_width_set(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; int arg2 ;
    SWIG_check_num_args("ofxCvImage::width",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::width",1,"ofxCvImage *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvImage::width",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_width_set",1,SWIGTYPE_p_ofxCvImage); }  arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->width = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvImage_width_get(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; int result;
    SWIG_check_num_args("ofxCvImage::width",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::width",1,"ofxCvImage *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_width_get",1,SWIGTYPE_p_ofxCvImage); }  result = (int) ((arg1)->width);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvImage_height_set(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; int arg2 ;
    SWIG_check_num_args("ofxCvImage::height",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::height",1,"ofxCvImage *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvImage::height",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_height_set",1,SWIGTYPE_p_ofxCvImage); }  arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->height = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvImage_height_get(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; int result;
    SWIG_check_num_args("ofxCvImage::height",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::height",1,"ofxCvImage *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_height_get",1,SWIGTYPE_p_ofxCvImage); }  result = (int) ((arg1)->height);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvImage_bAllocated_set(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; bool arg2 ;
    SWIG_check_num_args("ofxCvImage::bAllocated",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::bAllocated",1,"ofxCvImage *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxCvImage::bAllocated",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_bAllocated_set",1,SWIGTYPE_p_ofxCvImage); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->bAllocated = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvImage_bAllocated_get(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; bool result;
    SWIG_check_num_args("ofxCvImage::bAllocated",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::bAllocated",1,"ofxCvImage *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_bAllocated_get",1,SWIGTYPE_p_ofxCvImage); }  result = (bool) ((arg1)->bAllocated);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvImage_allocate(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; int arg2 ;
    int arg3 ; SWIG_check_num_args("ofxCvImage::allocate",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::allocate",1,"ofxCvImage *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvImage::allocate",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvImage::allocate",3,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_allocate",1,SWIGTYPE_p_ofxCvImage); }  arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3); (arg1)->allocate(arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvImage_clear(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
    SWIG_check_num_args("ofxCvImage::clear",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::clear",1,"ofxCvImage *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_clear",1,SWIGTYPE_p_ofxCvImage); }  (arg1)->clear(); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CvImage_getWidth(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; float result;
    SWIG_check_num_args("ofxCvImage::getWidth",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::getWidth",1,"ofxCvImage const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_getWidth",1,SWIGTYPE_p_ofxCvImage); }  result = (float)((ofxCvImage const *)arg1)->getWidth();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvImage_getHeight(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; float result;
    SWIG_check_num_args("ofxCvImage::getHeight",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::getHeight",1,"ofxCvImage const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_getHeight",1,SWIGTYPE_p_ofxCvImage); }  result = (float)((ofxCvImage const *)arg1)->getHeight();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvImage_setUseTexture(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; bool arg2 ;
    SWIG_check_num_args("ofxCvImage::setUseTexture",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::setUseTexture",1,"ofxCvImage *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxCvImage::setUseTexture",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_setUseTexture",1,SWIGTYPE_p_ofxCvImage); }  arg2 = (lua_toboolean(L, 2)!=0);
    (arg1)->setUseTexture(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvImage_isUsingTexture(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; bool result;
    SWIG_check_num_args("ofxCvImage::isUsingTexture",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::isUsingTexture",1,"ofxCvImage const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_isUsingTexture",1,SWIGTYPE_p_ofxCvImage); } 
    result = (bool)((ofxCvImage const *)arg1)->isUsingTexture(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvImage_getTexture__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
    ofTexture *result = 0 ; SWIG_check_num_args("ofxCvImage::getTexture",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::getTexture",1,"ofxCvImage *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_getTexture",1,SWIGTYPE_p_ofxCvImage); }  result = (ofTexture *) &(arg1)->getTexture();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTexture,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_CvImage_getTexture__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
    ofTexture *result = 0 ; SWIG_check_num_args("ofxCvImage::getTexture",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::getTexture",1,"ofxCvImage const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_getTexture",1,SWIGTYPE_p_ofxCvImage); } 
    result = (ofTexture *) &((ofxCvImage const *)arg1)->getTexture();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTexture,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_CvImage_getTexture(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_CvImage_getTexture__SWIG_0(L);}  }  if (argc == 1) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_CvImage_getTexture__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvImage_getTexture'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxCvImage::getTexture()\n" "    ofxCvImage::getTexture() const\n"); lua_error(L);return 0; }
static int _wrap_CvImage_getTextureReference__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
    ofTexture *result = 0 ; SWIG_check_num_args("ofxCvImage::getTextureReference",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::getTextureReference",1,"ofxCvImage *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_getTextureReference",1,SWIGTYPE_p_ofxCvImage); } 
    result = (ofTexture *) &(arg1)->getTextureReference(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTexture,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvImage_getTextureReference__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
    ofTexture *result = 0 ; SWIG_check_num_args("ofxCvImage::getTextureReference",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::getTextureReference",1,"ofxCvImage const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_getTextureReference",1,SWIGTYPE_p_ofxCvImage); } 
    result = (ofTexture *) &((ofxCvImage const *)arg1)->getTextureReference();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTexture,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_CvImage_getTextureReference(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L);
  if (argc == 1) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_CvImage_getTextureReference__SWIG_0(L);}  }  if (argc == 1) { int _v = 0; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CvImage_getTextureReference__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvImage_getTextureReference'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxCvImage::getTextureReference()\n"
  "    ofxCvImage::getTextureReference() const\n"); lua_error(L);return 0; }
static int _wrap_CvImage_flagImageChanged(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
    SWIG_check_num_args("ofxCvImage::flagImageChanged",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::flagImageChanged",1,"ofxCvImage *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_flagImageChanged",1,SWIGTYPE_p_ofxCvImage); }  (arg1)->flagImageChanged(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvImage_setROI__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; int arg2 ;
    int arg3 ; int arg4 ; int arg5 ; SWIG_check_num_args("ofxCvImage::setROI",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::setROI",1,"ofxCvImage *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvImage::setROI",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvImage::setROI",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvImage::setROI",4,"int");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxCvImage::setROI",5,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_setROI",1,SWIGTYPE_p_ofxCvImage); }  arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5);
    (arg1)->setROI(arg2,arg3,arg4,arg5); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvImage_setROI__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
    ofRectangle *arg2 = 0 ; SWIG_check_num_args("ofxCvImage::setROI",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::setROI",1,"ofxCvImage *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvImage::setROI",2,"ofRectangle const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_setROI",1,SWIGTYPE_p_ofxCvImage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
      SWIG_fail_ptr("CvImage_setROI",2,SWIGTYPE_p_ofRectangle); }  (arg1)->setROI((ofRectangle const &)*arg2); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvImage_setROI(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 2) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CvImage_setROI__SWIG_1(L);}  }  }  if (argc == 5) { int _v = 0;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_CvImage_setROI__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvImage_setROI'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxCvImage::setROI(int,int,int,int)\n" "    ofxCvImage::setROI(ofRectangle const &)\n"); lua_error(L);return 0; }
static int _wrap_CvImage_getROI(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; ofRectangle result;
    SWIG_check_num_args("ofxCvImage::getROI",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::getROI",1,"ofxCvImage const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_getROI",1,SWIGTYPE_p_ofxCvImage); }  result = ((ofxCvImage const *)arg1)->getROI(); {
      ofRectangle * resultptr = new ofRectangle(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofRectangle,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CvImage_resetROI(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
    SWIG_check_num_args("ofxCvImage::resetROI",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::resetROI",1,"ofxCvImage *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_resetROI",1,SWIGTYPE_p_ofxCvImage); }  (arg1)->resetROI(); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CvImage_getIntersectionROI(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
    ofRectangle *arg2 = 0 ; ofRectangle *arg3 = 0 ; ofRectangle result;
    SWIG_check_num_args("ofxCvImage::getIntersectionROI",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::getIntersectionROI",1,"ofxCvImage *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvImage::getIntersectionROI",2,"ofRectangle const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofxCvImage::getIntersectionROI",3,"ofRectangle const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_getIntersectionROI",1,SWIGTYPE_p_ofxCvImage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
      SWIG_fail_ptr("CvImage_getIntersectionROI",2,SWIGTYPE_p_ofRectangle); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofRectangle,0))){
      SWIG_fail_ptr("CvImage_getIntersectionROI",3,SWIGTYPE_p_ofRectangle); } 
    result = (arg1)->getIntersectionROI((ofRectangle const &)*arg2,(ofRectangle const &)*arg3); {
      ofRectangle * resultptr = new ofRectangle(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofRectangle,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CvImage_set(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; float arg2 ;
    SWIG_check_num_args("ofxCvImage::set",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::set",1,"ofxCvImage *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvImage::set",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_set",1,SWIGTYPE_p_ofxCvImage); }  arg2 = (float)lua_tonumber(L, 2); (arg1)->set(arg2);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvImage_setFromPixels__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
    unsigned char *arg2 = (unsigned char *) 0 ; int arg3 ; int arg4 ; SWIG_check_num_args("ofxCvImage::setFromPixels",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::setFromPixels",1,"ofxCvImage *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxCvImage::setFromPixels",2,"unsigned char const *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvImage::setFromPixels",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvImage::setFromPixels",4,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_setFromPixels",1,SWIGTYPE_p_ofxCvImage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
      SWIG_fail_ptr("CvImage_setFromPixels",2,SWIGTYPE_p_unsigned_char); }  arg3 = (int)lua_tonumber(L, 3);
    arg4 = (int)lua_tonumber(L, 4); (arg1)->setFromPixels((unsigned char const *)arg2,arg3,arg4); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvImage_setFromPixels__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
    ofPixels *arg2 = 0 ; SWIG_check_num_args("ofxCvImage::setFromPixels",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::setFromPixels",1,"ofxCvImage *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvImage::setFromPixels",2,"ofPixels const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_setFromPixels",1,SWIGTYPE_p_ofxCvImage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
      SWIG_fail_ptr("CvImage_setFromPixels",2,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
    (arg1)->setFromPixels((ofPixels const &)*arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvImage_setFromPixels(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 2) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CvImage_setFromPixels__SWIG_1(L);}  }  }  if (argc == 4) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_CvImage_setFromPixels__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvImage_setFromPixels'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxCvImage::setFromPixels(unsigned char const *,int,int)\n"
  "    ofxCvImage::setFromPixels(ofPixels const &)\n"); lua_error(L);return 0; }
static int _wrap_CvImage_setRoiFromPixels__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
    unsigned char *arg2 = (unsigned char *) 0 ; int arg3 ; int arg4 ; SWIG_check_num_args("ofxCvImage::setRoiFromPixels",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::setRoiFromPixels",1,"ofxCvImage *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxCvImage::setRoiFromPixels",2,"unsigned char const *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvImage::setRoiFromPixels",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvImage::setRoiFromPixels",4,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_setRoiFromPixels",1,SWIGTYPE_p_ofxCvImage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
      SWIG_fail_ptr("CvImage_setRoiFromPixels",2,SWIGTYPE_p_unsigned_char); }  arg3 = (int)lua_tonumber(L, 3);
    arg4 = (int)lua_tonumber(L, 4); (arg1)->setRoiFromPixels((unsigned char const *)arg2,arg3,arg4); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvImage_setRoiFromPixels__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
    ofPixels *arg2 = 0 ; SWIG_check_num_args("ofxCvImage::setRoiFromPixels",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::setRoiFromPixels",1,"ofxCvImage *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvImage::setRoiFromPixels",2,"ofPixels const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_setRoiFromPixels",1,SWIGTYPE_p_ofxCvImage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
      SWIG_fail_ptr("CvImage_setRoiFromPixels",2,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
    (arg1)->setRoiFromPixels((ofPixels const &)*arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvImage_setRoiFromPixels(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 2) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CvImage_setRoiFromPixels__SWIG_1(L);}  }  }  if (argc == 4) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_CvImage_setRoiFromPixels__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvImage_setRoiFromPixels'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxCvImage::setRoiFromPixels(unsigned char const *,int,int)\n"
  "    ofxCvImage::setRoiFromPixels(ofPixels const &)\n"); lua_error(L);return 0; }
static int _wrap_CvImage_drawBlobIntoMe(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
    ofxCvBlob *arg2 = 0 ; int arg3 ; SWIG_check_num_args("ofxCvImage::drawBlobIntoMe",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::drawBlobIntoMe",1,"ofxCvImage *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvImage::drawBlobIntoMe",2,"ofxCvBlob &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvImage::drawBlobIntoMe",3,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_drawBlobIntoMe",1,SWIGTYPE_p_ofxCvImage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvBlob,0))){
      SWIG_fail_ptr("CvImage_drawBlobIntoMe",2,SWIGTYPE_p_ofxCvBlob); }  arg3 = (int)lua_tonumber(L, 3);
    (arg1)->drawBlobIntoMe(*arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvImage_getPixels__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
    ofPixels *result = 0 ; SWIG_check_num_args("ofxCvImage::getPixels",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::getPixels",1,"ofxCvImage *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_getPixels",1,SWIGTYPE_p_ofxCvImage); }  result = (ofPixels *) &(arg1)->getPixels();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CvImage_getRoiPixels__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
    ofPixels *result = 0 ; SWIG_check_num_args("ofxCvImage::getRoiPixels",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::getRoiPixels",1,"ofxCvImage *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_getRoiPixels",1,SWIGTYPE_p_ofxCvImage); }  result = (ofPixels *) &(arg1)->getRoiPixels();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CvImage_getCvImage__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
    IplImage *result = 0 ; SWIG_check_num_args("ofxCvImage::getCvImage",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::getCvImage",1,"ofxCvImage *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_getCvImage",1,SWIGTYPE_p_ofxCvImage); }  result = (IplImage *)(arg1)->getCvImage();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_IplImage,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_CvImage_getPixels__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
    ofPixels *result = 0 ; SWIG_check_num_args("ofxCvImage::getPixels",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::getPixels",1,"ofxCvImage const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_getPixels",1,SWIGTYPE_p_ofxCvImage); } 
    result = (ofPixels *) &((ofxCvImage const *)arg1)->getPixels();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CvImage_getPixels(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_CvImage_getPixels__SWIG_0(L);}  }  if (argc == 1) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_CvImage_getPixels__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvImage_getPixels'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxCvImage::getPixels()\n" "    ofxCvImage::getPixels() const\n"); lua_error(L);return 0; }
static int _wrap_CvImage_getRoiPixels__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
    ofPixels *result = 0 ; SWIG_check_num_args("ofxCvImage::getRoiPixels",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::getRoiPixels",1,"ofxCvImage const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_getRoiPixels",1,SWIGTYPE_p_ofxCvImage); } 
    result = (ofPixels *) &((ofxCvImage const *)arg1)->getRoiPixels();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CvImage_getRoiPixels(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_CvImage_getRoiPixels__SWIG_0(L);}  }  if (argc == 1) { int _v = 0; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CvImage_getRoiPixels__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvImage_getRoiPixels'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxCvImage::getRoiPixels()\n" "    ofxCvImage::getRoiPixels() const\n");
  lua_error(L);return 0; }
static int _wrap_CvImage_getCvImage__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
    IplImage *result = 0 ; SWIG_check_num_args("ofxCvImage::getCvImage",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::getCvImage",1,"ofxCvImage const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_getCvImage",1,SWIGTYPE_p_ofxCvImage); } 
    result = (IplImage *)((ofxCvImage const *)arg1)->getCvImage();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_IplImage,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_CvImage_getCvImage(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_CvImage_getCvImage__SWIG_0(L);}  }  if (argc == 1) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_CvImage_getCvImage__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvImage_getCvImage'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxCvImage::getCvImage()\n" "    ofxCvImage::getCvImage() const\n"); lua_error(L);return 0; }
static int _wrap_CvImage_getCvMat__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
    cv::Mat result; SWIG_check_num_args("ofxCvImage::getCvMat",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::getCvMat",1,"ofxCvImage *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_getCvMat",1,SWIGTYPE_p_ofxCvImage); }  result = (arg1)->getCvMat(); {
      cv::Mat * resultptr = new cv::Mat(result); SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cv__Mat,1); SWIG_arg++; } 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvImage_getCvMat__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
    cv::Mat result; SWIG_check_num_args("ofxCvImage::getCvMat",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::getCvMat",1,"ofxCvImage const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_getCvMat",1,SWIGTYPE_p_ofxCvImage); }  result = ((ofxCvImage const *)arg1)->getCvMat(); {
      cv::Mat * resultptr = new cv::Mat(result); SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cv__Mat,1); SWIG_arg++; } 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvImage_getCvMat(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_CvImage_getCvMat__SWIG_0(L);}  }  if (argc == 1) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_CvImage_getCvMat__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvImage_getCvMat'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxCvImage::getCvMat()\n" "    ofxCvImage::getCvMat() const\n"); lua_error(L);return 0; }
static int _wrap_CvImage_updateTexture(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
    SWIG_check_num_args("ofxCvImage::updateTexture",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::updateTexture",1,"ofxCvImage *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_updateTexture",1,SWIGTYPE_p_ofxCvImage); }  (arg1)->updateTexture(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvImage_draw__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; float arg2 ;
    float arg3 ; SWIG_check_num_args("ofxCvImage::draw",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::draw",1,"ofxCvImage const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvImage::draw",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvImage::draw",3,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_draw",1,SWIGTYPE_p_ofxCvImage); }  arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3); ((ofxCvImage const *)arg1)->draw(arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CvImage_draw__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; float arg2 ;
    float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("ofxCvImage::draw",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::draw",1,"ofxCvImage const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvImage::draw",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvImage::draw",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvImage::draw",4,"float");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxCvImage::draw",5,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_draw",1,SWIGTYPE_p_ofxCvImage); }  arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
    ((ofxCvImage const *)arg1)->draw(arg2,arg3,arg4,arg5); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvImage_draw__SWIG_2(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
    glm::vec2 *arg2 = 0 ; SWIG_check_num_args("ofxCvImage::draw",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::draw",1,"ofxCvImage const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvImage::draw",2,"glm::vec2 const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_draw",1,SWIGTYPE_p_ofxCvImage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_glm__vec2,0))){
      SWIG_fail_ptr("CvImage_draw",2,SWIGTYPE_p_glm__vec2); }  ((ofxCvImage const *)arg1)->draw((glm::vec2 const &)*arg2);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvImage_draw__SWIG_3(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
    ofRectangle *arg2 = 0 ; SWIG_check_num_args("ofxCvImage::draw",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::draw",1,"ofxCvImage const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvImage::draw",2,"ofRectangle const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_draw",1,SWIGTYPE_p_ofxCvImage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
      SWIG_fail_ptr("CvImage_draw",2,SWIGTYPE_p_ofRectangle); }  ((ofxCvImage const *)arg1)->draw((ofRectangle const &)*arg2);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvImage_draw(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 2) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_glm__vec2, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CvImage_draw__SWIG_2(L);}  }  }  if (argc == 2) { int _v = 0; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CvImage_draw__SWIG_3(L);}  }  }  if (argc == 3) { int _v = 0; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_CvImage_draw__SWIG_0(L);}  }  }  }  if (argc == 5) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_CvImage_draw__SWIG_1(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvImage_draw'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxCvImage::draw(float,float) const\n" "    ofxCvImage::draw(float,float,float,float) const\n"
  "    ofxCvImage::draw(glm::vec2 const &) const\n" "    ofxCvImage::draw(ofRectangle const &) const\n");
  lua_error(L);return 0; }
static int _wrap_CvImage_drawROI__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; float arg2 ;
    float arg3 ; SWIG_check_num_args("ofxCvImage::drawROI",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::drawROI",1,"ofxCvImage const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvImage::drawROI",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvImage::drawROI",3,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_drawROI",1,SWIGTYPE_p_ofxCvImage); }  arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3); ((ofxCvImage const *)arg1)->drawROI(arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CvImage_drawROI__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; float arg2 ;
    float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("ofxCvImage::drawROI",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::drawROI",1,"ofxCvImage const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvImage::drawROI",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvImage::drawROI",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvImage::drawROI",4,"float");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxCvImage::drawROI",5,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_drawROI",1,SWIGTYPE_p_ofxCvImage); }  arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
    ((ofxCvImage const *)arg1)->drawROI(arg2,arg3,arg4,arg5); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvImage_drawROI(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 3) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_CvImage_drawROI__SWIG_0(L);}  }  }  }  if (argc == 5) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_CvImage_drawROI__SWIG_1(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvImage_drawROI'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxCvImage::drawROI(float,float) const\n" "    ofxCvImage::drawROI(float,float,float,float) const\n");
  lua_error(L);return 0; }
static int _wrap_CvImage_setAnchorPercent(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; float arg2 ;
    float arg3 ; SWIG_check_num_args("ofxCvImage::setAnchorPercent",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::setAnchorPercent",1,"ofxCvImage *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvImage::setAnchorPercent",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvImage::setAnchorPercent",3,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_setAnchorPercent",1,SWIGTYPE_p_ofxCvImage); }  arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3); (arg1)->setAnchorPercent(arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_CvImage_setAnchorPoint(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; float arg2 ;
    float arg3 ; SWIG_check_num_args("ofxCvImage::setAnchorPoint",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::setAnchorPoint",1,"ofxCvImage *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvImage::setAnchorPoint",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvImage::setAnchorPoint",3,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_setAnchorPoint",1,SWIGTYPE_p_ofxCvImage); }  arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3); (arg1)->setAnchorPoint(arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_CvImage_resetAnchor(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
    SWIG_check_num_args("ofxCvImage::resetAnchor",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::resetAnchor",1,"ofxCvImage *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_resetAnchor",1,SWIGTYPE_p_ofxCvImage); }  (arg1)->resetAnchor(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvImage_erode(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
    SWIG_check_num_args("ofxCvImage::erode",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::erode",1,"ofxCvImage *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_erode",1,SWIGTYPE_p_ofxCvImage); }  (arg1)->erode(); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CvImage_dilate(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
    SWIG_check_num_args("ofxCvImage::dilate",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::dilate",1,"ofxCvImage *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_dilate",1,SWIGTYPE_p_ofxCvImage); }  (arg1)->dilate(); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CvImage_blur__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; int arg2 ;
    SWIG_check_num_args("ofxCvImage::blur",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::blur",1,"ofxCvImage *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvImage::blur",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_blur",1,SWIGTYPE_p_ofxCvImage); }  arg2 = (int)lua_tonumber(L, 2); (arg1)->blur(arg2);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvImage_blur__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
    SWIG_check_num_args("ofxCvImage::blur",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::blur",1,"ofxCvImage *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_blur",1,SWIGTYPE_p_ofxCvImage); }  (arg1)->blur(); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CvImage_blur(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_CvImage_blur__SWIG_1(L);}  }  if (argc == 2) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_CvImage_blur__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvImage_blur'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxCvImage::blur(int)\n" "    ofxCvImage::blur()\n"); lua_error(L);return 0; }
static int _wrap_CvImage_blurGaussian__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
    int arg2 ; SWIG_check_num_args("ofxCvImage::blurGaussian",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::blurGaussian",1,"ofxCvImage *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvImage::blurGaussian",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_blurGaussian",1,SWIGTYPE_p_ofxCvImage); }  arg2 = (int)lua_tonumber(L, 2);
    (arg1)->blurGaussian(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvImage_blurGaussian__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
    SWIG_check_num_args("ofxCvImage::blurGaussian",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::blurGaussian",1,"ofxCvImage *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_blurGaussian",1,SWIGTYPE_p_ofxCvImage); }  (arg1)->blurGaussian(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvImage_blurGaussian(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_CvImage_blurGaussian__SWIG_1(L);}  }  if (argc == 2) { int _v = 0; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_CvImage_blurGaussian__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvImage_blurGaussian'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxCvImage::blurGaussian(int)\n" "    ofxCvImage::blurGaussian()\n");
  lua_error(L);return 0; }
static int _wrap_CvImage_invert(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
    SWIG_check_num_args("ofxCvImage::invert",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::invert",1,"ofxCvImage *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_invert",1,SWIGTYPE_p_ofxCvImage); }  (arg1)->invert(); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CvImage_contrastStretch(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
    SWIG_check_num_args("ofxCvImage::contrastStretch",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::contrastStretch",1,"ofxCvImage *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_contrastStretch",1,SWIGTYPE_p_ofxCvImage); }  (arg1)->contrastStretch(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvImage_convertToRange(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; float arg2 ;
    float arg3 ; SWIG_check_num_args("ofxCvImage::convertToRange",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::convertToRange",1,"ofxCvImage *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvImage::convertToRange",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvImage::convertToRange",3,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_convertToRange",1,SWIGTYPE_p_ofxCvImage); }  arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3); (arg1)->convertToRange(arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_CvImage_resize(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; int arg2 ; int arg3 ;
    SWIG_check_num_args("ofxCvImage::resize",3,3) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::resize",1,"ofxCvImage *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvImage::resize",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvImage::resize",3,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_resize",1,SWIGTYPE_p_ofxCvImage); }  arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3); (arg1)->resize(arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvImage_scaleIntoMe__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
    ofxCvImage *arg2 = 0 ; int arg3 ; SWIG_check_num_args("ofxCvImage::scaleIntoMe",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::scaleIntoMe",1,"ofxCvImage *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvImage::scaleIntoMe",2,"ofxCvImage &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvImage::scaleIntoMe",3,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_scaleIntoMe",1,SWIGTYPE_p_ofxCvImage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_scaleIntoMe",2,SWIGTYPE_p_ofxCvImage); }  arg3 = (int)lua_tonumber(L, 3);
    (arg1)->scaleIntoMe(*arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvImage_scaleIntoMe__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
    ofxCvImage *arg2 = 0 ; SWIG_check_num_args("ofxCvImage::scaleIntoMe",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::scaleIntoMe",1,"ofxCvImage *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvImage::scaleIntoMe",2,"ofxCvImage &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_scaleIntoMe",1,SWIGTYPE_p_ofxCvImage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_scaleIntoMe",2,SWIGTYPE_p_ofxCvImage); }  (arg1)->scaleIntoMe(*arg2); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvImage_scaleIntoMe(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxCvImage, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CvImage_scaleIntoMe__SWIG_1(L);}  }  }  if (argc == 3) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxCvImage, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_CvImage_scaleIntoMe__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvImage_scaleIntoMe'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxCvImage::scaleIntoMe(ofxCvImage &,int)\n"
  "    ofxCvImage::scaleIntoMe(ofxCvImage &)\n"); lua_error(L);return 0; }
static int _wrap_CvImage_mirror(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; bool arg2 ;
    bool arg3 ; SWIG_check_num_args("ofxCvImage::mirror",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::mirror",1,"ofxCvImage *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxCvImage::mirror",2,"bool");
    if(!lua_isboolean(L,3)) SWIG_fail_arg("ofxCvImage::mirror",3,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_mirror",1,SWIGTYPE_p_ofxCvImage); }  arg2 = (lua_toboolean(L, 2)!=0);
    arg3 = (lua_toboolean(L, 3)!=0); (arg1)->mirror(arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvImage_translate(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; float arg2 ;
    float arg3 ; SWIG_check_num_args("ofxCvImage::translate",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::translate",1,"ofxCvImage *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvImage::translate",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvImage::translate",3,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_translate",1,SWIGTYPE_p_ofxCvImage); }  arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3); (arg1)->translate(arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_CvImage_rotate(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; float arg2 ;
    float arg3 ; float arg4 ; SWIG_check_num_args("ofxCvImage::rotate",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::rotate",1,"ofxCvImage *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvImage::rotate",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvImage::rotate",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvImage::rotate",4,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_rotate",1,SWIGTYPE_p_ofxCvImage); }  arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->rotate(arg2,arg3,arg4); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvImage_scale(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; float arg2 ;
    float arg3 ; SWIG_check_num_args("ofxCvImage::scale",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::scale",1,"ofxCvImage *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvImage::scale",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvImage::scale",3,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_scale",1,SWIGTYPE_p_ofxCvImage); }  arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3); (arg1)->scale(arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvImage_transform(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; float arg2 ;
    float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; float arg8 ;
    SWIG_check_num_args("ofxCvImage::transform",8,8)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::transform",1,"ofxCvImage *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvImage::transform",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvImage::transform",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvImage::transform",4,"float");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxCvImage::transform",5,"float");
    if(!lua_isnumber(L,6)) SWIG_fail_arg("ofxCvImage::transform",6,"float");
    if(!lua_isnumber(L,7)) SWIG_fail_arg("ofxCvImage::transform",7,"float");
    if(!lua_isnumber(L,8)) SWIG_fail_arg("ofxCvImage::transform",8,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_transform",1,SWIGTYPE_p_ofxCvImage); }  arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
    arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
    (arg1)->transform(arg2,arg3,arg4,arg5,arg6,arg7,arg8); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvImage_undistort(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; float arg2 ;
    float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; float arg8 ; float arg9 ;
    SWIG_check_num_args("ofxCvImage::undistort",9,9)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::undistort",1,"ofxCvImage *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvImage::undistort",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvImage::undistort",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvImage::undistort",4,"float");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxCvImage::undistort",5,"float");
    if(!lua_isnumber(L,6)) SWIG_fail_arg("ofxCvImage::undistort",6,"float");
    if(!lua_isnumber(L,7)) SWIG_fail_arg("ofxCvImage::undistort",7,"float");
    if(!lua_isnumber(L,8)) SWIG_fail_arg("ofxCvImage::undistort",8,"float");
    if(!lua_isnumber(L,9)) SWIG_fail_arg("ofxCvImage::undistort",9,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_undistort",1,SWIGTYPE_p_ofxCvImage); }  arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
    arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
    arg9 = (float)lua_tonumber(L, 9); (arg1)->undistort(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvImage_remap(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
    IplImage *arg2 = (IplImage *) 0 ; IplImage *arg3 = (IplImage *) 0 ; SWIG_check_num_args("ofxCvImage::remap",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::remap",1,"ofxCvImage *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxCvImage::remap",2,"IplImage *");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofxCvImage::remap",3,"IplImage *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_remap",1,SWIGTYPE_p_ofxCvImage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_IplImage,0))){
      SWIG_fail_ptr("CvImage_remap",2,SWIGTYPE_p_IplImage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_IplImage,0))){
      SWIG_fail_ptr("CvImage_remap",3,SWIGTYPE_p_IplImage); }  (arg1)->remap(arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CvImage_warpPerspective(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
    ofPoint *arg2 = 0 ; ofPoint *arg3 = 0 ; ofPoint *arg4 = 0 ; ofPoint *arg5 = 0 ;
    SWIG_check_num_args("ofxCvImage::warpPerspective",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::warpPerspective",1,"ofxCvImage *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvImage::warpPerspective",2,"ofPoint const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofxCvImage::warpPerspective",3,"ofPoint const &");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofxCvImage::warpPerspective",4,"ofPoint const &");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ofxCvImage::warpPerspective",5,"ofPoint const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_warpPerspective",1,SWIGTYPE_p_ofxCvImage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
      SWIG_fail_ptr("CvImage_warpPerspective",2,SWIGTYPE_p_ofVec3f); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
      SWIG_fail_ptr("CvImage_warpPerspective",3,SWIGTYPE_p_ofVec3f); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
      SWIG_fail_ptr("CvImage_warpPerspective",4,SWIGTYPE_p_ofVec3f); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ofVec3f,0))){
      SWIG_fail_ptr("CvImage_warpPerspective",5,SWIGTYPE_p_ofVec3f); } 
    (arg1)->warpPerspective((ofPoint const &)*arg2,(ofPoint const &)*arg3,(ofPoint const &)*arg4,(ofPoint const &)*arg5);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvImage_warpIntoMe(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
    ofxCvImage *arg2 = 0 ; ofPoint *arg3 = (ofPoint *) (ofPoint *)0 ; ofPoint *arg4 = (ofPoint *) (ofPoint *)0 ;
    SWIG_check_num_args("ofxCvImage::warpIntoMe",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::warpIntoMe",1,"ofxCvImage *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvImage::warpIntoMe",2,"ofxCvImage &");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofxCvImage::warpIntoMe",3,"ofPoint const [4]");
    if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ofxCvImage::warpIntoMe",4,"ofPoint const [4]");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_warpIntoMe",1,SWIGTYPE_p_ofxCvImage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_warpIntoMe",2,SWIGTYPE_p_ofxCvImage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
      SWIG_fail_ptr("CvImage_warpIntoMe",3,SWIGTYPE_p_ofVec3f); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
      SWIG_fail_ptr("CvImage_warpIntoMe",4,SWIGTYPE_p_ofVec3f); } 
    (arg1)->warpIntoMe(*arg2,(ofPoint const (*))arg3,(ofPoint const (*))arg4); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CvImage_countNonZeroInRegion(lua_State* L) { { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
    int arg2 ; int arg3 ; int arg4 ; int arg5 ; int result; SWIG_check_num_args("ofxCvImage::countNonZeroInRegion",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::countNonZeroInRegion",1,"ofxCvImage *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvImage::countNonZeroInRegion",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvImage::countNonZeroInRegion",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvImage::countNonZeroInRegion",4,"int");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxCvImage::countNonZeroInRegion",5,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvImage_countNonZeroInRegion",1,SWIGTYPE_p_ofxCvImage); }  arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5);
    result = (int)(arg1)->countNonZeroInRegion(arg2,arg3,arg4,arg5); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static void swig_delete_CvImage(void *obj) {
ofxCvImage *arg1 = (ofxCvImage *) obj;
delete arg1;
}
static swig_lua_attribute swig_CvImage_attributes[] = {
    { "width", _wrap_CvImage_width_get, _wrap_CvImage_width_set },
    { "height", _wrap_CvImage_height_get, _wrap_CvImage_height_set },
    { "bAllocated", _wrap_CvImage_bAllocated_get, _wrap_CvImage_bAllocated_set },
    {0,0,0}
};
static swig_lua_method swig_CvImage_methods[]= {
    { "allocate", _wrap_CvImage_allocate},
    { "clear", _wrap_CvImage_clear},
    { "getWidth", _wrap_CvImage_getWidth},
    { "getHeight", _wrap_CvImage_getHeight},
    { "setUseTexture", _wrap_CvImage_setUseTexture},
    { "isUsingTexture", _wrap_CvImage_isUsingTexture},
    { "getTexture", _wrap_CvImage_getTexture},
    { "getTextureReference", _wrap_CvImage_getTextureReference},
    { "flagImageChanged", _wrap_CvImage_flagImageChanged},
    { "setROI", _wrap_CvImage_setROI},
    { "getROI", _wrap_CvImage_getROI},
    { "resetROI", _wrap_CvImage_resetROI},
    { "getIntersectionROI", _wrap_CvImage_getIntersectionROI},
    { "set", _wrap_CvImage_set},
    { "setFromPixels", _wrap_CvImage_setFromPixels},
    { "setRoiFromPixels", _wrap_CvImage_setRoiFromPixels},
    { "drawBlobIntoMe", _wrap_CvImage_drawBlobIntoMe},
    { "getPixels", _wrap_CvImage_getPixels},
    { "getRoiPixels", _wrap_CvImage_getRoiPixels},
    { "getCvImage", _wrap_CvImage_getCvImage},
    { "getCvMat", _wrap_CvImage_getCvMat},
    { "updateTexture", _wrap_CvImage_updateTexture},
    { "draw", _wrap_CvImage_draw},
    { "drawROI", _wrap_CvImage_drawROI},
    { "setAnchorPercent", _wrap_CvImage_setAnchorPercent},
    { "setAnchorPoint", _wrap_CvImage_setAnchorPoint},
    { "resetAnchor", _wrap_CvImage_resetAnchor},
    { "erode", _wrap_CvImage_erode},
    { "dilate", _wrap_CvImage_dilate},
    { "blur", _wrap_CvImage_blur},
    { "blurGaussian", _wrap_CvImage_blurGaussian},
    { "invert", _wrap_CvImage_invert},
    { "contrastStretch", _wrap_CvImage_contrastStretch},
    { "convertToRange", _wrap_CvImage_convertToRange},
    { "resize", _wrap_CvImage_resize},
    { "scaleIntoMe", _wrap_CvImage_scaleIntoMe},
    { "mirror", _wrap_CvImage_mirror},
    { "translate", _wrap_CvImage_translate},
    { "rotate", _wrap_CvImage_rotate},
    { "scale", _wrap_CvImage_scale},
    { "transform", _wrap_CvImage_transform},
    { "undistort", _wrap_CvImage_undistort},
    { "remap", _wrap_CvImage_remap},
    { "warpPerspective", _wrap_CvImage_warpPerspective},
    { "warpIntoMe", _wrap_CvImage_warpIntoMe},
    { "countNonZeroInRegion", _wrap_CvImage_countNonZeroInRegion},
    {0,0}
};
static swig_lua_method swig_CvImage_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CvImage_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CvImage_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CvImage_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CvImage_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CvImage_Sf_SwigStatic = {
    "CvImage",
    swig_CvImage_Sf_SwigStatic_methods,
    swig_CvImage_Sf_SwigStatic_attributes,
    swig_CvImage_Sf_SwigStatic_constants,
    swig_CvImage_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CvImage_bases[] = {0};
static const char *swig_CvImage_base_names[] = {0};
static swig_lua_class _wrap_class_CvImage = { "CvImage", "CvImage", &SWIGTYPE_p_ofxCvImage,0, swig_delete_CvImage, swig_CvImage_methods, swig_CvImage_attributes, &swig_CvImage_Sf_SwigStatic, swig_CvImage_meta, swig_CvImage_bases, swig_CvImage_base_names };

static int _wrap_CvColorImage_setFromPixels__SWIG_0(lua_State* L) { { int SWIG_arg = 0;
    ofxCvColorImage *arg1 = (ofxCvColorImage *) 0 ; ofPixels *arg2 = 0 ;
    SWIG_check_num_args("ofxCvColorImage::setFromPixels",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvColorImage::setFromPixels",1,"ofxCvColorImage *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvColorImage::setFromPixels",2,"ofPixels const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvColorImage,0))){
      SWIG_fail_ptr("CvColorImage_setFromPixels",1,SWIGTYPE_p_ofxCvColorImage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
      SWIG_fail_ptr("CvColorImage_setFromPixels",2,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
    (arg1)->setFromPixels((ofPixels const &)*arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_CvColorImage__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxCvColorImage *result = 0 ;
    SWIG_check_num_args("ofxCvColorImage::ofxCvColorImage",0,0) result = (ofxCvColorImage *)new ofxCvColorImage();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxCvColorImage,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_new_CvColorImage__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxCvColorImage *arg1 = 0 ;
    ofxCvColorImage *result = 0 ; SWIG_check_num_args("ofxCvColorImage::ofxCvColorImage",1,1)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofxCvColorImage::ofxCvColorImage",1,"ofxCvColorImage const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvColorImage,0))){
      SWIG_fail_ptr("new_CvColorImage",1,SWIGTYPE_p_ofxCvColorImage); } 
    result = (ofxCvColorImage *)new ofxCvColorImage((ofxCvColorImage const &)*arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxCvColorImage,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_new_CvColorImage(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_CvColorImage__SWIG_0(L);}  if (argc == 1) { int _v = 0; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvColorImage, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_CvColorImage__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CvColorImage'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxCvColorImage::ofxCvColorImage()\n" "    ofxCvColorImage::ofxCvColorImage(ofxCvColorImage const &)\n");
  lua_error(L);return 0; }
static int _wrap_CvColorImage_set__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxCvColorImage *arg1 = (ofxCvColorImage *) 0 ;
    float arg2 ; SWIG_check_num_args("ofxCvColorImage::set",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvColorImage::set",1,"ofxCvColorImage *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvColorImage::set",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvColorImage,0))){
      SWIG_fail_ptr("CvColorImage_set",1,SWIGTYPE_p_ofxCvColorImage); }  arg2 = (float)lua_tonumber(L, 2); (arg1)->set(arg2);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvColorImage_set__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxCvColorImage *arg1 = (ofxCvColorImage *) 0 ;
    int arg2 ; int arg3 ; int arg4 ; SWIG_check_num_args("ofxCvColorImage::set",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvColorImage::set",1,"ofxCvColorImage *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvColorImage::set",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvColorImage::set",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvColorImage::set",4,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvColorImage,0))){
      SWIG_fail_ptr("CvColorImage_set",1,SWIGTYPE_p_ofxCvColorImage); }  arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); (arg1)->set(arg2,arg3,arg4); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvColorImage_set(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvColorImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_CvColorImage_set__SWIG_0(L);}  }
     }  if (argc == 4) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvColorImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_CvColorImage_set__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvColorImage_set'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxCvColorImage::set(float)\n" "    ofxCvColorImage::set(int,int,int)\n"); lua_error(L);return 0; }
static int _wrap_CvColorImage_setFromPixels__SWIG_1(lua_State* L) { { int SWIG_arg = 0;
    ofxCvColorImage *arg1 = (ofxCvColorImage *) 0 ; unsigned char *arg2 = (unsigned char *) 0 ; int arg3 ; int arg4 ;
    SWIG_check_num_args("ofxCvColorImage::setFromPixels",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvColorImage::setFromPixels",1,"ofxCvColorImage *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxCvColorImage::setFromPixels",2,"unsigned char const *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvColorImage::setFromPixels",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvColorImage::setFromPixels",4,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvColorImage,0))){
      SWIG_fail_ptr("CvColorImage_setFromPixels",1,SWIGTYPE_p_ofxCvColorImage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
      SWIG_fail_ptr("CvColorImage_setFromPixels",2,SWIGTYPE_p_unsigned_char); }  arg3 = (int)lua_tonumber(L, 3);
    arg4 = (int)lua_tonumber(L, 4); (arg1)->setFromPixels((unsigned char const *)arg2,arg3,arg4); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvColorImage_setFromPixels(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 2) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvColorImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CvColorImage_setFromPixels__SWIG_0(L);}  }  }  if (argc == 4) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvColorImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_CvColorImage_setFromPixels__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvColorImage_setFromPixels'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxCvColorImage::setFromPixels(ofPixels const &)\n"
  "    ofxCvColorImage::setFromPixels(unsigned char const *,int,int)\n"); lua_error(L);return 0; }
static int _wrap_CvColorImage_setFromGrayscalePlanarImages(lua_State* L) { { int SWIG_arg = 0;
    ofxCvColorImage *arg1 = (ofxCvColorImage *) 0 ; ofxCvGrayscaleImage *arg2 = 0 ; ofxCvGrayscaleImage *arg3 = 0 ;
    ofxCvGrayscaleImage *arg4 = 0 ; SWIG_check_num_args("ofxCvColorImage::setFromGrayscalePlanarImages",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvColorImage::setFromGrayscalePlanarImages",1,"ofxCvColorImage *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvColorImage::setFromGrayscalePlanarImages",2,"ofxCvGrayscaleImage &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofxCvColorImage::setFromGrayscalePlanarImages",3,"ofxCvGrayscaleImage &");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofxCvColorImage::setFromGrayscalePlanarImages",4,"ofxCvGrayscaleImage &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvColorImage,0))){
      SWIG_fail_ptr("CvColorImage_setFromGrayscalePlanarImages",1,SWIGTYPE_p_ofxCvColorImage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
      SWIG_fail_ptr("CvColorImage_setFromGrayscalePlanarImages",2,SWIGTYPE_p_ofxCvGrayscaleImage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
      SWIG_fail_ptr("CvColorImage_setFromGrayscalePlanarImages",3,SWIGTYPE_p_ofxCvGrayscaleImage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
      SWIG_fail_ptr("CvColorImage_setFromGrayscalePlanarImages",4,SWIGTYPE_p_ofxCvGrayscaleImage); } 
    (arg1)->setFromGrayscalePlanarImages(*arg2,*arg3,*arg4); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvColorImage_convertToGrayscalePlanarImages(lua_State* L) { { int SWIG_arg = 0;
    ofxCvColorImage *arg1 = (ofxCvColorImage *) 0 ; ofxCvGrayscaleImage *arg2 = 0 ; ofxCvGrayscaleImage *arg3 = 0 ;
    ofxCvGrayscaleImage *arg4 = 0 ; SWIG_check_num_args("ofxCvColorImage::convertToGrayscalePlanarImages",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvColorImage::convertToGrayscalePlanarImages",1,"ofxCvColorImage *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvColorImage::convertToGrayscalePlanarImages",2,"ofxCvGrayscaleImage &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofxCvColorImage::convertToGrayscalePlanarImages",3,"ofxCvGrayscaleImage &");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofxCvColorImage::convertToGrayscalePlanarImages",4,"ofxCvGrayscaleImage &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvColorImage,0))){
      SWIG_fail_ptr("CvColorImage_convertToGrayscalePlanarImages",1,SWIGTYPE_p_ofxCvColorImage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
      SWIG_fail_ptr("CvColorImage_convertToGrayscalePlanarImages",2,SWIGTYPE_p_ofxCvGrayscaleImage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
      SWIG_fail_ptr("CvColorImage_convertToGrayscalePlanarImages",3,SWIGTYPE_p_ofxCvGrayscaleImage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
      SWIG_fail_ptr("CvColorImage_convertToGrayscalePlanarImages",4,SWIGTYPE_p_ofxCvGrayscaleImage); } 
    (arg1)->convertToGrayscalePlanarImages(*arg2,*arg3,*arg4); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvColorImage_convertToGrayscalePlanarImage(lua_State* L) { { int SWIG_arg = 0;
    ofxCvColorImage *arg1 = (ofxCvColorImage *) 0 ; ofxCvGrayscaleImage *arg2 = 0 ; int arg3 ;
    SWIG_check_num_args("ofxCvColorImage::convertToGrayscalePlanarImage",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvColorImage::convertToGrayscalePlanarImage",1,"ofxCvColorImage *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvColorImage::convertToGrayscalePlanarImage",2,"ofxCvGrayscaleImage &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvColorImage::convertToGrayscalePlanarImage",3,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvColorImage,0))){
      SWIG_fail_ptr("CvColorImage_convertToGrayscalePlanarImage",1,SWIGTYPE_p_ofxCvColorImage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
      SWIG_fail_ptr("CvColorImage_convertToGrayscalePlanarImage",2,SWIGTYPE_p_ofxCvGrayscaleImage); } 
    arg3 = (int)lua_tonumber(L, 3); (arg1)->convertToGrayscalePlanarImage(*arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CvColorImage_scaleIntoMe__SWIG_0(lua_State* L) { { int SWIG_arg = 0;
    ofxCvColorImage *arg1 = (ofxCvColorImage *) 0 ; ofxCvImage *arg2 = 0 ; int arg3 ;
    SWIG_check_num_args("ofxCvColorImage::scaleIntoMe",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvColorImage::scaleIntoMe",1,"ofxCvColorImage *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvColorImage::scaleIntoMe",2,"ofxCvImage &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvColorImage::scaleIntoMe",3,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvColorImage,0))){
      SWIG_fail_ptr("CvColorImage_scaleIntoMe",1,SWIGTYPE_p_ofxCvColorImage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvColorImage_scaleIntoMe",2,SWIGTYPE_p_ofxCvImage); }  arg3 = (int)lua_tonumber(L, 3);
    (arg1)->scaleIntoMe(*arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvColorImage_scaleIntoMe__SWIG_1(lua_State* L) { { int SWIG_arg = 0;
    ofxCvColorImage *arg1 = (ofxCvColorImage *) 0 ; ofxCvImage *arg2 = 0 ;
    SWIG_check_num_args("ofxCvColorImage::scaleIntoMe",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvColorImage::scaleIntoMe",1,"ofxCvColorImage *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvColorImage::scaleIntoMe",2,"ofxCvImage &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvColorImage,0))){
      SWIG_fail_ptr("CvColorImage_scaleIntoMe",1,SWIGTYPE_p_ofxCvColorImage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvColorImage_scaleIntoMe",2,SWIGTYPE_p_ofxCvImage); }  (arg1)->scaleIntoMe(*arg2); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvColorImage_scaleIntoMe(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvColorImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxCvImage, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CvColorImage_scaleIntoMe__SWIG_1(L);}  }  }  if (argc == 3) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvColorImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxCvImage, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_CvColorImage_scaleIntoMe__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvColorImage_scaleIntoMe'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxCvColorImage::scaleIntoMe(ofxCvImage &,int)\n"
  "    ofxCvColorImage::scaleIntoMe(ofxCvImage &)\n"); lua_error(L);return 0; }
static int _wrap_CvColorImage_convertRgbToHsv(lua_State* L) { { int SWIG_arg = 0;
    ofxCvColorImage *arg1 = (ofxCvColorImage *) 0 ; SWIG_check_num_args("ofxCvColorImage::convertRgbToHsv",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvColorImage::convertRgbToHsv",1,"ofxCvColorImage *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvColorImage,0))){
      SWIG_fail_ptr("CvColorImage_convertRgbToHsv",1,SWIGTYPE_p_ofxCvColorImage); }  (arg1)->convertRgbToHsv(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvColorImage_convertHsvToRgb(lua_State* L) { { int SWIG_arg = 0;
    ofxCvColorImage *arg1 = (ofxCvColorImage *) 0 ; SWIG_check_num_args("ofxCvColorImage::convertHsvToRgb",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvColorImage::convertHsvToRgb",1,"ofxCvColorImage *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvColorImage,0))){
      SWIG_fail_ptr("CvColorImage_convertHsvToRgb",1,SWIGTYPE_p_ofxCvColorImage); }  (arg1)->convertHsvToRgb(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static void swig_delete_CvColorImage(void *obj) {
ofxCvColorImage *arg1 = (ofxCvColorImage *) obj;
delete arg1;
}
static int _proxy__wrap_new_CvColorImage(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CvColorImage);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CvColorImage_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CvColorImage_methods[]= {
    { "set", _wrap_CvColorImage_set},
    { "setFromPixels", _wrap_CvColorImage_setFromPixels},
    { "setFromGrayscalePlanarImages", _wrap_CvColorImage_setFromGrayscalePlanarImages},
    { "convertToGrayscalePlanarImages", _wrap_CvColorImage_convertToGrayscalePlanarImages},
    { "convertToGrayscalePlanarImage", _wrap_CvColorImage_convertToGrayscalePlanarImage},
    { "scaleIntoMe", _wrap_CvColorImage_scaleIntoMe},
    { "convertRgbToHsv", _wrap_CvColorImage_convertRgbToHsv},
    { "convertHsvToRgb", _wrap_CvColorImage_convertHsvToRgb},
    {0,0}
};
static swig_lua_method swig_CvColorImage_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CvColorImage_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CvColorImage_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CvColorImage_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CvColorImage_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CvColorImage_Sf_SwigStatic = {
    "CvColorImage",
    swig_CvColorImage_Sf_SwigStatic_methods,
    swig_CvColorImage_Sf_SwigStatic_attributes,
    swig_CvColorImage_Sf_SwigStatic_constants,
    swig_CvColorImage_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CvColorImage_bases[] = {0,0};
static const char *swig_CvColorImage_base_names[] = {"ofxCvImage *",0};
static swig_lua_class _wrap_class_CvColorImage = { "CvColorImage", "CvColorImage", &SWIGTYPE_p_ofxCvColorImage,_proxy__wrap_new_CvColorImage, swig_delete_CvColorImage, swig_CvColorImage_methods, swig_CvColorImage_attributes, &swig_CvColorImage_Sf_SwigStatic, swig_CvColorImage_meta, swig_CvColorImage_bases, swig_CvColorImage_base_names };

static int _wrap_CvFloatImage_setFromPixels__SWIG_0(lua_State* L) { { int SWIG_arg = 0;
    ofxCvFloatImage *arg1 = (ofxCvFloatImage *) 0 ; ofPixels *arg2 = 0 ;
    SWIG_check_num_args("ofxCvFloatImage::setFromPixels",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvFloatImage::setFromPixels",1,"ofxCvFloatImage *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvFloatImage::setFromPixels",2,"ofPixels const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvFloatImage,0))){
      SWIG_fail_ptr("CvFloatImage_setFromPixels",1,SWIGTYPE_p_ofxCvFloatImage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
      SWIG_fail_ptr("CvFloatImage_setFromPixels",2,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
    (arg1)->setFromPixels((ofPixels const &)*arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_CvFloatImage__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxCvFloatImage *result = 0 ;
    SWIG_check_num_args("ofxCvFloatImage::ofxCvFloatImage",0,0) result = (ofxCvFloatImage *)new ofxCvFloatImage();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxCvFloatImage,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_new_CvFloatImage__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxCvFloatImage *arg1 = 0 ;
    ofxCvFloatImage *result = 0 ; SWIG_check_num_args("ofxCvFloatImage::ofxCvFloatImage",1,1)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofxCvFloatImage::ofxCvFloatImage",1,"ofxCvFloatImage const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvFloatImage,0))){
      SWIG_fail_ptr("new_CvFloatImage",1,SWIGTYPE_p_ofxCvFloatImage); } 
    result = (ofxCvFloatImage *)new ofxCvFloatImage((ofxCvFloatImage const &)*arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxCvFloatImage,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_new_CvFloatImage(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_CvFloatImage__SWIG_0(L);}  if (argc == 1) { int _v = 0; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvFloatImage, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_CvFloatImage__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CvFloatImage'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxCvFloatImage::ofxCvFloatImage()\n" "    ofxCvFloatImage::ofxCvFloatImage(ofxCvFloatImage const &)\n");
  lua_error(L);return 0; }
static int _wrap_CvFloatImage_setNativeScale(lua_State* L) { { int SWIG_arg = 0; ofxCvFloatImage *arg1 = (ofxCvFloatImage *) 0 ;
    float arg2 ; float arg3 ; SWIG_check_num_args("ofxCvFloatImage::setNativeScale",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvFloatImage::setNativeScale",1,"ofxCvFloatImage *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvFloatImage::setNativeScale",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvFloatImage::setNativeScale",3,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvFloatImage,0))){
      SWIG_fail_ptr("CvFloatImage_setNativeScale",1,SWIGTYPE_p_ofxCvFloatImage); }  arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3); (arg1)->setNativeScale(arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_CvFloatImage_getNativeScaleMin(lua_State* L) { { int SWIG_arg = 0;
    ofxCvFloatImage *arg1 = (ofxCvFloatImage *) 0 ; float result; SWIG_check_num_args("ofxCvFloatImage::getNativeScaleMin",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvFloatImage::getNativeScaleMin",1,"ofxCvFloatImage *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvFloatImage,0))){
      SWIG_fail_ptr("CvFloatImage_getNativeScaleMin",1,SWIGTYPE_p_ofxCvFloatImage); } 
    result = (float)(arg1)->getNativeScaleMin(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvFloatImage_getNativeScaleMax(lua_State* L) { { int SWIG_arg = 0;
    ofxCvFloatImage *arg1 = (ofxCvFloatImage *) 0 ; float result; SWIG_check_num_args("ofxCvFloatImage::getNativeScaleMax",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvFloatImage::getNativeScaleMax",1,"ofxCvFloatImage *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvFloatImage,0))){
      SWIG_fail_ptr("CvFloatImage_getNativeScaleMax",1,SWIGTYPE_p_ofxCvFloatImage); } 
    result = (float)(arg1)->getNativeScaleMax(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvFloatImage_setFromPixels__SWIG_1(lua_State* L) { { int SWIG_arg = 0;
    ofxCvFloatImage *arg1 = (ofxCvFloatImage *) 0 ; unsigned char *arg2 = (unsigned char *) 0 ; int arg3 ; int arg4 ;
    SWIG_check_num_args("ofxCvFloatImage::setFromPixels",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvFloatImage::setFromPixels",1,"ofxCvFloatImage *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxCvFloatImage::setFromPixels",2,"unsigned char const *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvFloatImage::setFromPixels",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvFloatImage::setFromPixels",4,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvFloatImage,0))){
      SWIG_fail_ptr("CvFloatImage_setFromPixels",1,SWIGTYPE_p_ofxCvFloatImage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
      SWIG_fail_ptr("CvFloatImage_setFromPixels",2,SWIGTYPE_p_unsigned_char); }  arg3 = (int)lua_tonumber(L, 3);
    arg4 = (int)lua_tonumber(L, 4); (arg1)->setFromPixels((unsigned char const *)arg2,arg3,arg4); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvFloatImage_setFromPixels__SWIG_2(lua_State* L) { { int SWIG_arg = 0;
    ofxCvFloatImage *arg1 = (ofxCvFloatImage *) 0 ; float *arg2 = (float *) 0 ; int arg3 ; int arg4 ;
    SWIG_check_num_args("ofxCvFloatImage::setFromPixels",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvFloatImage::setFromPixels",1,"ofxCvFloatImage *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxCvFloatImage::setFromPixels",2,"float *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvFloatImage::setFromPixels",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvFloatImage::setFromPixels",4,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvFloatImage,0))){
      SWIG_fail_ptr("CvFloatImage_setFromPixels",1,SWIGTYPE_p_ofxCvFloatImage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("CvFloatImage_setFromPixels",2,SWIGTYPE_p_float); }  arg3 = (int)lua_tonumber(L, 3);
    arg4 = (int)lua_tonumber(L, 4); (arg1)->setFromPixels(arg2,arg3,arg4); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_CvFloatImage_setFromPixels(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 2) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvFloatImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CvFloatImage_setFromPixels__SWIG_0(L);}  }  }  if (argc == 4) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvFloatImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_CvFloatImage_setFromPixels__SWIG_1(L);}  }  }  }  }  if (argc == 4) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvFloatImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }  else {
          _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) {
            return _wrap_CvFloatImage_setFromPixels__SWIG_2(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvFloatImage_setFromPixels'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxCvFloatImage::setFromPixels(ofPixels const &)\n"
  "    ofxCvFloatImage::setFromPixels(unsigned char const *,int,int)\n"
  "    ofxCvFloatImage::setFromPixels(float *,int,int)\n"); lua_error(L);return 0; }
static int _wrap_CvFloatImage_setRoiFromPixels__SWIG_0(lua_State* L) { { int SWIG_arg = 0;
    ofxCvFloatImage *arg1 = (ofxCvFloatImage *) 0 ; unsigned char *arg2 = (unsigned char *) 0 ; int arg3 ; int arg4 ;
    SWIG_check_num_args("ofxCvFloatImage::setRoiFromPixels",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvFloatImage::setRoiFromPixels",1,"ofxCvFloatImage *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxCvFloatImage::setRoiFromPixels",2,"unsigned char const *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvFloatImage::setRoiFromPixels",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvFloatImage::setRoiFromPixels",4,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvFloatImage,0))){
      SWIG_fail_ptr("CvFloatImage_setRoiFromPixels",1,SWIGTYPE_p_ofxCvFloatImage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
      SWIG_fail_ptr("CvFloatImage_setRoiFromPixels",2,SWIGTYPE_p_unsigned_char); }  arg3 = (int)lua_tonumber(L, 3);
    arg4 = (int)lua_tonumber(L, 4); (arg1)->setRoiFromPixels((unsigned char const *)arg2,arg3,arg4); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvFloatImage_setRoiFromPixels__SWIG_1(lua_State* L) { { int SWIG_arg = 0;
    ofxCvFloatImage *arg1 = (ofxCvFloatImage *) 0 ; float *arg2 = (float *) 0 ; int arg3 ; int arg4 ;
    SWIG_check_num_args("ofxCvFloatImage::setRoiFromPixels",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvFloatImage::setRoiFromPixels",1,"ofxCvFloatImage *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxCvFloatImage::setRoiFromPixels",2,"float *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvFloatImage::setRoiFromPixels",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvFloatImage::setRoiFromPixels",4,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvFloatImage,0))){
      SWIG_fail_ptr("CvFloatImage_setRoiFromPixels",1,SWIGTYPE_p_ofxCvFloatImage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("CvFloatImage_setRoiFromPixels",2,SWIGTYPE_p_float); }  arg3 = (int)lua_tonumber(L, 3);
    arg4 = (int)lua_tonumber(L, 4); (arg1)->setRoiFromPixels(arg2,arg3,arg4); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CvFloatImage_setRoiFromPixels(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 4) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvFloatImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_CvFloatImage_setRoiFromPixels__SWIG_0(L);}  }  }  }  }  if (argc == 4) { int _v = 0; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvFloatImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }  else {
          _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) {
            return _wrap_CvFloatImage_setRoiFromPixels__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvFloatImage_setRoiFromPixels'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxCvFloatImage::setRoiFromPixels(unsigned char const *,int,int)\n"
  "    ofxCvFloatImage::setRoiFromPixels(float *,int,int)\n"); lua_error(L);return 0; }
static int _wrap_CvFloatImage_addWeighted(lua_State* L) { { int SWIG_arg = 0; ofxCvFloatImage *arg1 = (ofxCvFloatImage *) 0 ;
    ofxCvGrayscaleImage *arg2 = 0 ; float arg3 ; SWIG_check_num_args("ofxCvFloatImage::addWeighted",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvFloatImage::addWeighted",1,"ofxCvFloatImage *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvFloatImage::addWeighted",2,"ofxCvGrayscaleImage &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvFloatImage::addWeighted",3,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvFloatImage,0))){
      SWIG_fail_ptr("CvFloatImage_addWeighted",1,SWIGTYPE_p_ofxCvFloatImage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
      SWIG_fail_ptr("CvFloatImage_addWeighted",2,SWIGTYPE_p_ofxCvGrayscaleImage); }  arg3 = (float)lua_tonumber(L, 3);
    (arg1)->addWeighted(*arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvFloatImage_getPixelsAsFloats(lua_State* L) { { int SWIG_arg = 0;
    ofxCvFloatImage *arg1 = (ofxCvFloatImage *) 0 ; float *result = 0 ;
    SWIG_check_num_args("ofxCvFloatImage::getPixelsAsFloats",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvFloatImage::getPixelsAsFloats",1,"ofxCvFloatImage *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvFloatImage,0))){
      SWIG_fail_ptr("CvFloatImage_getPixelsAsFloats",1,SWIGTYPE_p_ofxCvFloatImage); } 
    result = (float *)(arg1)->getPixelsAsFloats(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvFloatImage_getFloatPixelsRef(lua_State* L) { { int SWIG_arg = 0;
    ofxCvFloatImage *arg1 = (ofxCvFloatImage *) 0 ; ofFloatPixels *result = 0 ;
    SWIG_check_num_args("ofxCvFloatImage::getFloatPixelsRef",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvFloatImage::getFloatPixelsRef",1,"ofxCvFloatImage *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvFloatImage,0))){
      SWIG_fail_ptr("CvFloatImage_getFloatPixelsRef",1,SWIGTYPE_p_ofxCvFloatImage); } 
    result = (ofFloatPixels *) &(arg1)->getFloatPixelsRef();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofPixels_T_float_t,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CvFloatImage_getRoiPixelsAsFloats(lua_State* L) { { int SWIG_arg = 0;
    ofxCvFloatImage *arg1 = (ofxCvFloatImage *) 0 ; float *result = 0 ;
    SWIG_check_num_args("ofxCvFloatImage::getRoiPixelsAsFloats",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvFloatImage::getRoiPixelsAsFloats",1,"ofxCvFloatImage *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvFloatImage,0))){
      SWIG_fail_ptr("CvFloatImage_getRoiPixelsAsFloats",1,SWIGTYPE_p_ofxCvFloatImage); } 
    result = (float *)(arg1)->getRoiPixelsAsFloats(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvFloatImage_getRoiFloatPixelsRef(lua_State* L) { { int SWIG_arg = 0;
    ofxCvFloatImage *arg1 = (ofxCvFloatImage *) 0 ; ofFloatPixels *result = 0 ;
    SWIG_check_num_args("ofxCvFloatImage::getRoiFloatPixelsRef",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvFloatImage::getRoiFloatPixelsRef",1,"ofxCvFloatImage *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvFloatImage,0))){
      SWIG_fail_ptr("CvFloatImage_getRoiFloatPixelsRef",1,SWIGTYPE_p_ofxCvFloatImage); } 
    result = (ofFloatPixels *) &(arg1)->getRoiFloatPixelsRef();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofPixels_T_float_t,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CvFloatImage_scaleIntoMe__SWIG_0(lua_State* L) { { int SWIG_arg = 0;
    ofxCvFloatImage *arg1 = (ofxCvFloatImage *) 0 ; ofxCvImage *arg2 = 0 ; int arg3 ;
    SWIG_check_num_args("ofxCvFloatImage::scaleIntoMe",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvFloatImage::scaleIntoMe",1,"ofxCvFloatImage *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvFloatImage::scaleIntoMe",2,"ofxCvImage &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvFloatImage::scaleIntoMe",3,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvFloatImage,0))){
      SWIG_fail_ptr("CvFloatImage_scaleIntoMe",1,SWIGTYPE_p_ofxCvFloatImage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvFloatImage_scaleIntoMe",2,SWIGTYPE_p_ofxCvImage); }  arg3 = (int)lua_tonumber(L, 3);
    (arg1)->scaleIntoMe(*arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvFloatImage_scaleIntoMe__SWIG_1(lua_State* L) { { int SWIG_arg = 0;
    ofxCvFloatImage *arg1 = (ofxCvFloatImage *) 0 ; ofxCvImage *arg2 = 0 ;
    SWIG_check_num_args("ofxCvFloatImage::scaleIntoMe",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvFloatImage::scaleIntoMe",1,"ofxCvFloatImage *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvFloatImage::scaleIntoMe",2,"ofxCvImage &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvFloatImage,0))){
      SWIG_fail_ptr("CvFloatImage_scaleIntoMe",1,SWIGTYPE_p_ofxCvFloatImage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvFloatImage_scaleIntoMe",2,SWIGTYPE_p_ofxCvImage); }  (arg1)->scaleIntoMe(*arg2); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvFloatImage_scaleIntoMe(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvFloatImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxCvImage, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CvFloatImage_scaleIntoMe__SWIG_1(L);}  }  }  if (argc == 3) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvFloatImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxCvImage, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_CvFloatImage_scaleIntoMe__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvFloatImage_scaleIntoMe'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxCvFloatImage::scaleIntoMe(ofxCvImage &,int)\n"
  "    ofxCvFloatImage::scaleIntoMe(ofxCvImage &)\n"); lua_error(L);return 0; }
static void swig_delete_CvFloatImage(void *obj) {
ofxCvFloatImage *arg1 = (ofxCvFloatImage *) obj;
delete arg1;
}
static int _proxy__wrap_new_CvFloatImage(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CvFloatImage);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CvFloatImage_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CvFloatImage_methods[]= {
    { "setNativeScale", _wrap_CvFloatImage_setNativeScale},
    { "getNativeScaleMin", _wrap_CvFloatImage_getNativeScaleMin},
    { "getNativeScaleMax", _wrap_CvFloatImage_getNativeScaleMax},
    { "setFromPixels", _wrap_CvFloatImage_setFromPixels},
    { "setRoiFromPixels", _wrap_CvFloatImage_setRoiFromPixels},
    { "addWeighted", _wrap_CvFloatImage_addWeighted},
    { "getPixelsAsFloats", _wrap_CvFloatImage_getPixelsAsFloats},
    { "getFloatPixelsRef", _wrap_CvFloatImage_getFloatPixelsRef},
    { "getRoiPixelsAsFloats", _wrap_CvFloatImage_getRoiPixelsAsFloats},
    { "getRoiFloatPixelsRef", _wrap_CvFloatImage_getRoiFloatPixelsRef},
    { "scaleIntoMe", _wrap_CvFloatImage_scaleIntoMe},
    {0,0}
};
static swig_lua_method swig_CvFloatImage_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CvFloatImage_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CvFloatImage_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CvFloatImage_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CvFloatImage_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CvFloatImage_Sf_SwigStatic = {
    "CvFloatImage",
    swig_CvFloatImage_Sf_SwigStatic_methods,
    swig_CvFloatImage_Sf_SwigStatic_attributes,
    swig_CvFloatImage_Sf_SwigStatic_constants,
    swig_CvFloatImage_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CvFloatImage_bases[] = {0,0};
static const char *swig_CvFloatImage_base_names[] = {"ofxCvImage *",0};
static swig_lua_class _wrap_class_CvFloatImage = { "CvFloatImage", "CvFloatImage", &SWIGTYPE_p_ofxCvFloatImage,_proxy__wrap_new_CvFloatImage, swig_delete_CvFloatImage, swig_CvFloatImage_methods, swig_CvFloatImage_attributes, &swig_CvFloatImage_Sf_SwigStatic, swig_CvFloatImage_meta, swig_CvFloatImage_bases, swig_CvFloatImage_base_names };

static int _wrap_CvGrayscaleImage_setFromPixels__SWIG_0(lua_State* L) { { int SWIG_arg = 0;
    ofxCvGrayscaleImage *arg1 = (ofxCvGrayscaleImage *) 0 ; ofPixels *arg2 = 0 ;
    SWIG_check_num_args("ofxCvGrayscaleImage::setFromPixels",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvGrayscaleImage::setFromPixels",1,"ofxCvGrayscaleImage *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvGrayscaleImage::setFromPixels",2,"ofPixels const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
      SWIG_fail_ptr("CvGrayscaleImage_setFromPixels",1,SWIGTYPE_p_ofxCvGrayscaleImage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
      SWIG_fail_ptr("CvGrayscaleImage_setFromPixels",2,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
    (arg1)->setFromPixels((ofPixels const &)*arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_CvGrayscaleImage__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxCvGrayscaleImage *result = 0 ;
    SWIG_check_num_args("ofxCvGrayscaleImage::ofxCvGrayscaleImage",0,0)
    result = (ofxCvGrayscaleImage *)new ofxCvGrayscaleImage();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxCvGrayscaleImage,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_new_CvGrayscaleImage__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxCvGrayscaleImage *arg1 = 0 ;
    ofxCvGrayscaleImage *result = 0 ; SWIG_check_num_args("ofxCvGrayscaleImage::ofxCvGrayscaleImage",1,1)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofxCvGrayscaleImage::ofxCvGrayscaleImage",1,"ofxCvGrayscaleImage const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
      SWIG_fail_ptr("new_CvGrayscaleImage",1,SWIGTYPE_p_ofxCvGrayscaleImage); } 
    result = (ofxCvGrayscaleImage *)new ofxCvGrayscaleImage((ofxCvGrayscaleImage const &)*arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxCvGrayscaleImage,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_new_CvGrayscaleImage(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_CvGrayscaleImage__SWIG_0(L);}  if (argc == 1) { int _v = 0; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_CvGrayscaleImage__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CvGrayscaleImage'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxCvGrayscaleImage::ofxCvGrayscaleImage()\n"
  "    ofxCvGrayscaleImage::ofxCvGrayscaleImage(ofxCvGrayscaleImage const &)\n"); lua_error(L);return 0; }
static int _wrap_CvGrayscaleImage_setFromPixels__SWIG_1(lua_State* L) { { int SWIG_arg = 0;
    ofxCvGrayscaleImage *arg1 = (ofxCvGrayscaleImage *) 0 ; unsigned char *arg2 = (unsigned char *) 0 ; int arg3 ; int arg4 ;
    SWIG_check_num_args("ofxCvGrayscaleImage::setFromPixels",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvGrayscaleImage::setFromPixels",1,"ofxCvGrayscaleImage *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxCvGrayscaleImage::setFromPixels",2,"unsigned char const *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvGrayscaleImage::setFromPixels",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvGrayscaleImage::setFromPixels",4,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
      SWIG_fail_ptr("CvGrayscaleImage_setFromPixels",1,SWIGTYPE_p_ofxCvGrayscaleImage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
      SWIG_fail_ptr("CvGrayscaleImage_setFromPixels",2,SWIGTYPE_p_unsigned_char); }  arg3 = (int)lua_tonumber(L, 3);
    arg4 = (int)lua_tonumber(L, 4); (arg1)->setFromPixels((unsigned char const *)arg2,arg3,arg4); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvGrayscaleImage_setFromPixels(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 2) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CvGrayscaleImage_setFromPixels__SWIG_0(L);}  }  } 
  if (argc == 4) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_CvGrayscaleImage_setFromPixels__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvGrayscaleImage_setFromPixels'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxCvGrayscaleImage::setFromPixels(ofPixels const &)\n"
  "    ofxCvGrayscaleImage::setFromPixels(unsigned char const *,int,int)\n"); lua_error(L);return 0; }
static int _wrap_CvGrayscaleImage_absDiff__SWIG_0(lua_State* L) { { int SWIG_arg = 0;
    ofxCvGrayscaleImage *arg1 = (ofxCvGrayscaleImage *) 0 ; ofxCvGrayscaleImage *arg2 = 0 ;
    SWIG_check_num_args("ofxCvGrayscaleImage::absDiff",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvGrayscaleImage::absDiff",1,"ofxCvGrayscaleImage *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvGrayscaleImage::absDiff",2,"ofxCvGrayscaleImage &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
      SWIG_fail_ptr("CvGrayscaleImage_absDiff",1,SWIGTYPE_p_ofxCvGrayscaleImage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
      SWIG_fail_ptr("CvGrayscaleImage_absDiff",2,SWIGTYPE_p_ofxCvGrayscaleImage); }  (arg1)->absDiff(*arg2); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvGrayscaleImage_absDiff__SWIG_1(lua_State* L) { { int SWIG_arg = 0;
    ofxCvGrayscaleImage *arg1 = (ofxCvGrayscaleImage *) 0 ; ofxCvGrayscaleImage *arg2 = 0 ; ofxCvGrayscaleImage *arg3 = 0 ;
    SWIG_check_num_args("ofxCvGrayscaleImage::absDiff",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvGrayscaleImage::absDiff",1,"ofxCvGrayscaleImage *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvGrayscaleImage::absDiff",2,"ofxCvGrayscaleImage &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofxCvGrayscaleImage::absDiff",3,"ofxCvGrayscaleImage &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
      SWIG_fail_ptr("CvGrayscaleImage_absDiff",1,SWIGTYPE_p_ofxCvGrayscaleImage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
      SWIG_fail_ptr("CvGrayscaleImage_absDiff",2,SWIGTYPE_p_ofxCvGrayscaleImage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
      SWIG_fail_ptr("CvGrayscaleImage_absDiff",3,SWIGTYPE_p_ofxCvGrayscaleImage); }  (arg1)->absDiff(*arg2,*arg3);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvGrayscaleImage_absDiff(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CvGrayscaleImage_absDiff__SWIG_0(L);}  }  }  if (argc == 3) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CvGrayscaleImage_absDiff__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvGrayscaleImage_absDiff'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxCvGrayscaleImage::absDiff(ofxCvGrayscaleImage &)\n"
  "    ofxCvGrayscaleImage::absDiff(ofxCvGrayscaleImage &,ofxCvGrayscaleImage &)\n"); lua_error(L);return 0; }
static int _wrap_CvGrayscaleImage_threshold__SWIG_0(lua_State* L) { { int SWIG_arg = 0;
    ofxCvGrayscaleImage *arg1 = (ofxCvGrayscaleImage *) 0 ; int arg2 ; bool arg3 ;
    SWIG_check_num_args("ofxCvGrayscaleImage::threshold",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvGrayscaleImage::threshold",1,"ofxCvGrayscaleImage *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvGrayscaleImage::threshold",2,"int");
    if(!lua_isboolean(L,3)) SWIG_fail_arg("ofxCvGrayscaleImage::threshold",3,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
      SWIG_fail_ptr("CvGrayscaleImage_threshold",1,SWIGTYPE_p_ofxCvGrayscaleImage); }  arg2 = (int)lua_tonumber(L, 2);
    arg3 = (lua_toboolean(L, 3)!=0); (arg1)->threshold(arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_CvGrayscaleImage_threshold__SWIG_1(lua_State* L) { { int SWIG_arg = 0;
    ofxCvGrayscaleImage *arg1 = (ofxCvGrayscaleImage *) 0 ; int arg2 ; SWIG_check_num_args("ofxCvGrayscaleImage::threshold",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvGrayscaleImage::threshold",1,"ofxCvGrayscaleImage *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvGrayscaleImage::threshold",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
      SWIG_fail_ptr("CvGrayscaleImage_threshold",1,SWIGTYPE_p_ofxCvGrayscaleImage); }  arg2 = (int)lua_tonumber(L, 2);
    (arg1)->threshold(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvGrayscaleImage_threshold(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_CvGrayscaleImage_threshold__SWIG_1(L);}  }  }  if (argc == 3) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }
         if (_v) { return _wrap_CvGrayscaleImage_threshold__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvGrayscaleImage_threshold'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxCvGrayscaleImage::threshold(int,bool)\n"
  "    ofxCvGrayscaleImage::threshold(int)\n"); lua_error(L);return 0; }
static int _wrap_CvGrayscaleImage_adaptiveThreshold__SWIG_0(lua_State* L) { { int SWIG_arg = 0;
    ofxCvGrayscaleImage *arg1 = (ofxCvGrayscaleImage *) 0 ; int arg2 ; int arg3 ; bool arg4 ; bool arg5 ;
    SWIG_check_num_args("ofxCvGrayscaleImage::adaptiveThreshold",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvGrayscaleImage::adaptiveThreshold",1,"ofxCvGrayscaleImage *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvGrayscaleImage::adaptiveThreshold",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvGrayscaleImage::adaptiveThreshold",3,"int");
    if(!lua_isboolean(L,4)) SWIG_fail_arg("ofxCvGrayscaleImage::adaptiveThreshold",4,"bool");
    if(!lua_isboolean(L,5)) SWIG_fail_arg("ofxCvGrayscaleImage::adaptiveThreshold",5,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
      SWIG_fail_ptr("CvGrayscaleImage_adaptiveThreshold",1,SWIGTYPE_p_ofxCvGrayscaleImage); }  arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3); arg4 = (lua_toboolean(L, 4)!=0); arg5 = (lua_toboolean(L, 5)!=0);
    (arg1)->adaptiveThreshold(arg2,arg3,arg4,arg5); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvGrayscaleImage_adaptiveThreshold__SWIG_1(lua_State* L) { { int SWIG_arg = 0;
    ofxCvGrayscaleImage *arg1 = (ofxCvGrayscaleImage *) 0 ; int arg2 ; int arg3 ; bool arg4 ;
    SWIG_check_num_args("ofxCvGrayscaleImage::adaptiveThreshold",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvGrayscaleImage::adaptiveThreshold",1,"ofxCvGrayscaleImage *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvGrayscaleImage::adaptiveThreshold",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvGrayscaleImage::adaptiveThreshold",3,"int");
    if(!lua_isboolean(L,4)) SWIG_fail_arg("ofxCvGrayscaleImage::adaptiveThreshold",4,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
      SWIG_fail_ptr("CvGrayscaleImage_adaptiveThreshold",1,SWIGTYPE_p_ofxCvGrayscaleImage); }  arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3); arg4 = (lua_toboolean(L, 4)!=0); (arg1)->adaptiveThreshold(arg2,arg3,arg4); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvGrayscaleImage_adaptiveThreshold__SWIG_2(lua_State* L) { { int SWIG_arg = 0;
    ofxCvGrayscaleImage *arg1 = (ofxCvGrayscaleImage *) 0 ; int arg2 ; int arg3 ;
    SWIG_check_num_args("ofxCvGrayscaleImage::adaptiveThreshold",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvGrayscaleImage::adaptiveThreshold",1,"ofxCvGrayscaleImage *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvGrayscaleImage::adaptiveThreshold",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvGrayscaleImage::adaptiveThreshold",3,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
      SWIG_fail_ptr("CvGrayscaleImage_adaptiveThreshold",1,SWIGTYPE_p_ofxCvGrayscaleImage); }  arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3); (arg1)->adaptiveThreshold(arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_CvGrayscaleImage_adaptiveThreshold__SWIG_3(lua_State* L) { { int SWIG_arg = 0;
    ofxCvGrayscaleImage *arg1 = (ofxCvGrayscaleImage *) 0 ; int arg2 ;
    SWIG_check_num_args("ofxCvGrayscaleImage::adaptiveThreshold",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvGrayscaleImage::adaptiveThreshold",1,"ofxCvGrayscaleImage *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvGrayscaleImage::adaptiveThreshold",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
      SWIG_fail_ptr("CvGrayscaleImage_adaptiveThreshold",1,SWIGTYPE_p_ofxCvGrayscaleImage); }  arg2 = (int)lua_tonumber(L, 2);
    (arg1)->adaptiveThreshold(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvGrayscaleImage_adaptiveThreshold(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 2) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_CvGrayscaleImage_adaptiveThreshold__SWIG_3(L);}  }  }  if (argc == 3) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_CvGrayscaleImage_adaptiveThreshold__SWIG_2(L);}  }  }  }  if (argc == 4) { int _v = 0; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isboolean(L,argv[3]); }  if (_v) { return _wrap_CvGrayscaleImage_adaptiveThreshold__SWIG_1(L);}  }
         }  }  }  if (argc == 5) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isboolean(L,argv[3]); }  if (_v) { { _v = lua_isboolean(L,argv[4]); }  if (_v) {
              return _wrap_CvGrayscaleImage_adaptiveThreshold__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvGrayscaleImage_adaptiveThreshold'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxCvGrayscaleImage::adaptiveThreshold(int,int,bool,bool)\n"
  "    ofxCvGrayscaleImage::adaptiveThreshold(int,int,bool)\n" "    ofxCvGrayscaleImage::adaptiveThreshold(int,int)\n"
  "    ofxCvGrayscaleImage::adaptiveThreshold(int)\n"); lua_error(L);return 0; }
static int _wrap_CvGrayscaleImage_brightnessContrast(lua_State* L) { { int SWIG_arg = 0;
    ofxCvGrayscaleImage *arg1 = (ofxCvGrayscaleImage *) 0 ; float arg2 ; float arg3 ;
    SWIG_check_num_args("ofxCvGrayscaleImage::brightnessContrast",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvGrayscaleImage::brightnessContrast",1,"ofxCvGrayscaleImage *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvGrayscaleImage::brightnessContrast",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvGrayscaleImage::brightnessContrast",3,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
      SWIG_fail_ptr("CvGrayscaleImage_brightnessContrast",1,SWIGTYPE_p_ofxCvGrayscaleImage); } 
    arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); (arg1)->brightnessContrast(arg2,arg3); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvGrayscaleImage_scaleIntoMe__SWIG_0(lua_State* L) { { int SWIG_arg = 0;
    ofxCvGrayscaleImage *arg1 = (ofxCvGrayscaleImage *) 0 ; ofxCvImage *arg2 = 0 ; int arg3 ;
    SWIG_check_num_args("ofxCvGrayscaleImage::scaleIntoMe",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvGrayscaleImage::scaleIntoMe",1,"ofxCvGrayscaleImage *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvGrayscaleImage::scaleIntoMe",2,"ofxCvImage &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvGrayscaleImage::scaleIntoMe",3,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
      SWIG_fail_ptr("CvGrayscaleImage_scaleIntoMe",1,SWIGTYPE_p_ofxCvGrayscaleImage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvGrayscaleImage_scaleIntoMe",2,SWIGTYPE_p_ofxCvImage); }  arg3 = (int)lua_tonumber(L, 3);
    (arg1)->scaleIntoMe(*arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvGrayscaleImage_scaleIntoMe__SWIG_1(lua_State* L) { { int SWIG_arg = 0;
    ofxCvGrayscaleImage *arg1 = (ofxCvGrayscaleImage *) 0 ; ofxCvImage *arg2 = 0 ;
    SWIG_check_num_args("ofxCvGrayscaleImage::scaleIntoMe",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvGrayscaleImage::scaleIntoMe",1,"ofxCvGrayscaleImage *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvGrayscaleImage::scaleIntoMe",2,"ofxCvImage &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
      SWIG_fail_ptr("CvGrayscaleImage_scaleIntoMe",1,SWIGTYPE_p_ofxCvGrayscaleImage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvGrayscaleImage_scaleIntoMe",2,SWIGTYPE_p_ofxCvImage); }  (arg1)->scaleIntoMe(*arg2); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvGrayscaleImage_scaleIntoMe(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxCvImage, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CvGrayscaleImage_scaleIntoMe__SWIG_1(L);}  }  } 
  if (argc == 3) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxCvImage, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_CvGrayscaleImage_scaleIntoMe__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvGrayscaleImage_scaleIntoMe'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxCvGrayscaleImage::scaleIntoMe(ofxCvImage &,int)\n"
  "    ofxCvGrayscaleImage::scaleIntoMe(ofxCvImage &)\n"); lua_error(L);return 0; }
static int _wrap_CvGrayscaleImage_blurHeavily(lua_State* L) { { int SWIG_arg = 0;
    ofxCvGrayscaleImage *arg1 = (ofxCvGrayscaleImage *) 0 ; SWIG_check_num_args("ofxCvGrayscaleImage::blurHeavily",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvGrayscaleImage::blurHeavily",1,"ofxCvGrayscaleImage *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
      SWIG_fail_ptr("CvGrayscaleImage_blurHeavily",1,SWIGTYPE_p_ofxCvGrayscaleImage); }  (arg1)->blurHeavily(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvGrayscaleImage_erode_3x3(lua_State* L) { { int SWIG_arg = 0;
    ofxCvGrayscaleImage *arg1 = (ofxCvGrayscaleImage *) 0 ; SWIG_check_num_args("ofxCvGrayscaleImage::erode_3x3",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvGrayscaleImage::erode_3x3",1,"ofxCvGrayscaleImage *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
      SWIG_fail_ptr("CvGrayscaleImage_erode_3x3",1,SWIGTYPE_p_ofxCvGrayscaleImage); }  (arg1)->erode_3x3(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvGrayscaleImage_dilate_3x3(lua_State* L) { { int SWIG_arg = 0;
    ofxCvGrayscaleImage *arg1 = (ofxCvGrayscaleImage *) 0 ; SWIG_check_num_args("ofxCvGrayscaleImage::dilate_3x3",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvGrayscaleImage::dilate_3x3",1,"ofxCvGrayscaleImage *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
      SWIG_fail_ptr("CvGrayscaleImage_dilate_3x3",1,SWIGTYPE_p_ofxCvGrayscaleImage); }  (arg1)->dilate_3x3(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvGrayscaleImage_setFromColorImage(lua_State* L) { { int SWIG_arg = 0;
    ofxCvGrayscaleImage *arg1 = (ofxCvGrayscaleImage *) 0 ; ofxCvColorImage *arg2 = 0 ;
    SWIG_check_num_args("ofxCvGrayscaleImage::setFromColorImage",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvGrayscaleImage::setFromColorImage",1,"ofxCvGrayscaleImage *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvGrayscaleImage::setFromColorImage",2,"ofxCvColorImage &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
      SWIG_fail_ptr("CvGrayscaleImage_setFromColorImage",1,SWIGTYPE_p_ofxCvGrayscaleImage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvColorImage,0))){
      SWIG_fail_ptr("CvGrayscaleImage_setFromColorImage",2,SWIGTYPE_p_ofxCvColorImage); }  (arg1)->setFromColorImage(*arg2);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvGrayscaleImage_setFromFloatImage(lua_State* L) { { int SWIG_arg = 0;
    ofxCvGrayscaleImage *arg1 = (ofxCvGrayscaleImage *) 0 ; ofxCvFloatImage *arg2 = 0 ;
    SWIG_check_num_args("ofxCvGrayscaleImage::setFromFloatImage",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvGrayscaleImage::setFromFloatImage",1,"ofxCvGrayscaleImage *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvGrayscaleImage::setFromFloatImage",2,"ofxCvFloatImage &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
      SWIG_fail_ptr("CvGrayscaleImage_setFromFloatImage",1,SWIGTYPE_p_ofxCvGrayscaleImage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvFloatImage,0))){
      SWIG_fail_ptr("CvGrayscaleImage_setFromFloatImage",2,SWIGTYPE_p_ofxCvFloatImage); }  (arg1)->setFromFloatImage(*arg2);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static void swig_delete_CvGrayscaleImage(void *obj) {
ofxCvGrayscaleImage *arg1 = (ofxCvGrayscaleImage *) obj;
delete arg1;
}
static int _proxy__wrap_new_CvGrayscaleImage(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CvGrayscaleImage);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CvGrayscaleImage_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CvGrayscaleImage_methods[]= {
    { "setFromPixels", _wrap_CvGrayscaleImage_setFromPixels},
    { "absDiff", _wrap_CvGrayscaleImage_absDiff},
    { "threshold", _wrap_CvGrayscaleImage_threshold},
    { "adaptiveThreshold", _wrap_CvGrayscaleImage_adaptiveThreshold},
    { "brightnessContrast", _wrap_CvGrayscaleImage_brightnessContrast},
    { "scaleIntoMe", _wrap_CvGrayscaleImage_scaleIntoMe},
    { "blurHeavily", _wrap_CvGrayscaleImage_blurHeavily},
    { "erode_3x3", _wrap_CvGrayscaleImage_erode_3x3},
    { "dilate_3x3", _wrap_CvGrayscaleImage_dilate_3x3},
    { "setFromColorImage", _wrap_CvGrayscaleImage_setFromColorImage},
    { "setFromFloatImage", _wrap_CvGrayscaleImage_setFromFloatImage},
    {0,0}
};
static swig_lua_method swig_CvGrayscaleImage_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CvGrayscaleImage_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CvGrayscaleImage_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CvGrayscaleImage_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CvGrayscaleImage_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CvGrayscaleImage_Sf_SwigStatic = {
    "CvGrayscaleImage",
    swig_CvGrayscaleImage_Sf_SwigStatic_methods,
    swig_CvGrayscaleImage_Sf_SwigStatic_attributes,
    swig_CvGrayscaleImage_Sf_SwigStatic_constants,
    swig_CvGrayscaleImage_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CvGrayscaleImage_bases[] = {0,0};
static const char *swig_CvGrayscaleImage_base_names[] = {"ofxCvImage *",0};
static swig_lua_class _wrap_class_CvGrayscaleImage = { "CvGrayscaleImage", "CvGrayscaleImage", &SWIGTYPE_p_ofxCvGrayscaleImage,_proxy__wrap_new_CvGrayscaleImage, swig_delete_CvGrayscaleImage, swig_CvGrayscaleImage_methods, swig_CvGrayscaleImage_attributes, &swig_CvGrayscaleImage_Sf_SwigStatic, swig_CvGrayscaleImage_meta, swig_CvGrayscaleImage_bases, swig_CvGrayscaleImage_base_names };

static int _wrap_new_CvShortImage__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxCvShortImage *result = 0 ;
    SWIG_check_num_args("ofxCvShortImage::ofxCvShortImage",0,0) result = (ofxCvShortImage *)new ofxCvShortImage();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxCvShortImage,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_new_CvShortImage__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxCvShortImage *arg1 = 0 ;
    ofxCvShortImage *result = 0 ; SWIG_check_num_args("ofxCvShortImage::ofxCvShortImage",1,1)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofxCvShortImage::ofxCvShortImage",1,"ofxCvShortImage const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvShortImage,0))){
      SWIG_fail_ptr("new_CvShortImage",1,SWIGTYPE_p_ofxCvShortImage); } 
    result = (ofxCvShortImage *)new ofxCvShortImage((ofxCvShortImage const &)*arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxCvShortImage,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_new_CvShortImage(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_CvShortImage__SWIG_0(L);}  if (argc == 1) { int _v = 0; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvShortImage, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_CvShortImage__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CvShortImage'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxCvShortImage::ofxCvShortImage()\n" "    ofxCvShortImage::ofxCvShortImage(ofxCvShortImage const &)\n");
  lua_error(L);return 0; }
static int _wrap_CvShortImage_addWeighted(lua_State* L) { { int SWIG_arg = 0; ofxCvShortImage *arg1 = (ofxCvShortImage *) 0 ;
    ofxCvGrayscaleImage *arg2 = 0 ; float arg3 ; SWIG_check_num_args("ofxCvShortImage::addWeighted",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvShortImage::addWeighted",1,"ofxCvShortImage *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvShortImage::addWeighted",2,"ofxCvGrayscaleImage &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvShortImage::addWeighted",3,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvShortImage,0))){
      SWIG_fail_ptr("CvShortImage_addWeighted",1,SWIGTYPE_p_ofxCvShortImage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
      SWIG_fail_ptr("CvShortImage_addWeighted",2,SWIGTYPE_p_ofxCvGrayscaleImage); }  arg3 = (float)lua_tonumber(L, 3);
    (arg1)->addWeighted(*arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvShortImage_scaleIntoMe__SWIG_0(lua_State* L) { { int SWIG_arg = 0;
    ofxCvShortImage *arg1 = (ofxCvShortImage *) 0 ; ofxCvImage *arg2 = 0 ; int arg3 ;
    SWIG_check_num_args("ofxCvShortImage::scaleIntoMe",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvShortImage::scaleIntoMe",1,"ofxCvShortImage *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvShortImage::scaleIntoMe",2,"ofxCvImage &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvShortImage::scaleIntoMe",3,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvShortImage,0))){
      SWIG_fail_ptr("CvShortImage_scaleIntoMe",1,SWIGTYPE_p_ofxCvShortImage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvShortImage_scaleIntoMe",2,SWIGTYPE_p_ofxCvImage); }  arg3 = (int)lua_tonumber(L, 3);
    (arg1)->scaleIntoMe(*arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvShortImage_scaleIntoMe__SWIG_1(lua_State* L) { { int SWIG_arg = 0;
    ofxCvShortImage *arg1 = (ofxCvShortImage *) 0 ; ofxCvImage *arg2 = 0 ;
    SWIG_check_num_args("ofxCvShortImage::scaleIntoMe",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvShortImage::scaleIntoMe",1,"ofxCvShortImage *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvShortImage::scaleIntoMe",2,"ofxCvImage &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvShortImage,0))){
      SWIG_fail_ptr("CvShortImage_scaleIntoMe",1,SWIGTYPE_p_ofxCvShortImage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvImage,0))){
      SWIG_fail_ptr("CvShortImage_scaleIntoMe",2,SWIGTYPE_p_ofxCvImage); }  (arg1)->scaleIntoMe(*arg2); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CvShortImage_scaleIntoMe(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvShortImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxCvImage, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CvShortImage_scaleIntoMe__SWIG_1(L);}  }  }  if (argc == 3) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvShortImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxCvImage, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_CvShortImage_scaleIntoMe__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvShortImage_scaleIntoMe'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxCvShortImage::scaleIntoMe(ofxCvImage &,int)\n"
  "    ofxCvShortImage::scaleIntoMe(ofxCvImage &)\n"); lua_error(L);return 0; }
static int _wrap_CvShortImage_getShortPixelsRef(lua_State* L) { { int SWIG_arg = 0;
    ofxCvShortImage *arg1 = (ofxCvShortImage *) 0 ; ofShortPixels *result = 0 ;
    SWIG_check_num_args("ofxCvShortImage::getShortPixelsRef",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvShortImage::getShortPixelsRef",1,"ofxCvShortImage *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvShortImage,0))){
      SWIG_fail_ptr("CvShortImage_getShortPixelsRef",1,SWIGTYPE_p_ofxCvShortImage); } 
    result = (ofShortPixels *) &(arg1)->getShortPixelsRef();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CvShortImage_getRoiShortPixelsRef(lua_State* L) { { int SWIG_arg = 0;
    ofxCvShortImage *arg1 = (ofxCvShortImage *) 0 ; ofShortPixels *result = 0 ;
    SWIG_check_num_args("ofxCvShortImage::getRoiShortPixelsRef",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvShortImage::getRoiShortPixelsRef",1,"ofxCvShortImage *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvShortImage,0))){
      SWIG_fail_ptr("CvShortImage_getRoiShortPixelsRef",1,SWIGTYPE_p_ofxCvShortImage); } 
    result = (ofShortPixels *) &(arg1)->getRoiShortPixelsRef();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static void swig_delete_CvShortImage(void *obj) {
ofxCvShortImage *arg1 = (ofxCvShortImage *) obj;
delete arg1;
}
static int _proxy__wrap_new_CvShortImage(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CvShortImage);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CvShortImage_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CvShortImage_methods[]= {
    { "addWeighted", _wrap_CvShortImage_addWeighted},
    { "scaleIntoMe", _wrap_CvShortImage_scaleIntoMe},
    { "getShortPixelsRef", _wrap_CvShortImage_getShortPixelsRef},
    { "getRoiShortPixelsRef", _wrap_CvShortImage_getRoiShortPixelsRef},
    {0,0}
};
static swig_lua_method swig_CvShortImage_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CvShortImage_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CvShortImage_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CvShortImage_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CvShortImage_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CvShortImage_Sf_SwigStatic = {
    "CvShortImage",
    swig_CvShortImage_Sf_SwigStatic_methods,
    swig_CvShortImage_Sf_SwigStatic_attributes,
    swig_CvShortImage_Sf_SwigStatic_constants,
    swig_CvShortImage_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CvShortImage_bases[] = {0,0};
static const char *swig_CvShortImage_base_names[] = {"ofxCvImage *",0};
static swig_lua_class _wrap_class_CvShortImage = { "CvShortImage", "CvShortImage", &SWIGTYPE_p_ofxCvShortImage,_proxy__wrap_new_CvShortImage, swig_delete_CvShortImage, swig_CvShortImage_methods, swig_CvShortImage_attributes, &swig_CvShortImage_Sf_SwigStatic, swig_CvShortImage_meta, swig_CvShortImage_bases, swig_CvShortImage_base_names };

static int _wrap_new_AssimpModelLoader(lua_State* L) { { int SWIG_arg = 0; ofxAssimpModelLoader *result = 0 ;
    SWIG_check_num_args("ofxAssimpModelLoader::ofxAssimpModelLoader",0,0)
    result = (ofxAssimpModelLoader *)new ofxAssimpModelLoader();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxAssimpModelLoader,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_load__SWIG_0(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; std::string arg2 ; int arg3 ; bool result;
    SWIG_check_num_args("ofxAssimpModelLoader::load",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::load",1,"ofxAssimpModelLoader *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxAssimpModelLoader::load",2,"std::string");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxAssimpModelLoader::load",3,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_load",1,SWIGTYPE_p_ofxAssimpModelLoader); }  { size_t len;
      const char *ptr = lua_tolstring(L, 2, &len); (&arg2)->assign(ptr, len); }  arg3 = (int)lua_tonumber(L, 3);
    result = (bool)(arg1)->load(arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }
   lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_load__SWIG_1(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; std::string arg2 ; bool result;
    SWIG_check_num_args("ofxAssimpModelLoader::load",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::load",1,"ofxAssimpModelLoader *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxAssimpModelLoader::load",2,"std::string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_load",1,SWIGTYPE_p_ofxAssimpModelLoader); }  { size_t len;
      const char *ptr = lua_tolstring(L, 2, &len); (&arg2)->assign(ptr, len); }  result = (bool)(arg1)->load(arg2);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_load__SWIG_2(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; ofBuffer *arg2 = 0 ; int arg3 ; char *arg4 = (char *) 0 ;
    bool result; SWIG_check_num_args("ofxAssimpModelLoader::load",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::load",1,"ofxAssimpModelLoader *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxAssimpModelLoader::load",2,"ofBuffer &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxAssimpModelLoader::load",3,"int");
    if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("ofxAssimpModelLoader::load",4,"char const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_load",1,SWIGTYPE_p_ofxAssimpModelLoader); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBuffer,0))){
      SWIG_fail_ptr("AssimpModelLoader_load",2,SWIGTYPE_p_ofBuffer); }  arg3 = (int)lua_tonumber(L, 3);
    arg4 = (char *)lua_tostring(L, 4); result = (bool)(arg1)->load(*arg2,arg3,(char const *)arg4);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_load__SWIG_3(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; ofBuffer *arg2 = 0 ; int arg3 ; bool result;
    SWIG_check_num_args("ofxAssimpModelLoader::load",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::load",1,"ofxAssimpModelLoader *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxAssimpModelLoader::load",2,"ofBuffer &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxAssimpModelLoader::load",3,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_load",1,SWIGTYPE_p_ofxAssimpModelLoader); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBuffer,0))){
      SWIG_fail_ptr("AssimpModelLoader_load",2,SWIGTYPE_p_ofBuffer); }  arg3 = (int)lua_tonumber(L, 3);
    result = (bool)(arg1)->load(*arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_load__SWIG_4(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; ofBuffer *arg2 = 0 ; bool result;
    SWIG_check_num_args("ofxAssimpModelLoader::load",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::load",1,"ofxAssimpModelLoader *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxAssimpModelLoader::load",2,"ofBuffer &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_load",1,SWIGTYPE_p_ofxAssimpModelLoader); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBuffer,0))){
      SWIG_fail_ptr("AssimpModelLoader_load",2,SWIGTYPE_p_ofBuffer); }  result = (bool)(arg1)->load(*arg2);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_load__SWIG_5(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; std::string arg2 ; bool arg3 ; bool result;
    SWIG_check_num_args("ofxAssimpModelLoader::load",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::load",1,"ofxAssimpModelLoader *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxAssimpModelLoader::load",2,"std::string");
    if(!lua_isboolean(L,3)) SWIG_fail_arg("ofxAssimpModelLoader::load",3,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_load",1,SWIGTYPE_p_ofxAssimpModelLoader); }  { size_t len;
      const char *ptr = lua_tolstring(L, 2, &len); (&arg2)->assign(ptr, len); }  arg3 = (lua_toboolean(L, 3)!=0);
    result = (bool)(arg1)->load(arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }
   lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_load__SWIG_6(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; ofBuffer *arg2 = 0 ; bool arg3 ; char *arg4 = (char *) 0 ;
    bool result; SWIG_check_num_args("ofxAssimpModelLoader::load",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::load",1,"ofxAssimpModelLoader *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxAssimpModelLoader::load",2,"ofBuffer &");
    if(!lua_isboolean(L,3)) SWIG_fail_arg("ofxAssimpModelLoader::load",3,"bool");
    if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("ofxAssimpModelLoader::load",4,"char const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_load",1,SWIGTYPE_p_ofxAssimpModelLoader); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBuffer,0))){
      SWIG_fail_ptr("AssimpModelLoader_load",2,SWIGTYPE_p_ofBuffer); }  arg3 = (lua_toboolean(L, 3)!=0);
    arg4 = (char *)lua_tostring(L, 4); result = (bool)(arg1)->load(*arg2,arg3,(char const *)arg4);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_load(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 2) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxAssimpModelLoader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofBuffer, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_AssimpModelLoader_load__SWIG_4(L);}  }  }  if (argc == 2) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxAssimpModelLoader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_AssimpModelLoader_load__SWIG_1(L);}  }  }  if (argc == 3) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxAssimpModelLoader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofBuffer, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_AssimpModelLoader_load__SWIG_3(L);}  }  }  }  if (argc == 3) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxAssimpModelLoader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }
         if (_v) { return _wrap_AssimpModelLoader_load__SWIG_5(L);}  }  }  }  if (argc == 3) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxAssimpModelLoader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_AssimpModelLoader_load__SWIG_0(L);}  }  }  }  if (argc == 4) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxAssimpModelLoader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofBuffer, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) { {
            _v = SWIG_lua_isnilstring(L,argv[3]); }  if (_v) { return _wrap_AssimpModelLoader_load__SWIG_6(L);}  }  }  }  } 
  if (argc == 4) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxAssimpModelLoader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofBuffer, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = SWIG_lua_isnilstring(L,argv[3]); }  if (_v) { return _wrap_AssimpModelLoader_load__SWIG_2(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AssimpModelLoader_load'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxAssimpModelLoader::load(std::string,int)\n"
  "    ofxAssimpModelLoader::load(std::string)\n" "    ofxAssimpModelLoader::load(ofBuffer &,int,char const *)\n"
  "    ofxAssimpModelLoader::load(ofBuffer &,int)\n" "    ofxAssimpModelLoader::load(ofBuffer &)\n"
  "    ofxAssimpModelLoader::load(std::string,bool)\n" "    ofxAssimpModelLoader::load(ofBuffer &,bool,char const *)\n");
  lua_error(L);return 0; }
static int _wrap_AssimpModelLoader_loadModel__SWIG_0(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; std::string arg2 ; bool arg3 ; bool result;
    SWIG_check_num_args("ofxAssimpModelLoader::loadModel",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::loadModel",1,"ofxAssimpModelLoader *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxAssimpModelLoader::loadModel",2,"std::string");
    if(!lua_isboolean(L,3)) SWIG_fail_arg("ofxAssimpModelLoader::loadModel",3,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_loadModel",1,SWIGTYPE_p_ofxAssimpModelLoader); }  { size_t len;
      const char *ptr = lua_tolstring(L, 2, &len); (&arg2)->assign(ptr, len); }  arg3 = (lua_toboolean(L, 3)!=0);
    result = (bool)(arg1)->loadModel(arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_loadModel__SWIG_1(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; std::string arg2 ; bool result;
    SWIG_check_num_args("ofxAssimpModelLoader::loadModel",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::loadModel",1,"ofxAssimpModelLoader *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxAssimpModelLoader::loadModel",2,"std::string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_loadModel",1,SWIGTYPE_p_ofxAssimpModelLoader); }  { size_t len;
      const char *ptr = lua_tolstring(L, 2, &len); (&arg2)->assign(ptr, len); }  result = (bool)(arg1)->loadModel(arg2);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_loadModel__SWIG_2(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; ofBuffer *arg2 = 0 ; bool arg3 ; char *arg4 = (char *) 0 ;
    bool result; SWIG_check_num_args("ofxAssimpModelLoader::loadModel",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::loadModel",1,"ofxAssimpModelLoader *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxAssimpModelLoader::loadModel",2,"ofBuffer &");
    if(!lua_isboolean(L,3)) SWIG_fail_arg("ofxAssimpModelLoader::loadModel",3,"bool");
    if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("ofxAssimpModelLoader::loadModel",4,"char const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_loadModel",1,SWIGTYPE_p_ofxAssimpModelLoader); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBuffer,0))){
      SWIG_fail_ptr("AssimpModelLoader_loadModel",2,SWIGTYPE_p_ofBuffer); }  arg3 = (lua_toboolean(L, 3)!=0);
    arg4 = (char *)lua_tostring(L, 4); result = (bool)(arg1)->loadModel(*arg2,arg3,(char const *)arg4);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_loadModel__SWIG_3(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; ofBuffer *arg2 = 0 ; bool arg3 ; bool result;
    SWIG_check_num_args("ofxAssimpModelLoader::loadModel",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::loadModel",1,"ofxAssimpModelLoader *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxAssimpModelLoader::loadModel",2,"ofBuffer &");
    if(!lua_isboolean(L,3)) SWIG_fail_arg("ofxAssimpModelLoader::loadModel",3,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_loadModel",1,SWIGTYPE_p_ofxAssimpModelLoader); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBuffer,0))){
      SWIG_fail_ptr("AssimpModelLoader_loadModel",2,SWIGTYPE_p_ofBuffer); }  arg3 = (lua_toboolean(L, 3)!=0);
    result = (bool)(arg1)->loadModel(*arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_loadModel__SWIG_4(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; ofBuffer *arg2 = 0 ; bool result;
    SWIG_check_num_args("ofxAssimpModelLoader::loadModel",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::loadModel",1,"ofxAssimpModelLoader *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxAssimpModelLoader::loadModel",2,"ofBuffer &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_loadModel",1,SWIGTYPE_p_ofxAssimpModelLoader); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBuffer,0))){
      SWIG_fail_ptr("AssimpModelLoader_loadModel",2,SWIGTYPE_p_ofBuffer); }  result = (bool)(arg1)->loadModel(*arg2);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_loadModel(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 2) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxAssimpModelLoader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofBuffer, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_AssimpModelLoader_loadModel__SWIG_4(L);}  }  } 
  if (argc == 2) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxAssimpModelLoader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_AssimpModelLoader_loadModel__SWIG_1(L);}  }  }  if (argc == 3) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxAssimpModelLoader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofBuffer, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) {
          return _wrap_AssimpModelLoader_loadModel__SWIG_3(L);}  }  }  }  if (argc == 3) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxAssimpModelLoader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }
         if (_v) { return _wrap_AssimpModelLoader_loadModel__SWIG_0(L);}  }  }  }  if (argc == 4) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxAssimpModelLoader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofBuffer, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) { {
            _v = SWIG_lua_isnilstring(L,argv[3]); }  if (_v) { return _wrap_AssimpModelLoader_loadModel__SWIG_2(L);}  }  }  }  }
   SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AssimpModelLoader_loadModel'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxAssimpModelLoader::loadModel(std::string,bool)\n"
  "    ofxAssimpModelLoader::loadModel(std::string)\n" "    ofxAssimpModelLoader::loadModel(ofBuffer &,bool,char const *)\n"
  "    ofxAssimpModelLoader::loadModel(ofBuffer &,bool)\n" "    ofxAssimpModelLoader::loadModel(ofBuffer &)\n");
  lua_error(L);return 0; }
static int _wrap_AssimpModelLoader_createEmptyModel(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; SWIG_check_num_args("ofxAssimpModelLoader::createEmptyModel",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::createEmptyModel",1,"ofxAssimpModelLoader *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_createEmptyModel",1,SWIGTYPE_p_ofxAssimpModelLoader); }  (arg1)->createEmptyModel();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_createLightsFromAiModel(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ;
    SWIG_check_num_args("ofxAssimpModelLoader::createLightsFromAiModel",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::createLightsFromAiModel",1,"ofxAssimpModelLoader *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_createLightsFromAiModel",1,SWIGTYPE_p_ofxAssimpModelLoader); } 
    (arg1)->createLightsFromAiModel(); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_optimizeScene(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; SWIG_check_num_args("ofxAssimpModelLoader::optimizeScene",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::optimizeScene",1,"ofxAssimpModelLoader *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_optimizeScene",1,SWIGTYPE_p_ofxAssimpModelLoader); }  (arg1)->optimizeScene();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_enableCulling(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; int arg2 ;
    SWIG_check_num_args("ofxAssimpModelLoader::enableCulling",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::enableCulling",1,"ofxAssimpModelLoader *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxAssimpModelLoader::enableCulling",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_enableCulling",1,SWIGTYPE_p_ofxAssimpModelLoader); }  arg2 = (int)lua_tonumber(L, 2);
    (arg1)->enableCulling(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_disableCulling(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; SWIG_check_num_args("ofxAssimpModelLoader::disableCulling",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::disableCulling",1,"ofxAssimpModelLoader *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_disableCulling",1,SWIGTYPE_p_ofxAssimpModelLoader); }  (arg1)->disableCulling();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_update(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; SWIG_check_num_args("ofxAssimpModelLoader::update",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::update",1,"ofxAssimpModelLoader *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_update",1,SWIGTYPE_p_ofxAssimpModelLoader); }  (arg1)->update(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_hasAnimations(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; bool result;
    SWIG_check_num_args("ofxAssimpModelLoader::hasAnimations",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::hasAnimations",1,"ofxAssimpModelLoader *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_hasAnimations",1,SWIGTYPE_p_ofxAssimpModelLoader); } 
    result = (bool)(arg1)->hasAnimations(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }
   lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_getAnimationCount(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; unsigned int result;
    SWIG_check_num_args("ofxAssimpModelLoader::getAnimationCount",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::getAnimationCount",1,"ofxAssimpModelLoader *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_getAnimationCount",1,SWIGTYPE_p_ofxAssimpModelLoader); } 
    result = (unsigned int)(arg1)->getAnimationCount(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_getAnimation(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; int arg2 ; ofxAssimpAnimation *result = 0 ;
    SWIG_check_num_args("ofxAssimpModelLoader::getAnimation",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::getAnimation",1,"ofxAssimpModelLoader *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxAssimpModelLoader::getAnimation",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_getAnimation",1,SWIGTYPE_p_ofxAssimpModelLoader); }  arg2 = (int)lua_tonumber(L, 2);
    result = (ofxAssimpAnimation *) &(arg1)->getAnimation(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxAssimpAnimation,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_playAllAnimations(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; SWIG_check_num_args("ofxAssimpModelLoader::playAllAnimations",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::playAllAnimations",1,"ofxAssimpModelLoader *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_playAllAnimations",1,SWIGTYPE_p_ofxAssimpModelLoader); }  (arg1)->playAllAnimations();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_stopAllAnimations(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; SWIG_check_num_args("ofxAssimpModelLoader::stopAllAnimations",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::stopAllAnimations",1,"ofxAssimpModelLoader *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_stopAllAnimations",1,SWIGTYPE_p_ofxAssimpModelLoader); }  (arg1)->stopAllAnimations();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_resetAllAnimations(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ;
    SWIG_check_num_args("ofxAssimpModelLoader::resetAllAnimations",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::resetAllAnimations",1,"ofxAssimpModelLoader *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_resetAllAnimations",1,SWIGTYPE_p_ofxAssimpModelLoader); }  (arg1)->resetAllAnimations();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_setPausedForAllAnimations(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; bool arg2 ;
    SWIG_check_num_args("ofxAssimpModelLoader::setPausedForAllAnimations",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::setPausedForAllAnimations",1,"ofxAssimpModelLoader *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxAssimpModelLoader::setPausedForAllAnimations",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_setPausedForAllAnimations",1,SWIGTYPE_p_ofxAssimpModelLoader); } 
    arg2 = (lua_toboolean(L, 2)!=0); (arg1)->setPausedForAllAnimations(arg2); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_setLoopStateForAllAnimations(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; ofLoopType arg2 ;
    SWIG_check_num_args("ofxAssimpModelLoader::setLoopStateForAllAnimations",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::setLoopStateForAllAnimations",1,"ofxAssimpModelLoader *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxAssimpModelLoader::setLoopStateForAllAnimations",2,"ofLoopType");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_setLoopStateForAllAnimations",1,SWIGTYPE_p_ofxAssimpModelLoader); } 
    arg2 = (ofLoopType)(int)lua_tonumber(L, 2); (arg1)->setLoopStateForAllAnimations(arg2); return SWIG_arg; fail: SWIGUNUSED; }
   lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_setPositionForAllAnimations(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; float arg2 ;
    SWIG_check_num_args("ofxAssimpModelLoader::setPositionForAllAnimations",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::setPositionForAllAnimations",1,"ofxAssimpModelLoader *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxAssimpModelLoader::setPositionForAllAnimations",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_setPositionForAllAnimations",1,SWIGTYPE_p_ofxAssimpModelLoader); } 
    arg2 = (float)lua_tonumber(L, 2); (arg1)->setPositionForAllAnimations(arg2); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_setAnimation(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; int arg2 ;
    SWIG_check_num_args("ofxAssimpModelLoader::setAnimation",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::setAnimation",1,"ofxAssimpModelLoader *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxAssimpModelLoader::setAnimation",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_setAnimation",1,SWIGTYPE_p_ofxAssimpModelLoader); }  arg2 = (int)lua_tonumber(L, 2);
    (arg1)->setAnimation(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_setNormalizedTime(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; float arg2 ;
    SWIG_check_num_args("ofxAssimpModelLoader::setNormalizedTime",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::setNormalizedTime",1,"ofxAssimpModelLoader *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxAssimpModelLoader::setNormalizedTime",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_setNormalizedTime",1,SWIGTYPE_p_ofxAssimpModelLoader); } 
    arg2 = (float)lua_tonumber(L, 2); (arg1)->setNormalizedTime(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_AssimpModelLoader_setTime(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; float arg2 ;
    SWIG_check_num_args("ofxAssimpModelLoader::setTime",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::setTime",1,"ofxAssimpModelLoader *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxAssimpModelLoader::setTime",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_setTime",1,SWIGTYPE_p_ofxAssimpModelLoader); }  arg2 = (float)lua_tonumber(L, 2);
    (arg1)->setTime(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_getDuration(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; int arg2 ; float result;
    SWIG_check_num_args("ofxAssimpModelLoader::getDuration",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::getDuration",1,"ofxAssimpModelLoader *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxAssimpModelLoader::getDuration",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_getDuration",1,SWIGTYPE_p_ofxAssimpModelLoader); }  arg2 = (int)lua_tonumber(L, 2);
    result = (float)(arg1)->getDuration(arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_hasMeshes(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; bool result;
    SWIG_check_num_args("ofxAssimpModelLoader::hasMeshes",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::hasMeshes",1,"ofxAssimpModelLoader *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_hasMeshes",1,SWIGTYPE_p_ofxAssimpModelLoader); }  result = (bool)(arg1)->hasMeshes();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_getMeshCount(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; unsigned int result;
    SWIG_check_num_args("ofxAssimpModelLoader::getMeshCount",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::getMeshCount",1,"ofxAssimpModelLoader *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_getMeshCount",1,SWIGTYPE_p_ofxAssimpModelLoader); } 
    result = (unsigned int)(arg1)->getMeshCount(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_getMeshHelper(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; int arg2 ; ofxAssimpMeshHelper *result = 0 ;
    SWIG_check_num_args("ofxAssimpModelLoader::getMeshHelper",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::getMeshHelper",1,"ofxAssimpModelLoader *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxAssimpModelLoader::getMeshHelper",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_getMeshHelper",1,SWIGTYPE_p_ofxAssimpModelLoader); }  arg2 = (int)lua_tonumber(L, 2);
    result = (ofxAssimpMeshHelper *) &(arg1)->getMeshHelper(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxAssimpMeshHelper,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_clear(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; SWIG_check_num_args("ofxAssimpModelLoader::clear",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::clear",1,"ofxAssimpModelLoader *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_clear",1,SWIGTYPE_p_ofxAssimpModelLoader); }  (arg1)->clear(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_setScale(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; float arg2 ; float arg3 ; float arg4 ;
    SWIG_check_num_args("ofxAssimpModelLoader::setScale",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::setScale",1,"ofxAssimpModelLoader *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxAssimpModelLoader::setScale",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxAssimpModelLoader::setScale",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxAssimpModelLoader::setScale",4,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_setScale",1,SWIGTYPE_p_ofxAssimpModelLoader); }  arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->setScale(arg2,arg3,arg4); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_setPosition(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; float arg2 ; float arg3 ; float arg4 ;
    SWIG_check_num_args("ofxAssimpModelLoader::setPosition",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::setPosition",1,"ofxAssimpModelLoader *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxAssimpModelLoader::setPosition",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxAssimpModelLoader::setPosition",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxAssimpModelLoader::setPosition",4,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_setPosition",1,SWIGTYPE_p_ofxAssimpModelLoader); }  arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->setPosition(arg2,arg3,arg4); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_setRotation(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; int arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ;
    SWIG_check_num_args("ofxAssimpModelLoader::setRotation",6,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::setRotation",1,"ofxAssimpModelLoader *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxAssimpModelLoader::setRotation",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxAssimpModelLoader::setRotation",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxAssimpModelLoader::setRotation",4,"float");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxAssimpModelLoader::setRotation",5,"float");
    if(!lua_isnumber(L,6)) SWIG_fail_arg("ofxAssimpModelLoader::setRotation",6,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_setRotation",1,SWIGTYPE_p_ofxAssimpModelLoader); }  arg2 = (int)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
    arg6 = (float)lua_tonumber(L, 6); (arg1)->setRotation(arg2,arg3,arg4,arg5,arg6); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_setScaleNormalization(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; bool arg2 ;
    SWIG_check_num_args("ofxAssimpModelLoader::setScaleNormalization",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::setScaleNormalization",1,"ofxAssimpModelLoader *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxAssimpModelLoader::setScaleNormalization",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_setScaleNormalization",1,SWIGTYPE_p_ofxAssimpModelLoader); } 
    arg2 = (lua_toboolean(L, 2)!=0); (arg1)->setScaleNormalization(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_AssimpModelLoader_setNormalizationFactor(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; float arg2 ;
    SWIG_check_num_args("ofxAssimpModelLoader::setNormalizationFactor",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::setNormalizationFactor",1,"ofxAssimpModelLoader *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxAssimpModelLoader::setNormalizationFactor",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_setNormalizationFactor",1,SWIGTYPE_p_ofxAssimpModelLoader); } 
    arg2 = (float)lua_tonumber(L, 2); (arg1)->setNormalizationFactor(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_AssimpModelLoader_getMeshNames(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; std::vector< std::string > result;
    SWIG_check_num_args("ofxAssimpModelLoader::getMeshNames",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::getMeshNames",1,"ofxAssimpModelLoader *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_getMeshNames",1,SWIGTYPE_p_ofxAssimpModelLoader); }  result = (arg1)->getMeshNames(); {
      std::vector< std::string > * resultptr = new std::vector< std::string >(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++; }  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_getNumMeshes(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; unsigned int result;
    SWIG_check_num_args("ofxAssimpModelLoader::getNumMeshes",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::getNumMeshes",1,"ofxAssimpModelLoader *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_getNumMeshes",1,SWIGTYPE_p_ofxAssimpModelLoader); } 
    result = (unsigned int)(arg1)->getNumMeshes(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_getMesh__SWIG_0(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; std::string arg2 ; ofMesh result;
    SWIG_check_num_args("ofxAssimpModelLoader::getMesh",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::getMesh",1,"ofxAssimpModelLoader *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxAssimpModelLoader::getMesh",2,"std::string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_getMesh",1,SWIGTYPE_p_ofxAssimpModelLoader); }  { size_t len;
      const char *ptr = lua_tolstring(L, 2, &len); (&arg2)->assign(ptr, len); }  result = (arg1)->getMesh(arg2); {
      ofMesh * resultptr = new ofMesh(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh_T_ofDefaultVertexType_ofDefaultNormalType_ofDefaultColorType_ofDefaultTexCoordType_t,1); SWIG_arg++; }
     return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_getMesh__SWIG_1(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; unsigned int arg2 ; ofMesh result;
    SWIG_check_num_args("ofxAssimpModelLoader::getMesh",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::getMesh",1,"ofxAssimpModelLoader *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxAssimpModelLoader::getMesh",2,"unsigned int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_getMesh",1,SWIGTYPE_p_ofxAssimpModelLoader); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (unsigned int)lua_tonumber(L, 2);
    result = (arg1)->getMesh(arg2); { ofMesh * resultptr = new ofMesh(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh_T_ofDefaultVertexType_ofDefaultNormalType_ofDefaultColorType_ofDefaultTexCoordType_t,1); SWIG_arg++; }
     return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_getMesh(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L);
  if (argc == 2) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxAssimpModelLoader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_AssimpModelLoader_getMesh__SWIG_1(L);}  }  }  if (argc == 2) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxAssimpModelLoader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_AssimpModelLoader_getMesh__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AssimpModelLoader_getMesh'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxAssimpModelLoader::getMesh(std::string)\n"
  "    ofxAssimpModelLoader::getMesh(unsigned int)\n"); lua_error(L);return 0; }
static int _wrap_AssimpModelLoader_getCurrentAnimatedMesh__SWIG_0(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; std::string arg2 ; ofMesh result;
    SWIG_check_num_args("ofxAssimpModelLoader::getCurrentAnimatedMesh",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::getCurrentAnimatedMesh",1,"ofxAssimpModelLoader *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxAssimpModelLoader::getCurrentAnimatedMesh",2,"std::string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_getCurrentAnimatedMesh",1,SWIGTYPE_p_ofxAssimpModelLoader); }  { size_t len;
      const char *ptr = lua_tolstring(L, 2, &len); (&arg2)->assign(ptr, len); }  result = (arg1)->getCurrentAnimatedMesh(arg2);
    { ofMesh * resultptr = new ofMesh(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh_T_ofDefaultVertexType_ofDefaultNormalType_ofDefaultColorType_ofDefaultTexCoordType_t,1); SWIG_arg++; }
     return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_getCurrentAnimatedMesh__SWIG_1(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; unsigned int arg2 ; ofMesh result;
    SWIG_check_num_args("ofxAssimpModelLoader::getCurrentAnimatedMesh",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::getCurrentAnimatedMesh",1,"ofxAssimpModelLoader *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxAssimpModelLoader::getCurrentAnimatedMesh",2,"unsigned int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_getCurrentAnimatedMesh",1,SWIGTYPE_p_ofxAssimpModelLoader); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (unsigned int)lua_tonumber(L, 2);
    result = (arg1)->getCurrentAnimatedMesh(arg2); { ofMesh * resultptr = new ofMesh(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh_T_ofDefaultVertexType_ofDefaultNormalType_ofDefaultColorType_ofDefaultTexCoordType_t,1); SWIG_arg++; }
     return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_getCurrentAnimatedMesh(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L);
  if (argc == 2) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxAssimpModelLoader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_AssimpModelLoader_getCurrentAnimatedMesh__SWIG_1(L);}  }  }  if (argc == 2) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxAssimpModelLoader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_AssimpModelLoader_getCurrentAnimatedMesh__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AssimpModelLoader_getCurrentAnimatedMesh'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxAssimpModelLoader::getCurrentAnimatedMesh(std::string)\n"
  "    ofxAssimpModelLoader::getCurrentAnimatedMesh(unsigned int)\n"); lua_error(L);return 0; }
static int _wrap_AssimpModelLoader_getMaterialForMesh__SWIG_0(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; std::string arg2 ; ofMaterial result;
    SWIG_check_num_args("ofxAssimpModelLoader::getMaterialForMesh",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::getMaterialForMesh",1,"ofxAssimpModelLoader *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxAssimpModelLoader::getMaterialForMesh",2,"std::string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_getMaterialForMesh",1,SWIGTYPE_p_ofxAssimpModelLoader); }  { size_t len;
      const char *ptr = lua_tolstring(L, 2, &len); (&arg2)->assign(ptr, len); }  result = (arg1)->getMaterialForMesh(arg2); {
      ofMaterial * resultptr = new ofMaterial(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMaterial,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_getMaterialForMesh__SWIG_1(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; unsigned int arg2 ; ofMaterial result;
    SWIG_check_num_args("ofxAssimpModelLoader::getMaterialForMesh",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::getMaterialForMesh",1,"ofxAssimpModelLoader *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxAssimpModelLoader::getMaterialForMesh",2,"unsigned int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_getMaterialForMesh",1,SWIGTYPE_p_ofxAssimpModelLoader); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (unsigned int)lua_tonumber(L, 2);
    result = (arg1)->getMaterialForMesh(arg2); { ofMaterial * resultptr = new ofMaterial(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMaterial,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_getMaterialForMesh(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L);
  if (argc == 2) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxAssimpModelLoader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_AssimpModelLoader_getMaterialForMesh__SWIG_1(L);}  }  }  if (argc == 2) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxAssimpModelLoader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_AssimpModelLoader_getMaterialForMesh__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AssimpModelLoader_getMaterialForMesh'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxAssimpModelLoader::getMaterialForMesh(std::string)\n"
  "    ofxAssimpModelLoader::getMaterialForMesh(unsigned int)\n"); lua_error(L);return 0; }
static int _wrap_AssimpModelLoader_getTextureForMesh__SWIG_0(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; std::string arg2 ; ofTexture result;
    SWIG_check_num_args("ofxAssimpModelLoader::getTextureForMesh",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::getTextureForMesh",1,"ofxAssimpModelLoader *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxAssimpModelLoader::getTextureForMesh",2,"std::string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_getTextureForMesh",1,SWIGTYPE_p_ofxAssimpModelLoader); }  { size_t len;
      const char *ptr = lua_tolstring(L, 2, &len); (&arg2)->assign(ptr, len); }  result = (arg1)->getTextureForMesh(arg2); {
      ofTexture * resultptr = new ofTexture(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofTexture,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_getTextureForMesh__SWIG_1(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; unsigned int arg2 ; ofTexture result;
    SWIG_check_num_args("ofxAssimpModelLoader::getTextureForMesh",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::getTextureForMesh",1,"ofxAssimpModelLoader *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxAssimpModelLoader::getTextureForMesh",2,"unsigned int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_getTextureForMesh",1,SWIGTYPE_p_ofxAssimpModelLoader); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (unsigned int)lua_tonumber(L, 2);
    result = (arg1)->getTextureForMesh(arg2); { ofTexture * resultptr = new ofTexture(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofTexture,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_getTextureForMesh(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L);
  if (argc == 2) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxAssimpModelLoader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_AssimpModelLoader_getTextureForMesh__SWIG_1(L);}  }  }  if (argc == 2) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxAssimpModelLoader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_AssimpModelLoader_getTextureForMesh__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AssimpModelLoader_getTextureForMesh'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxAssimpModelLoader::getTextureForMesh(std::string)\n"
  "    ofxAssimpModelLoader::getTextureForMesh(unsigned int)\n"); lua_error(L);return 0; }
static int _wrap_AssimpModelLoader_drawWireframe(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; SWIG_check_num_args("ofxAssimpModelLoader::drawWireframe",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::drawWireframe",1,"ofxAssimpModelLoader *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_drawWireframe",1,SWIGTYPE_p_ofxAssimpModelLoader); }  (arg1)->drawWireframe();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_drawFaces(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; SWIG_check_num_args("ofxAssimpModelLoader::drawFaces",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::drawFaces",1,"ofxAssimpModelLoader *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_drawFaces",1,SWIGTYPE_p_ofxAssimpModelLoader); }  (arg1)->drawFaces(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_drawVertices(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; SWIG_check_num_args("ofxAssimpModelLoader::drawVertices",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::drawVertices",1,"ofxAssimpModelLoader *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_drawVertices",1,SWIGTYPE_p_ofxAssimpModelLoader); }  (arg1)->drawVertices();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_enableTextures(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; SWIG_check_num_args("ofxAssimpModelLoader::enableTextures",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::enableTextures",1,"ofxAssimpModelLoader *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_enableTextures",1,SWIGTYPE_p_ofxAssimpModelLoader); }  (arg1)->enableTextures();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_disableTextures(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; SWIG_check_num_args("ofxAssimpModelLoader::disableTextures",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::disableTextures",1,"ofxAssimpModelLoader *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_disableTextures",1,SWIGTYPE_p_ofxAssimpModelLoader); }  (arg1)->disableTextures();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_enableNormals(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; SWIG_check_num_args("ofxAssimpModelLoader::enableNormals",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::enableNormals",1,"ofxAssimpModelLoader *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_enableNormals",1,SWIGTYPE_p_ofxAssimpModelLoader); }  (arg1)->enableNormals();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_enableMaterials(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; SWIG_check_num_args("ofxAssimpModelLoader::enableMaterials",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::enableMaterials",1,"ofxAssimpModelLoader *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_enableMaterials",1,SWIGTYPE_p_ofxAssimpModelLoader); }  (arg1)->enableMaterials();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_disableNormals(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; SWIG_check_num_args("ofxAssimpModelLoader::disableNormals",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::disableNormals",1,"ofxAssimpModelLoader *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_disableNormals",1,SWIGTYPE_p_ofxAssimpModelLoader); }  (arg1)->disableNormals();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_enableColors(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; SWIG_check_num_args("ofxAssimpModelLoader::enableColors",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::enableColors",1,"ofxAssimpModelLoader *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_enableColors",1,SWIGTYPE_p_ofxAssimpModelLoader); }  (arg1)->enableColors();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_disableColors(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; SWIG_check_num_args("ofxAssimpModelLoader::disableColors",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::disableColors",1,"ofxAssimpModelLoader *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_disableColors",1,SWIGTYPE_p_ofxAssimpModelLoader); }  (arg1)->disableColors();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_disableMaterials(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; SWIG_check_num_args("ofxAssimpModelLoader::disableMaterials",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::disableMaterials",1,"ofxAssimpModelLoader *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_disableMaterials",1,SWIGTYPE_p_ofxAssimpModelLoader); }  (arg1)->disableMaterials();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_draw(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; ofPolyRenderMode arg2 ;
    SWIG_check_num_args("ofxAssimpModelLoader::draw",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::draw",1,"ofxAssimpModelLoader *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxAssimpModelLoader::draw",2,"ofPolyRenderMode");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_draw",1,SWIGTYPE_p_ofxAssimpModelLoader); } 
    arg2 = (ofPolyRenderMode)(int)lua_tonumber(L, 2); (arg1)->draw(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_AssimpModelLoader_getPosition(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; glm::vec3 result;
    SWIG_check_num_args("ofxAssimpModelLoader::getPosition",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::getPosition",1,"ofxAssimpModelLoader *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_getPosition",1,SWIGTYPE_p_ofxAssimpModelLoader); }  result = (arg1)->getPosition(); {
      glm::vec3 * resultptr = new glm::vec3(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_glm__vec3,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_getSceneCenter(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; glm::vec3 result;
    SWIG_check_num_args("ofxAssimpModelLoader::getSceneCenter",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::getSceneCenter",1,"ofxAssimpModelLoader *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_getSceneCenter",1,SWIGTYPE_p_ofxAssimpModelLoader); }  result = (arg1)->getSceneCenter();
    { glm::vec3 * resultptr = new glm::vec3(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_glm__vec3,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_getNormalizedScale(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; float result;
    SWIG_check_num_args("ofxAssimpModelLoader::getNormalizedScale",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::getNormalizedScale",1,"ofxAssimpModelLoader *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_getNormalizedScale",1,SWIGTYPE_p_ofxAssimpModelLoader); } 
    result = (float)(arg1)->getNormalizedScale(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_getScale(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; glm::vec3 result;
    SWIG_check_num_args("ofxAssimpModelLoader::getScale",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::getScale",1,"ofxAssimpModelLoader *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_getScale",1,SWIGTYPE_p_ofxAssimpModelLoader); }  result = (arg1)->getScale(); {
      glm::vec3 * resultptr = new glm::vec3(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_glm__vec3,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_getModelMatrix(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; glm::mat4 result;
    SWIG_check_num_args("ofxAssimpModelLoader::getModelMatrix",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::getModelMatrix",1,"ofxAssimpModelLoader *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_getModelMatrix",1,SWIGTYPE_p_ofxAssimpModelLoader); }  result = (arg1)->getModelMatrix();
    { glm::mat4 * resultptr = new glm::mat4(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_glm__mat4,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_getSceneMin__SWIG_0(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; bool arg2 ; glm::vec3 result;
    SWIG_check_num_args("ofxAssimpModelLoader::getSceneMin",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::getSceneMin",1,"ofxAssimpModelLoader *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxAssimpModelLoader::getSceneMin",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_getSceneMin",1,SWIGTYPE_p_ofxAssimpModelLoader); }  arg2 = (lua_toboolean(L, 2)!=0);
    result = (arg1)->getSceneMin(arg2); { glm::vec3 * resultptr = new glm::vec3(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_glm__vec3,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_getSceneMin__SWIG_1(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; glm::vec3 result;
    SWIG_check_num_args("ofxAssimpModelLoader::getSceneMin",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::getSceneMin",1,"ofxAssimpModelLoader *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_getSceneMin",1,SWIGTYPE_p_ofxAssimpModelLoader); }  result = (arg1)->getSceneMin(); {
      glm::vec3 * resultptr = new glm::vec3(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_glm__vec3,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_getSceneMin(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L);
  if (argc == 1) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxAssimpModelLoader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_AssimpModelLoader_getSceneMin__SWIG_1(L);}  }  if (argc == 2) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxAssimpModelLoader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) {
        return _wrap_AssimpModelLoader_getSceneMin__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AssimpModelLoader_getSceneMin'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxAssimpModelLoader::getSceneMin(bool)\n"
  "    ofxAssimpModelLoader::getSceneMin()\n"); lua_error(L);return 0; }
static int _wrap_AssimpModelLoader_getSceneMax__SWIG_0(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; bool arg2 ; glm::vec3 result;
    SWIG_check_num_args("ofxAssimpModelLoader::getSceneMax",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::getSceneMax",1,"ofxAssimpModelLoader *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxAssimpModelLoader::getSceneMax",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_getSceneMax",1,SWIGTYPE_p_ofxAssimpModelLoader); }  arg2 = (lua_toboolean(L, 2)!=0);
    result = (arg1)->getSceneMax(arg2); { glm::vec3 * resultptr = new glm::vec3(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_glm__vec3,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_getSceneMax__SWIG_1(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; glm::vec3 result;
    SWIG_check_num_args("ofxAssimpModelLoader::getSceneMax",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::getSceneMax",1,"ofxAssimpModelLoader *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_getSceneMax",1,SWIGTYPE_p_ofxAssimpModelLoader); }  result = (arg1)->getSceneMax(); {
      glm::vec3 * resultptr = new glm::vec3(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_glm__vec3,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_getSceneMax(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L);
  if (argc == 1) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxAssimpModelLoader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_AssimpModelLoader_getSceneMax__SWIG_1(L);}  }  if (argc == 2) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxAssimpModelLoader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) {
        return _wrap_AssimpModelLoader_getSceneMax__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AssimpModelLoader_getSceneMax'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxAssimpModelLoader::getSceneMax(bool)\n"
  "    ofxAssimpModelLoader::getSceneMax()\n"); lua_error(L);return 0; }
static int _wrap_AssimpModelLoader_getSceneMinModelSpace(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; glm::vec3 result;
    SWIG_check_num_args("ofxAssimpModelLoader::getSceneMinModelSpace",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::getSceneMinModelSpace",1,"ofxAssimpModelLoader *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_getSceneMinModelSpace",1,SWIGTYPE_p_ofxAssimpModelLoader); } 
    result = (arg1)->getSceneMinModelSpace(); { glm::vec3 * resultptr = new glm::vec3(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_glm__vec3,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_getSceneMaxModelSpace(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; glm::vec3 result;
    SWIG_check_num_args("ofxAssimpModelLoader::getSceneMaxModelSpace",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::getSceneMaxModelSpace",1,"ofxAssimpModelLoader *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_getSceneMaxModelSpace",1,SWIGTYPE_p_ofxAssimpModelLoader); } 
    result = (arg1)->getSceneMaxModelSpace(); { glm::vec3 * resultptr = new glm::vec3(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_glm__vec3,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_getSceneCenterModelSpace(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; glm::vec3 result;
    SWIG_check_num_args("ofxAssimpModelLoader::getSceneCenterModelSpace",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::getSceneCenterModelSpace",1,"ofxAssimpModelLoader *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_getSceneCenterModelSpace",1,SWIGTYPE_p_ofxAssimpModelLoader); } 
    result = (arg1)->getSceneCenterModelSpace(); { glm::vec3 * resultptr = new glm::vec3(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_glm__vec3,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_getNumRotations(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; int result;
    SWIG_check_num_args("ofxAssimpModelLoader::getNumRotations",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::getNumRotations",1,"ofxAssimpModelLoader *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_getNumRotations",1,SWIGTYPE_p_ofxAssimpModelLoader); } 
    result = (int)(arg1)->getNumRotations(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_getRotationAxis(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; int arg2 ; glm::vec3 result;
    SWIG_check_num_args("ofxAssimpModelLoader::getRotationAxis",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::getRotationAxis",1,"ofxAssimpModelLoader *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxAssimpModelLoader::getRotationAxis",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_getRotationAxis",1,SWIGTYPE_p_ofxAssimpModelLoader); }  arg2 = (int)lua_tonumber(L, 2);
    result = (arg1)->getRotationAxis(arg2); { glm::vec3 * resultptr = new glm::vec3(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_glm__vec3,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_getRotationAngle(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; int arg2 ; float result;
    SWIG_check_num_args("ofxAssimpModelLoader::getRotationAngle",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::getRotationAngle",1,"ofxAssimpModelLoader *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxAssimpModelLoader::getRotationAngle",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_getRotationAngle",1,SWIGTYPE_p_ofxAssimpModelLoader); }  arg2 = (int)lua_tonumber(L, 2);
    result = (float)(arg1)->getRotationAngle(arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_calculateDimensions(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ;
    SWIG_check_num_args("ofxAssimpModelLoader::calculateDimensions",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::calculateDimensions",1,"ofxAssimpModelLoader *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_calculateDimensions",1,SWIGTYPE_p_ofxAssimpModelLoader); } 
    (arg1)->calculateDimensions(); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpModelLoader_getAssimpScene(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) 0 ; aiScene *result = 0 ;
    SWIG_check_num_args("ofxAssimpModelLoader::getAssimpScene",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpModelLoader::getAssimpScene",1,"ofxAssimpModelLoader *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpModelLoader,0))){
      SWIG_fail_ptr("AssimpModelLoader_getAssimpScene",1,SWIGTYPE_p_ofxAssimpModelLoader); } 
    result = (aiScene *)(arg1)->getAssimpScene(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_aiScene,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static void swig_delete_AssimpModelLoader(void *obj) {
ofxAssimpModelLoader *arg1 = (ofxAssimpModelLoader *) obj;
delete arg1;
}
static int _proxy__wrap_new_AssimpModelLoader(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AssimpModelLoader);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AssimpModelLoader_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AssimpModelLoader_methods[]= {
    { "load", _wrap_AssimpModelLoader_load},
    { "loadModel", _wrap_AssimpModelLoader_loadModel},
    { "createEmptyModel", _wrap_AssimpModelLoader_createEmptyModel},
    { "createLightsFromAiModel", _wrap_AssimpModelLoader_createLightsFromAiModel},
    { "optimizeScene", _wrap_AssimpModelLoader_optimizeScene},
    { "enableCulling", _wrap_AssimpModelLoader_enableCulling},
    { "disableCulling", _wrap_AssimpModelLoader_disableCulling},
    { "update", _wrap_AssimpModelLoader_update},
    { "hasAnimations", _wrap_AssimpModelLoader_hasAnimations},
    { "getAnimationCount", _wrap_AssimpModelLoader_getAnimationCount},
    { "getAnimation", _wrap_AssimpModelLoader_getAnimation},
    { "playAllAnimations", _wrap_AssimpModelLoader_playAllAnimations},
    { "stopAllAnimations", _wrap_AssimpModelLoader_stopAllAnimations},
    { "resetAllAnimations", _wrap_AssimpModelLoader_resetAllAnimations},
    { "setPausedForAllAnimations", _wrap_AssimpModelLoader_setPausedForAllAnimations},
    { "setLoopStateForAllAnimations", _wrap_AssimpModelLoader_setLoopStateForAllAnimations},
    { "setPositionForAllAnimations", _wrap_AssimpModelLoader_setPositionForAllAnimations},
    { "setAnimation", _wrap_AssimpModelLoader_setAnimation},
    { "setNormalizedTime", _wrap_AssimpModelLoader_setNormalizedTime},
    { "setTime", _wrap_AssimpModelLoader_setTime},
    { "getDuration", _wrap_AssimpModelLoader_getDuration},
    { "hasMeshes", _wrap_AssimpModelLoader_hasMeshes},
    { "getMeshCount", _wrap_AssimpModelLoader_getMeshCount},
    { "getMeshHelper", _wrap_AssimpModelLoader_getMeshHelper},
    { "clear", _wrap_AssimpModelLoader_clear},
    { "setScale", _wrap_AssimpModelLoader_setScale},
    { "setPosition", _wrap_AssimpModelLoader_setPosition},
    { "setRotation", _wrap_AssimpModelLoader_setRotation},
    { "setScaleNormalization", _wrap_AssimpModelLoader_setScaleNormalization},
    { "setNormalizationFactor", _wrap_AssimpModelLoader_setNormalizationFactor},
    { "getMeshNames", _wrap_AssimpModelLoader_getMeshNames},
    { "getNumMeshes", _wrap_AssimpModelLoader_getNumMeshes},
    { "getMesh", _wrap_AssimpModelLoader_getMesh},
    { "getCurrentAnimatedMesh", _wrap_AssimpModelLoader_getCurrentAnimatedMesh},
    { "getMaterialForMesh", _wrap_AssimpModelLoader_getMaterialForMesh},
    { "getTextureForMesh", _wrap_AssimpModelLoader_getTextureForMesh},
    { "drawWireframe", _wrap_AssimpModelLoader_drawWireframe},
    { "drawFaces", _wrap_AssimpModelLoader_drawFaces},
    { "drawVertices", _wrap_AssimpModelLoader_drawVertices},
    { "enableTextures", _wrap_AssimpModelLoader_enableTextures},
    { "disableTextures", _wrap_AssimpModelLoader_disableTextures},
    { "enableNormals", _wrap_AssimpModelLoader_enableNormals},
    { "enableMaterials", _wrap_AssimpModelLoader_enableMaterials},
    { "disableNormals", _wrap_AssimpModelLoader_disableNormals},
    { "enableColors", _wrap_AssimpModelLoader_enableColors},
    { "disableColors", _wrap_AssimpModelLoader_disableColors},
    { "disableMaterials", _wrap_AssimpModelLoader_disableMaterials},
    { "draw", _wrap_AssimpModelLoader_draw},
    { "getPosition", _wrap_AssimpModelLoader_getPosition},
    { "getSceneCenter", _wrap_AssimpModelLoader_getSceneCenter},
    { "getNormalizedScale", _wrap_AssimpModelLoader_getNormalizedScale},
    { "getScale", _wrap_AssimpModelLoader_getScale},
    { "getModelMatrix", _wrap_AssimpModelLoader_getModelMatrix},
    { "getSceneMin", _wrap_AssimpModelLoader_getSceneMin},
    { "getSceneMax", _wrap_AssimpModelLoader_getSceneMax},
    { "getSceneMinModelSpace", _wrap_AssimpModelLoader_getSceneMinModelSpace},
    { "getSceneMaxModelSpace", _wrap_AssimpModelLoader_getSceneMaxModelSpace},
    { "getSceneCenterModelSpace", _wrap_AssimpModelLoader_getSceneCenterModelSpace},
    { "getNumRotations", _wrap_AssimpModelLoader_getNumRotations},
    { "getRotationAxis", _wrap_AssimpModelLoader_getRotationAxis},
    { "getRotationAngle", _wrap_AssimpModelLoader_getRotationAngle},
    { "calculateDimensions", _wrap_AssimpModelLoader_calculateDimensions},
    { "getAssimpScene", _wrap_AssimpModelLoader_getAssimpScene},
    {0,0}
};
static swig_lua_method swig_AssimpModelLoader_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AssimpModelLoader_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AssimpModelLoader_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("OPTIMIZE_NONE", (ofxAssimpModelLoader::OPTIMIZE_NONE))},
    {SWIG_LUA_CONSTTAB_INT("OPTIMIZE_DEFAULT", (ofxAssimpModelLoader::OPTIMIZE_DEFAULT))},
    {SWIG_LUA_CONSTTAB_INT("OPTIMIZE_HIGH", (ofxAssimpModelLoader::OPTIMIZE_HIGH))},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AssimpModelLoader_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AssimpModelLoader_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AssimpModelLoader_Sf_SwigStatic = {
    "AssimpModelLoader",
    swig_AssimpModelLoader_Sf_SwigStatic_methods,
    swig_AssimpModelLoader_Sf_SwigStatic_attributes,
    swig_AssimpModelLoader_Sf_SwigStatic_constants,
    swig_AssimpModelLoader_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AssimpModelLoader_bases[] = {0};
static const char *swig_AssimpModelLoader_base_names[] = {0};
static swig_lua_class _wrap_class_AssimpModelLoader = { "AssimpModelLoader", "AssimpModelLoader", &SWIGTYPE_p_ofxAssimpModelLoader,_proxy__wrap_new_AssimpModelLoader, swig_delete_AssimpModelLoader, swig_AssimpModelLoader_methods, swig_AssimpModelLoader_attributes, &swig_AssimpModelLoader_Sf_SwigStatic, swig_AssimpModelLoader_meta, swig_AssimpModelLoader_bases, swig_AssimpModelLoader_base_names };

static int _wrap_new_AssimpAnimation(lua_State* L) { { int SWIG_arg = 0;
    SwigValueWrapper< std::shared_ptr< aiScene const > > arg1 ; aiAnimation *arg2 = (aiAnimation *) 0 ;
    std::shared_ptr< aiScene const > *argp1 ; ofxAssimpAnimation *result = 0 ;
    SWIG_check_num_args("ofxAssimpAnimation::ofxAssimpAnimation",2,2)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofxAssimpAnimation::ofxAssimpAnimation",1,"std::shared_ptr< aiScene const >");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxAssimpAnimation::ofxAssimpAnimation",2,"aiAnimation *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__shared_ptrT_aiScene_const_t,0))){
      SWIG_fail_ptr("new_AssimpAnimation",1,SWIGTYPE_p_std__shared_ptrT_aiScene_const_t); }  arg1 = *argp1;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_aiAnimation,0))){
      SWIG_fail_ptr("new_AssimpAnimation",2,SWIGTYPE_p_aiAnimation); } 
    result = (ofxAssimpAnimation *)new ofxAssimpAnimation(arg1,arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxAssimpAnimation,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_AssimpAnimation_getAnimation(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpAnimation *arg1 = (ofxAssimpAnimation *) 0 ; aiAnimation *result = 0 ;
    SWIG_check_num_args("ofxAssimpAnimation::getAnimation",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpAnimation::getAnimation",1,"ofxAssimpAnimation *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpAnimation,0))){
      SWIG_fail_ptr("AssimpAnimation_getAnimation",1,SWIGTYPE_p_ofxAssimpAnimation); } 
    result = (aiAnimation *)(arg1)->getAnimation(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_aiAnimation,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpAnimation_update(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpAnimation *arg1 = (ofxAssimpAnimation *) 0 ; SWIG_check_num_args("ofxAssimpAnimation::update",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpAnimation::update",1,"ofxAssimpAnimation *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpAnimation,0))){
      SWIG_fail_ptr("AssimpAnimation_update",1,SWIGTYPE_p_ofxAssimpAnimation); }  (arg1)->update(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpAnimation_play(lua_State* L) { { int SWIG_arg = 0; ofxAssimpAnimation *arg1 = (ofxAssimpAnimation *) 0 ;
    SWIG_check_num_args("ofxAssimpAnimation::play",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpAnimation::play",1,"ofxAssimpAnimation *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpAnimation,0))){
      SWIG_fail_ptr("AssimpAnimation_play",1,SWIGTYPE_p_ofxAssimpAnimation); }  (arg1)->play(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpAnimation_stop(lua_State* L) { { int SWIG_arg = 0; ofxAssimpAnimation *arg1 = (ofxAssimpAnimation *) 0 ;
    SWIG_check_num_args("ofxAssimpAnimation::stop",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpAnimation::stop",1,"ofxAssimpAnimation *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpAnimation,0))){
      SWIG_fail_ptr("AssimpAnimation_stop",1,SWIGTYPE_p_ofxAssimpAnimation); }  (arg1)->stop(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpAnimation_reset(lua_State* L) { { int SWIG_arg = 0; ofxAssimpAnimation *arg1 = (ofxAssimpAnimation *) 0 ;
    SWIG_check_num_args("ofxAssimpAnimation::reset",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpAnimation::reset",1,"ofxAssimpAnimation *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpAnimation,0))){
      SWIG_fail_ptr("AssimpAnimation_reset",1,SWIGTYPE_p_ofxAssimpAnimation); }  (arg1)->reset(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpAnimation_isFrameNew(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpAnimation *arg1 = (ofxAssimpAnimation *) 0 ; bool result; SWIG_check_num_args("ofxAssimpAnimation::isFrameNew",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpAnimation::isFrameNew",1,"ofxAssimpAnimation *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpAnimation,0))){
      SWIG_fail_ptr("AssimpAnimation_isFrameNew",1,SWIGTYPE_p_ofxAssimpAnimation); }  result = (bool)(arg1)->isFrameNew();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpAnimation_isPaused(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpAnimation *arg1 = (ofxAssimpAnimation *) 0 ; bool result; SWIG_check_num_args("ofxAssimpAnimation::isPaused",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpAnimation::isPaused",1,"ofxAssimpAnimation *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpAnimation,0))){
      SWIG_fail_ptr("AssimpAnimation_isPaused",1,SWIGTYPE_p_ofxAssimpAnimation); }  result = (bool)(arg1)->isPaused();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpAnimation_isPlaying(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpAnimation *arg1 = (ofxAssimpAnimation *) 0 ; bool result; SWIG_check_num_args("ofxAssimpAnimation::isPlaying",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpAnimation::isPlaying",1,"ofxAssimpAnimation *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpAnimation,0))){
      SWIG_fail_ptr("AssimpAnimation_isPlaying",1,SWIGTYPE_p_ofxAssimpAnimation); }  result = (bool)(arg1)->isPlaying();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpAnimation_isFinished(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpAnimation *arg1 = (ofxAssimpAnimation *) 0 ; bool result; SWIG_check_num_args("ofxAssimpAnimation::isFinished",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpAnimation::isFinished",1,"ofxAssimpAnimation *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpAnimation,0))){
      SWIG_fail_ptr("AssimpAnimation_isFinished",1,SWIGTYPE_p_ofxAssimpAnimation); }  result = (bool)(arg1)->isFinished();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpAnimation_getPosition(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpAnimation *arg1 = (ofxAssimpAnimation *) 0 ; float result;
    SWIG_check_num_args("ofxAssimpAnimation::getPosition",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpAnimation::getPosition",1,"ofxAssimpAnimation *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpAnimation,0))){
      SWIG_fail_ptr("AssimpAnimation_getPosition",1,SWIGTYPE_p_ofxAssimpAnimation); }  result = (float)(arg1)->getPosition();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpAnimation_getPositionInSeconds(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpAnimation *arg1 = (ofxAssimpAnimation *) 0 ; float result;
    SWIG_check_num_args("ofxAssimpAnimation::getPositionInSeconds",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpAnimation::getPositionInSeconds",1,"ofxAssimpAnimation *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpAnimation,0))){
      SWIG_fail_ptr("AssimpAnimation_getPositionInSeconds",1,SWIGTYPE_p_ofxAssimpAnimation); } 
    result = (float)(arg1)->getPositionInSeconds(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpAnimation_getPositionInMilliSeconds(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpAnimation *arg1 = (ofxAssimpAnimation *) 0 ; int result;
    SWIG_check_num_args("ofxAssimpAnimation::getPositionInMilliSeconds",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpAnimation::getPositionInMilliSeconds",1,"ofxAssimpAnimation *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpAnimation,0))){
      SWIG_fail_ptr("AssimpAnimation_getPositionInMilliSeconds",1,SWIGTYPE_p_ofxAssimpAnimation); } 
    result = (int)(arg1)->getPositionInMilliSeconds(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpAnimation_getSpeed(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpAnimation *arg1 = (ofxAssimpAnimation *) 0 ; float result; SWIG_check_num_args("ofxAssimpAnimation::getSpeed",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpAnimation::getSpeed",1,"ofxAssimpAnimation *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpAnimation,0))){
      SWIG_fail_ptr("AssimpAnimation_getSpeed",1,SWIGTYPE_p_ofxAssimpAnimation); }  result = (float)(arg1)->getSpeed();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpAnimation_getDurationInSeconds(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpAnimation *arg1 = (ofxAssimpAnimation *) 0 ; float result;
    SWIG_check_num_args("ofxAssimpAnimation::getDurationInSeconds",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpAnimation::getDurationInSeconds",1,"ofxAssimpAnimation *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpAnimation,0))){
      SWIG_fail_ptr("AssimpAnimation_getDurationInSeconds",1,SWIGTYPE_p_ofxAssimpAnimation); } 
    result = (float)(arg1)->getDurationInSeconds(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpAnimation_getDurationInMilliSeconds(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpAnimation *arg1 = (ofxAssimpAnimation *) 0 ; int result;
    SWIG_check_num_args("ofxAssimpAnimation::getDurationInMilliSeconds",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpAnimation::getDurationInMilliSeconds",1,"ofxAssimpAnimation *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpAnimation,0))){
      SWIG_fail_ptr("AssimpAnimation_getDurationInMilliSeconds",1,SWIGTYPE_p_ofxAssimpAnimation); } 
    result = (int)(arg1)->getDurationInMilliSeconds(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpAnimation_setPaused(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpAnimation *arg1 = (ofxAssimpAnimation *) 0 ; bool arg2 ; SWIG_check_num_args("ofxAssimpAnimation::setPaused",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpAnimation::setPaused",1,"ofxAssimpAnimation *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxAssimpAnimation::setPaused",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpAnimation,0))){
      SWIG_fail_ptr("AssimpAnimation_setPaused",1,SWIGTYPE_p_ofxAssimpAnimation); }  arg2 = (lua_toboolean(L, 2)!=0);
    (arg1)->setPaused(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpAnimation_setPosition(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpAnimation *arg1 = (ofxAssimpAnimation *) 0 ; float arg2 ;
    SWIG_check_num_args("ofxAssimpAnimation::setPosition",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpAnimation::setPosition",1,"ofxAssimpAnimation *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxAssimpAnimation::setPosition",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpAnimation,0))){
      SWIG_fail_ptr("AssimpAnimation_setPosition",1,SWIGTYPE_p_ofxAssimpAnimation); }  arg2 = (float)lua_tonumber(L, 2);
    (arg1)->setPosition(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AssimpAnimation_setLoopState(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpAnimation *arg1 = (ofxAssimpAnimation *) 0 ; ofLoopType arg2 ;
    SWIG_check_num_args("ofxAssimpAnimation::setLoopState",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpAnimation::setLoopState",1,"ofxAssimpAnimation *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxAssimpAnimation::setLoopState",2,"ofLoopType");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpAnimation,0))){
      SWIG_fail_ptr("AssimpAnimation_setLoopState",1,SWIGTYPE_p_ofxAssimpAnimation); } 
    arg2 = (ofLoopType)(int)lua_tonumber(L, 2); (arg1)->setLoopState(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_AssimpAnimation_setSpeed(lua_State* L) { { int SWIG_arg = 0;
    ofxAssimpAnimation *arg1 = (ofxAssimpAnimation *) 0 ; float arg2 ; SWIG_check_num_args("ofxAssimpAnimation::setSpeed",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpAnimation::setSpeed",1,"ofxAssimpAnimation *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxAssimpAnimation::setSpeed",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpAnimation,0))){
      SWIG_fail_ptr("AssimpAnimation_setSpeed",1,SWIGTYPE_p_ofxAssimpAnimation); }  arg2 = (float)lua_tonumber(L, 2);
    (arg1)->setSpeed(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static void swig_delete_AssimpAnimation(void *obj) {
ofxAssimpAnimation *arg1 = (ofxAssimpAnimation *) obj;
delete arg1;
}
static int _proxy__wrap_new_AssimpAnimation(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AssimpAnimation);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AssimpAnimation_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AssimpAnimation_methods[]= {
    { "getAnimation", _wrap_AssimpAnimation_getAnimation},
    { "update", _wrap_AssimpAnimation_update},
    { "play", _wrap_AssimpAnimation_play},
    { "stop", _wrap_AssimpAnimation_stop},
    { "reset", _wrap_AssimpAnimation_reset},
    { "isFrameNew", _wrap_AssimpAnimation_isFrameNew},
    { "isPaused", _wrap_AssimpAnimation_isPaused},
    { "isPlaying", _wrap_AssimpAnimation_isPlaying},
    { "isFinished", _wrap_AssimpAnimation_isFinished},
    { "getPosition", _wrap_AssimpAnimation_getPosition},
    { "getPositionInSeconds", _wrap_AssimpAnimation_getPositionInSeconds},
    { "getPositionInMilliSeconds", _wrap_AssimpAnimation_getPositionInMilliSeconds},
    { "getSpeed", _wrap_AssimpAnimation_getSpeed},
    { "getDurationInSeconds", _wrap_AssimpAnimation_getDurationInSeconds},
    { "getDurationInMilliSeconds", _wrap_AssimpAnimation_getDurationInMilliSeconds},
    { "setPaused", _wrap_AssimpAnimation_setPaused},
    { "setPosition", _wrap_AssimpAnimation_setPosition},
    { "setLoopState", _wrap_AssimpAnimation_setLoopState},
    { "setSpeed", _wrap_AssimpAnimation_setSpeed},
    {0,0}
};
static swig_lua_method swig_AssimpAnimation_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AssimpAnimation_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AssimpAnimation_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AssimpAnimation_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AssimpAnimation_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AssimpAnimation_Sf_SwigStatic = {
    "AssimpAnimation",
    swig_AssimpAnimation_Sf_SwigStatic_methods,
    swig_AssimpAnimation_Sf_SwigStatic_attributes,
    swig_AssimpAnimation_Sf_SwigStatic_constants,
    swig_AssimpAnimation_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AssimpAnimation_bases[] = {0};
static const char *swig_AssimpAnimation_base_names[] = {0};
static swig_lua_class _wrap_class_AssimpAnimation = { "AssimpAnimation", "AssimpAnimation", &SWIGTYPE_p_ofxAssimpAnimation,_proxy__wrap_new_AssimpAnimation, swig_delete_AssimpAnimation, swig_AssimpAnimation_methods, swig_AssimpAnimation_attributes, &swig_AssimpAnimation_Sf_SwigStatic, swig_AssimpAnimation_meta, swig_AssimpAnimation_bases, swig_AssimpAnimation_base_names };

static int _wrap_new_Volumetrics(lua_State* L) { { int SWIG_arg = 0; ofxVolumetrics *result = 0 ;
    SWIG_check_num_args("ofxVolumetrics::ofxVolumetrics",0,0) result = (ofxVolumetrics *)new ofxVolumetrics();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxVolumetrics,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_Volumetrics_setup__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxVolumetrics *arg1 = (ofxVolumetrics *) 0 ;
    int arg2 ; int arg3 ; int arg4 ; glm::vec3 arg5 ; bool arg6 ; glm::vec3 *argp5 ;
    SWIG_check_num_args("ofxVolumetrics::setup",6,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVolumetrics::setup",1,"ofxVolumetrics *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxVolumetrics::setup",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxVolumetrics::setup",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxVolumetrics::setup",4,"int");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ofxVolumetrics::setup",5,"glm::vec3");
    if(!lua_isboolean(L,6)) SWIG_fail_arg("ofxVolumetrics::setup",6,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVolumetrics,0))){
      SWIG_fail_ptr("Volumetrics_setup",1,SWIGTYPE_p_ofxVolumetrics); }  arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_glm__vec3,0))){
      SWIG_fail_ptr("Volumetrics_setup",5,SWIGTYPE_p_glm__vec3); }  arg5 = *argp5; arg6 = (lua_toboolean(L, 6)!=0);
    (arg1)->setup(arg2,arg3,arg4,arg5,arg6); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Volumetrics_setup__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxVolumetrics *arg1 = (ofxVolumetrics *) 0 ;
    int arg2 ; int arg3 ; int arg4 ; glm::vec3 arg5 ; glm::vec3 *argp5 ; SWIG_check_num_args("ofxVolumetrics::setup",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVolumetrics::setup",1,"ofxVolumetrics *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxVolumetrics::setup",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxVolumetrics::setup",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxVolumetrics::setup",4,"int");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ofxVolumetrics::setup",5,"glm::vec3");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVolumetrics,0))){
      SWIG_fail_ptr("Volumetrics_setup",1,SWIGTYPE_p_ofxVolumetrics); }  arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_glm__vec3,0))){
      SWIG_fail_ptr("Volumetrics_setup",5,SWIGTYPE_p_glm__vec3); }  arg5 = *argp5; (arg1)->setup(arg2,arg3,arg4,arg5);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Volumetrics_setup(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L);
  if (argc == 5) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxVolumetrics, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_glm__vec3, SWIG_POINTER_NO_NULL)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Volumetrics_setup__SWIG_1(L);}  }  }  }  }  } 
  if (argc == 6) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxVolumetrics, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_glm__vec3, SWIG_POINTER_NO_NULL)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[5]); }  if (_v) {
                return _wrap_Volumetrics_setup__SWIG_0(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Volumetrics_setup'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxVolumetrics::setup(int,int,int,glm::vec3,bool)\n" "    ofxVolumetrics::setup(int,int,int,glm::vec3)\n");
  lua_error(L);return 0; }
static int _wrap_Volumetrics_destroy(lua_State* L) { { int SWIG_arg = 0; ofxVolumetrics *arg1 = (ofxVolumetrics *) 0 ;
    SWIG_check_num_args("ofxVolumetrics::destroy",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVolumetrics::destroy",1,"ofxVolumetrics *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVolumetrics,0))){
      SWIG_fail_ptr("Volumetrics_destroy",1,SWIGTYPE_p_ofxVolumetrics); }  (arg1)->destroy(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Volumetrics_updateVolumeData(lua_State* L) { { int SWIG_arg = 0; ofxVolumetrics *arg1 = (ofxVolumetrics *) 0 ;
    unsigned char *arg2 = (unsigned char *) 0 ; int arg3 ; int arg4 ; int arg5 ; int arg6 ; int arg7 ; int arg8 ;
    SWIG_check_num_args("ofxVolumetrics::updateVolumeData",8,8)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVolumetrics::updateVolumeData",1,"ofxVolumetrics *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxVolumetrics::updateVolumeData",2,"unsigned char *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxVolumetrics::updateVolumeData",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxVolumetrics::updateVolumeData",4,"int");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxVolumetrics::updateVolumeData",5,"int");
    if(!lua_isnumber(L,6)) SWIG_fail_arg("ofxVolumetrics::updateVolumeData",6,"int");
    if(!lua_isnumber(L,7)) SWIG_fail_arg("ofxVolumetrics::updateVolumeData",7,"int");
    if(!lua_isnumber(L,8)) SWIG_fail_arg("ofxVolumetrics::updateVolumeData",8,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVolumetrics,0))){
      SWIG_fail_ptr("Volumetrics_updateVolumeData",1,SWIGTYPE_p_ofxVolumetrics); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
      SWIG_fail_ptr("Volumetrics_updateVolumeData",2,SWIGTYPE_p_unsigned_char); }  arg3 = (int)lua_tonumber(L, 3);
    arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); arg6 = (int)lua_tonumber(L, 6);
    arg7 = (int)lua_tonumber(L, 7); arg8 = (int)lua_tonumber(L, 8);
    (arg1)->updateVolumeData(arg2,arg3,arg4,arg5,arg6,arg7,arg8); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Volumetrics_updateTexture(lua_State* L) { { int SWIG_arg = 0; ofxVolumetrics *arg1 = (ofxVolumetrics *) 0 ;
    int arg2 ; int arg3 ; int arg4 ; int arg5 ; int arg6 ; int arg7 ; int arg8 ;
    SWIG_check_num_args("ofxVolumetrics::updateTexture",8,8)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVolumetrics::updateTexture",1,"ofxVolumetrics *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxVolumetrics::updateTexture",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxVolumetrics::updateTexture",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxVolumetrics::updateTexture",4,"int");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxVolumetrics::updateTexture",5,"int");
    if(!lua_isnumber(L,6)) SWIG_fail_arg("ofxVolumetrics::updateTexture",6,"int");
    if(!lua_isnumber(L,7)) SWIG_fail_arg("ofxVolumetrics::updateTexture",7,"int");
    if(!lua_isnumber(L,8)) SWIG_fail_arg("ofxVolumetrics::updateTexture",8,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVolumetrics,0))){
      SWIG_fail_ptr("Volumetrics_updateTexture",1,SWIGTYPE_p_ofxVolumetrics); }  arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5);
    arg6 = (int)lua_tonumber(L, 6); arg7 = (int)lua_tonumber(L, 7); arg8 = (int)lua_tonumber(L, 8);
    (arg1)->updateTexture(arg2,arg3,arg4,arg5,arg6,arg7,arg8); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Volumetrics_drawVolume__SWIG_0(lua_State* L) { { int SWIG_arg = 0;
    ofxVolumetrics *arg1 = (ofxVolumetrics *) 0 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ; int arg6 ;
    SWIG_check_num_args("ofxVolumetrics::drawVolume",6,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVolumetrics::drawVolume",1,"ofxVolumetrics *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxVolumetrics::drawVolume",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxVolumetrics::drawVolume",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxVolumetrics::drawVolume",4,"float");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxVolumetrics::drawVolume",5,"float");
    if(!lua_isnumber(L,6)) SWIG_fail_arg("ofxVolumetrics::drawVolume",6,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVolumetrics,0))){
      SWIG_fail_ptr("Volumetrics_drawVolume",1,SWIGTYPE_p_ofxVolumetrics); }  arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
    arg6 = (int)lua_tonumber(L, 6); (arg1)->drawVolume(arg2,arg3,arg4,arg5,arg6); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_Volumetrics_drawVolume__SWIG_1(lua_State* L) { { int SWIG_arg = 0;
    ofxVolumetrics *arg1 = (ofxVolumetrics *) 0 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ;
    int arg8 ; SWIG_check_num_args("ofxVolumetrics::drawVolume",8,8)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVolumetrics::drawVolume",1,"ofxVolumetrics *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxVolumetrics::drawVolume",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxVolumetrics::drawVolume",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxVolumetrics::drawVolume",4,"float");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxVolumetrics::drawVolume",5,"float");
    if(!lua_isnumber(L,6)) SWIG_fail_arg("ofxVolumetrics::drawVolume",6,"float");
    if(!lua_isnumber(L,7)) SWIG_fail_arg("ofxVolumetrics::drawVolume",7,"float");
    if(!lua_isnumber(L,8)) SWIG_fail_arg("ofxVolumetrics::drawVolume",8,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVolumetrics,0))){
      SWIG_fail_ptr("Volumetrics_drawVolume",1,SWIGTYPE_p_ofxVolumetrics); }  arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
    arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (int)lua_tonumber(L, 8);
    (arg1)->drawVolume(arg2,arg3,arg4,arg5,arg6,arg7,arg8); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Volumetrics_drawVolume(lua_State* L) { int argc; int argv[9]={ 1,2,3,4,5,6,7,8,9} ; argc = lua_gettop(L);
  if (argc == 6) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxVolumetrics, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { return _wrap_Volumetrics_drawVolume__SWIG_0(L);}  }  }  }  }  }  } 
  if (argc == 8) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxVolumetrics, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { return _wrap_Volumetrics_drawVolume__SWIG_1(L);}  }  }  }  }  }  }
       }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Volumetrics_drawVolume'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxVolumetrics::drawVolume(float,float,float,float,int)\n"
  "    ofxVolumetrics::drawVolume(float,float,float,float,float,float,int)\n"); lua_error(L);return 0; }
static int _wrap_Volumetrics_isInitialized(lua_State* L) { { int SWIG_arg = 0; ofxVolumetrics *arg1 = (ofxVolumetrics *) 0 ;
    bool result; SWIG_check_num_args("ofxVolumetrics::isInitialized",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVolumetrics::isInitialized",1,"ofxVolumetrics *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVolumetrics,0))){
      SWIG_fail_ptr("Volumetrics_isInitialized",1,SWIGTYPE_p_ofxVolumetrics); }  result = (bool)(arg1)->isInitialized();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Volumetrics_getVolumeWidth(lua_State* L) { { int SWIG_arg = 0; ofxVolumetrics *arg1 = (ofxVolumetrics *) 0 ;
    int result; SWIG_check_num_args("ofxVolumetrics::getVolumeWidth",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVolumetrics::getVolumeWidth",1,"ofxVolumetrics *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVolumetrics,0))){
      SWIG_fail_ptr("Volumetrics_getVolumeWidth",1,SWIGTYPE_p_ofxVolumetrics); }  result = (int)(arg1)->getVolumeWidth();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Volumetrics_getVolumeHeight(lua_State* L) { { int SWIG_arg = 0; ofxVolumetrics *arg1 = (ofxVolumetrics *) 0 ;
    int result; SWIG_check_num_args("ofxVolumetrics::getVolumeHeight",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVolumetrics::getVolumeHeight",1,"ofxVolumetrics *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVolumetrics,0))){
      SWIG_fail_ptr("Volumetrics_getVolumeHeight",1,SWIGTYPE_p_ofxVolumetrics); }  result = (int)(arg1)->getVolumeHeight();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Volumetrics_getVolumeDepth(lua_State* L) { { int SWIG_arg = 0; ofxVolumetrics *arg1 = (ofxVolumetrics *) 0 ;
    int result; SWIG_check_num_args("ofxVolumetrics::getVolumeDepth",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVolumetrics::getVolumeDepth",1,"ofxVolumetrics *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVolumetrics,0))){
      SWIG_fail_ptr("Volumetrics_getVolumeDepth",1,SWIGTYPE_p_ofxVolumetrics); }  result = (int)(arg1)->getVolumeDepth();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Volumetrics_getFbo(lua_State* L) { { int SWIG_arg = 0; ofxVolumetrics *arg1 = (ofxVolumetrics *) 0 ;
    ofFbo *result = 0 ; SWIG_check_num_args("ofxVolumetrics::getFbo",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVolumetrics::getFbo",1,"ofxVolumetrics const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVolumetrics,0))){
      SWIG_fail_ptr("Volumetrics_getFbo",1,SWIGTYPE_p_ofxVolumetrics); } 
    result = (ofFbo *) &((ofxVolumetrics const *)arg1)->getFbo(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofFbo,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Volumetrics_getRenderWidth(lua_State* L) { { int SWIG_arg = 0; ofxVolumetrics *arg1 = (ofxVolumetrics *) 0 ;
    int result; SWIG_check_num_args("ofxVolumetrics::getRenderWidth",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVolumetrics::getRenderWidth",1,"ofxVolumetrics *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVolumetrics,0))){
      SWIG_fail_ptr("Volumetrics_getRenderWidth",1,SWIGTYPE_p_ofxVolumetrics); }  result = (int)(arg1)->getRenderWidth();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Volumetrics_getRenderHeight(lua_State* L) { { int SWIG_arg = 0; ofxVolumetrics *arg1 = (ofxVolumetrics *) 0 ;
    int result; SWIG_check_num_args("ofxVolumetrics::getRenderHeight",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVolumetrics::getRenderHeight",1,"ofxVolumetrics *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVolumetrics,0))){
      SWIG_fail_ptr("Volumetrics_getRenderHeight",1,SWIGTYPE_p_ofxVolumetrics); }  result = (int)(arg1)->getRenderHeight();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Volumetrics_getXyQuality(lua_State* L) { { int SWIG_arg = 0; ofxVolumetrics *arg1 = (ofxVolumetrics *) 0 ;
    float result; SWIG_check_num_args("ofxVolumetrics::getXyQuality",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVolumetrics::getXyQuality",1,"ofxVolumetrics *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVolumetrics,0))){
      SWIG_fail_ptr("Volumetrics_getXyQuality",1,SWIGTYPE_p_ofxVolumetrics); }  result = (float)(arg1)->getXyQuality();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Volumetrics_getZQuality(lua_State* L) { { int SWIG_arg = 0; ofxVolumetrics *arg1 = (ofxVolumetrics *) 0 ;
    float result; SWIG_check_num_args("ofxVolumetrics::getZQuality",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVolumetrics::getZQuality",1,"ofxVolumetrics *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVolumetrics,0))){
      SWIG_fail_ptr("Volumetrics_getZQuality",1,SWIGTYPE_p_ofxVolumetrics); }  result = (float)(arg1)->getZQuality();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Volumetrics_getThreshold(lua_State* L) { { int SWIG_arg = 0; ofxVolumetrics *arg1 = (ofxVolumetrics *) 0 ;
    float result; SWIG_check_num_args("ofxVolumetrics::getThreshold",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVolumetrics::getThreshold",1,"ofxVolumetrics *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVolumetrics,0))){
      SWIG_fail_ptr("Volumetrics_getThreshold",1,SWIGTYPE_p_ofxVolumetrics); }  result = (float)(arg1)->getThreshold();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Volumetrics_getDensity(lua_State* L) { { int SWIG_arg = 0; ofxVolumetrics *arg1 = (ofxVolumetrics *) 0 ;
    float result; SWIG_check_num_args("ofxVolumetrics::getDensity",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVolumetrics::getDensity",1,"ofxVolumetrics *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVolumetrics,0))){
      SWIG_fail_ptr("Volumetrics_getDensity",1,SWIGTYPE_p_ofxVolumetrics); }  result = (float)(arg1)->getDensity();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Volumetrics_getTextureData(lua_State* L) { { int SWIG_arg = 0; ofxVolumetrics *arg1 = (ofxVolumetrics *) 0 ;
    ofxTextureData3d result; SWIG_check_num_args("ofxVolumetrics::getTextureData",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVolumetrics::getTextureData",1,"ofxVolumetrics *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVolumetrics,0))){
      SWIG_fail_ptr("Volumetrics_getTextureData",1,SWIGTYPE_p_ofxVolumetrics); }  result = (arg1)->getTextureData(); {
      ofxTextureData3d * resultptr = new ofxTextureData3d(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofxTextureData3d,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; }
   lua_error(L); return 0; }
static int _wrap_Volumetrics_setXyQuality(lua_State* L) { { int SWIG_arg = 0; ofxVolumetrics *arg1 = (ofxVolumetrics *) 0 ;
    float arg2 ; SWIG_check_num_args("ofxVolumetrics::setXyQuality",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVolumetrics::setXyQuality",1,"ofxVolumetrics *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxVolumetrics::setXyQuality",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVolumetrics,0))){
      SWIG_fail_ptr("Volumetrics_setXyQuality",1,SWIGTYPE_p_ofxVolumetrics); }  arg2 = (float)lua_tonumber(L, 2);
    (arg1)->setXyQuality(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Volumetrics_setZQuality(lua_State* L) { { int SWIG_arg = 0; ofxVolumetrics *arg1 = (ofxVolumetrics *) 0 ;
    float arg2 ; SWIG_check_num_args("ofxVolumetrics::setZQuality",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVolumetrics::setZQuality",1,"ofxVolumetrics *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxVolumetrics::setZQuality",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVolumetrics,0))){
      SWIG_fail_ptr("Volumetrics_setZQuality",1,SWIGTYPE_p_ofxVolumetrics); }  arg2 = (float)lua_tonumber(L, 2);
    (arg1)->setZQuality(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Volumetrics_setThreshold(lua_State* L) { { int SWIG_arg = 0; ofxVolumetrics *arg1 = (ofxVolumetrics *) 0 ;
    float arg2 ; SWIG_check_num_args("ofxVolumetrics::setThreshold",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVolumetrics::setThreshold",1,"ofxVolumetrics *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxVolumetrics::setThreshold",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVolumetrics,0))){
      SWIG_fail_ptr("Volumetrics_setThreshold",1,SWIGTYPE_p_ofxVolumetrics); }  arg2 = (float)lua_tonumber(L, 2);
    (arg1)->setThreshold(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Volumetrics_setDensity(lua_State* L) { { int SWIG_arg = 0; ofxVolumetrics *arg1 = (ofxVolumetrics *) 0 ;
    float arg2 ; SWIG_check_num_args("ofxVolumetrics::setDensity",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVolumetrics::setDensity",1,"ofxVolumetrics *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxVolumetrics::setDensity",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVolumetrics,0))){
      SWIG_fail_ptr("Volumetrics_setDensity",1,SWIGTYPE_p_ofxVolumetrics); }  arg2 = (float)lua_tonumber(L, 2);
    (arg1)->setDensity(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Volumetrics_setRenderSettings(lua_State* L) { { int SWIG_arg = 0; ofxVolumetrics *arg1 = (ofxVolumetrics *) 0 ;
    float arg2 ; float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("ofxVolumetrics::setRenderSettings",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVolumetrics::setRenderSettings",1,"ofxVolumetrics *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxVolumetrics::setRenderSettings",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxVolumetrics::setRenderSettings",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxVolumetrics::setRenderSettings",4,"float");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxVolumetrics::setRenderSettings",5,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVolumetrics,0))){
      SWIG_fail_ptr("Volumetrics_setRenderSettings",1,SWIGTYPE_p_ofxVolumetrics); }  arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
    (arg1)->setRenderSettings(arg2,arg3,arg4,arg5); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Volumetrics_setVolumeTextureFilterMode(lua_State* L) { { int SWIG_arg = 0;
    ofxVolumetrics *arg1 = (ofxVolumetrics *) 0 ; GLint arg2 ;
    SWIG_check_num_args("ofxVolumetrics::setVolumeTextureFilterMode",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVolumetrics::setVolumeTextureFilterMode",1,"ofxVolumetrics *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxVolumetrics::setVolumeTextureFilterMode",2,"GLint");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVolumetrics,0))){
      SWIG_fail_ptr("Volumetrics_setVolumeTextureFilterMode",1,SWIGTYPE_p_ofxVolumetrics); }  arg2 = (GLint)lua_tonumber(L, 2);
    (arg1)->setVolumeTextureFilterMode(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Volumetrics_setDrawDebugVolume(lua_State* L) { { int SWIG_arg = 0;
    ofxVolumetrics *arg1 = (ofxVolumetrics *) 0 ; bool arg2 ; SWIG_check_num_args("ofxVolumetrics::setDrawDebugVolume",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVolumetrics::setDrawDebugVolume",1,"ofxVolumetrics *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxVolumetrics::setDrawDebugVolume",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVolumetrics,0))){
      SWIG_fail_ptr("Volumetrics_setDrawDebugVolume",1,SWIGTYPE_p_ofxVolumetrics); }  arg2 = (lua_toboolean(L, 2)!=0);
    (arg1)->setDrawDebugVolume(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static void swig_delete_Volumetrics(void *obj) {
ofxVolumetrics *arg1 = (ofxVolumetrics *) obj;
delete arg1;
}
static int _proxy__wrap_new_Volumetrics(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Volumetrics);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Volumetrics_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Volumetrics_methods[]= {
    { "setup", _wrap_Volumetrics_setup},
    { "destroy", _wrap_Volumetrics_destroy},
    { "updateVolumeData", _wrap_Volumetrics_updateVolumeData},
    { "updateTexture", _wrap_Volumetrics_updateTexture},
    { "drawVolume", _wrap_Volumetrics_drawVolume},
    { "isInitialized", _wrap_Volumetrics_isInitialized},
    { "getVolumeWidth", _wrap_Volumetrics_getVolumeWidth},
    { "getVolumeHeight", _wrap_Volumetrics_getVolumeHeight},
    { "getVolumeDepth", _wrap_Volumetrics_getVolumeDepth},
    { "getFbo", _wrap_Volumetrics_getFbo},
    { "getRenderWidth", _wrap_Volumetrics_getRenderWidth},
    { "getRenderHeight", _wrap_Volumetrics_getRenderHeight},
    { "getXyQuality", _wrap_Volumetrics_getXyQuality},
    { "getZQuality", _wrap_Volumetrics_getZQuality},
    { "getThreshold", _wrap_Volumetrics_getThreshold},
    { "getDensity", _wrap_Volumetrics_getDensity},
    { "getTextureData", _wrap_Volumetrics_getTextureData},
    { "setXyQuality", _wrap_Volumetrics_setXyQuality},
    { "setZQuality", _wrap_Volumetrics_setZQuality},
    { "setThreshold", _wrap_Volumetrics_setThreshold},
    { "setDensity", _wrap_Volumetrics_setDensity},
    { "setRenderSettings", _wrap_Volumetrics_setRenderSettings},
    { "setVolumeTextureFilterMode", _wrap_Volumetrics_setVolumeTextureFilterMode},
    { "setDrawDebugVolume", _wrap_Volumetrics_setDrawDebugVolume},
    {0,0}
};
static swig_lua_method swig_Volumetrics_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Volumetrics_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Volumetrics_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Volumetrics_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Volumetrics_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Volumetrics_Sf_SwigStatic = {
    "Volumetrics",
    swig_Volumetrics_Sf_SwigStatic_methods,
    swig_Volumetrics_Sf_SwigStatic_attributes,
    swig_Volumetrics_Sf_SwigStatic_constants,
    swig_Volumetrics_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Volumetrics_bases[] = {0};
static const char *swig_Volumetrics_base_names[] = {0};
static swig_lua_class _wrap_class_Volumetrics = { "Volumetrics", "Volumetrics", &SWIGTYPE_p_ofxVolumetrics,_proxy__wrap_new_Volumetrics, swig_delete_Volumetrics, swig_Volumetrics_methods, swig_Volumetrics_attributes, &swig_Volumetrics_Sf_SwigStatic, swig_Volumetrics_meta, swig_Volumetrics_bases, swig_Volumetrics_base_names };

static int _wrap_new_ImageSequencePlayer(lua_State* L) { { int SWIG_arg = 0; ofxImageSequencePlayer *result = 0 ;
    SWIG_check_num_args("ofxImageSequencePlayer::ofxImageSequencePlayer",0,0)
    result = (ofxImageSequencePlayer *)new ofxImageSequencePlayer();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxImageSequencePlayer,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImageSequencePlayer_init(lua_State* L) { { int SWIG_arg = 0;
    ofxImageSequencePlayer *arg1 = (ofxImageSequencePlayer *) 0 ; std::string arg2 ; int arg3 ; std::string arg4 ; int arg5 ;
    SWIG_check_num_args("ofxImageSequencePlayer::init",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImageSequencePlayer::init",1,"ofxImageSequencePlayer *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxImageSequencePlayer::init",2,"std::string");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxImageSequencePlayer::init",3,"int");
    if(!lua_isstring(L,4)) SWIG_fail_arg("ofxImageSequencePlayer::init",4,"std::string");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxImageSequencePlayer::init",5,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImageSequencePlayer,0))){
      SWIG_fail_ptr("ImageSequencePlayer_init",1,SWIGTYPE_p_ofxImageSequencePlayer); }  { size_t len;
      const char *ptr = lua_tolstring(L, 2, &len); (&arg2)->assign(ptr, len); }  arg3 = (int)lua_tonumber(L, 3); { size_t len;
      const char *ptr = lua_tolstring(L, 4, &len); (&arg4)->assign(ptr, len); }  arg5 = (int)lua_tonumber(L, 5);
    (arg1)->init(arg2,arg3,arg4,arg5); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImageSequencePlayer_loadNextFrame(lua_State* L) { { int SWIG_arg = 0;
    ofxImageSequencePlayer *arg1 = (ofxImageSequencePlayer *) 0 ; bool result;
    SWIG_check_num_args("ofxImageSequencePlayer::loadNextFrame",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImageSequencePlayer::loadNextFrame",1,"ofxImageSequencePlayer *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImageSequencePlayer,0))){
      SWIG_fail_ptr("ImageSequencePlayer_loadNextFrame",1,SWIGTYPE_p_ofxImageSequencePlayer); } 
    result = (bool)(arg1)->loadNextFrame(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }
   lua_error(L); return 0; }
static int _wrap_ImageSequencePlayer_loadPreviousFrame(lua_State* L) { { int SWIG_arg = 0;
    ofxImageSequencePlayer *arg1 = (ofxImageSequencePlayer *) 0 ; bool result;
    SWIG_check_num_args("ofxImageSequencePlayer::loadPreviousFrame",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImageSequencePlayer::loadPreviousFrame",1,"ofxImageSequencePlayer *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImageSequencePlayer,0))){
      SWIG_fail_ptr("ImageSequencePlayer_loadPreviousFrame",1,SWIGTYPE_p_ofxImageSequencePlayer); } 
    result = (bool)(arg1)->loadPreviousFrame(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImageSequencePlayer_loadFrame(lua_State* L) { { int SWIG_arg = 0;
    ofxImageSequencePlayer *arg1 = (ofxImageSequencePlayer *) 0 ; int arg2 ; bool result;
    SWIG_check_num_args("ofxImageSequencePlayer::loadFrame",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImageSequencePlayer::loadFrame",1,"ofxImageSequencePlayer *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxImageSequencePlayer::loadFrame",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImageSequencePlayer,0))){
      SWIG_fail_ptr("ImageSequencePlayer_loadFrame",1,SWIGTYPE_p_ofxImageSequencePlayer); }  arg2 = (int)lua_tonumber(L, 2);
    result = (bool)(arg1)->loadFrame(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }
   lua_error(L); return 0; }
static int _wrap_ImageSequencePlayer_getCurrentFrameNumber(lua_State* L) { { int SWIG_arg = 0;
    ofxImageSequencePlayer *arg1 = (ofxImageSequencePlayer *) 0 ; int result;
    SWIG_check_num_args("ofxImageSequencePlayer::getCurrentFrameNumber",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImageSequencePlayer::getCurrentFrameNumber",1,"ofxImageSequencePlayer *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImageSequencePlayer,0))){
      SWIG_fail_ptr("ImageSequencePlayer_getCurrentFrameNumber",1,SWIGTYPE_p_ofxImageSequencePlayer); } 
    result = (int)(arg1)->getCurrentFrameNumber(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImageSequencePlayer_setCurrentFrameNumber(lua_State* L) { { int SWIG_arg = 0;
    ofxImageSequencePlayer *arg1 = (ofxImageSequencePlayer *) 0 ; int arg2 ;
    SWIG_check_num_args("ofxImageSequencePlayer::setCurrentFrameNumber",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImageSequencePlayer::setCurrentFrameNumber",1,"ofxImageSequencePlayer *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxImageSequencePlayer::setCurrentFrameNumber",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImageSequencePlayer,0))){
      SWIG_fail_ptr("ImageSequencePlayer_setCurrentFrameNumber",1,SWIGTYPE_p_ofxImageSequencePlayer); } 
    arg2 = (int)lua_tonumber(L, 2); (arg1)->setCurrentFrameNumber(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImageSequencePlayer_getSequenceLength(lua_State* L) { { int SWIG_arg = 0;
    ofxImageSequencePlayer *arg1 = (ofxImageSequencePlayer *) 0 ; int result;
    SWIG_check_num_args("ofxImageSequencePlayer::getSequenceLength",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImageSequencePlayer::getSequenceLength",1,"ofxImageSequencePlayer *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImageSequencePlayer,0))){
      SWIG_fail_ptr("ImageSequencePlayer_getSequenceLength",1,SWIGTYPE_p_ofxImageSequencePlayer); } 
    result = (int)(arg1)->getSequenceLength(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImageSequencePlayer_isInitialized(lua_State* L) { { int SWIG_arg = 0;
    ofxImageSequencePlayer *arg1 = (ofxImageSequencePlayer *) 0 ; bool result;
    SWIG_check_num_args("ofxImageSequencePlayer::isInitialized",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImageSequencePlayer::isInitialized",1,"ofxImageSequencePlayer *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImageSequencePlayer,0))){
      SWIG_fail_ptr("ImageSequencePlayer_isInitialized",1,SWIGTYPE_p_ofxImageSequencePlayer); } 
    result = (bool)(arg1)->isInitialized(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }
   lua_error(L); return 0; }
static int _wrap_ImageSequencePlayer_generateFullFilename(lua_State* L) { { int SWIG_arg = 0;
    ofxImageSequencePlayer *arg1 = (ofxImageSequencePlayer *) 0 ; string result;
    SWIG_check_num_args("ofxImageSequencePlayer::generateFullFilename",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImageSequencePlayer::generateFullFilename",1,"ofxImageSequencePlayer *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImageSequencePlayer,0))){
      SWIG_fail_ptr("ImageSequencePlayer_generateFullFilename",1,SWIGTYPE_p_ofxImageSequencePlayer); } 
    result = (arg1)->generateFullFilename(); { string * resultptr = new string(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_string,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static void swig_delete_ImageSequencePlayer(void *obj) {
ofxImageSequencePlayer *arg1 = (ofxImageSequencePlayer *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImageSequencePlayer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImageSequencePlayer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImageSequencePlayer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ImageSequencePlayer_methods[]= {
    { "init", _wrap_ImageSequencePlayer_init},
    { "loadNextFrame", _wrap_ImageSequencePlayer_loadNextFrame},
    { "loadPreviousFrame", _wrap_ImageSequencePlayer_loadPreviousFrame},
    { "loadFrame", _wrap_ImageSequencePlayer_loadFrame},
    { "getCurrentFrameNumber", _wrap_ImageSequencePlayer_getCurrentFrameNumber},
    { "setCurrentFrameNumber", _wrap_ImageSequencePlayer_setCurrentFrameNumber},
    { "getSequenceLength", _wrap_ImageSequencePlayer_getSequenceLength},
    { "isInitialized", _wrap_ImageSequencePlayer_isInitialized},
    { "generateFullFilename", _wrap_ImageSequencePlayer_generateFullFilename},
    {0,0}
};
static swig_lua_method swig_ImageSequencePlayer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImageSequencePlayer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImageSequencePlayer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImageSequencePlayer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImageSequencePlayer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImageSequencePlayer_Sf_SwigStatic = {
    "ImageSequencePlayer",
    swig_ImageSequencePlayer_Sf_SwigStatic_methods,
    swig_ImageSequencePlayer_Sf_SwigStatic_attributes,
    swig_ImageSequencePlayer_Sf_SwigStatic_constants,
    swig_ImageSequencePlayer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImageSequencePlayer_bases[] = {0,0};
static const char *swig_ImageSequencePlayer_base_names[] = {"ofImage_< unsigned char > *",0};
static swig_lua_class _wrap_class_ImageSequencePlayer = { "ImageSequencePlayer", "ImageSequencePlayer", &SWIGTYPE_p_ofxImageSequencePlayer,_proxy__wrap_new_ImageSequencePlayer, swig_delete_ImageSequencePlayer, swig_ImageSequencePlayer_methods, swig_ImageSequencePlayer_attributes, &swig_ImageSequencePlayer_Sf_SwigStatic, swig_ImageSequencePlayer_meta, swig_ImageSequencePlayer_bases, swig_ImageSequencePlayer_base_names };

static int _wrap_sd_type_name(lua_State* L) { { int SWIG_arg = 0; enum sd_type_t arg1 ; char *result = 0 ;
    SWIG_check_num_args("sd_type_name",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("sd_type_name",1,"enum sd_type_t");
    arg1 = (enum sd_type_t)(int)lua_tonumber(L, 1); result = (char *)sd_type_name(arg1);
    lua_pushstring(L,(const char *)result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_sd_set_log_callback(lua_State* L) { { int SWIG_arg = 0; sd_log_cb_t arg1 = (sd_log_cb_t) 0 ;
    void *arg2 = (void *) 0 ; SWIG_check_num_args("sd_set_log_callback",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sd_set_log_callback",1,"sd_log_cb_t");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sd_set_log_callback",2,"void *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_f_enum_sd_log_level_t_p_q_const__char_p_void__void,0))){
      SWIG_fail_ptr("sd_set_log_callback",1,SWIGTYPE_p_f_enum_sd_log_level_t_p_q_const__char_p_void__void); } 
    arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"sd_set_log_callback"); sd_set_log_callback(arg1,arg2); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_sd_set_progress_callback(lua_State* L) { { int SWIG_arg = 0; sd_progress_cb_t arg1 = (sd_progress_cb_t) 0 ;
    void *arg2 = (void *) 0 ; SWIG_check_num_args("sd_set_progress_callback",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sd_set_progress_callback",1,"sd_progress_cb_t");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sd_set_progress_callback",2,"void *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_f_int_int_float_p_void__void,0))){
      SWIG_fail_ptr("sd_set_progress_callback",1,SWIGTYPE_p_f_int_int_float_p_void__void); } 
    arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"sd_set_progress_callback"); sd_set_progress_callback(arg1,arg2); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_get_num_physical_cores(lua_State* L) { { int SWIG_arg = 0; int32_t result;
    SWIG_check_num_args("get_num_physical_cores",0,0) result = (int32_t)get_num_physical_cores();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_sd_get_system_info(lua_State* L) { { int SWIG_arg = 0; char *result = 0 ;
    SWIG_check_num_args("sd_get_system_info",0,0) result = (char *)sd_get_system_info();
    lua_pushstring(L,(const char *)result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_sd_image_t_width_set(lua_State* L) { { int SWIG_arg = 0; sd_image_t *arg1 = (sd_image_t *) 0 ; uint32_t arg2 ;
    SWIG_check_num_args("sd_image_t::width",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sd_image_t::width",1,"sd_image_t *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("sd_image_t::width",2,"uint32_t");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sd_image_t,0))){
      SWIG_fail_ptr("sd_image_t_width_set",1,SWIGTYPE_p_sd_image_t); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (uint32_t)lua_tonumber(L, 2);
    if (arg1) (arg1)->width = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_sd_image_t_width_get(lua_State* L) { { int SWIG_arg = 0; sd_image_t *arg1 = (sd_image_t *) 0 ; uint32_t result;
    SWIG_check_num_args("sd_image_t::width",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sd_image_t::width",1,"sd_image_t *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sd_image_t,0))){
      SWIG_fail_ptr("sd_image_t_width_get",1,SWIGTYPE_p_sd_image_t); }  result = (uint32_t) ((arg1)->width);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_sd_image_t_height_set(lua_State* L) { { int SWIG_arg = 0; sd_image_t *arg1 = (sd_image_t *) 0 ; uint32_t arg2 ;
    SWIG_check_num_args("sd_image_t::height",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sd_image_t::height",1,"sd_image_t *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("sd_image_t::height",2,"uint32_t");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sd_image_t,0))){
      SWIG_fail_ptr("sd_image_t_height_set",1,SWIGTYPE_p_sd_image_t); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (uint32_t)lua_tonumber(L, 2);
    if (arg1) (arg1)->height = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_sd_image_t_height_get(lua_State* L) { { int SWIG_arg = 0; sd_image_t *arg1 = (sd_image_t *) 0 ;
    uint32_t result; SWIG_check_num_args("sd_image_t::height",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sd_image_t::height",1,"sd_image_t *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sd_image_t,0))){
      SWIG_fail_ptr("sd_image_t_height_get",1,SWIGTYPE_p_sd_image_t); }  result = (uint32_t) ((arg1)->height);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_sd_image_t_channel_set(lua_State* L) { { int SWIG_arg = 0; sd_image_t *arg1 = (sd_image_t *) 0 ;
    uint32_t arg2 ; SWIG_check_num_args("sd_image_t::channel",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sd_image_t::channel",1,"sd_image_t *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("sd_image_t::channel",2,"uint32_t");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sd_image_t,0))){
      SWIG_fail_ptr("sd_image_t_channel_set",1,SWIGTYPE_p_sd_image_t); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (uint32_t)lua_tonumber(L, 2);
    if (arg1) (arg1)->channel = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_sd_image_t_channel_get(lua_State* L) { { int SWIG_arg = 0; sd_image_t *arg1 = (sd_image_t *) 0 ;
    uint32_t result; SWIG_check_num_args("sd_image_t::channel",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sd_image_t::channel",1,"sd_image_t *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sd_image_t,0))){
      SWIG_fail_ptr("sd_image_t_channel_get",1,SWIGTYPE_p_sd_image_t); }  result = (uint32_t) ((arg1)->channel);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_sd_image_t_data_set(lua_State* L) { { int SWIG_arg = 0; sd_image_t *arg1 = (sd_image_t *) 0 ;
    uint8_t *arg2 = (uint8_t *) 0 ; SWIG_check_num_args("sd_image_t::data",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sd_image_t::data",1,"sd_image_t *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sd_image_t::data",2,"uint8_t *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sd_image_t,0))){
      SWIG_fail_ptr("sd_image_t_data_set",1,SWIGTYPE_p_sd_image_t); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("sd_image_t_data_set",2,SWIGTYPE_p_unsigned_char); }  if (arg1) (arg1)->data = arg2; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_sd_image_t_data_get(lua_State* L) { { int SWIG_arg = 0; sd_image_t *arg1 = (sd_image_t *) 0 ;
    uint8_t *result = 0 ; SWIG_check_num_args("sd_image_t::data",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sd_image_t::data",1,"sd_image_t *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sd_image_t,0))){
      SWIG_fail_ptr("sd_image_t_data_get",1,SWIGTYPE_p_sd_image_t); }  result = (uint8_t *) ((arg1)->data);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_new_sd_image_t(lua_State* L) { { int SWIG_arg = 0; sd_image_t *result = 0 ;
    SWIG_check_num_args("sd_image_t::sd_image_t",0,0) result = (sd_image_t *)new sd_image_t();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_sd_image_t,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static void swig_delete_sd_image_t(void *obj) {
sd_image_t *arg1 = (sd_image_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_sd_image_t(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sd_image_t);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sd_image_t_attributes[] = {
    { "width", _wrap_sd_image_t_width_get, _wrap_sd_image_t_width_set },
    { "height", _wrap_sd_image_t_height_get, _wrap_sd_image_t_height_set },
    { "channel", _wrap_sd_image_t_channel_get, _wrap_sd_image_t_channel_set },
    { "data", _wrap_sd_image_t_data_get, _wrap_sd_image_t_data_set },
    {0,0,0}
};
static swig_lua_method swig_sd_image_t_methods[]= {
    {0,0}
};
static swig_lua_method swig_sd_image_t_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sd_image_t_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sd_image_t_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sd_image_t_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sd_image_t_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sd_image_t_Sf_SwigStatic = {
    "sd_image_t",
    swig_sd_image_t_Sf_SwigStatic_methods,
    swig_sd_image_t_Sf_SwigStatic_attributes,
    swig_sd_image_t_Sf_SwigStatic_constants,
    swig_sd_image_t_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sd_image_t_bases[] = {0};
static const char *swig_sd_image_t_base_names[] = {0};
static swig_lua_class _wrap_class_sd_image_t = { "sd_image_t", "sd_image_t", &SWIGTYPE_p_sd_image_t,_proxy__wrap_new_sd_image_t, swig_delete_sd_image_t, swig_sd_image_t_methods, swig_sd_image_t_attributes, &swig_sd_image_t_Sf_SwigStatic, swig_sd_image_t_meta, swig_sd_image_t_bases, swig_sd_image_t_base_names };

static int _wrap_new_sd_ctx(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ; char *arg4 = (char *) 0 ; char *arg5 = (char *) 0 ; char *arg6 = (char *) 0 ;
    char *arg7 = (char *) 0 ; bool arg8 ; bool arg9 ; bool arg10 ; int arg11 ; enum sd_type_t arg12 ; enum rng_type_t arg13 ;
    enum schedule_t arg14 ; bool arg15 ; bool arg16 ; bool arg17 ; sd_ctx_t *result = 0 ;
    SWIG_check_num_args("new_sd_ctx",17,17) if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("new_sd_ctx",1,"char const *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("new_sd_ctx",2,"char const *");
    if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("new_sd_ctx",3,"char const *");
    if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("new_sd_ctx",4,"char const *");
    if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("new_sd_ctx",5,"char const *");
    if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("new_sd_ctx",6,"char const *");
    if(!SWIG_lua_isnilstring(L,7)) SWIG_fail_arg("new_sd_ctx",7,"char const *");
    if(!lua_isboolean(L,8)) SWIG_fail_arg("new_sd_ctx",8,"bool"); if(!lua_isboolean(L,9)) SWIG_fail_arg("new_sd_ctx",9,"bool");
    if(!lua_isboolean(L,10)) SWIG_fail_arg("new_sd_ctx",10,"bool");
    if(!lua_isnumber(L,11)) SWIG_fail_arg("new_sd_ctx",11,"int");
    if(!lua_isnumber(L,12)) SWIG_fail_arg("new_sd_ctx",12,"enum sd_type_t");
    if(!lua_isnumber(L,13)) SWIG_fail_arg("new_sd_ctx",13,"enum rng_type_t");
    if(!lua_isnumber(L,14)) SWIG_fail_arg("new_sd_ctx",14,"enum schedule_t");
    if(!lua_isboolean(L,15)) SWIG_fail_arg("new_sd_ctx",15,"bool");
    if(!lua_isboolean(L,16)) SWIG_fail_arg("new_sd_ctx",16,"bool");
    if(!lua_isboolean(L,17)) SWIG_fail_arg("new_sd_ctx",17,"bool"); arg1 = (char *)lua_tostring(L, 1);
    arg2 = (char *)lua_tostring(L, 2); arg3 = (char *)lua_tostring(L, 3); arg4 = (char *)lua_tostring(L, 4);
    arg5 = (char *)lua_tostring(L, 5); arg6 = (char *)lua_tostring(L, 6); arg7 = (char *)lua_tostring(L, 7);
    arg8 = (lua_toboolean(L, 8)!=0); arg9 = (lua_toboolean(L, 9)!=0); arg10 = (lua_toboolean(L, 10)!=0);
    arg11 = (int)lua_tonumber(L, 11); arg12 = (enum sd_type_t)(int)lua_tonumber(L, 12);
    arg13 = (enum rng_type_t)(int)lua_tonumber(L, 13); arg14 = (enum schedule_t)(int)lua_tonumber(L, 14);
    arg15 = (lua_toboolean(L, 15)!=0); arg16 = (lua_toboolean(L, 16)!=0); arg17 = (lua_toboolean(L, 17)!=0);
    result = (sd_ctx_t *)new_sd_ctx((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_sd_ctx_t,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_free_sd_ctx(lua_State* L) { { int SWIG_arg = 0; sd_ctx_t *arg1 = (sd_ctx_t *) 0 ;
    SWIG_check_num_args("free_sd_ctx",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("free_sd_ctx",1,"sd_ctx_t *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sd_ctx_t,0))){
      SWIG_fail_ptr("free_sd_ctx",1,SWIGTYPE_p_sd_ctx_t); }  free_sd_ctx(arg1); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_txt2img(lua_State* L) { { int SWIG_arg = 0; sd_ctx_t *arg1 = (sd_ctx_t *) 0 ; char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ; int arg4 ; float arg5 ; int arg6 ; int arg7 ; enum sample_method_t arg8 ; int arg9 ;
    int64_t arg10 ; int arg11 ; sd_image_t *arg12 = (sd_image_t *) 0 ; float arg13 ; float arg14 ; bool arg15 ;
    char *arg16 = (char *) 0 ; sd_image_t *result = 0 ; SWIG_check_num_args("txt2img",16,16)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("txt2img",1,"sd_ctx_t *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("txt2img",2,"char const *");
    if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("txt2img",3,"char const *");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("txt2img",4,"int"); if(!lua_isnumber(L,5)) SWIG_fail_arg("txt2img",5,"float");
    if(!lua_isnumber(L,6)) SWIG_fail_arg("txt2img",6,"int"); if(!lua_isnumber(L,7)) SWIG_fail_arg("txt2img",7,"int");
    if(!lua_isnumber(L,8)) SWIG_fail_arg("txt2img",8,"enum sample_method_t");
    if(!lua_isnumber(L,9)) SWIG_fail_arg("txt2img",9,"int"); if(!lua_isnumber(L,10)) SWIG_fail_arg("txt2img",10,"int64_t");
    if(!lua_isnumber(L,11)) SWIG_fail_arg("txt2img",11,"int");
    if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("txt2img",12,"sd_image_t const *");
    if(!lua_isnumber(L,13)) SWIG_fail_arg("txt2img",13,"float"); if(!lua_isnumber(L,14)) SWIG_fail_arg("txt2img",14,"float");
    if(!lua_isboolean(L,15)) SWIG_fail_arg("txt2img",15,"bool");
    if(!SWIG_lua_isnilstring(L,16)) SWIG_fail_arg("txt2img",16,"char const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sd_ctx_t,0))){ SWIG_fail_ptr("txt2img",1,SWIGTYPE_p_sd_ctx_t); }
     arg2 = (char *)lua_tostring(L, 2); arg3 = (char *)lua_tostring(L, 3); arg4 = (int)lua_tonumber(L, 4);
    arg5 = (float)lua_tonumber(L, 5); arg6 = (int)lua_tonumber(L, 6); arg7 = (int)lua_tonumber(L, 7);
    arg8 = (enum sample_method_t)(int)lua_tonumber(L, 8); arg9 = (int)lua_tonumber(L, 9); arg10 = (int64_t)lua_tonumber(L, 10);
    arg11 = (int)lua_tonumber(L, 11); if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_sd_image_t,0))){
      SWIG_fail_ptr("txt2img",12,SWIGTYPE_p_sd_image_t); }  arg13 = (float)lua_tonumber(L, 13);
    arg14 = (float)lua_tonumber(L, 14); arg15 = (lua_toboolean(L, 15)!=0); arg16 = (char *)lua_tostring(L, 16);
    result = (sd_image_t *)txt2img(arg1,(char const *)arg2,(char const *)arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,(sd_image_t const *)arg12,arg13,arg14,arg15,(char const *)arg16);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_sd_image_t,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_img2img(lua_State* L) { { int SWIG_arg = 0; sd_ctx_t *arg1 = (sd_ctx_t *) 0 ; sd_image_t arg2 ;
    char *arg3 = (char *) 0 ; char *arg4 = (char *) 0 ; int arg5 ; float arg6 ; int arg7 ; int arg8 ;
    enum sample_method_t arg9 ; int arg10 ; float arg11 ; int64_t arg12 ; int arg13 ; sd_image_t *argp2 ;
    sd_image_t *result = 0 ; SWIG_check_num_args("img2img",13,13)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("img2img",1,"sd_ctx_t *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("img2img",2,"sd_image_t");
    if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("img2img",3,"char const *");
    if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("img2img",4,"char const *");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("img2img",5,"int"); if(!lua_isnumber(L,6)) SWIG_fail_arg("img2img",6,"float");
    if(!lua_isnumber(L,7)) SWIG_fail_arg("img2img",7,"int"); if(!lua_isnumber(L,8)) SWIG_fail_arg("img2img",8,"int");
    if(!lua_isnumber(L,9)) SWIG_fail_arg("img2img",9,"enum sample_method_t");
    if(!lua_isnumber(L,10)) SWIG_fail_arg("img2img",10,"int"); if(!lua_isnumber(L,11)) SWIG_fail_arg("img2img",11,"float");
    if(!lua_isnumber(L,12)) SWIG_fail_arg("img2img",12,"int64_t"); if(!lua_isnumber(L,13)) SWIG_fail_arg("img2img",13,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sd_ctx_t,0))){ SWIG_fail_ptr("img2img",1,SWIGTYPE_p_sd_ctx_t); }
     if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_sd_image_t,0))){
      SWIG_fail_ptr("img2img",2,SWIGTYPE_p_sd_image_t); }  arg2 = *argp2; arg3 = (char *)lua_tostring(L, 3);
    arg4 = (char *)lua_tostring(L, 4); arg5 = (int)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6);
    arg7 = (int)lua_tonumber(L, 7); arg8 = (int)lua_tonumber(L, 8); arg9 = (enum sample_method_t)(int)lua_tonumber(L, 9);
    arg10 = (int)lua_tonumber(L, 10); arg11 = (float)lua_tonumber(L, 11); arg12 = (int64_t)lua_tonumber(L, 12);
    arg13 = (int)lua_tonumber(L, 13);
    result = (sd_image_t *)img2img(arg1,SWIG_STD_MOVE(arg2),(char const *)arg3,(char const *)arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_sd_image_t,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_img2vid(lua_State* L) { { int SWIG_arg = 0; sd_ctx_t *arg1 = (sd_ctx_t *) 0 ; sd_image_t arg2 ; int arg3 ;
    int arg4 ; int arg5 ; int arg6 ; int arg7 ; float arg8 ; float arg9 ; float arg10 ; enum sample_method_t arg11 ; int arg12 ;
    float arg13 ; int64_t arg14 ; sd_image_t *argp2 ; sd_image_t *result = 0 ; SWIG_check_num_args("img2vid",14,14)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("img2vid",1,"sd_ctx_t *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("img2vid",2,"sd_image_t"); if(!lua_isnumber(L,3)) SWIG_fail_arg("img2vid",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("img2vid",4,"int"); if(!lua_isnumber(L,5)) SWIG_fail_arg("img2vid",5,"int");
    if(!lua_isnumber(L,6)) SWIG_fail_arg("img2vid",6,"int"); if(!lua_isnumber(L,7)) SWIG_fail_arg("img2vid",7,"int");
    if(!lua_isnumber(L,8)) SWIG_fail_arg("img2vid",8,"float"); if(!lua_isnumber(L,9)) SWIG_fail_arg("img2vid",9,"float");
    if(!lua_isnumber(L,10)) SWIG_fail_arg("img2vid",10,"float");
    if(!lua_isnumber(L,11)) SWIG_fail_arg("img2vid",11,"enum sample_method_t");
    if(!lua_isnumber(L,12)) SWIG_fail_arg("img2vid",12,"int"); if(!lua_isnumber(L,13)) SWIG_fail_arg("img2vid",13,"float");
    if(!lua_isnumber(L,14)) SWIG_fail_arg("img2vid",14,"int64_t");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sd_ctx_t,0))){ SWIG_fail_ptr("img2vid",1,SWIGTYPE_p_sd_ctx_t); }
     if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_sd_image_t,0))){
      SWIG_fail_ptr("img2vid",2,SWIGTYPE_p_sd_image_t); }  arg2 = *argp2; arg3 = (int)lua_tonumber(L, 3);
    arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); arg6 = (int)lua_tonumber(L, 6);
    arg7 = (int)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8); arg9 = (float)lua_tonumber(L, 9);
    arg10 = (float)lua_tonumber(L, 10); arg11 = (enum sample_method_t)(int)lua_tonumber(L, 11);
    arg12 = (int)lua_tonumber(L, 12); arg13 = (float)lua_tonumber(L, 13); arg14 = (int64_t)lua_tonumber(L, 14);
    result = (sd_image_t *)img2vid(arg1,SWIG_STD_MOVE(arg2),arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_sd_image_t,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_new_upscaler_ctx(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; int arg2 ; enum sd_type_t arg3 ;
    upscaler_ctx_t *result = 0 ; SWIG_check_num_args("new_upscaler_ctx",3,3)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("new_upscaler_ctx",1,"char const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("new_upscaler_ctx",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("new_upscaler_ctx",3,"enum sd_type_t"); arg1 = (char *)lua_tostring(L, 1);
    arg2 = (int)lua_tonumber(L, 2); arg3 = (enum sd_type_t)(int)lua_tonumber(L, 3);
    result = (upscaler_ctx_t *)new_upscaler_ctx((char const *)arg1,arg2,arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_upscaler_ctx_t,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_free_upscaler_ctx(lua_State* L) { { int SWIG_arg = 0; upscaler_ctx_t *arg1 = (upscaler_ctx_t *) 0 ;
    SWIG_check_num_args("free_upscaler_ctx",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("free_upscaler_ctx",1,"upscaler_ctx_t *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_upscaler_ctx_t,0))){
      SWIG_fail_ptr("free_upscaler_ctx",1,SWIGTYPE_p_upscaler_ctx_t); }  free_upscaler_ctx(arg1); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_upscale(lua_State* L) { { int SWIG_arg = 0; upscaler_ctx_t *arg1 = (upscaler_ctx_t *) 0 ; sd_image_t arg2 ;
    uint32_t arg3 ; sd_image_t *argp2 ; sd_image_t result; SWIG_check_num_args("upscale",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("upscale",1,"upscaler_ctx_t *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("upscale",2,"sd_image_t");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("upscale",3,"uint32_t");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_upscaler_ctx_t,0))){
      SWIG_fail_ptr("upscale",1,SWIGTYPE_p_upscaler_ctx_t); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_sd_image_t,0))){
      SWIG_fail_ptr("upscale",2,SWIGTYPE_p_sd_image_t); }  arg2 = *argp2;
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative"); arg3 = (uint32_t)lua_tonumber(L, 3);
    result = upscale(arg1,SWIG_STD_MOVE(arg2),arg3); { sd_image_t * resultptr = new sd_image_t(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_sd_image_t,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_convert(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ; sd_type_t arg4 ; bool result; SWIG_check_num_args("convert",4,4)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("convert",1,"char const *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("convert",2,"char const *");
    if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("convert",3,"char const *");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("convert",4,"sd_type_t"); arg1 = (char *)lua_tostring(L, 1);
    arg2 = (char *)lua_tostring(L, 2); arg3 = (char *)lua_tostring(L, 3); arg4 = (sd_type_t)(int)lua_tonumber(L, 4);
    result = (bool)convert((char const *)arg1,(char const *)arg2,(char const *)arg3,arg4);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_preprocess_canny(lua_State* L) { { int SWIG_arg = 0; uint8_t *arg1 = (uint8_t *) 0 ; int arg2 ; int arg3 ;
    float arg4 ; float arg5 ; float arg6 ; float arg7 ; bool arg8 ; uint8_t *result = 0 ;
    SWIG_check_num_args("preprocess_canny",8,8) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("preprocess_canny",1,"uint8_t *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("preprocess_canny",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("preprocess_canny",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("preprocess_canny",4,"float");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("preprocess_canny",5,"float");
    if(!lua_isnumber(L,6)) SWIG_fail_arg("preprocess_canny",6,"float");
    if(!lua_isnumber(L,7)) SWIG_fail_arg("preprocess_canny",7,"float");
    if(!lua_isboolean(L,8)) SWIG_fail_arg("preprocess_canny",8,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_unsigned_char,0))){
      SWIG_fail_ptr("preprocess_canny",1,SWIGTYPE_p_unsigned_char); }  arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
    arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (lua_toboolean(L, 8)!=0);
    result = (uint8_t *)preprocess_canny(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_new_ImGuiContext__SWIG_0(lua_State* L) { { int SWIG_arg = 0; std::shared_ptr< ofAppBaseWindow > *arg1 = 0 ;
    ofxImGuiContext *result = 0 ; SWIG_check_num_args("ofxImGuiContext::ofxImGuiContext",1,1)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofxImGuiContext::ofxImGuiContext",1,"std::shared_ptr< ofAppBaseWindow > &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__shared_ptrT_ofAppBaseWindow_t,0))){
      SWIG_fail_ptr("new_ImGuiContext",1,SWIGTYPE_p_std__shared_ptrT_ofAppBaseWindow_t); } 
    result = (ofxImGuiContext *)new ofxImGuiContext(*arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxImGuiContext,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_new_ImGuiContext__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxImGuiContext *arg1 = 0 ; void *argp1 = 0 ;
    int res1 = 0 ; std::unique_ptr< ofxImGuiContext > rvrdeleter1 ; ofxImGuiContext *result = 0 ;
    SWIG_check_num_args("ofxImGuiContext::ofxImGuiContext",1,1)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofxImGuiContext::ofxImGuiContext",1,"ofxImGuiContext &&");
    res1 = SWIG_ConvertPtr(L, 1, &argp1, SWIGTYPE_p_ofxImGuiContext, SWIG_POINTER_RELEASE); if (!SWIG_IsOK(res1)) {
      if (res1 == SWIG_ERROR_RELEASE_NOT_OWNED) {
        lua_pushfstring(L, "Cannot release ownership as memory is not owned for argument 1 of type 'ofxImGuiContext &&' in new_ImGuiContext"); SWIG_fail; }
       else { SWIG_fail_ptr("new_ImGuiContext", 1, SWIGTYPE_p_ofxImGuiContext); }  }  arg1 = (ofxImGuiContext *)argp1;
    rvrdeleter1.reset(arg1); result = (ofxImGuiContext *)new ofxImGuiContext((ofxImGuiContext &&)*arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxImGuiContext,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_new_ImGuiContext(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v = 0; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__shared_ptrT_ofAppBaseWindow_t, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_ImGuiContext__SWIG_0(L);}  }  if (argc == 1) { int _v = 0; {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxImGuiContext, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_ImGuiContext__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ImGuiContext'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxImGuiContext::ofxImGuiContext(std::shared_ptr< ofAppBaseWindow > &)\n"
  "    ofxImGuiContext::ofxImGuiContext(ofxImGuiContext &&)\n"); lua_error(L);return 0; }
static int _wrap_ImGuiContext_imguiContext_set(lua_State* L) { { int SWIG_arg = 0;
    ofxImGuiContext *arg1 = (ofxImGuiContext *) 0 ; ImGuiContext *arg2 = (ImGuiContext *) 0 ;
    SWIG_check_num_args("ofxImGuiContext::imguiContext",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGuiContext::imguiContext",1,"ofxImGuiContext *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxImGuiContext::imguiContext",2,"ImGuiContext *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGuiContext,0))){
      SWIG_fail_ptr("ImGuiContext_imguiContext_set",1,SWIGTYPE_p_ofxImGuiContext); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiContext,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("ImGuiContext_imguiContext_set",2,SWIGTYPE_p_ImGuiContext); }  if (arg1) (arg1)->imguiContext = arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiContext_imguiContext_get(lua_State* L) { { int SWIG_arg = 0;
    ofxImGuiContext *arg1 = (ofxImGuiContext *) 0 ; ImGuiContext *result = 0 ;
    SWIG_check_num_args("ofxImGuiContext::imguiContext",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGuiContext::imguiContext",1,"ofxImGuiContext *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGuiContext,0))){
      SWIG_fail_ptr("ImGuiContext_imguiContext_get",1,SWIGTYPE_p_ofxImGuiContext); } 
    result = (ImGuiContext *) ((arg1)->imguiContext); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiContext,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiContext_ofWindow_set(lua_State* L) { { int SWIG_arg = 0; ofxImGuiContext *arg1 = (ofxImGuiContext *) 0 ;
    std::shared_ptr< ofAppBaseWindow > *arg2 = (std::shared_ptr< ofAppBaseWindow > *) 0 ;
    SWIG_check_num_args("ofxImGuiContext::ofWindow",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGuiContext::ofWindow",1,"ofxImGuiContext *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxImGuiContext::ofWindow",2,"std::shared_ptr< ofAppBaseWindow > *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGuiContext,0))){
      SWIG_fail_ptr("ImGuiContext_ofWindow_set",1,SWIGTYPE_p_ofxImGuiContext); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__shared_ptrT_ofAppBaseWindow_t,0))){
      SWIG_fail_ptr("ImGuiContext_ofWindow_set",2,SWIGTYPE_p_std__shared_ptrT_ofAppBaseWindow_t); } 
    if (arg1) (arg1)->ofWindow = *arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiContext_ofWindow_get(lua_State* L) { { int SWIG_arg = 0; ofxImGuiContext *arg1 = (ofxImGuiContext *) 0 ;
    std::shared_ptr< ofAppBaseWindow > *result = 0 ; SWIG_check_num_args("ofxImGuiContext::ofWindow",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGuiContext::ofWindow",1,"ofxImGuiContext *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGuiContext,0))){
      SWIG_fail_ptr("ImGuiContext_ofWindow_get",1,SWIGTYPE_p_ofxImGuiContext); } 
    result = (std::shared_ptr< ofAppBaseWindow > *)& ((arg1)->ofWindow);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__shared_ptrT_ofAppBaseWindow_t,0); SWIG_arg++;  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiContext_autoDraw_set(lua_State* L) { { int SWIG_arg = 0; ofxImGuiContext *arg1 = (ofxImGuiContext *) 0 ;
    bool arg2 ; SWIG_check_num_args("ofxImGuiContext::autoDraw",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGuiContext::autoDraw",1,"ofxImGuiContext *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxImGuiContext::autoDraw",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGuiContext,0))){
      SWIG_fail_ptr("ImGuiContext_autoDraw_set",1,SWIGTYPE_p_ofxImGuiContext); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->autoDraw = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiContext_autoDraw_get(lua_State* L) { { int SWIG_arg = 0; ofxImGuiContext *arg1 = (ofxImGuiContext *) 0 ;
    bool result; SWIG_check_num_args("ofxImGuiContext::autoDraw",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGuiContext::autoDraw",1,"ofxImGuiContext *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGuiContext,0))){
      SWIG_fail_ptr("ImGuiContext_autoDraw_get",1,SWIGTYPE_p_ofxImGuiContext); }  result = (bool) ((arg1)->autoDraw);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiContext_isShared(lua_State* L) { { int SWIG_arg = 0; ofxImGuiContext *arg1 = (ofxImGuiContext *) 0 ;
    bool result; SWIG_check_num_args("ofxImGuiContext::isShared",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGuiContext::isShared",1,"ofxImGuiContext const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGuiContext,0))){
      SWIG_fail_ptr("ImGuiContext_isShared",1,SWIGTYPE_p_ofxImGuiContext); } 
    result = (bool)((ofxImGuiContext const *)arg1)->isShared(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static void swig_delete_ImGuiContext(void *obj) {
ofxImGuiContext *arg1 = (ofxImGuiContext *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiContext(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiContext);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiContext_attributes[] = {
    { "imguiContext", _wrap_ImGuiContext_imguiContext_get, _wrap_ImGuiContext_imguiContext_set },
    { "ofWindow", _wrap_ImGuiContext_ofWindow_get, _wrap_ImGuiContext_ofWindow_set },
    { "autoDraw", _wrap_ImGuiContext_autoDraw_get, _wrap_ImGuiContext_autoDraw_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiContext_methods[]= {
    { "isShared", _wrap_ImGuiContext_isShared},
    {0,0}
};
static swig_lua_method swig_ImGuiContext_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiContext_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiContext_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiContext_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiContext_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiContext_Sf_SwigStatic = {
    "ImGuiContext",
    swig_ImGuiContext_Sf_SwigStatic_methods,
    swig_ImGuiContext_Sf_SwigStatic_attributes,
    swig_ImGuiContext_Sf_SwigStatic_constants,
    swig_ImGuiContext_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiContext_bases[] = {0};
static const char *swig_ImGuiContext_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiContext = { "ImGuiContext", "ImGuiContext", &SWIGTYPE_p_ofxImGuiContext,_proxy__wrap_new_ImGuiContext, swig_delete_ImGuiContext, swig_ImGuiContext_methods, swig_ImGuiContext_attributes, &swig_ImGuiContext_Sf_SwigStatic, swig_ImGuiContext_meta, swig_ImGuiContext_bases, swig_ImGuiContext_base_names };

static int _wrap_new_ImGui(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *result = 0 ;
    SWIG_check_num_args("ofxImGui::Gui::Gui",0,0) result = (ofxImGui::Gui *)new ofxImGui::Gui();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxImGui__Gui,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGui_setup__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    BaseTheme *arg2 = (BaseTheme *) 0 ; bool arg3 ; ImGuiConfigFlags arg4 ; bool arg5 ; bool arg6 ; ImGuiConfigFlags *argp4 ;
    ofxImGui::SetupState result; SWIG_check_num_args("ofxImGui::Gui::setup",6,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::setup",1,"ofxImGui::Gui *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxImGui::Gui::setup",2,"BaseTheme *");
    if(!lua_isboolean(L,3)) SWIG_fail_arg("ofxImGui::Gui::setup",3,"bool");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofxImGui::Gui::setup",4,"ImGuiConfigFlags");
    if(!lua_isboolean(L,5)) SWIG_fail_arg("ofxImGui::Gui::setup",5,"bool");
    if(!lua_isboolean(L,6)) SWIG_fail_arg("ofxImGui::Gui::setup",6,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("ImGui_setup",1,SWIGTYPE_p_ofxImGui__Gui); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BaseTheme,0))){
      SWIG_fail_ptr("ImGui_setup",2,SWIGTYPE_p_BaseTheme); }  arg3 = (lua_toboolean(L, 3)!=0);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_ImGuiConfigFlags,0))){
      SWIG_fail_ptr("ImGui_setup",4,SWIGTYPE_p_ImGuiConfigFlags); }  arg4 = *argp4; arg5 = (lua_toboolean(L, 5)!=0);
    arg6 = (lua_toboolean(L, 6)!=0); result = (ofxImGui::SetupState)(arg1)->setup(arg2,arg3,arg4,arg5,arg6);
    lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGui_setup__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    BaseTheme *arg2 = (BaseTheme *) 0 ; bool arg3 ; ImGuiConfigFlags arg4 ; bool arg5 ; ImGuiConfigFlags *argp4 ;
    ofxImGui::SetupState result; SWIG_check_num_args("ofxImGui::Gui::setup",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::setup",1,"ofxImGui::Gui *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxImGui::Gui::setup",2,"BaseTheme *");
    if(!lua_isboolean(L,3)) SWIG_fail_arg("ofxImGui::Gui::setup",3,"bool");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofxImGui::Gui::setup",4,"ImGuiConfigFlags");
    if(!lua_isboolean(L,5)) SWIG_fail_arg("ofxImGui::Gui::setup",5,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("ImGui_setup",1,SWIGTYPE_p_ofxImGui__Gui); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BaseTheme,0))){
      SWIG_fail_ptr("ImGui_setup",2,SWIGTYPE_p_BaseTheme); }  arg3 = (lua_toboolean(L, 3)!=0);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_ImGuiConfigFlags,0))){
      SWIG_fail_ptr("ImGui_setup",4,SWIGTYPE_p_ImGuiConfigFlags); }  arg4 = *argp4; arg5 = (lua_toboolean(L, 5)!=0);
    result = (ofxImGui::SetupState)(arg1)->setup(arg2,arg3,arg4,arg5); lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGui_setup__SWIG_2(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    BaseTheme *arg2 = (BaseTheme *) 0 ; bool arg3 ; ImGuiConfigFlags arg4 ; ImGuiConfigFlags *argp4 ;
    ofxImGui::SetupState result; SWIG_check_num_args("ofxImGui::Gui::setup",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::setup",1,"ofxImGui::Gui *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxImGui::Gui::setup",2,"BaseTheme *");
    if(!lua_isboolean(L,3)) SWIG_fail_arg("ofxImGui::Gui::setup",3,"bool");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofxImGui::Gui::setup",4,"ImGuiConfigFlags");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("ImGui_setup",1,SWIGTYPE_p_ofxImGui__Gui); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BaseTheme,0))){
      SWIG_fail_ptr("ImGui_setup",2,SWIGTYPE_p_BaseTheme); }  arg3 = (lua_toboolean(L, 3)!=0);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_ImGuiConfigFlags,0))){
      SWIG_fail_ptr("ImGui_setup",4,SWIGTYPE_p_ImGuiConfigFlags); }  arg4 = *argp4;
    result = (ofxImGui::SetupState)(arg1)->setup(arg2,arg3,arg4); lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGui_setup__SWIG_3(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    BaseTheme *arg2 = (BaseTheme *) 0 ; bool arg3 ; ofxImGui::SetupState result; SWIG_check_num_args("ofxImGui::Gui::setup",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::setup",1,"ofxImGui::Gui *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxImGui::Gui::setup",2,"BaseTheme *");
    if(!lua_isboolean(L,3)) SWIG_fail_arg("ofxImGui::Gui::setup",3,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("ImGui_setup",1,SWIGTYPE_p_ofxImGui__Gui); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BaseTheme,0))){
      SWIG_fail_ptr("ImGui_setup",2,SWIGTYPE_p_BaseTheme); }  arg3 = (lua_toboolean(L, 3)!=0);
    result = (ofxImGui::SetupState)(arg1)->setup(arg2,arg3); lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGui_setup__SWIG_4(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    BaseTheme *arg2 = (BaseTheme *) 0 ; ofxImGui::SetupState result; SWIG_check_num_args("ofxImGui::Gui::setup",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::setup",1,"ofxImGui::Gui *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxImGui::Gui::setup",2,"BaseTheme *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("ImGui_setup",1,SWIGTYPE_p_ofxImGui__Gui); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BaseTheme,0))){
      SWIG_fail_ptr("ImGui_setup",2,SWIGTYPE_p_BaseTheme); }  result = (ofxImGui::SetupState)(arg1)->setup(arg2);
    lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGui_setup__SWIG_5(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    ofxImGui::SetupState result; SWIG_check_num_args("ofxImGui::Gui::setup",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::setup",1,"ofxImGui::Gui *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("ImGui_setup",1,SWIGTYPE_p_ofxImGui__Gui); }  result = (ofxImGui::SetupState)(arg1)->setup();
    lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGui_setup__SWIG_6(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    std::shared_ptr< ofAppBaseWindow > *arg2 = 0 ; BaseTheme *arg3 = (BaseTheme *) 0 ; bool arg4 ; ImGuiConfigFlags arg5 ;
    bool arg6 ; bool arg7 ; ImGuiConfigFlags *argp5 ; ofxImGui::SetupState result;
    SWIG_check_num_args("ofxImGui::Gui::setup",7,7)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::setup",1,"ofxImGui::Gui *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxImGui::Gui::setup",2,"std::shared_ptr< ofAppBaseWindow > &");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofxImGui::Gui::setup",3,"BaseTheme *");
    if(!lua_isboolean(L,4)) SWIG_fail_arg("ofxImGui::Gui::setup",4,"bool");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ofxImGui::Gui::setup",5,"ImGuiConfigFlags");
    if(!lua_isboolean(L,6)) SWIG_fail_arg("ofxImGui::Gui::setup",6,"bool");
    if(!lua_isboolean(L,7)) SWIG_fail_arg("ofxImGui::Gui::setup",7,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("ImGui_setup",1,SWIGTYPE_p_ofxImGui__Gui); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__shared_ptrT_ofAppBaseWindow_t,0))){
      SWIG_fail_ptr("ImGui_setup",2,SWIGTYPE_p_std__shared_ptrT_ofAppBaseWindow_t); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_BaseTheme,0))){
      SWIG_fail_ptr("ImGui_setup",3,SWIGTYPE_p_BaseTheme); }  arg4 = (lua_toboolean(L, 4)!=0);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_ImGuiConfigFlags,0))){
      SWIG_fail_ptr("ImGui_setup",5,SWIGTYPE_p_ImGuiConfigFlags); }  arg5 = *argp5; arg6 = (lua_toboolean(L, 6)!=0);
    arg7 = (lua_toboolean(L, 7)!=0); result = (ofxImGui::SetupState)(arg1)->setup(*arg2,arg3,arg4,arg5,arg6,arg7);
    lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGui_setup__SWIG_7(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    std::shared_ptr< ofAppBaseWindow > *arg2 = 0 ; BaseTheme *arg3 = (BaseTheme *) 0 ; bool arg4 ; ImGuiConfigFlags arg5 ;
    bool arg6 ; ImGuiConfigFlags *argp5 ; ofxImGui::SetupState result; SWIG_check_num_args("ofxImGui::Gui::setup",6,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::setup",1,"ofxImGui::Gui *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxImGui::Gui::setup",2,"std::shared_ptr< ofAppBaseWindow > &");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofxImGui::Gui::setup",3,"BaseTheme *");
    if(!lua_isboolean(L,4)) SWIG_fail_arg("ofxImGui::Gui::setup",4,"bool");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ofxImGui::Gui::setup",5,"ImGuiConfigFlags");
    if(!lua_isboolean(L,6)) SWIG_fail_arg("ofxImGui::Gui::setup",6,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("ImGui_setup",1,SWIGTYPE_p_ofxImGui__Gui); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__shared_ptrT_ofAppBaseWindow_t,0))){
      SWIG_fail_ptr("ImGui_setup",2,SWIGTYPE_p_std__shared_ptrT_ofAppBaseWindow_t); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_BaseTheme,0))){
      SWIG_fail_ptr("ImGui_setup",3,SWIGTYPE_p_BaseTheme); }  arg4 = (lua_toboolean(L, 4)!=0);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_ImGuiConfigFlags,0))){
      SWIG_fail_ptr("ImGui_setup",5,SWIGTYPE_p_ImGuiConfigFlags); }  arg5 = *argp5; arg6 = (lua_toboolean(L, 6)!=0);
    result = (ofxImGui::SetupState)(arg1)->setup(*arg2,arg3,arg4,arg5,arg6);
    lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGui_setup__SWIG_8(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    std::shared_ptr< ofAppBaseWindow > *arg2 = 0 ; BaseTheme *arg3 = (BaseTheme *) 0 ; bool arg4 ; ImGuiConfigFlags arg5 ;
    ImGuiConfigFlags *argp5 ; ofxImGui::SetupState result; SWIG_check_num_args("ofxImGui::Gui::setup",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::setup",1,"ofxImGui::Gui *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxImGui::Gui::setup",2,"std::shared_ptr< ofAppBaseWindow > &");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofxImGui::Gui::setup",3,"BaseTheme *");
    if(!lua_isboolean(L,4)) SWIG_fail_arg("ofxImGui::Gui::setup",4,"bool");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ofxImGui::Gui::setup",5,"ImGuiConfigFlags");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("ImGui_setup",1,SWIGTYPE_p_ofxImGui__Gui); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__shared_ptrT_ofAppBaseWindow_t,0))){
      SWIG_fail_ptr("ImGui_setup",2,SWIGTYPE_p_std__shared_ptrT_ofAppBaseWindow_t); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_BaseTheme,0))){
      SWIG_fail_ptr("ImGui_setup",3,SWIGTYPE_p_BaseTheme); }  arg4 = (lua_toboolean(L, 4)!=0);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_ImGuiConfigFlags,0))){
      SWIG_fail_ptr("ImGui_setup",5,SWIGTYPE_p_ImGuiConfigFlags); }  arg5 = *argp5;
    result = (ofxImGui::SetupState)(arg1)->setup(*arg2,arg3,arg4,arg5);
    lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGui_setup__SWIG_9(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    std::shared_ptr< ofAppBaseWindow > *arg2 = 0 ; BaseTheme *arg3 = (BaseTheme *) 0 ; bool arg4 ; ofxImGui::SetupState result;
    SWIG_check_num_args("ofxImGui::Gui::setup",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::setup",1,"ofxImGui::Gui *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxImGui::Gui::setup",2,"std::shared_ptr< ofAppBaseWindow > &");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofxImGui::Gui::setup",3,"BaseTheme *");
    if(!lua_isboolean(L,4)) SWIG_fail_arg("ofxImGui::Gui::setup",4,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("ImGui_setup",1,SWIGTYPE_p_ofxImGui__Gui); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__shared_ptrT_ofAppBaseWindow_t,0))){
      SWIG_fail_ptr("ImGui_setup",2,SWIGTYPE_p_std__shared_ptrT_ofAppBaseWindow_t); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_BaseTheme,0))){
      SWIG_fail_ptr("ImGui_setup",3,SWIGTYPE_p_BaseTheme); }  arg4 = (lua_toboolean(L, 4)!=0);
    result = (ofxImGui::SetupState)(arg1)->setup(*arg2,arg3,arg4); lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGui_setup__SWIG_10(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    std::shared_ptr< ofAppBaseWindow > *arg2 = 0 ; BaseTheme *arg3 = (BaseTheme *) 0 ; ofxImGui::SetupState result;
    SWIG_check_num_args("ofxImGui::Gui::setup",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::setup",1,"ofxImGui::Gui *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxImGui::Gui::setup",2,"std::shared_ptr< ofAppBaseWindow > &");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofxImGui::Gui::setup",3,"BaseTheme *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("ImGui_setup",1,SWIGTYPE_p_ofxImGui__Gui); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__shared_ptrT_ofAppBaseWindow_t,0))){
      SWIG_fail_ptr("ImGui_setup",2,SWIGTYPE_p_std__shared_ptrT_ofAppBaseWindow_t); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_BaseTheme,0))){
      SWIG_fail_ptr("ImGui_setup",3,SWIGTYPE_p_BaseTheme); }  result = (ofxImGui::SetupState)(arg1)->setup(*arg2,arg3);
    lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGui_setup__SWIG_11(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    std::shared_ptr< ofAppBaseWindow > *arg2 = 0 ; ofxImGui::SetupState result; SWIG_check_num_args("ofxImGui::Gui::setup",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::setup",1,"ofxImGui::Gui *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxImGui::Gui::setup",2,"std::shared_ptr< ofAppBaseWindow > &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("ImGui_setup",1,SWIGTYPE_p_ofxImGui__Gui); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__shared_ptrT_ofAppBaseWindow_t,0))){
      SWIG_fail_ptr("ImGui_setup",2,SWIGTYPE_p_std__shared_ptrT_ofAppBaseWindow_t); } 
    result = (ofxImGui::SetupState)(arg1)->setup(*arg2); lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGui_setup(lua_State* L) { int argc; int argv[8]={ 1,2,3,4,5,6,7,8} ; argc = lua_gettop(L); if (argc == 1) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxImGui__Gui, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_ImGui_setup__SWIG_5(L);}  }  if (argc == 2) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxImGui__Gui, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_BaseTheme, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ImGui_setup__SWIG_4(L);}  }  }  if (argc == 2) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxImGui__Gui, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__shared_ptrT_ofAppBaseWindow_t, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ImGui_setup__SWIG_11(L);}  }  }  if (argc == 3) { int _v = 0; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxImGui__Gui, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__shared_ptrT_ofAppBaseWindow_t, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_BaseTheme, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_ImGui_setup__SWIG_10(L);}  }  }  }  if (argc == 3) { int _v = 0; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxImGui__Gui, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_BaseTheme, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) { return _wrap_ImGui_setup__SWIG_3(L);}  }  }
     }  if (argc == 4) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxImGui__Gui, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_BaseTheme, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImGuiConfigFlags, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ImGui_setup__SWIG_2(L);}  }  }  }  }  if (argc == 4) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxImGui__Gui, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__shared_ptrT_ofAppBaseWindow_t, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_BaseTheme, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[3]); }  if (_v) { return _wrap_ImGui_setup__SWIG_9(L);}  }
         }  }  }  if (argc == 5) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxImGui__Gui, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__shared_ptrT_ofAppBaseWindow_t, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_BaseTheme, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[3]); }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ImGuiConfigFlags, SWIG_POINTER_NO_NULL)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ImGui_setup__SWIG_8(L);}  }  }  }  }  }  if (argc == 5) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxImGui__Gui, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_BaseTheme, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImGuiConfigFlags, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[4]); }  if (_v) {
              return _wrap_ImGui_setup__SWIG_1(L);}  }  }  }  }  }  if (argc == 6) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxImGui__Gui, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_BaseTheme, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImGuiConfigFlags, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[4]); }  if (_v) { {
                _v = lua_isboolean(L,argv[5]); }  if (_v) { return _wrap_ImGui_setup__SWIG_0(L);}  }  }  }  }  }  } 
  if (argc == 6) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxImGui__Gui, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__shared_ptrT_ofAppBaseWindow_t, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_BaseTheme, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[3]); }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ImGuiConfigFlags, SWIG_POINTER_NO_NULL)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[5]); }  if (_v) {
                return _wrap_ImGui_setup__SWIG_7(L);}  }  }  }  }  }  }  if (argc == 7) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxImGui__Gui, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__shared_ptrT_ofAppBaseWindow_t, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_BaseTheme, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[3]); }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ImGuiConfigFlags, SWIG_POINTER_NO_NULL)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[5]); }  if (_v) { {
                  _v = lua_isboolean(L,argv[6]); }  if (_v) { return _wrap_ImGui_setup__SWIG_6(L);}  }  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImGui_setup'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxImGui::Gui::setup(BaseTheme *,bool,ImGuiConfigFlags,bool,bool)\n"
  "    ofxImGui::Gui::setup(BaseTheme *,bool,ImGuiConfigFlags,bool)\n"
  "    ofxImGui::Gui::setup(BaseTheme *,bool,ImGuiConfigFlags)\n" "    ofxImGui::Gui::setup(BaseTheme *,bool)\n"
  "    ofxImGui::Gui::setup(BaseTheme *)\n" "    ofxImGui::Gui::setup()\n"
  "    ofxImGui::Gui::setup(std::shared_ptr< ofAppBaseWindow > &,BaseTheme *,bool,ImGuiConfigFlags,bool,bool)\n"
  "    ofxImGui::Gui::setup(std::shared_ptr< ofAppBaseWindow > &,BaseTheme *,bool,ImGuiConfigFlags,bool)\n"
  "    ofxImGui::Gui::setup(std::shared_ptr< ofAppBaseWindow > &,BaseTheme *,bool,ImGuiConfigFlags)\n"
  "    ofxImGui::Gui::setup(std::shared_ptr< ofAppBaseWindow > &,BaseTheme *,bool)\n"
  "    ofxImGui::Gui::setup(std::shared_ptr< ofAppBaseWindow > &,BaseTheme *)\n"
  "    ofxImGui::Gui::setup(std::shared_ptr< ofAppBaseWindow > &)\n"); lua_error(L);return 0; }
static int _wrap_ImGui_exit(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    SWIG_check_num_args("ofxImGui::Gui::exit",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::exit",1,"ofxImGui::Gui *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("ImGui_exit",1,SWIGTYPE_p_ofxImGui__Gui); }  (arg1)->exit(); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGui_isInSharedMode(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    bool result; SWIG_check_num_args("ofxImGui::Gui::isInSharedMode",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::isInSharedMode",1,"ofxImGui::Gui const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("ImGui_isInSharedMode",1,SWIGTYPE_p_ofxImGui__Gui); } 
    result = (bool)((ofxImGui::Gui const *)arg1)->isInSharedMode(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGui_beginGui(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    SWIG_check_num_args("ofxImGui::Gui::begin",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::begin",1,"ofxImGui::Gui *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("ImGui_beginGui",1,SWIGTYPE_p_ofxImGui__Gui); }  (arg1)->begin(); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGui_endGui(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    SWIG_check_num_args("ofxImGui::Gui::end",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::end",1,"ofxImGui::Gui *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("ImGui_endGui",1,SWIGTYPE_p_ofxImGui__Gui); }  (arg1)->end(); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGui_draw(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    SWIG_check_num_args("ofxImGui::Gui::draw",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::draw",1,"ofxImGui::Gui *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("ImGui_draw",1,SWIGTYPE_p_ofxImGui__Gui); }  (arg1)->draw(); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGui_setDefaultFont__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    int arg2 ; bool result; SWIG_check_num_args("ofxImGui::Gui::setDefaultFont",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::setDefaultFont",1,"ofxImGui::Gui *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxImGui::Gui::setDefaultFont",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("ImGui_setDefaultFont",1,SWIGTYPE_p_ofxImGui__Gui); }  arg2 = (int)lua_tonumber(L, 2);
    result = (bool)(arg1)->setDefaultFont(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGui_setDefaultFont__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    ImFont *arg2 = (ImFont *) 0 ; bool result; SWIG_check_num_args("ofxImGui::Gui::setDefaultFont",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::setDefaultFont",1,"ofxImGui::Gui *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxImGui::Gui::setDefaultFont",2,"ImFont *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("ImGui_setDefaultFont",1,SWIGTYPE_p_ofxImGui__Gui); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImGui_setDefaultFont",2,SWIGTYPE_p_ImFont); }  result = (bool)(arg1)->setDefaultFont(arg2);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGui_setDefaultFont(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxImGui__Gui, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImFont, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ImGui_setDefaultFont__SWIG_1(L);}  }  }  if (argc == 2) { int _v = 0; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxImGui__Gui, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ImGui_setDefaultFont__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImGui_setDefaultFont'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxImGui::Gui::setDefaultFont(int)\n"
  "    ofxImGui::Gui::setDefaultFont(ImFont *)\n"); lua_error(L);return 0; }
static int _wrap_ImGui_addFont__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    std::string *arg2 = 0 ; float arg3 ; ImFontConfig *arg4 = (ImFontConfig *) 0 ; ImWchar *arg5 = (ImWchar *) 0 ; bool arg6 ;
    std::string temp2 ; ImFont *result = 0 ; SWIG_check_num_args("ofxImGui::Gui::addFont",6,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::addFont",1,"ofxImGui::Gui *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxImGui::Gui::addFont",2,"std::string const &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxImGui::Gui::addFont",3,"float");
    if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ofxImGui::Gui::addFont",4,"ImFontConfig const *");
    if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ofxImGui::Gui::addFont",5,"ImWchar const *");
    if(!lua_isboolean(L,6)) SWIG_fail_arg("ofxImGui::Gui::addFont",6,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("ImGui_addFont",1,SWIGTYPE_p_ofxImGui__Gui); }  { size_t len; const char *ptr = lua_tolstring(L, 2, &len);
      temp2.assign(ptr, len); arg2=&temp2; }  arg3 = (float)lua_tonumber(L, 3);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImFontConfig,0))){
      SWIG_fail_ptr("ImGui_addFont",4,SWIGTYPE_p_ImFontConfig); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImWchar,0))){
      SWIG_fail_ptr("ImGui_addFont",5,SWIGTYPE_p_ImWchar); }  arg6 = (lua_toboolean(L, 6)!=0);
    result = (ImFont *)(arg1)->addFont((std::string const &)*arg2,arg3,(ImFontConfig const *)arg4,(ImWchar const *)arg5,arg6);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFont,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGui_addFont__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    std::string *arg2 = 0 ; float arg3 ; ImFontConfig *arg4 = (ImFontConfig *) 0 ; ImWchar *arg5 = (ImWchar *) 0 ;
    std::string temp2 ; ImFont *result = 0 ; SWIG_check_num_args("ofxImGui::Gui::addFont",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::addFont",1,"ofxImGui::Gui *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxImGui::Gui::addFont",2,"std::string const &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxImGui::Gui::addFont",3,"float");
    if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ofxImGui::Gui::addFont",4,"ImFontConfig const *");
    if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ofxImGui::Gui::addFont",5,"ImWchar const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("ImGui_addFont",1,SWIGTYPE_p_ofxImGui__Gui); }  { size_t len; const char *ptr = lua_tolstring(L, 2, &len);
      temp2.assign(ptr, len); arg2=&temp2; }  arg3 = (float)lua_tonumber(L, 3);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImFontConfig,0))){
      SWIG_fail_ptr("ImGui_addFont",4,SWIGTYPE_p_ImFontConfig); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImWchar,0))){
      SWIG_fail_ptr("ImGui_addFont",5,SWIGTYPE_p_ImWchar); } 
    result = (ImFont *)(arg1)->addFont((std::string const &)*arg2,arg3,(ImFontConfig const *)arg4,(ImWchar const *)arg5);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFont,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGui_addFont__SWIG_2(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    std::string *arg2 = 0 ; float arg3 ; ImFontConfig *arg4 = (ImFontConfig *) 0 ; std::string temp2 ; ImFont *result = 0 ;
    SWIG_check_num_args("ofxImGui::Gui::addFont",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::addFont",1,"ofxImGui::Gui *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxImGui::Gui::addFont",2,"std::string const &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxImGui::Gui::addFont",3,"float");
    if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ofxImGui::Gui::addFont",4,"ImFontConfig const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("ImGui_addFont",1,SWIGTYPE_p_ofxImGui__Gui); }  { size_t len; const char *ptr = lua_tolstring(L, 2, &len);
      temp2.assign(ptr, len); arg2=&temp2; }  arg3 = (float)lua_tonumber(L, 3);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImFontConfig,0))){
      SWIG_fail_ptr("ImGui_addFont",4,SWIGTYPE_p_ImFontConfig); } 
    result = (ImFont *)(arg1)->addFont((std::string const &)*arg2,arg3,(ImFontConfig const *)arg4);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFont,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGui_addFont__SWIG_3(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    std::string *arg2 = 0 ; float arg3 ; std::string temp2 ; ImFont *result = 0 ;
    SWIG_check_num_args("ofxImGui::Gui::addFont",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::addFont",1,"ofxImGui::Gui *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxImGui::Gui::addFont",2,"std::string const &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxImGui::Gui::addFont",3,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("ImGui_addFont",1,SWIGTYPE_p_ofxImGui__Gui); }  { size_t len; const char *ptr = lua_tolstring(L, 2, &len);
      temp2.assign(ptr, len); arg2=&temp2; }  arg3 = (float)lua_tonumber(L, 3);
    result = (ImFont *)(arg1)->addFont((std::string const &)*arg2,arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFont,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGui_addFont__SWIG_4(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    std::string *arg2 = 0 ; std::string temp2 ; ImFont *result = 0 ; SWIG_check_num_args("ofxImGui::Gui::addFont",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::addFont",1,"ofxImGui::Gui *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxImGui::Gui::addFont",2,"std::string const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("ImGui_addFont",1,SWIGTYPE_p_ofxImGui__Gui); }  { size_t len; const char *ptr = lua_tolstring(L, 2, &len);
      temp2.assign(ptr, len); arg2=&temp2; }  result = (ImFont *)(arg1)->addFont((std::string const &)*arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFont,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGui_addFont(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L); if (argc == 2) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxImGui__Gui, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { return _wrap_ImGui_addFont__SWIG_4(L);}  }  }
   if (argc == 3) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxImGui__Gui, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ImGui_addFont__SWIG_3(L);}  }  }  }  if (argc == 4) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxImGui__Gui, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImFontConfig, 0)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ImGui_addFont__SWIG_2(L);}  }  }  }  }  if (argc == 5) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxImGui__Gui, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImFontConfig, 0)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ImWchar, 0)) { _v = 0; }
               else { _v = 1; }  }  if (_v) { return _wrap_ImGui_addFont__SWIG_1(L);}  }  }  }  }  }  if (argc == 6) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxImGui__Gui, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImFontConfig, 0)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ImWchar, 0)) { _v = 0; }
               else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[5]); }  if (_v) {
                return _wrap_ImGui_addFont__SWIG_0(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImGui_addFont'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxImGui::Gui::addFont(std::string const &,float,ImFontConfig const *,ImWchar const *,bool)\n"
  "    ofxImGui::Gui::addFont(std::string const &,float,ImFontConfig const *,ImWchar const *)\n"
  "    ofxImGui::Gui::addFont(std::string const &,float,ImFontConfig const *)\n"
  "    ofxImGui::Gui::addFont(std::string const &,float)\n" "    ofxImGui::Gui::addFont(std::string const &)\n");
  lua_error(L);return 0; }
static int _wrap_ImGui_addFontFromMemory__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    void *arg2 = (void *) 0 ; int arg3 ; float arg4 ; ImFontConfig *arg5 = (ImFontConfig *) 0 ; ImWchar *arg6 = (ImWchar *) 0 ;
    bool arg7 ; ImFont *result = 0 ; SWIG_check_num_args("ofxImGui::Gui::addFontFromMemory",7,7)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::addFontFromMemory",1,"ofxImGui::Gui *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxImGui::Gui::addFontFromMemory",2,"void *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxImGui::Gui::addFontFromMemory",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxImGui::Gui::addFontFromMemory",4,"float");
    if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ofxImGui::Gui::addFontFromMemory",5,"ImFontConfig const *");
    if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ofxImGui::Gui::addFontFromMemory",6,"ImWchar const *");
    if(!lua_isboolean(L,7)) SWIG_fail_arg("ofxImGui::Gui::addFontFromMemory",7,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("ImGui_addFontFromMemory",1,SWIGTYPE_p_ofxImGui__Gui); } 
    arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImGui_addFontFromMemory"); arg3 = (int)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4); if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImFontConfig,0))){
      SWIG_fail_ptr("ImGui_addFontFromMemory",5,SWIGTYPE_p_ImFontConfig); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ImWchar,0))){
      SWIG_fail_ptr("ImGui_addFontFromMemory",6,SWIGTYPE_p_ImWchar); }  arg7 = (lua_toboolean(L, 7)!=0);
    result = (ImFont *)(arg1)->addFontFromMemory(arg2,arg3,arg4,(ImFontConfig const *)arg5,(ImWchar const *)arg6,arg7);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFont,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGui_addFontFromMemory__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    void *arg2 = (void *) 0 ; int arg3 ; float arg4 ; ImFontConfig *arg5 = (ImFontConfig *) 0 ; ImWchar *arg6 = (ImWchar *) 0 ;
    ImFont *result = 0 ; SWIG_check_num_args("ofxImGui::Gui::addFontFromMemory",6,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::addFontFromMemory",1,"ofxImGui::Gui *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxImGui::Gui::addFontFromMemory",2,"void *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxImGui::Gui::addFontFromMemory",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxImGui::Gui::addFontFromMemory",4,"float");
    if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ofxImGui::Gui::addFontFromMemory",5,"ImFontConfig const *");
    if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ofxImGui::Gui::addFontFromMemory",6,"ImWchar const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("ImGui_addFontFromMemory",1,SWIGTYPE_p_ofxImGui__Gui); } 
    arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImGui_addFontFromMemory"); arg3 = (int)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4); if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImFontConfig,0))){
      SWIG_fail_ptr("ImGui_addFontFromMemory",5,SWIGTYPE_p_ImFontConfig); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ImWchar,0))){
      SWIG_fail_ptr("ImGui_addFontFromMemory",6,SWIGTYPE_p_ImWchar); } 
    result = (ImFont *)(arg1)->addFontFromMemory(arg2,arg3,arg4,(ImFontConfig const *)arg5,(ImWchar const *)arg6);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFont,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGui_addFontFromMemory__SWIG_2(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    void *arg2 = (void *) 0 ; int arg3 ; float arg4 ; ImFontConfig *arg5 = (ImFontConfig *) 0 ; ImFont *result = 0 ;
    SWIG_check_num_args("ofxImGui::Gui::addFontFromMemory",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::addFontFromMemory",1,"ofxImGui::Gui *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxImGui::Gui::addFontFromMemory",2,"void *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxImGui::Gui::addFontFromMemory",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxImGui::Gui::addFontFromMemory",4,"float");
    if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ofxImGui::Gui::addFontFromMemory",5,"ImFontConfig const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("ImGui_addFontFromMemory",1,SWIGTYPE_p_ofxImGui__Gui); } 
    arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImGui_addFontFromMemory"); arg3 = (int)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4); if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImFontConfig,0))){
      SWIG_fail_ptr("ImGui_addFontFromMemory",5,SWIGTYPE_p_ImFontConfig); } 
    result = (ImFont *)(arg1)->addFontFromMemory(arg2,arg3,arg4,(ImFontConfig const *)arg5);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFont,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGui_addFontFromMemory__SWIG_3(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    void *arg2 = (void *) 0 ; int arg3 ; float arg4 ; ImFont *result = 0 ;
    SWIG_check_num_args("ofxImGui::Gui::addFontFromMemory",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::addFontFromMemory",1,"ofxImGui::Gui *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxImGui::Gui::addFontFromMemory",2,"void *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxImGui::Gui::addFontFromMemory",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxImGui::Gui::addFontFromMemory",4,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("ImGui_addFontFromMemory",1,SWIGTYPE_p_ofxImGui__Gui); } 
    arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImGui_addFontFromMemory"); arg3 = (int)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4); result = (ImFont *)(arg1)->addFontFromMemory(arg2,arg3,arg4);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFont,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGui_addFontFromMemory__SWIG_4(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    void *arg2 = (void *) 0 ; int arg3 ; ImFont *result = 0 ; SWIG_check_num_args("ofxImGui::Gui::addFontFromMemory",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::addFontFromMemory",1,"ofxImGui::Gui *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxImGui::Gui::addFontFromMemory",2,"void *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxImGui::Gui::addFontFromMemory",3,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("ImGui_addFontFromMemory",1,SWIGTYPE_p_ofxImGui__Gui); } 
    arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImGui_addFontFromMemory"); arg3 = (int)lua_tonumber(L, 3);
    result = (ImFont *)(arg1)->addFontFromMemory(arg2,arg3); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFont,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGui_addFontFromMemory(lua_State* L) { int argc; int argv[8]={ 1,2,3,4,5,6,7,8} ; argc = lua_gettop(L);
  if (argc == 3) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxImGui__Gui, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) { _v = 0; }  else { _v = 1; }  } 
      if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_ImGui_addFontFromMemory__SWIG_4(L);}  }  }  } 
  if (argc == 4) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxImGui__Gui, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) { _v = 0; }  else { _v = 1; }  } 
      if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) {
            return _wrap_ImGui_addFontFromMemory__SWIG_3(L);}  }  }  }  }  if (argc == 5) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxImGui__Gui, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) { _v = 0; }  else { _v = 1; }  } 
      if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ImFontConfig, 0)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ImGui_addFontFromMemory__SWIG_2(L);}  }  }  }  }  } 
  if (argc == 6) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxImGui__Gui, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) { _v = 0; }  else { _v = 1; }  } 
      if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ImFontConfig, 0)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_ImWchar, 0)) {
                  _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ImGui_addFontFromMemory__SWIG_1(L);}  }  }  }  }  }  } 
  if (argc == 7) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxImGui__Gui, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) { _v = 0; }  else { _v = 1; }  } 
      if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ImFontConfig, 0)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_ImWchar, 0)) {
                  _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[6]); }  if (_v) {
                  return _wrap_ImGui_addFontFromMemory__SWIG_0(L);}  }  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImGui_addFontFromMemory'\n"
  "  Possible C/C++ prototypes are:\n"
  "    ofxImGui::Gui::addFontFromMemory(void *,int,float,ImFontConfig const *,ImWchar const *,bool)\n"
  "    ofxImGui::Gui::addFontFromMemory(void *,int,float,ImFontConfig const *,ImWchar const *)\n"
  "    ofxImGui::Gui::addFontFromMemory(void *,int,float,ImFontConfig const *)\n"
  "    ofxImGui::Gui::addFontFromMemory(void *,int,float)\n" "    ofxImGui::Gui::addFontFromMemory(void *,int)\n");
  lua_error(L);return 0; }
static int _wrap_ImGui_setTheme(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    BaseTheme *arg2 = (BaseTheme *) 0 ; SWIG_check_num_args("ofxImGui::Gui::setTheme",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::setTheme",1,"ofxImGui::Gui *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxImGui::Gui::setTheme",2,"BaseTheme *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("ImGui_setTheme",1,SWIGTYPE_p_ofxImGui__Gui); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BaseTheme,0))){
      SWIG_fail_ptr("ImGui_setTheme",2,SWIGTYPE_p_BaseTheme); }  (arg1)->setTheme(arg2); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGui_loadImage__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    ofImage *arg2 = 0 ; GLuint result; SWIG_check_num_args("ofxImGui::Gui::loadImage",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::loadImage",1,"ofxImGui::Gui *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxImGui::Gui::loadImage",2,"ofImage &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("ImGui_loadImage",1,SWIGTYPE_p_ofxImGui__Gui); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
      SWIG_fail_ptr("ImGui_loadImage",2,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  result = (GLuint)(arg1)->loadImage(*arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGui_loadImage__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    std::string *arg2 = 0 ; std::string temp2 ; GLuint result; SWIG_check_num_args("ofxImGui::Gui::loadImage",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::loadImage",1,"ofxImGui::Gui *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxImGui::Gui::loadImage",2,"std::string const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("ImGui_loadImage",1,SWIGTYPE_p_ofxImGui__Gui); }  { size_t len; const char *ptr = lua_tolstring(L, 2, &len);
      temp2.assign(ptr, len); arg2=&temp2; }  result = (GLuint)(arg1)->loadImage((std::string const &)*arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGui_loadImage(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxImGui__Gui, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ImGui_loadImage__SWIG_0(L);}  }  }  if (argc == 2) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxImGui__Gui, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { return _wrap_ImGui_loadImage__SWIG_1(L);}  }
     }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImGui_loadImage'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxImGui::Gui::loadImage(ofImage &)\n"
  "    ofxImGui::Gui::loadImage(std::string const &)\n"); lua_error(L);return 0; }
static int _wrap_ImGui_loadPixels__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    std::string *arg2 = 0 ; std::string temp2 ; GLuint result; SWIG_check_num_args("ofxImGui::Gui::loadPixels",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::loadPixels",1,"ofxImGui::Gui *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxImGui::Gui::loadPixels",2,"std::string const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("ImGui_loadPixels",1,SWIGTYPE_p_ofxImGui__Gui); }  { size_t len;
      const char *ptr = lua_tolstring(L, 2, &len); temp2.assign(ptr, len); arg2=&temp2; } 
    result = (GLuint)(arg1)->loadPixels((std::string const &)*arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGui_loadPixels__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    ofPixels *arg2 = 0 ; GLuint result; SWIG_check_num_args("ofxImGui::Gui::loadPixels",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::loadPixels",1,"ofxImGui::Gui *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxImGui::Gui::loadPixels",2,"ofPixels &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("ImGui_loadPixels",1,SWIGTYPE_p_ofxImGui__Gui); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
      SWIG_fail_ptr("ImGui_loadPixels",2,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  result = (GLuint)(arg1)->loadPixels(*arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGui_loadPixels(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxImGui__Gui, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ImGui_loadPixels__SWIG_1(L);}  }  }  if (argc == 2) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxImGui__Gui, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { return _wrap_ImGui_loadPixels__SWIG_0(L);}  }
     }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImGui_loadPixels'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxImGui::Gui::loadPixels(std::string const &)\n"
  "    ofxImGui::Gui::loadPixels(ofPixels &)\n"); lua_error(L);return 0; }
static int _wrap_ImGui_loadTexture__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    std::string *arg2 = 0 ; std::string temp2 ; GLuint result; SWIG_check_num_args("ofxImGui::Gui::loadTexture",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::loadTexture",1,"ofxImGui::Gui *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxImGui::Gui::loadTexture",2,"std::string const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("ImGui_loadTexture",1,SWIGTYPE_p_ofxImGui__Gui); }  { size_t len;
      const char *ptr = lua_tolstring(L, 2, &len); temp2.assign(ptr, len); arg2=&temp2; } 
    result = (GLuint)(arg1)->loadTexture((std::string const &)*arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGui_loadTexture__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    ofTexture *arg2 = 0 ; std::string *arg3 = 0 ; std::string temp3 ; GLuint result;
    SWIG_check_num_args("ofxImGui::Gui::loadTexture",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::loadTexture",1,"ofxImGui::Gui *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxImGui::Gui::loadTexture",2,"ofTexture &");
    if(!lua_isstring(L,3)) SWIG_fail_arg("ofxImGui::Gui::loadTexture",3,"std::string const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("ImGui_loadTexture",1,SWIGTYPE_p_ofxImGui__Gui); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofTexture,0))){
      SWIG_fail_ptr("ImGui_loadTexture",2,SWIGTYPE_p_ofTexture); }  { size_t len; const char *ptr = lua_tolstring(L, 3, &len);
      temp3.assign(ptr, len); arg3=&temp3; }  result = (GLuint)(arg1)->loadTexture(*arg2,(std::string const &)*arg3);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGui_loadTexture(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxImGui__Gui, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { return _wrap_ImGui_loadTexture__SWIG_0(L);}  }
     }  if (argc == 3) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxImGui__Gui, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofTexture, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[2]); }  if (_v) {
          return _wrap_ImGui_loadTexture__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImGui_loadTexture'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxImGui::Gui::loadTexture(std::string const &)\n" "    ofxImGui::Gui::loadTexture(ofTexture &,std::string const &)\n");
  lua_error(L);return 0; }
static int _wrap_ImGui_afterDraw(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    ofEventArgs *arg2 = 0 ; SWIG_check_num_args("ofxImGui::Gui::afterDraw",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::afterDraw",1,"ofxImGui::Gui *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxImGui::Gui::afterDraw",2,"ofEventArgs &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("ImGui_afterDraw",1,SWIGTYPE_p_ofxImGui__Gui); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofEventArgs,0))){
      SWIG_fail_ptr("ImGui_afterDraw",2,SWIGTYPE_p_ofEventArgs); }  (arg1)->afterDraw(*arg2); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGui_drawOfxImGuiDebugWindow(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    SWIG_check_num_args("ofxImGui::Gui::drawOfxImGuiDebugWindow",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::drawOfxImGuiDebugWindow",1,"ofxImGui::Gui const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("ImGui_drawOfxImGuiDebugWindow",1,SWIGTYPE_p_ofxImGui__Gui); } 
    ((ofxImGui::Gui const *)arg1)->drawOfxImGuiDebugWindow(); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static void swig_delete_ImGui(void *obj) {
ofxImGui::Gui *arg1 = (ofxImGui::Gui *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGui(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGui);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGui_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ImGui_methods[]= {
    { "setup", _wrap_ImGui_setup},
    { "exit", _wrap_ImGui_exit},
    { "isInSharedMode", _wrap_ImGui_isInSharedMode},
    { "beginGui", _wrap_ImGui_beginGui},
    { "endGui", _wrap_ImGui_endGui},
    { "draw", _wrap_ImGui_draw},
    { "setDefaultFont", _wrap_ImGui_setDefaultFont},
    { "addFont", _wrap_ImGui_addFont},
    { "addFontFromMemory", _wrap_ImGui_addFontFromMemory},
    { "setTheme", _wrap_ImGui_setTheme},
    { "loadImage", _wrap_ImGui_loadImage},
    { "loadPixels", _wrap_ImGui_loadPixels},
    { "loadTexture", _wrap_ImGui_loadTexture},
    { "afterDraw", _wrap_ImGui_afterDraw},
    { "drawOfxImGuiDebugWindow", _wrap_ImGui_drawOfxImGuiDebugWindow},
    {0,0}
};
static swig_lua_method swig_ImGui_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGui_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGui_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGui_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGui_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGui_Sf_SwigStatic = {
    "ImGui",
    swig_ImGui_Sf_SwigStatic_methods,
    swig_ImGui_Sf_SwigStatic_attributes,
    swig_ImGui_Sf_SwigStatic_constants,
    swig_ImGui_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGui_bases[] = {0};
static const char *swig_ImGui_base_names[] = {0};
static swig_lua_class _wrap_class_ImGui = { "ImGui", "ImGui", &SWIGTYPE_p_ofxImGui__Gui,_proxy__wrap_new_ImGui, swig_delete_ImGui, swig_ImGui_methods, swig_ImGui_attributes, &swig_ImGui_Sf_SwigStatic, swig_ImGui_meta, swig_ImGui_bases, swig_ImGui_base_names };

static swig_lua_attribute swig_SwigModule_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("CREEPS_MAX_FONT_STRING_LENGTH", (100))},
    {SWIG_LUA_CONSTTAB_INT("CREEPS_MAX_DASH_STRING_LENGTH", (100))},
    {SWIG_LUA_CONSTTAB_INT("CAt_LJ_KEEP", (ns_creeps::CAt::LJ_KEEP))},
    {SWIG_LUA_CONSTTAB_INT("CAt_MITER", (ns_creeps::CAt::MITER))},
    {SWIG_LUA_CONSTTAB_INT("CAt_LJ_ROUND", (ns_creeps::CAt::LJ_ROUND))},
    {SWIG_LUA_CONSTTAB_INT("CAt_BEVEL", (ns_creeps::CAt::BEVEL))},
    {SWIG_LUA_CONSTTAB_INT("CAt_LC_KEEP", (ns_creeps::CAt::LC_KEEP))},
    {SWIG_LUA_CONSTTAB_INT("CAt_BUTT", (ns_creeps::CAt::BUTT))},
    {SWIG_LUA_CONSTTAB_INT("CAt_LC_ROUND", (ns_creeps::CAt::LC_ROUND))},
    {SWIG_LUA_CONSTTAB_INT("CAt_SQUARE", (ns_creeps::CAt::SQUARE))},
    {SWIG_LUA_CONSTTAB_INT("CAt_TA_KEEP", (ns_creeps::CAt::TA_KEEP))},
    {SWIG_LUA_CONSTTAB_INT("CAt_LEFT", (ns_creeps::CAt::LEFT))},
    {SWIG_LUA_CONSTTAB_INT("CAt_HCENTER", (ns_creeps::CAt::HCENTER))},
    {SWIG_LUA_CONSTTAB_INT("CAt_RIGHT", (ns_creeps::CAt::RIGHT))},
    {SWIG_LUA_CONSTTAB_INT("CAt_BOTTOM", (ns_creeps::CAt::BOTTOM))},
    {SWIG_LUA_CONSTTAB_INT("CAt_BASELINE", (ns_creeps::CAt::BASELINE))},
    {SWIG_LUA_CONSTTAB_INT("CAt_VCENTER", (ns_creeps::CAt::VCENTER))},
    {SWIG_LUA_CONSTTAB_INT("CAt_TOP", (ns_creeps::CAt::TOP))},
    {SWIG_LUA_CONSTTAB_INT("CAt_CENTER", (ns_creeps::CAt::CENTER))},
    {SWIG_LUA_CONSTTAB_INT("CAt_DEFAULT", (ns_creeps::CAt::DEFAULT))},
    {SWIG_LUA_CONSTTAB_INT("CAt_LD_KEEP", (ns_creeps::CAt::LD_KEEP))},
    {SWIG_LUA_CONSTTAB_INT("CAt_SOLID", (ns_creeps::CAt::SOLID))},
    {SWIG_LUA_CONSTTAB_INT("CAt_DOT", (ns_creeps::CAt::DOT))},
    {SWIG_LUA_CONSTTAB_INT("CAt_DASH", (ns_creeps::CAt::DASH))},
    {SWIG_LUA_CONSTTAB_INT("CAt_DOTDASH", (ns_creeps::CAt::DOTDASH))},
    {SWIG_LUA_CONSTTAB_INT("CreEPS_FILL", (ns_creeps::CreEPS::FILL))},
    {SWIG_LUA_CONSTTAB_INT("CreEPS_EOFILL", (ns_creeps::CreEPS::EOFILL))},
    {SWIG_LUA_CONSTTAB_INT("CreEPS_STROKE", (ns_creeps::CreEPS::STROKE))},
    {SWIG_LUA_CONSTTAB_INT("CreEPS_CLIP", (ns_creeps::CreEPS::CLIP))},
    {SWIG_LUA_CONSTTAB_INT("CreEPS_EOCLIP", (ns_creeps::CreEPS::EOCLIP))},
    {SWIG_LUA_CONSTTAB_INT("AssimpModelLoader_OPTIMIZE_NONE", (ofxAssimpModelLoader::OPTIMIZE_NONE))},
    {SWIG_LUA_CONSTTAB_INT("AssimpModelLoader_OPTIMIZE_DEFAULT", (ofxAssimpModelLoader::OPTIMIZE_DEFAULT))},
    {SWIG_LUA_CONSTTAB_INT("AssimpModelLoader_OPTIMIZE_HIGH", (ofxAssimpModelLoader::OPTIMIZE_HIGH))},
    {SWIG_LUA_CONSTTAB_INT("STD_DEFAULT_RNG", (STD_DEFAULT_RNG))},
    {SWIG_LUA_CONSTTAB_INT("CUDA_RNG", (CUDA_RNG))},
    {SWIG_LUA_CONSTTAB_INT("EULER_A", (EULER_A))},
    {SWIG_LUA_CONSTTAB_INT("EULER", (EULER))},
    {SWIG_LUA_CONSTTAB_INT("HEUN", (HEUN))},
    {SWIG_LUA_CONSTTAB_INT("DPM2", (DPM2))},
    {SWIG_LUA_CONSTTAB_INT("DPMPP2S_A", (DPMPP2S_A))},
    {SWIG_LUA_CONSTTAB_INT("DPMPP2M", (DPMPP2M))},
    {SWIG_LUA_CONSTTAB_INT("DPMPP2Mv2", (DPMPP2Mv2))},
    {SWIG_LUA_CONSTTAB_INT("LCM", (LCM))},
    {SWIG_LUA_CONSTTAB_INT("N_SAMPLE_METHODS", (N_SAMPLE_METHODS))},
    {SWIG_LUA_CONSTTAB_INT("DEFAULT", (DEFAULT))},
    {SWIG_LUA_CONSTTAB_INT("DISCRETE", (DISCRETE))},
    {SWIG_LUA_CONSTTAB_INT("KARRAS", (KARRAS))},
    {SWIG_LUA_CONSTTAB_INT("N_SCHEDULES", (N_SCHEDULES))},
    {SWIG_LUA_CONSTTAB_INT("SD_TYPE_F32", (SD_TYPE_F32))},
    {SWIG_LUA_CONSTTAB_INT("SD_TYPE_F16", (SD_TYPE_F16))},
    {SWIG_LUA_CONSTTAB_INT("SD_TYPE_Q4_0", (SD_TYPE_Q4_0))},
    {SWIG_LUA_CONSTTAB_INT("SD_TYPE_Q4_1", (SD_TYPE_Q4_1))},
    {SWIG_LUA_CONSTTAB_INT("SD_TYPE_Q5_0", (SD_TYPE_Q5_0))},
    {SWIG_LUA_CONSTTAB_INT("SD_TYPE_Q5_1", (SD_TYPE_Q5_1))},
    {SWIG_LUA_CONSTTAB_INT("SD_TYPE_Q8_0", (SD_TYPE_Q8_0))},
    {SWIG_LUA_CONSTTAB_INT("SD_TYPE_Q8_1", (SD_TYPE_Q8_1))},
    {SWIG_LUA_CONSTTAB_INT("SD_TYPE_Q2_K", (SD_TYPE_Q2_K))},
    {SWIG_LUA_CONSTTAB_INT("SD_TYPE_Q3_K", (SD_TYPE_Q3_K))},
    {SWIG_LUA_CONSTTAB_INT("SD_TYPE_Q4_K", (SD_TYPE_Q4_K))},
    {SWIG_LUA_CONSTTAB_INT("SD_TYPE_Q5_K", (SD_TYPE_Q5_K))},
    {SWIG_LUA_CONSTTAB_INT("SD_TYPE_Q6_K", (SD_TYPE_Q6_K))},
    {SWIG_LUA_CONSTTAB_INT("SD_TYPE_Q8_K", (SD_TYPE_Q8_K))},
    {SWIG_LUA_CONSTTAB_INT("SD_TYPE_IQ2_XXS", (SD_TYPE_IQ2_XXS))},
    {SWIG_LUA_CONSTTAB_INT("SD_TYPE_IQ2_XS", (SD_TYPE_IQ2_XS))},
    {SWIG_LUA_CONSTTAB_INT("SD_TYPE_IQ3_XXS", (SD_TYPE_IQ3_XXS))},
    {SWIG_LUA_CONSTTAB_INT("SD_TYPE_IQ1_S", (SD_TYPE_IQ1_S))},
    {SWIG_LUA_CONSTTAB_INT("SD_TYPE_IQ4_NL", (SD_TYPE_IQ4_NL))},
    {SWIG_LUA_CONSTTAB_INT("SD_TYPE_IQ3_S", (SD_TYPE_IQ3_S))},
    {SWIG_LUA_CONSTTAB_INT("SD_TYPE_IQ2_S", (SD_TYPE_IQ2_S))},
    {SWIG_LUA_CONSTTAB_INT("SD_TYPE_IQ4_XS", (SD_TYPE_IQ4_XS))},
    {SWIG_LUA_CONSTTAB_INT("SD_TYPE_I8", (SD_TYPE_I8))},
    {SWIG_LUA_CONSTTAB_INT("SD_TYPE_I16", (SD_TYPE_I16))},
    {SWIG_LUA_CONSTTAB_INT("SD_TYPE_I32", (SD_TYPE_I32))},
    {SWIG_LUA_CONSTTAB_INT("SD_TYPE_COUNT", (SD_TYPE_COUNT))},
    {SWIG_LUA_CONSTTAB_INT("SD_LOG_DEBUG", (SD_LOG_DEBUG))},
    {SWIG_LUA_CONSTTAB_INT("SD_LOG_INFO", (SD_LOG_INFO))},
    {SWIG_LUA_CONSTTAB_INT("SD_LOG_WARN", (SD_LOG_WARN))},
    {SWIG_LUA_CONSTTAB_INT("SD_LOG_ERROR", (SD_LOG_ERROR))},
    {SWIG_LUA_CONSTTAB_INT("Error", (ofxImGui::Error))},
    {SWIG_LUA_CONSTTAB_INT("Slave", (ofxImGui::Slave))},
    {SWIG_LUA_CONSTTAB_INT("Master", (ofxImGui::Master))},
    {SWIG_LUA_CONSTTAB_INT("Success", (ofxImGui::Success))},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    { "CreEPS_getWarningMessageHandler", _wrap_CreEPS_getWarningMessageHandler},
    { "CreEPS_getErrorMessageHandler", _wrap_CreEPS_getErrorMessageHandler},
    { "CreEPS_setWarningMessageHandler", _wrap_CreEPS_setWarningMessageHandler},
    { "CreEPS_setErrorMessageHandler", _wrap_CreEPS_setErrorMessageHandler},
    { "CreEPS_getMajorVersion", _wrap_CreEPS_getMajorVersion},
    { "CreEPS_getMinorVersion", _wrap_CreEPS_getMinorVersion},
    { "sd_type_name", _wrap_sd_type_name},
    { "sd_set_log_callback", _wrap_sd_set_log_callback},
    { "sd_set_progress_callback", _wrap_sd_set_progress_callback},
    { "get_num_physical_cores", _wrap_get_num_physical_cores},
    { "sd_get_system_info", _wrap_sd_get_system_info},
    { "new_sd_ctx", _wrap_new_sd_ctx},
    { "free_sd_ctx", _wrap_free_sd_ctx},
    { "txt2img", _wrap_txt2img},
    { "img2img", _wrap_img2img},
    { "img2vid", _wrap_img2vid},
    { "new_upscaler_ctx", _wrap_new_upscaler_ctx},
    { "free_upscaler_ctx", _wrap_free_upscaler_ctx},
    { "upscale", _wrap_upscale},
    { "convert", _wrap_convert},
    { "preprocess_canny", _wrap_preprocess_canny},
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_CAt,
&_wrap_class_CAtLineThickness,
&_wrap_class_CAtLineJoin,
&_wrap_class_CAtLineCap,
&_wrap_class_CAtLineDash,
&_wrap_class_CAtColor,
&_wrap_class_CAtBackgroundColor,
&_wrap_class_CAtTransparentBackground,
&_wrap_class_CAtFont,
&_wrap_class_CAtGrayScale,
&_wrap_class_CAtTextAlignment,
&_wrap_class_CAtHexDotFilling,
&_wrap_class_CAtCheckerboardFilling,
&_wrap_class_CAtStripeFilling,
&_wrap_class_CreEPS,
&_wrap_class_VectorGraphics,
&_wrap_class_CvBlob,
&_wrap_class_CvHaarFinder,
&_wrap_class_CvContourFinder,
&_wrap_class_CvImage,
&_wrap_class_CvColorImage,
&_wrap_class_CvFloatImage,
&_wrap_class_CvGrayscaleImage,
&_wrap_class_CvShortImage,
&_wrap_class_AssimpModelLoader,
&_wrap_class_AssimpAnimation,
&_wrap_class_Volumetrics,
&_wrap_class_ImageSequencePlayer,
&_wrap_class_sd_image_t,
&_wrap_class_ImGuiContext,
&_wrap_class_ImGui,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "ofx",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_ofMouseEventArgsTo_p_glm__vec2(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((glm::vec2 *)  ((ofMouseEventArgs *) x));
}
static void *_p_ofTouchEventArgsTo_p_glm__vec2(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((glm::vec2 *)  ((ofTouchEventArgs *) x));
}
static void *_p_ofWindowPosEventArgsTo_p_glm__vec2(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((glm::vec2 *)  ((ofWindowPosEventArgs *) x));
}
static void *_p_ns_creeps__CAtBackgroundColorTo_p_ns_creeps__CAt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ns_creeps::CAt *)  ((ns_creeps::CAtBackgroundColor *) x));
}
static void *_p_ns_creeps__CAtCheckerboardFillingTo_p_ns_creeps__CAt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ns_creeps::CAt *)  ((ns_creeps::CAtCheckerboardFilling *) x));
}
static void *_p_ns_creeps__CAtColorTo_p_ns_creeps__CAt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ns_creeps::CAt *)  ((ns_creeps::CAtColor *) x));
}
static void *_p_ns_creeps__CAtFontTo_p_ns_creeps__CAt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ns_creeps::CAt *)  ((ns_creeps::CAtFont *) x));
}
static void *_p_ns_creeps__CAtGrayScaleTo_p_ns_creeps__CAt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ns_creeps::CAt *)  ((ns_creeps::CAtGrayScale *) x));
}
static void *_p_ns_creeps__CAtHexDotFillingTo_p_ns_creeps__CAt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ns_creeps::CAt *)  ((ns_creeps::CAtHexDotFilling *) x));
}
static void *_p_ns_creeps__CAtLineCapTo_p_ns_creeps__CAt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ns_creeps::CAt *)  ((ns_creeps::CAtLineCap *) x));
}
static void *_p_ns_creeps__CAtLineDashTo_p_ns_creeps__CAt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ns_creeps::CAt *)  ((ns_creeps::CAtLineDash *) x));
}
static void *_p_ns_creeps__CAtLineJoinTo_p_ns_creeps__CAt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ns_creeps::CAt *)  ((ns_creeps::CAtLineJoin *) x));
}
static void *_p_ns_creeps__CAtLineThicknessTo_p_ns_creeps__CAt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ns_creeps::CAt *)  ((ns_creeps::CAtLineThickness *) x));
}
static void *_p_ns_creeps__CAtStripeFillingTo_p_ns_creeps__CAt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ns_creeps::CAt *)  ((ns_creeps::CAtStripeFilling *) x));
}
static void *_p_ns_creeps__CAtTextAlignmentTo_p_ns_creeps__CAt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ns_creeps::CAt *)  ((ns_creeps::CAtTextAlignment *) x));
}
static void *_p_ns_creeps__CAtTransparentBackgroundTo_p_ns_creeps__CAt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ns_creeps::CAt *)  ((ns_creeps::CAtTransparentBackground *) x));
}
static void *_p_ofAbstractImageTo_p_ofBaseDraws(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseDraws *)  ((ofAbstractImage *) x));
}
static void *_p_ofBaseVideoDrawsTo_p_ofBaseDraws(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseDraws *)  ((ofBaseVideoDraws *) x));
}
static void *_p_ofFboTo_p_ofBaseDraws(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseDraws *)  ((ofFbo *) x));
}
static void *_p_ofTextureTo_p_ofBaseDraws(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseDraws *)  ((ofTexture *) x));
}
static void *_p_ofVideoGrabberTo_p_ofBaseDraws(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseDraws *) (ofBaseVideoDraws *) ((ofVideoGrabber *) x));
}
static void *_p_ofVideoPlayerTo_p_ofBaseDraws(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseDraws *) (ofBaseVideoDraws *) ((ofVideoPlayer *) x));
}
static void *_p_ofxCvContourFinderTo_p_ofBaseDraws(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseDraws *)  ((ofxCvContourFinder *) x));
}
static void *_p_ofImage_T_unsigned_char_tTo_p_ofBaseImage_T_unsigned_char_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseImage_< unsigned char > *)  ((ofImage_< unsigned char > *) x));
}
static void *_p_ofxCvColorImageTo_p_ofBaseImage_T_unsigned_char_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseImage_< unsigned char > *) (ofxCvImage *) ((ofxCvColorImage *) x));
}
static void *_p_ofxCvFloatImageTo_p_ofBaseImage_T_unsigned_char_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseImage_< unsigned char > *) (ofxCvImage *) ((ofxCvFloatImage *) x));
}
static void *_p_ofxCvGrayscaleImageTo_p_ofBaseImage_T_unsigned_char_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseImage_< unsigned char > *) (ofxCvImage *) ((ofxCvGrayscaleImage *) x));
}
static void *_p_ofxCvImageTo_p_ofBaseImage_T_unsigned_char_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseImage_< unsigned char > *)  ((ofxCvImage *) x));
}
static void *_p_ofxCvShortImageTo_p_ofBaseImage_T_unsigned_char_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseImage_< unsigned char > *) (ofxCvImage *) ((ofxCvShortImage *) x));
}
static void *_p_ofxImageSequencePlayerTo_p_ofBaseImage_T_unsigned_char_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseImage_< unsigned char > *) (ofImage_< unsigned char > *) ((ofxImageSequencePlayer *) x));
}
static void *_p_ofKeyEventArgsTo_p_ofEventArgs(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofEventArgs *)  ((ofKeyEventArgs *) x));
}
static void *_p_ofMessageTo_p_ofEventArgs(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofEventArgs *)  ((ofMessage *) x));
}
static void *_p_ofMouseEventArgsTo_p_ofEventArgs(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofEventArgs *)  ((ofMouseEventArgs *) x));
}
static void *_p_ofResizeEventArgsTo_p_ofEventArgs(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofEventArgs *)  ((ofResizeEventArgs *) x));
}
static void *_p_ofTouchEventArgsTo_p_ofEventArgs(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofEventArgs *)  ((ofTouchEventArgs *) x));
}
static void *_p_ofWindowPosEventArgsTo_p_ofEventArgs(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofEventArgs *)  ((ofWindowPosEventArgs *) x));
}
static void *_p_ofxImageSequencePlayerTo_p_ofImage_T_unsigned_char_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofImage_< unsigned char > *)  ((ofxImageSequencePlayer *) x));
}
static void *_p_ofVboMeshTo_p_ofMesh_T_ofDefaultVertexType_ofDefaultNormalType_ofDefaultColorType_ofDefaultTexCoordType_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofMesh_< ofDefaultVertexType,ofDefaultNormalType,ofDefaultColorType,ofDefaultTexCoordType > *)  ((ofVboMesh *) x));
}
static void *_p_ofxCvColorImageTo_p_ofxCvImage(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofxCvImage *)  ((ofxCvColorImage *) x));
}
static void *_p_ofxCvFloatImageTo_p_ofxCvImage(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofxCvImage *)  ((ofxCvFloatImage *) x));
}
static void *_p_ofxCvGrayscaleImageTo_p_ofxCvImage(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofxCvImage *)  ((ofxCvGrayscaleImage *) x));
}
static void *_p_ofxCvShortImageTo_p_ofxCvImage(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofxCvImage *)  ((ofxCvShortImage *) x));
}
static swig_type_info _swigt__p_Base = {"_p_Base", "Base *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BaseTheme = {"_p_BaseTheme", "BaseTheme *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ColorType = {"_p_ColorType", "ColorType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CreEPS_BOOL = {"_p_CreEPS_BOOL", "CreEPS_BOOL *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CreEPS_CHAR = {"_p_CreEPS_CHAR", "CreEPS_CHAR *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CreEPS_FLOAT = {"_p_CreEPS_FLOAT", "CreEPS_FLOAT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CreEPS_INT = {"_p_CreEPS_INT", "CreEPS_INT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FILE = {"_p_FILE", "FILE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImFont = {"_p_ImFont", "ImFont *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImFontConfig = {"_p_ImFontConfig", "ImFontConfig *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImGuiConfigFlags = {"_p_ImGuiConfigFlags", "ImGuiConfigFlags *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImGuiContext = {"_p_ImGuiContext", "ImGuiContext *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImWchar = {"_p_ImWchar", "ImWchar *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IplImage = {"_p_IplImage", "IplImage *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Node = {"_p_Node", "Node *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NormalType = {"_p_NormalType", "NormalType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SortMode = {"_p_SortMode", "SortMode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TexCoordType = {"_p_TexCoordType", "TexCoordType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VertexType = {"_p_VertexType", "VertexType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__XDisplay = {"_p__XDisplay", "Display *|_XDisplay *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_a_2__CreEPS_FLOAT = {"_p_a_2__CreEPS_FLOAT", "CreEPS_FLOAT (*)[2]", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_aiAnimation = {"_p_aiAnimation", "aiAnimation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_aiScene = {"_p_aiScene", "aiScene *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cv__Mat = {"_p_cv__Mat", "cv::Mat *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_enum_sd_log_level_t_p_q_const__char_p_void__void = {"_p_f_enum_sd_log_level_t_p_q_const__char_p_void__void", "sd_log_cb_t|void (*)(enum sd_log_level_t,char const *,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_int_int_float_p_void__void = {"_p_f_int_int_float_p_void__void", "sd_progress_cb_t|void (*)(int,int,float,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_q_const__p_q_const__CreEPS_CHAR_v_______void = {"_p_f_q_const__p_q_const__CreEPS_CHAR_v_______void", "ns_creeps::CreEPS::MessageHandler|void (*)(CreEPS_CHAR const *const,...)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "GLfloat *|float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_glm__mat4 = {"_p_glm__mat4", "glm::mat4 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_glm__vec2 = {"_p_glm__vec2", "glm::vec2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofMouseEventArgs = {"_p_ofMouseEventArgs", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ofTouchEventArgs = {"_p_ofTouchEventArgs", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ofWindowPosEventArgs = {"_p_ofWindowPosEventArgs", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_glm__vec3 = {"_p_glm__vec3", "ofDefaultVec3 *|glm::vec3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "GLint *|glm::length_t *|int32_t *|int_fast16_t *|int_fast32_t *|int_least32_t *|intptr_t *|int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int64_t *|int_fast64_t *|int_least64_t *|intmax_t *|long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ns_creeps__CAt = {"_p_ns_creeps__CAt", "ns_creeps::CAt *", 0, 0, (void*)&_wrap_class_CAt, 0};
static swig_type_info _swigt__p_ns_creeps__CAtBackgroundColor = {"_p_ns_creeps__CAtBackgroundColor", "ns_creeps::CAtBackgroundColor *", 0, 0, (void*)&_wrap_class_CAtBackgroundColor, 0};
static swig_type_info _swigt__p_ns_creeps__CAtCheckerboardFilling = {"_p_ns_creeps__CAtCheckerboardFilling", "ns_creeps::CAtCheckerboardFilling *", 0, 0, (void*)&_wrap_class_CAtCheckerboardFilling, 0};
static swig_type_info _swigt__p_ns_creeps__CAtColor = {"_p_ns_creeps__CAtColor", "ns_creeps::CAtColor *", 0, 0, (void*)&_wrap_class_CAtColor, 0};
static swig_type_info _swigt__p_ns_creeps__CAtFont = {"_p_ns_creeps__CAtFont", "ns_creeps::CAtFont *", 0, 0, (void*)&_wrap_class_CAtFont, 0};
static swig_type_info _swigt__p_ns_creeps__CAtGrayScale = {"_p_ns_creeps__CAtGrayScale", "ns_creeps::CAtGrayScale *", 0, 0, (void*)&_wrap_class_CAtGrayScale, 0};
static swig_type_info _swigt__p_ns_creeps__CAtHexDotFilling = {"_p_ns_creeps__CAtHexDotFilling", "ns_creeps::CAtHexDotFilling *", 0, 0, (void*)&_wrap_class_CAtHexDotFilling, 0};
static swig_type_info _swigt__p_ns_creeps__CAtLineCap = {"_p_ns_creeps__CAtLineCap", "ns_creeps::CAtLineCap *", 0, 0, (void*)&_wrap_class_CAtLineCap, 0};
static swig_type_info _swigt__p_ns_creeps__CAtLineDash = {"_p_ns_creeps__CAtLineDash", "ns_creeps::CAtLineDash *", 0, 0, (void*)&_wrap_class_CAtLineDash, 0};
static swig_type_info _swigt__p_ns_creeps__CAtLineJoin = {"_p_ns_creeps__CAtLineJoin", "ns_creeps::CAtLineJoin *", 0, 0, (void*)&_wrap_class_CAtLineJoin, 0};
static swig_type_info _swigt__p_ns_creeps__CAtLineThickness = {"_p_ns_creeps__CAtLineThickness", "ns_creeps::CAtLineThickness *", 0, 0, (void*)&_wrap_class_CAtLineThickness, 0};
static swig_type_info _swigt__p_ns_creeps__CAtStripeFilling = {"_p_ns_creeps__CAtStripeFilling", "ns_creeps::CAtStripeFilling *", 0, 0, (void*)&_wrap_class_CAtStripeFilling, 0};
static swig_type_info _swigt__p_ns_creeps__CAtTextAlignment = {"_p_ns_creeps__CAtTextAlignment", "ns_creeps::CAtTextAlignment *", 0, 0, (void*)&_wrap_class_CAtTextAlignment, 0};
static swig_type_info _swigt__p_ns_creeps__CAtTransparentBackground = {"_p_ns_creeps__CAtTransparentBackground", "ns_creeps::CAtTransparentBackground *", 0, 0, (void*)&_wrap_class_CAtTransparentBackground, 0};
static swig_type_info _swigt__p_ns_creeps__CreEPS = {"_p_ns_creeps__CreEPS", "ns_creeps::CreEPS *", 0, 0, (void*)&_wrap_class_CreEPS, 0};
static swig_type_info _swigt__p_ofBaseDraws = {"_p_ofBaseDraws", "ofBaseDraws *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofAbstractImage = {"_p_ofAbstractImage", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ofBaseVideoDraws = {"_p_ofBaseVideoDraws", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ofVideoGrabber = {"_p_ofVideoGrabber", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ofVideoPlayer = {"_p_ofVideoPlayer", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ofBaseImage_T_unsigned_char_t = {"_p_ofBaseImage_T_unsigned_char_t", "ofBaseImage_< unsigned char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofBuffer = {"_p_ofBuffer", "ofBuffer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofColor_T_float_t = {"_p_ofColor_T_float_t", "ofFloatColor *|ofColor_< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofColor_T_unsigned_char_t = {"_p_ofColor_T_unsigned_char_t", "ofColor *|ofColor_< unsigned char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofColor_T_unsigned_short_t = {"_p_ofColor_T_unsigned_short_t", "ofShortColor *|ofColor_< unsigned short > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofEventArgs = {"_p_ofEventArgs", "ofEventArgs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofKeyEventArgs = {"_p_ofKeyEventArgs", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ofMessage = {"_p_ofMessage", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ofResizeEventArgs = {"_p_ofResizeEventArgs", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ofFbo = {"_p_ofFbo", "ofFbo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofImage_T_float_t = {"_p_ofImage_T_float_t", "ofFloatImage *|ofImage_< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofImage_T_unsigned_char_t = {"_p_ofImage_T_unsigned_char_t", "ofImage *|ofImage_< unsigned char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofImage_T_unsigned_short_t = {"_p_ofImage_T_unsigned_short_t", "ofShortImage *|ofImage_< unsigned short > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofMaterial = {"_p_ofMaterial", "ofMaterial *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofMeshFace_T_ofDefaultVertexType_ofDefaultNormalType_ofDefaultColorType_ofDefaultTexCoordType_t = {"_p_ofMeshFace_T_ofDefaultVertexType_ofDefaultNormalType_ofDefaultColorType_ofDefaultTexCoordType_t", "ofMeshFace *|ofMeshFace_< ofDefaultVertexType,ofDefaultNormalType,ofDefaultColorType,ofDefaultTexCoordType > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofMesh_T_ofDefaultVertexType_ofDefaultNormalType_ofDefaultColorType_ofDefaultTexCoordType_t = {"_p_ofMesh_T_ofDefaultVertexType_ofDefaultNormalType_ofDefaultColorType_ofDefaultTexCoordType_t", "ofMesh *|ofMesh_< ofDefaultVertexType,ofDefaultNormalType,ofDefaultColorType,ofDefaultTexCoordType > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofVboMesh = {"_p_ofVboMesh", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ofPixels_T_float_t = {"_p_ofPixels_T_float_t", "ofFloatPixels *|ofPixels_< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofPixels_T_unsigned_char_t = {"_p_ofPixels_T_unsigned_char_t", "ofPixels *|ofPixels_< unsigned char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofPixels_T_unsigned_short_t = {"_p_ofPixels_T_unsigned_short_t", "ofShortPixels *|ofPixels_< unsigned short > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofPolyline_T_ofDefaultVertexType_t = {"_p_ofPolyline_T_ofDefaultVertexType_t", "ofPolyline *|ofPolyline_< glm::vec3 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofRectangle = {"_p_ofRectangle", "ofRectangle *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofTexture = {"_p_ofTexture", "ofTexture *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofVec3f = {"_p_ofVec3f", "ofPoint *|ofVec3f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofxAssimpAnimation = {"_p_ofxAssimpAnimation", "ofxAssimpAnimation *", 0, 0, (void*)&_wrap_class_AssimpAnimation, 0};
static swig_type_info _swigt__p_ofxAssimpMeshHelper = {"_p_ofxAssimpMeshHelper", "ofxAssimpMeshHelper *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofxAssimpModelLoader = {"_p_ofxAssimpModelLoader", "ofxAssimpModelLoader *", 0, 0, (void*)&_wrap_class_AssimpModelLoader, 0};
static swig_type_info _swigt__p_ofxCvBlob = {"_p_ofxCvBlob", "ofxCvBlob *", 0, 0, (void*)&_wrap_class_CvBlob, 0};
static swig_type_info _swigt__p_ofxCvColorImage = {"_p_ofxCvColorImage", "ofxCvColorImage *", 0, 0, (void*)&_wrap_class_CvColorImage, 0};
static swig_type_info _swigt__p_ofxCvContourFinder = {"_p_ofxCvContourFinder", "ofxCvContourFinder *", 0, 0, (void*)&_wrap_class_CvContourFinder, 0};
static swig_type_info _swigt__p_ofxCvFloatImage = {"_p_ofxCvFloatImage", "ofxCvFloatImage *", 0, 0, (void*)&_wrap_class_CvFloatImage, 0};
static swig_type_info _swigt__p_ofxCvGrayscaleImage = {"_p_ofxCvGrayscaleImage", "ofxCvGrayscaleImage *", 0, 0, (void*)&_wrap_class_CvGrayscaleImage, 0};
static swig_type_info _swigt__p_ofxCvHaarFinder = {"_p_ofxCvHaarFinder", "ofxCvHaarFinder *", 0, 0, (void*)&_wrap_class_CvHaarFinder, 0};
static swig_type_info _swigt__p_ofxCvImage = {"_p_ofxCvImage", "ofxCvImage *", 0, 0, (void*)&_wrap_class_CvImage, 0};
static swig_type_info _swigt__p_ofxCvShortImage = {"_p_ofxCvShortImage", "ofxCvShortImage *", 0, 0, (void*)&_wrap_class_CvShortImage, 0};
static swig_type_info _swigt__p_ofxImGuiContext = {"_p_ofxImGuiContext", "ofxImGuiContext *", 0, 0, (void*)&_wrap_class_ImGuiContext, 0};
static swig_type_info _swigt__p_ofxImGui__Gui = {"_p_ofxImGui__Gui", "ofxImGui::Gui *", 0, 0, (void*)&_wrap_class_ImGui, 0};
static swig_type_info _swigt__p_ofxImageSequencePlayer = {"_p_ofxImageSequencePlayer", "ofxImageSequencePlayer *", 0, 0, (void*)&_wrap_class_ImageSequencePlayer, 0};
static swig_type_info _swigt__p_ofxTextureData3d = {"_p_ofxTextureData3d", "ofxTextureData3d *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofxVectorGraphics = {"_p_ofxVectorGraphics", "ofxVectorGraphics *", 0, 0, (void*)&_wrap_class_VectorGraphics, 0};
static swig_type_info _swigt__p_ofxVolumetrics = {"_p_ofxVolumetrics", "ofxVolumetrics *", 0, 0, (void*)&_wrap_class_Volumetrics, 0};
static swig_type_info _swigt__p_sd_ctx_t = {"_p_sd_ctx_t", "sd_ctx_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sd_image_t = {"_p_sd_image_t", "sd_image_t *", 0, 0, (void*)&_wrap_class_sd_image_t, 0};
static swig_type_info _swigt__p_short = {"_p_short", "int16_t *|int_least16_t *|short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "int8_t *|int_fast8_t *|int_least8_t *|signed char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_aiScene_const_t = {"_p_std__shared_ptrT_aiScene_const_t", "std::shared_ptr< aiScene const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_ofAppBaseWindow_t = {"_p_std__shared_ptrT_ofAppBaseWindow_t", "std::shared_ptr< ofAppBaseWindow > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_glm__vec3_t = {"_p_std__vectorT_glm__vec3_t", "std::vector< ofDefaultVec3 > *|std::vector< glm::vec3 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ofxCvBlob_t = {"_p_std__vectorT_ofxCvBlob_t", "std::vector< ofxCvBlob > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_t = {"_p_std__vectorT_std__string_t", "std::vector< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_string = {"_p_string", "string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "uint8_t *|uint_fast8_t *|uint_least8_t *|unsigned char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "GLenum *|GLuint *|TESSindex *|ofIndexType *|size_t *|uint32_t *|uint_fast16_t *|uint_fast32_t *|uint_least32_t *|uintptr_t *|unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "Window *|unsigned long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint64_t *|uint_fast64_t *|uint_least64_t *|uintmax_t *|unsigned long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "uint16_t *|uint_least16_t *|unsigned short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_upscaler_ctx_t = {"_p_upscaler_ctx_t", "upscaler_ctx_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Base,
  &_swigt__p_BaseTheme,
  &_swigt__p_ColorType,
  &_swigt__p_CreEPS_BOOL,
  &_swigt__p_CreEPS_CHAR,
  &_swigt__p_CreEPS_FLOAT,
  &_swigt__p_CreEPS_INT,
  &_swigt__p_FILE,
  &_swigt__p_ImFont,
  &_swigt__p_ImFontConfig,
  &_swigt__p_ImGuiConfigFlags,
  &_swigt__p_ImGuiContext,
  &_swigt__p_ImWchar,
  &_swigt__p_IplImage,
  &_swigt__p_Node,
  &_swigt__p_NormalType,
  &_swigt__p_SortMode,
  &_swigt__p_TexCoordType,
  &_swigt__p_VertexType,
  &_swigt__p__XDisplay,
  &_swigt__p_a_2__CreEPS_FLOAT,
  &_swigt__p_aiAnimation,
  &_swigt__p_aiScene,
  &_swigt__p_cv__Mat,
  &_swigt__p_difference_type,
  &_swigt__p_f_enum_sd_log_level_t_p_q_const__char_p_void__void,
  &_swigt__p_f_int_int_float_p_void__void,
  &_swigt__p_f_q_const__p_q_const__CreEPS_CHAR_v_______void,
  &_swigt__p_float,
  &_swigt__p_glm__mat4,
  &_swigt__p_glm__vec2,
  &_swigt__p_glm__vec3,
  &_swigt__p_int,
  &_swigt__p_long_long,
  &_swigt__p_ns_creeps__CAt,
  &_swigt__p_ns_creeps__CAtBackgroundColor,
  &_swigt__p_ns_creeps__CAtCheckerboardFilling,
  &_swigt__p_ns_creeps__CAtColor,
  &_swigt__p_ns_creeps__CAtFont,
  &_swigt__p_ns_creeps__CAtGrayScale,
  &_swigt__p_ns_creeps__CAtHexDotFilling,
  &_swigt__p_ns_creeps__CAtLineCap,
  &_swigt__p_ns_creeps__CAtLineDash,
  &_swigt__p_ns_creeps__CAtLineJoin,
  &_swigt__p_ns_creeps__CAtLineThickness,
  &_swigt__p_ns_creeps__CAtStripeFilling,
  &_swigt__p_ns_creeps__CAtTextAlignment,
  &_swigt__p_ns_creeps__CAtTransparentBackground,
  &_swigt__p_ns_creeps__CreEPS,
  &_swigt__p_ofAbstractImage,
  &_swigt__p_ofBaseDraws,
  &_swigt__p_ofBaseImage_T_unsigned_char_t,
  &_swigt__p_ofBaseVideoDraws,
  &_swigt__p_ofBuffer,
  &_swigt__p_ofColor_T_float_t,
  &_swigt__p_ofColor_T_unsigned_char_t,
  &_swigt__p_ofColor_T_unsigned_short_t,
  &_swigt__p_ofEventArgs,
  &_swigt__p_ofFbo,
  &_swigt__p_ofImage_T_float_t,
  &_swigt__p_ofImage_T_unsigned_char_t,
  &_swigt__p_ofImage_T_unsigned_short_t,
  &_swigt__p_ofKeyEventArgs,
  &_swigt__p_ofMaterial,
  &_swigt__p_ofMeshFace_T_ofDefaultVertexType_ofDefaultNormalType_ofDefaultColorType_ofDefaultTexCoordType_t,
  &_swigt__p_ofMesh_T_ofDefaultVertexType_ofDefaultNormalType_ofDefaultColorType_ofDefaultTexCoordType_t,
  &_swigt__p_ofMessage,
  &_swigt__p_ofMouseEventArgs,
  &_swigt__p_ofPixels_T_float_t,
  &_swigt__p_ofPixels_T_unsigned_char_t,
  &_swigt__p_ofPixels_T_unsigned_short_t,
  &_swigt__p_ofPolyline_T_ofDefaultVertexType_t,
  &_swigt__p_ofRectangle,
  &_swigt__p_ofResizeEventArgs,
  &_swigt__p_ofTexture,
  &_swigt__p_ofTouchEventArgs,
  &_swigt__p_ofVboMesh,
  &_swigt__p_ofVec3f,
  &_swigt__p_ofVideoGrabber,
  &_swigt__p_ofVideoPlayer,
  &_swigt__p_ofWindowPosEventArgs,
  &_swigt__p_ofxAssimpAnimation,
  &_swigt__p_ofxAssimpMeshHelper,
  &_swigt__p_ofxAssimpModelLoader,
  &_swigt__p_ofxCvBlob,
  &_swigt__p_ofxCvColorImage,
  &_swigt__p_ofxCvContourFinder,
  &_swigt__p_ofxCvFloatImage,
  &_swigt__p_ofxCvGrayscaleImage,
  &_swigt__p_ofxCvHaarFinder,
  &_swigt__p_ofxCvImage,
  &_swigt__p_ofxCvShortImage,
  &_swigt__p_ofxImGuiContext,
  &_swigt__p_ofxImGui__Gui,
  &_swigt__p_ofxImageSequencePlayer,
  &_swigt__p_ofxTextureData3d,
  &_swigt__p_ofxVectorGraphics,
  &_swigt__p_ofxVolumetrics,
  &_swigt__p_sd_ctx_t,
  &_swigt__p_sd_image_t,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_size_type,
  &_swigt__p_std__shared_ptrT_aiScene_const_t,
  &_swigt__p_std__shared_ptrT_ofAppBaseWindow_t,
  &_swigt__p_std__vectorT_glm__vec3_t,
  &_swigt__p_std__vectorT_ofxCvBlob_t,
  &_swigt__p_std__vectorT_std__string_t,
  &_swigt__p_string,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_upscaler_ctx_t,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_Base[] = {  {&_swigt__p_Base, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BaseTheme[] = {  {&_swigt__p_BaseTheme, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ColorType[] = {  {&_swigt__p_ColorType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CreEPS_BOOL[] = {  {&_swigt__p_CreEPS_BOOL, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CreEPS_CHAR[] = {  {&_swigt__p_CreEPS_CHAR, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CreEPS_FLOAT[] = {  {&_swigt__p_CreEPS_FLOAT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CreEPS_INT[] = {  {&_swigt__p_CreEPS_INT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FILE[] = {  {&_swigt__p_FILE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImFont[] = {  {&_swigt__p_ImFont, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImFontConfig[] = {  {&_swigt__p_ImFontConfig, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiConfigFlags[] = {  {&_swigt__p_ImGuiConfigFlags, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiContext[] = {  {&_swigt__p_ImGuiContext, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImWchar[] = {  {&_swigt__p_ImWchar, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IplImage[] = {  {&_swigt__p_IplImage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Node[] = {  {&_swigt__p_Node, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NormalType[] = {  {&_swigt__p_NormalType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SortMode[] = {  {&_swigt__p_SortMode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TexCoordType[] = {  {&_swigt__p_TexCoordType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VertexType[] = {  {&_swigt__p_VertexType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__XDisplay[] = {  {&_swigt__p__XDisplay, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_2__CreEPS_FLOAT[] = {  {&_swigt__p_a_2__CreEPS_FLOAT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_aiAnimation[] = {  {&_swigt__p_aiAnimation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_aiScene[] = {  {&_swigt__p_aiScene, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cv__Mat[] = {  {&_swigt__p_cv__Mat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_enum_sd_log_level_t_p_q_const__char_p_void__void[] = {  {&_swigt__p_f_enum_sd_log_level_t_p_q_const__char_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_int_int_float_p_void__void[] = {  {&_swigt__p_f_int_int_float_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_q_const__p_q_const__CreEPS_CHAR_v_______void[] = {  {&_swigt__p_f_q_const__p_q_const__CreEPS_CHAR_v_______void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_glm__mat4[] = {  {&_swigt__p_glm__mat4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofMouseEventArgs[] = {{&_swigt__p_ofMouseEventArgs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofTouchEventArgs[] = {{&_swigt__p_ofTouchEventArgs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofWindowPosEventArgs[] = {{&_swigt__p_ofWindowPosEventArgs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_glm__vec2[] = {  {&_swigt__p_glm__vec2, 0, 0, 0},  {&_swigt__p_ofMouseEventArgs, _p_ofMouseEventArgsTo_p_glm__vec2, 0, 0},  {&_swigt__p_ofTouchEventArgs, _p_ofTouchEventArgsTo_p_glm__vec2, 0, 0},  {&_swigt__p_ofWindowPosEventArgs, _p_ofWindowPosEventArgsTo_p_glm__vec2, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_glm__vec3[] = {  {&_swigt__p_glm__vec3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ns_creeps__CAt[] = {  {&_swigt__p_ns_creeps__CAt, 0, 0, 0},  {&_swigt__p_ns_creeps__CAtBackgroundColor, _p_ns_creeps__CAtBackgroundColorTo_p_ns_creeps__CAt, 0, 0},  {&_swigt__p_ns_creeps__CAtCheckerboardFilling, _p_ns_creeps__CAtCheckerboardFillingTo_p_ns_creeps__CAt, 0, 0},  {&_swigt__p_ns_creeps__CAtColor, _p_ns_creeps__CAtColorTo_p_ns_creeps__CAt, 0, 0},  {&_swigt__p_ns_creeps__CAtFont, _p_ns_creeps__CAtFontTo_p_ns_creeps__CAt, 0, 0},  {&_swigt__p_ns_creeps__CAtGrayScale, _p_ns_creeps__CAtGrayScaleTo_p_ns_creeps__CAt, 0, 0},  {&_swigt__p_ns_creeps__CAtHexDotFilling, _p_ns_creeps__CAtHexDotFillingTo_p_ns_creeps__CAt, 0, 0},  {&_swigt__p_ns_creeps__CAtLineCap, _p_ns_creeps__CAtLineCapTo_p_ns_creeps__CAt, 0, 0},  {&_swigt__p_ns_creeps__CAtLineDash, _p_ns_creeps__CAtLineDashTo_p_ns_creeps__CAt, 0, 0},  {&_swigt__p_ns_creeps__CAtLineJoin, _p_ns_creeps__CAtLineJoinTo_p_ns_creeps__CAt, 0, 0},  {&_swigt__p_ns_creeps__CAtLineThickness, _p_ns_creeps__CAtLineThicknessTo_p_ns_creeps__CAt, 0, 0},  {&_swigt__p_ns_creeps__CAtStripeFilling, _p_ns_creeps__CAtStripeFillingTo_p_ns_creeps__CAt, 0, 0},  {&_swigt__p_ns_creeps__CAtTextAlignment, _p_ns_creeps__CAtTextAlignmentTo_p_ns_creeps__CAt, 0, 0},  {&_swigt__p_ns_creeps__CAtTransparentBackground, _p_ns_creeps__CAtTransparentBackgroundTo_p_ns_creeps__CAt, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ns_creeps__CAtBackgroundColor[] = {  {&_swigt__p_ns_creeps__CAtBackgroundColor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ns_creeps__CAtCheckerboardFilling[] = {  {&_swigt__p_ns_creeps__CAtCheckerboardFilling, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ns_creeps__CAtColor[] = {  {&_swigt__p_ns_creeps__CAtColor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ns_creeps__CAtFont[] = {  {&_swigt__p_ns_creeps__CAtFont, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ns_creeps__CAtGrayScale[] = {  {&_swigt__p_ns_creeps__CAtGrayScale, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ns_creeps__CAtHexDotFilling[] = {  {&_swigt__p_ns_creeps__CAtHexDotFilling, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ns_creeps__CAtLineCap[] = {  {&_swigt__p_ns_creeps__CAtLineCap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ns_creeps__CAtLineDash[] = {  {&_swigt__p_ns_creeps__CAtLineDash, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ns_creeps__CAtLineJoin[] = {  {&_swigt__p_ns_creeps__CAtLineJoin, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ns_creeps__CAtLineThickness[] = {  {&_swigt__p_ns_creeps__CAtLineThickness, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ns_creeps__CAtStripeFilling[] = {  {&_swigt__p_ns_creeps__CAtStripeFilling, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ns_creeps__CAtTextAlignment[] = {  {&_swigt__p_ns_creeps__CAtTextAlignment, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ns_creeps__CAtTransparentBackground[] = {  {&_swigt__p_ns_creeps__CAtTransparentBackground, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ns_creeps__CreEPS[] = {  {&_swigt__p_ns_creeps__CreEPS, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofAbstractImage[] = {{&_swigt__p_ofAbstractImage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBaseVideoDraws[] = {{&_swigt__p_ofBaseVideoDraws, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofVideoGrabber[] = {{&_swigt__p_ofVideoGrabber, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofVideoPlayer[] = {{&_swigt__p_ofVideoPlayer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBaseDraws[] = {  {&_swigt__p_ofBaseDraws, 0, 0, 0},  {&_swigt__p_ofAbstractImage, _p_ofAbstractImageTo_p_ofBaseDraws, 0, 0},  {&_swigt__p_ofBaseVideoDraws, _p_ofBaseVideoDrawsTo_p_ofBaseDraws, 0, 0},  {&_swigt__p_ofFbo, _p_ofFboTo_p_ofBaseDraws, 0, 0},  {&_swigt__p_ofTexture, _p_ofTextureTo_p_ofBaseDraws, 0, 0},  {&_swigt__p_ofVideoGrabber, _p_ofVideoGrabberTo_p_ofBaseDraws, 0, 0},  {&_swigt__p_ofVideoPlayer, _p_ofVideoPlayerTo_p_ofBaseDraws, 0, 0},  {&_swigt__p_ofxCvContourFinder, _p_ofxCvContourFinderTo_p_ofBaseDraws, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBaseImage_T_unsigned_char_t[] = {  {&_swigt__p_ofBaseImage_T_unsigned_char_t, 0, 0, 0},  {&_swigt__p_ofImage_T_unsigned_char_t, _p_ofImage_T_unsigned_char_tTo_p_ofBaseImage_T_unsigned_char_t, 0, 0},  {&_swigt__p_ofxCvColorImage, _p_ofxCvColorImageTo_p_ofBaseImage_T_unsigned_char_t, 0, 0},  {&_swigt__p_ofxCvFloatImage, _p_ofxCvFloatImageTo_p_ofBaseImage_T_unsigned_char_t, 0, 0},  {&_swigt__p_ofxCvGrayscaleImage, _p_ofxCvGrayscaleImageTo_p_ofBaseImage_T_unsigned_char_t, 0, 0},  {&_swigt__p_ofxCvImage, _p_ofxCvImageTo_p_ofBaseImage_T_unsigned_char_t, 0, 0},  {&_swigt__p_ofxCvShortImage, _p_ofxCvShortImageTo_p_ofBaseImage_T_unsigned_char_t, 0, 0},  {&_swigt__p_ofxImageSequencePlayer, _p_ofxImageSequencePlayerTo_p_ofBaseImage_T_unsigned_char_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBuffer[] = {  {&_swigt__p_ofBuffer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofColor_T_float_t[] = {  {&_swigt__p_ofColor_T_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofColor_T_unsigned_char_t[] = {  {&_swigt__p_ofColor_T_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofColor_T_unsigned_short_t[] = {  {&_swigt__p_ofColor_T_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofKeyEventArgs[] = {{&_swigt__p_ofKeyEventArgs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofMessage[] = {{&_swigt__p_ofMessage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofResizeEventArgs[] = {{&_swigt__p_ofResizeEventArgs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofEventArgs[] = {  {&_swigt__p_ofEventArgs, 0, 0, 0},  {&_swigt__p_ofKeyEventArgs, _p_ofKeyEventArgsTo_p_ofEventArgs, 0, 0},  {&_swigt__p_ofMessage, _p_ofMessageTo_p_ofEventArgs, 0, 0},  {&_swigt__p_ofMouseEventArgs, _p_ofMouseEventArgsTo_p_ofEventArgs, 0, 0},  {&_swigt__p_ofResizeEventArgs, _p_ofResizeEventArgsTo_p_ofEventArgs, 0, 0},  {&_swigt__p_ofTouchEventArgs, _p_ofTouchEventArgsTo_p_ofEventArgs, 0, 0},  {&_swigt__p_ofWindowPosEventArgs, _p_ofWindowPosEventArgsTo_p_ofEventArgs, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofFbo[] = {  {&_swigt__p_ofFbo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofImage_T_float_t[] = {  {&_swigt__p_ofImage_T_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofImage_T_unsigned_char_t[] = {  {&_swigt__p_ofImage_T_unsigned_char_t, 0, 0, 0},  {&_swigt__p_ofxImageSequencePlayer, _p_ofxImageSequencePlayerTo_p_ofImage_T_unsigned_char_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofImage_T_unsigned_short_t[] = {  {&_swigt__p_ofImage_T_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofMaterial[] = {  {&_swigt__p_ofMaterial, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofMeshFace_T_ofDefaultVertexType_ofDefaultNormalType_ofDefaultColorType_ofDefaultTexCoordType_t[] = {  {&_swigt__p_ofMeshFace_T_ofDefaultVertexType_ofDefaultNormalType_ofDefaultColorType_ofDefaultTexCoordType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofVboMesh[] = {{&_swigt__p_ofVboMesh, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofMesh_T_ofDefaultVertexType_ofDefaultNormalType_ofDefaultColorType_ofDefaultTexCoordType_t[] = {  {&_swigt__p_ofMesh_T_ofDefaultVertexType_ofDefaultNormalType_ofDefaultColorType_ofDefaultTexCoordType_t, 0, 0, 0},  {&_swigt__p_ofVboMesh, _p_ofVboMeshTo_p_ofMesh_T_ofDefaultVertexType_ofDefaultNormalType_ofDefaultColorType_ofDefaultTexCoordType_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofPixels_T_float_t[] = {  {&_swigt__p_ofPixels_T_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofPixels_T_unsigned_char_t[] = {  {&_swigt__p_ofPixels_T_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofPixels_T_unsigned_short_t[] = {  {&_swigt__p_ofPixels_T_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofPolyline_T_ofDefaultVertexType_t[] = {  {&_swigt__p_ofPolyline_T_ofDefaultVertexType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofRectangle[] = {  {&_swigt__p_ofRectangle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofTexture[] = {  {&_swigt__p_ofTexture, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofVec3f[] = {  {&_swigt__p_ofVec3f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxAssimpAnimation[] = {  {&_swigt__p_ofxAssimpAnimation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxAssimpMeshHelper[] = {  {&_swigt__p_ofxAssimpMeshHelper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxAssimpModelLoader[] = {  {&_swigt__p_ofxAssimpModelLoader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxCvBlob[] = {  {&_swigt__p_ofxCvBlob, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxCvColorImage[] = {  {&_swigt__p_ofxCvColorImage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxCvContourFinder[] = {  {&_swigt__p_ofxCvContourFinder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxCvFloatImage[] = {  {&_swigt__p_ofxCvFloatImage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxCvGrayscaleImage[] = {  {&_swigt__p_ofxCvGrayscaleImage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxCvHaarFinder[] = {  {&_swigt__p_ofxCvHaarFinder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxCvImage[] = {  {&_swigt__p_ofxCvImage, 0, 0, 0},  {&_swigt__p_ofxCvColorImage, _p_ofxCvColorImageTo_p_ofxCvImage, 0, 0},  {&_swigt__p_ofxCvFloatImage, _p_ofxCvFloatImageTo_p_ofxCvImage, 0, 0},  {&_swigt__p_ofxCvGrayscaleImage, _p_ofxCvGrayscaleImageTo_p_ofxCvImage, 0, 0},  {&_swigt__p_ofxCvShortImage, _p_ofxCvShortImageTo_p_ofxCvImage, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxCvShortImage[] = {  {&_swigt__p_ofxCvShortImage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxImGuiContext[] = {  {&_swigt__p_ofxImGuiContext, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxImGui__Gui[] = {  {&_swigt__p_ofxImGui__Gui, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxImageSequencePlayer[] = {  {&_swigt__p_ofxImageSequencePlayer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxTextureData3d[] = {  {&_swigt__p_ofxTextureData3d, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxVectorGraphics[] = {  {&_swigt__p_ofxVectorGraphics, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxVolumetrics[] = {  {&_swigt__p_ofxVolumetrics, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sd_ctx_t[] = {  {&_swigt__p_sd_ctx_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sd_image_t[] = {  {&_swigt__p_sd_image_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_aiScene_const_t[] = {  {&_swigt__p_std__shared_ptrT_aiScene_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_ofAppBaseWindow_t[] = {  {&_swigt__p_std__shared_ptrT_ofAppBaseWindow_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_glm__vec3_t[] = {  {&_swigt__p_std__vectorT_glm__vec3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ofxCvBlob_t[] = {  {&_swigt__p_std__vectorT_ofxCvBlob_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_t[] = {  {&_swigt__p_std__vectorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_string[] = {  {&_swigt__p_string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_upscaler_ctx_t[] = {  {&_swigt__p_upscaler_ctx_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Base,
  _swigc__p_BaseTheme,
  _swigc__p_ColorType,
  _swigc__p_CreEPS_BOOL,
  _swigc__p_CreEPS_CHAR,
  _swigc__p_CreEPS_FLOAT,
  _swigc__p_CreEPS_INT,
  _swigc__p_FILE,
  _swigc__p_ImFont,
  _swigc__p_ImFontConfig,
  _swigc__p_ImGuiConfigFlags,
  _swigc__p_ImGuiContext,
  _swigc__p_ImWchar,
  _swigc__p_IplImage,
  _swigc__p_Node,
  _swigc__p_NormalType,
  _swigc__p_SortMode,
  _swigc__p_TexCoordType,
  _swigc__p_VertexType,
  _swigc__p__XDisplay,
  _swigc__p_a_2__CreEPS_FLOAT,
  _swigc__p_aiAnimation,
  _swigc__p_aiScene,
  _swigc__p_cv__Mat,
  _swigc__p_difference_type,
  _swigc__p_f_enum_sd_log_level_t_p_q_const__char_p_void__void,
  _swigc__p_f_int_int_float_p_void__void,
  _swigc__p_f_q_const__p_q_const__CreEPS_CHAR_v_______void,
  _swigc__p_float,
  _swigc__p_glm__mat4,
  _swigc__p_glm__vec2,
  _swigc__p_glm__vec3,
  _swigc__p_int,
  _swigc__p_long_long,
  _swigc__p_ns_creeps__CAt,
  _swigc__p_ns_creeps__CAtBackgroundColor,
  _swigc__p_ns_creeps__CAtCheckerboardFilling,
  _swigc__p_ns_creeps__CAtColor,
  _swigc__p_ns_creeps__CAtFont,
  _swigc__p_ns_creeps__CAtGrayScale,
  _swigc__p_ns_creeps__CAtHexDotFilling,
  _swigc__p_ns_creeps__CAtLineCap,
  _swigc__p_ns_creeps__CAtLineDash,
  _swigc__p_ns_creeps__CAtLineJoin,
  _swigc__p_ns_creeps__CAtLineThickness,
  _swigc__p_ns_creeps__CAtStripeFilling,
  _swigc__p_ns_creeps__CAtTextAlignment,
  _swigc__p_ns_creeps__CAtTransparentBackground,
  _swigc__p_ns_creeps__CreEPS,
  _swigc__p_ofAbstractImage,
  _swigc__p_ofBaseDraws,
  _swigc__p_ofBaseImage_T_unsigned_char_t,
  _swigc__p_ofBaseVideoDraws,
  _swigc__p_ofBuffer,
  _swigc__p_ofColor_T_float_t,
  _swigc__p_ofColor_T_unsigned_char_t,
  _swigc__p_ofColor_T_unsigned_short_t,
  _swigc__p_ofEventArgs,
  _swigc__p_ofFbo,
  _swigc__p_ofImage_T_float_t,
  _swigc__p_ofImage_T_unsigned_char_t,
  _swigc__p_ofImage_T_unsigned_short_t,
  _swigc__p_ofKeyEventArgs,
  _swigc__p_ofMaterial,
  _swigc__p_ofMeshFace_T_ofDefaultVertexType_ofDefaultNormalType_ofDefaultColorType_ofDefaultTexCoordType_t,
  _swigc__p_ofMesh_T_ofDefaultVertexType_ofDefaultNormalType_ofDefaultColorType_ofDefaultTexCoordType_t,
  _swigc__p_ofMessage,
  _swigc__p_ofMouseEventArgs,
  _swigc__p_ofPixels_T_float_t,
  _swigc__p_ofPixels_T_unsigned_char_t,
  _swigc__p_ofPixels_T_unsigned_short_t,
  _swigc__p_ofPolyline_T_ofDefaultVertexType_t,
  _swigc__p_ofRectangle,
  _swigc__p_ofResizeEventArgs,
  _swigc__p_ofTexture,
  _swigc__p_ofTouchEventArgs,
  _swigc__p_ofVboMesh,
  _swigc__p_ofVec3f,
  _swigc__p_ofVideoGrabber,
  _swigc__p_ofVideoPlayer,
  _swigc__p_ofWindowPosEventArgs,
  _swigc__p_ofxAssimpAnimation,
  _swigc__p_ofxAssimpMeshHelper,
  _swigc__p_ofxAssimpModelLoader,
  _swigc__p_ofxCvBlob,
  _swigc__p_ofxCvColorImage,
  _swigc__p_ofxCvContourFinder,
  _swigc__p_ofxCvFloatImage,
  _swigc__p_ofxCvGrayscaleImage,
  _swigc__p_ofxCvHaarFinder,
  _swigc__p_ofxCvImage,
  _swigc__p_ofxCvShortImage,
  _swigc__p_ofxImGuiContext,
  _swigc__p_ofxImGui__Gui,
  _swigc__p_ofxImageSequencePlayer,
  _swigc__p_ofxTextureData3d,
  _swigc__p_ofxVectorGraphics,
  _swigc__p_ofxVolumetrics,
  _swigc__p_sd_ctx_t,
  _swigc__p_sd_image_t,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_size_type,
  _swigc__p_std__shared_ptrT_aiScene_const_t,
  _swigc__p_std__shared_ptrT_ofAppBaseWindow_t,
  _swigc__p_std__vectorT_glm__vec3_t,
  _swigc__p_std__vectorT_ofxCvBlob_t,
  _swigc__p_std__vectorT_std__string_t,
  _swigc__p_string,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_upscaler_ctx_t,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

