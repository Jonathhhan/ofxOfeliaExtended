/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040201
#define SWIGLUA
#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4
#define SWIG_POINTER_CLEAR         0x8
#define SWIG_POINTER_RELEASE       (SWIG_POINTER_CLEAR | SWIG_POINTER_DISOWN)

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
/* Runtime errors are < 0 */
#define SWIG_ERROR                 (-1)
/* Errors in range -1 to -99 are in swigerrors.swg (errors for all languages including those not using the runtime) */
/* Errors in range -100 to -199 are language specific errors defined in *errors.swg */
/* Errors < -200 are generic runtime specific errors */
#define SWIG_ERROR_RELEASE_NOT_OWNED (-200)

#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporary objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del object mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  Choose the last
     name. It should be the most specific; a fully resolved name
     but not necessarily with default template parameters expanded. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13


/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif

/* lua_tolstring() was added in Lua 5.1.  It should be a little more
   efficient than making two separate calls and it avoids problems with order
   of evaluation so SWIG calls lua_tolstring() when it wants the length and
   we provide a compatibility implementation for Lua 5.0.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
static const char *(lua_tolstring)(lua_State *L, int idx, size_t *len) {
  /* Call lua_tostring() first as it may convert the value from number to
     string. */
  const char *result = lua_tostring(L, idx);
  if (len) *len = lua_strlen(L, idx);
  return result;
}
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the location of the innermost Lua call-point
   (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the
   location of the innermost Lua call-point (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

#endif

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;


struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitrary amount of data */
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  do { if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } } while (0)


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers
it gets the address, casts it, then dereferences it */
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State *L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        }
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member)
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;

fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);

}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get_item(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  (void)first_arg;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get_item,ret);
  return bases_search_result;  /* sorry not known */
}


/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  (void)first_arg;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  result = SWIG_Lua_class_do_get_item(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  swig_lua_userdata* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = (swig_lua_userdata*)lua_touserdata(L,1); /* get the userdata address */

  lua_pushfstring(L, "<userdata of type '%s' at %p>", userData->type->str, userData->ptr);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */

  usr->own = 0; /* clear our ownership */
  return 0;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    SWIG_Lua_create_class_registry(L);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file.
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN void SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN void SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN void SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN void  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all its bases (recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metamethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows skipping searching metamethod in the given class and immediately going to searching in bases. skip_check
 * is not carried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */

  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);

  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));

  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1);

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index);

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);

      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success;
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metamethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  int ret = SWIG_ERROR;
  swig_lua_userdata *usr;
  swig_cast_info *cast;
  /* special case: lua nil => NULL pointer */
  if (lua_isnil(L,index))
  {
    *ptr=0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  if (lua_islightuserdata(L,index))
  {
    *ptr=lua_touserdata(L,index);
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (((flags & SWIG_POINTER_RELEASE) == SWIG_POINTER_RELEASE) && !usr->own)
    {
      return SWIG_ERROR_RELEASE_NOT_OWNED;
    }
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
      usr->own = 0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      ret = SWIG_OK;
    }
    else
    {
      cast=SWIG_TypeCheck(usr->type->name,type); /* performs normal type checking */
      if (cast)
      {
        int newmemory = 0;
        *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
        ret = SWIG_OK;
      }
    }
    if ((ret == SWIG_OK) && (flags & SWIG_POINTER_CLEAR))
    {
      usr->ptr = 0;
    }
  }
  return ret;
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result = 0;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata *usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushinteger(L,(lua_Integer)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      {
        char c = (char)constants[i].lvalue;
        lua_pushlstring(L,&c,1);
      }
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int
SWIG_Lua_dostring(lua_State *L, const char *str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_BaseTheme swig_types[0]
#define SWIGTYPE_p_GLuint swig_types[1]
#define SWIGTYPE_p_ImColor swig_types[2]
#define SWIGTYPE_p_ImDrawChannel swig_types[3]
#define SWIGTYPE_p_ImDrawCmd swig_types[4]
#define SWIGTYPE_p_ImDrawCmdHeader swig_types[5]
#define SWIGTYPE_p_ImDrawData swig_types[6]
#define SWIGTYPE_p_ImDrawList swig_types[7]
#define SWIGTYPE_p_ImDrawListSharedData swig_types[8]
#define SWIGTYPE_p_ImDrawListSplitter swig_types[9]
#define SWIGTYPE_p_ImDrawVert swig_types[10]
#define SWIGTYPE_p_ImFont swig_types[11]
#define SWIGTYPE_p_ImFontAtlas swig_types[12]
#define SWIGTYPE_p_ImFontAtlasCustomRect swig_types[13]
#define SWIGTYPE_p_ImFontBuilderIO swig_types[14]
#define SWIGTYPE_p_ImFontConfig swig_types[15]
#define SWIGTYPE_p_ImFontGlyph swig_types[16]
#define SWIGTYPE_p_ImFontGlyphRangesBuilder swig_types[17]
#define SWIGTYPE_p_ImGuiContext swig_types[18]
#define SWIGTYPE_p_ImGuiIO swig_types[19]
#define SWIGTYPE_p_ImGuiInputTextCallbackData swig_types[20]
#define SWIGTYPE_p_ImGuiKeyData swig_types[21]
#define SWIGTYPE_p_ImGuiListClipper swig_types[22]
#define SWIGTYPE_p_ImGuiMultiSelectIO swig_types[23]
#define SWIGTYPE_p_ImGuiOnceUponAFrame swig_types[24]
#define SWIGTYPE_p_ImGuiPayload swig_types[25]
#define SWIGTYPE_p_ImGuiPlatformIO swig_types[26]
#define SWIGTYPE_p_ImGuiPlatformImeData swig_types[27]
#define SWIGTYPE_p_ImGuiPlatformMonitor swig_types[28]
#define SWIGTYPE_p_ImGuiSelectionBasicStorage swig_types[29]
#define SWIGTYPE_p_ImGuiSelectionExternalStorage swig_types[30]
#define SWIGTYPE_p_ImGuiSelectionRequest swig_types[31]
#define SWIGTYPE_p_ImGuiSizeCallbackData swig_types[32]
#define SWIGTYPE_p_ImGuiStorage swig_types[33]
#define SWIGTYPE_p_ImGuiStoragePair swig_types[34]
#define SWIGTYPE_p_ImGuiStyle swig_types[35]
#define SWIGTYPE_p_ImGuiTableColumnSortSpecs swig_types[36]
#define SWIGTYPE_p_ImGuiTableSortSpecs swig_types[37]
#define SWIGTYPE_p_ImGuiTextBuffer swig_types[38]
#define SWIGTYPE_p_ImGuiTextFilter swig_types[39]
#define SWIGTYPE_p_ImGuiViewport swig_types[40]
#define SWIGTYPE_p_ImGuiWindowClass swig_types[41]
#define SWIGTYPE_p_ImNewWrapper swig_types[42]
#define SWIGTYPE_p_ImVec2 swig_types[43]
#define SWIGTYPE_p_ImVec4 swig_types[44]
#define SWIGTYPE_p_ImVectorT_ImDrawChannel_t swig_types[45]
#define SWIGTYPE_p_ImVectorT_ImDrawCmd_t swig_types[46]
#define SWIGTYPE_p_ImVectorT_ImDrawList_p_t swig_types[47]
#define SWIGTYPE_p_ImVectorT_ImDrawVert_t swig_types[48]
#define SWIGTYPE_p_ImVectorT_ImFontAtlasCustomRect_t swig_types[49]
#define SWIGTYPE_p_ImVectorT_ImFontConfig_t swig_types[50]
#define SWIGTYPE_p_ImVectorT_ImFontGlyph_t swig_types[51]
#define SWIGTYPE_p_ImVectorT_ImFont_p_t swig_types[52]
#define SWIGTYPE_p_ImVectorT_ImGuiPlatformMonitor_t swig_types[53]
#define SWIGTYPE_p_ImVectorT_ImGuiSelectionRequest_t swig_types[54]
#define SWIGTYPE_p_ImVectorT_ImGuiStoragePair_t swig_types[55]
#define SWIGTYPE_p_ImVectorT_ImGuiTextFilter__ImGuiTextRange_t swig_types[56]
#define SWIGTYPE_p_ImVectorT_ImGuiViewport_p_t swig_types[57]
#define SWIGTYPE_p_ImVectorT_ImVec2_t swig_types[58]
#define SWIGTYPE_p_ImVectorT_ImVec4_t swig_types[59]
#define SWIGTYPE_p_ImVectorT_char_t swig_types[60]
#define SWIGTYPE_p_ImVectorT_float_t swig_types[61]
#define SWIGTYPE_p_ImVectorT_int_t swig_types[62]
#define SWIGTYPE_p_ImVectorT_ofIndexType_t swig_types[63]
#define SWIGTYPE_p_ImVectorT_unsigned_char_t swig_types[64]
#define SWIGTYPE_p_ImVectorT_unsigned_int_t swig_types[65]
#define SWIGTYPE_p_ImVectorT_unsigned_short_t swig_types[66]
#define SWIGTYPE_p_bool swig_types[67]
#define SWIGTYPE_p_char swig_types[68]
#define SWIGTYPE_p_double swig_types[69]
#define SWIGTYPE_p_f_p_ImGuiContext__p_char swig_types[70]
#define SWIGTYPE_p_f_p_ImGuiContext_p_ImGuiViewport_p_ImGuiPlatformImeData__void swig_types[71]
#define SWIGTYPE_p_f_p_ImGuiContext_p_q_const__char__bool swig_types[72]
#define SWIGTYPE_p_f_p_ImGuiContext_p_q_const__char__void swig_types[73]
#define SWIGTYPE_p_f_p_ImGuiInputTextCallbackData__int swig_types[74]
#define SWIGTYPE_p_f_p_ImGuiSelectionBasicStorage_int__unsigned_int swig_types[75]
#define SWIGTYPE_p_f_p_ImGuiSelectionExternalStorage_int_bool__void swig_types[76]
#define SWIGTYPE_p_f_p_ImGuiSizeCallbackData__void swig_types[77]
#define SWIGTYPE_p_f_p_ImGuiViewport_ImVec2__void swig_types[78]
#define SWIGTYPE_p_f_p_ImGuiViewport__ImVec2 swig_types[79]
#define SWIGTYPE_p_f_p_ImGuiViewport__ImVec4 swig_types[80]
#define SWIGTYPE_p_f_p_ImGuiViewport__bool swig_types[81]
#define SWIGTYPE_p_f_p_ImGuiViewport__float swig_types[82]
#define SWIGTYPE_p_f_p_ImGuiViewport__void swig_types[83]
#define SWIGTYPE_p_f_p_ImGuiViewport_float__void swig_types[84]
#define SWIGTYPE_p_f_p_ImGuiViewport_p_q_const__char__void swig_types[85]
#define SWIGTYPE_p_f_p_ImGuiViewport_p_void__void swig_types[86]
#define SWIGTYPE_p_f_p_ImGuiViewport_unsigned_long_long_p_q_const__void_p_unsigned_long_long__int swig_types[87]
#define SWIGTYPE_p_f_p_q_const__ImDrawList_p_q_const__ImDrawCmd__void swig_types[88]
#define SWIGTYPE_p_f_p_void__p_char swig_types[89]
#define SWIGTYPE_p_f_p_void_int__float swig_types[90]
#define SWIGTYPE_p_f_p_void_int__p_char swig_types[91]
#define SWIGTYPE_p_f_p_void_int_p_p_q_const__char__bool swig_types[92]
#define SWIGTYPE_p_f_p_void_p_q_const__char__void swig_types[93]
#define SWIGTYPE_p_f_p_void_p_void__void swig_types[94]
#define SWIGTYPE_p_f_unsigned_int_p_void__p_void swig_types[95]
#define SWIGTYPE_p_float swig_types[96]
#define SWIGTYPE_p_glm__vec4 swig_types[97]
#define SWIGTYPE_p_int swig_types[98]
#define SWIGTYPE_p_long_long swig_types[99]
#define SWIGTYPE_p_ofColor swig_types[100]
#define SWIGTYPE_p_ofEventArgs swig_types[101]
#define SWIGTYPE_p_ofFloatColor swig_types[102]
#define SWIGTYPE_p_ofImage swig_types[103]
#define SWIGTYPE_p_ofIndexType swig_types[104]
#define SWIGTYPE_p_ofPixels swig_types[105]
#define SWIGTYPE_p_ofRectangle swig_types[106]
#define SWIGTYPE_p_ofTexture swig_types[107]
#define SWIGTYPE_p_ofVec2f swig_types[108]
#define SWIGTYPE_p_ofVec3f swig_types[109]
#define SWIGTYPE_p_ofVec4f swig_types[110]
#define SWIGTYPE_p_ofxImGuiContext swig_types[111]
#define SWIGTYPE_p_ofxImGui__Gui swig_types[112]
#define SWIGTYPE_p_p_char swig_types[113]
#define SWIGTYPE_p_p_f_p_void_p_void__void swig_types[114]
#define SWIGTYPE_p_p_f_unsigned_int_p_void__p_void swig_types[115]
#define SWIGTYPE_p_p_unsigned_char swig_types[116]
#define SWIGTYPE_p_p_void swig_types[117]
#define SWIGTYPE_p_short swig_types[118]
#define SWIGTYPE_p_signed_char swig_types[119]
#define SWIGTYPE_p_std__shared_ptrT_ofAppBaseWindow_t swig_types[120]
#define SWIGTYPE_p_std__string swig_types[121]
#define SWIGTYPE_p_unsigned_char swig_types[122]
#define SWIGTYPE_p_unsigned_int swig_types[123]
#define SWIGTYPE_p_unsigned_long_long swig_types[124]
#define SWIGTYPE_p_unsigned_short swig_types[125]
#define SWIGTYPE_p_va_list swig_types[126]
#define SWIGTYPE_p_void swig_types[127]
static swig_type_info *swig_types[129];
static swig_module_info swig_module = {swig_types, 128, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "ImGui"
#define SWIG_init      luaopen_ImGui
#define SWIG_init_user luaopen_ImGui_user

#define SWIG_LUACODE   luaopen_ImGui_luacode

#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


	#include "../libs/ofxImGui/src/Gui.h"
	#include "../libs/ofxImGui/libs/imgui/src/imgui.h"
	using namespace ofxImGui;
	using namespace ImGui;


#include <typeinfo>
#include <stdexcept>


#define SWIG_exception(a,b)\
{ lua_pushfstring(L,"%s:%s",#a,b);SWIG_fail; }


#include <typeinfo>
#include <stdexcept>


#include <string>


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}


#include <vector>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <utility>


#include <stdint.h>		// Use the C99 official header


static bool *new_BoolArray(size_t nelements) { 
  return new bool[nelements](); 
}

static void delete_BoolArray(bool *ary) { 
  delete [] ary; 
}

static bool BoolArray_getitem(bool *ary, size_t index) {
    return ary[index];
}
static void BoolArray_setitem(bool *ary, size_t index, bool value) {
    ary[index] = value;
}


static int *new_IntArray(size_t nelements) { 
  return new int[nelements](); 
}

static void delete_IntArray(int *ary) { 
  delete [] ary; 
}

static int IntArray_getitem(int *ary, size_t index) {
    return ary[index];
}
static void IntArray_setitem(int *ary, size_t index, int value) {
    ary[index] = value;
}


static float *new_FloatArray(size_t nelements) { 
  return new float[nelements](); 
}

static void delete_FloatArray(float *ary) { 
  delete [] ary; 
}

static float FloatArray_getitem(float *ary, size_t index) {
    return ary[index];
}
static void FloatArray_setitem(float *ary, size_t index, float value) {
    ary[index] = value;
}


static char *new_CharArray(size_t nelements) { 
  return new char[nelements](); 
}

static void delete_CharArray(char *ary) { 
  delete [] ary; 
}

static char CharArray_getitem(char *ary, size_t index) {
    return ary[index];
}
static void CharArray_setitem(char *ary, size_t index, char value) {
    ary[index] = value;
}


static unsigned int *new_UintArray(size_t nelements) { 
  return new unsigned int[nelements](); 
}

static void delete_UintArray(unsigned int *ary) { 
  delete [] ary; 
}

static unsigned int UintArray_getitem(unsigned int *ary, size_t index) {
    return ary[index];
}
static void UintArray_setitem(unsigned int *ary, size_t index, unsigned int value) {
    ary[index] = value;
}


static unsigned char *new_UcharArray(size_t nelements) { 
  return new unsigned char[nelements](); 
}

static void delete_UcharArray(unsigned char *ary) { 
  delete [] ary; 
}

static unsigned char UcharArray_getitem(unsigned char *ary, size_t index) {
    return ary[index];
}
static void UcharArray_setitem(unsigned char *ary, size_t index, unsigned char value) {
    ary[index] = value;
}


static char* *new_CharPArray(size_t nelements) { 
  return new char*[nelements](); 
}

static void delete_CharPArray(char* *ary) { 
  delete [] ary; 
}

static char* CharPArray_getitem(char* *ary, size_t index) {
    return ary[index];
}
static void CharPArray_setitem(char* *ary, size_t index, char* value) {
    ary[index] = value;
}


static ImDrawVert *new_ImDrawVertArray(size_t nelements) { 
  return new ImDrawVert[nelements](); 
}

static void delete_ImDrawVertArray(ImDrawVert *ary) { 
  delete [] ary; 
}

static ImDrawVert ImDrawVertArray_getitem(ImDrawVert *ary, size_t index) {
    return ary[index];
}
static void ImDrawVertArray_setitem(ImDrawVert *ary, size_t index, ImDrawVert value) {
    ary[index] = value;
}


static ImFontGlyph *new_ImFontGlyphArray(size_t nelements) { 
  return new ImFontGlyph[nelements](); 
}

static void delete_ImFontGlyphArray(ImFontGlyph *ary) { 
  delete [] ary; 
}

static ImFontGlyph ImFontGlyphArray_getitem(ImFontGlyph *ary, size_t index) {
    return ary[index];
}
static void ImFontGlyphArray_setitem(ImFontGlyph *ary, size_t index, ImFontGlyph value) {
    ary[index] = value;
}


static ImColor *new_ImColorArray(size_t nelements) { 
  return new ImColor[nelements](); 
}

static void delete_ImColorArray(ImColor *ary) { 
  delete [] ary; 
}

static ImColor ImColorArray_getitem(ImColor *ary, size_t index) {
    return ary[index];
}
static void ImColorArray_setitem(ImColor *ary, size_t index, ImColor value) {
    ary[index] = value;
}


static ImGuiStorage *new_ImGuiStorageArray(size_t nelements) { 
  return new ImGuiStorage[nelements](); 
}

static void delete_ImGuiStorageArray(ImGuiStorage *ary) { 
  delete [] ary; 
}

static ImGuiStorage ImGuiStorageArray_getitem(ImGuiStorage *ary, size_t index) {
    return ary[index];
}
static void ImGuiStorageArray_setitem(ImGuiStorage *ary, size_t index, ImGuiStorage value) {
    ary[index] = value;
}


static ImGuiViewport *new_ImGuiViewportArray(size_t nelements) { 
  return new ImGuiViewport[nelements](); 
}

static void delete_ImGuiViewportArray(ImGuiViewport *ary) { 
  delete [] ary; 
}

static ImGuiViewport ImGuiViewportArray_getitem(ImGuiViewport *ary, size_t index) {
    return ary[index];
}
static void ImGuiViewportArray_setitem(ImGuiViewport *ary, size_t index, ImGuiViewport value) {
    ary[index] = value;
}


#ifdef __cplusplus	/* generic alloc/dealloc fns*/
#define SWIG_ALLOC_ARRAY(TYPE,LEN) 	new TYPE[LEN]
#define SWIG_FREE_ARRAY(PTR)		delete[] PTR
#else
#define SWIG_ALLOC_ARRAY(TYPE,LEN) 	(TYPE *)malloc(LEN*sizeof(TYPE))
#define SWIG_FREE_ARRAY(PTR)		free(PTR)
#endif
/* counting the size of arrays:*/
SWIGINTERN int SWIG_itable_size(lua_State* L, int index)
{
	int n=0;
	while(1){
		lua_rawgeti(L,index,n+1);
		if (lua_isnil(L,-1))break;
		++n;
		lua_pop(L,1);
	}
	lua_pop(L,1);
	return n;
}

SWIGINTERN int SWIG_table_size(lua_State* L, int index)
{
	int n=0;
	lua_pushnil(L);  /* first key*/
	while (lua_next(L, index) != 0) {
		++n;
		lua_pop(L, 1);  /* removes `value'; keeps `key' for next iteration*/
	}
	return n;
}

/* super macro to declare array typemap helper fns */
#define SWIG_DECLARE_TYPEMAP_ARR_FN(NAME,TYPE)\
	SWIGINTERN int SWIG_read_##NAME##_num_array(lua_State* L,int index,TYPE *array,int size){\
		int i;\
		for (i = 0; i < size; i++) {\
			lua_rawgeti(L,index,i+1);\
			if (lua_isnumber(L,-1)){\
				array[i] = (TYPE)lua_tonumber(L,-1);\
			} else {\
				lua_pop(L,1);\
				return 0;\
			}\
			lua_pop(L,1);\
		}\
		return 1;\
	}\
	SWIGINTERN TYPE* SWIG_get_##NAME##_num_array_fixed(lua_State* L, int index, int size){\
		TYPE *array;\
		if (!lua_istable(L,index) || SWIG_itable_size(L,index) != size) {\
			SWIG_Lua_pushferrstring(L,"expected a table of size %d",size);\
			return 0;\
		}\
		array=SWIG_ALLOC_ARRAY(TYPE,size);\
		if (!SWIG_read_##NAME##_num_array(L,index,array,size)){\
			SWIG_Lua_pusherrstring(L,"table must contain numbers");\
			SWIG_FREE_ARRAY(array);\
			return 0;\
		}\
		return array;\
	}\
	SWIGINTERN TYPE* SWIG_get_##NAME##_num_array_var(lua_State* L, int index, int* size)\
	{\
		TYPE *array;\
		if (!lua_istable(L,index)) {\
			SWIG_Lua_pusherrstring(L,"expected a table");\
			return 0;\
		}\
		*size=SWIG_itable_size(L,index);\
		if (*size<1){\
			SWIG_Lua_pusherrstring(L,"table appears to be empty");\
			return 0;\
		}\
		array=SWIG_ALLOC_ARRAY(TYPE,*size);\
		if (!SWIG_read_##NAME##_num_array(L,index,array,*size)){\
			SWIG_Lua_pusherrstring(L,"table must contain numbers");\
			SWIG_FREE_ARRAY(array);\
			return 0;\
		}\
		return array;\
	}\
	SWIGINTERN void SWIG_write_##NAME##_num_array(lua_State* L,TYPE *array,int size){\
		int i;\
		lua_newtable(L);\
		for (i = 0; i < size; i++){\
			lua_pushnumber(L,(lua_Number)array[i]);\
			lua_rawseti(L,-2,i+1);/* -1 is the number, -2 is the table*/ \
		}\
	}

SWIG_DECLARE_TYPEMAP_ARR_FN(schar,signed char)
SWIG_DECLARE_TYPEMAP_ARR_FN(uchar,unsigned char)
SWIG_DECLARE_TYPEMAP_ARR_FN(int,int)
SWIG_DECLARE_TYPEMAP_ARR_FN(uint,unsigned int)
SWIG_DECLARE_TYPEMAP_ARR_FN(short,short)
SWIG_DECLARE_TYPEMAP_ARR_FN(ushort,unsigned short)
SWIG_DECLARE_TYPEMAP_ARR_FN(long,long)
SWIG_DECLARE_TYPEMAP_ARR_FN(ulong,unsigned long)
SWIG_DECLARE_TYPEMAP_ARR_FN(float,float)
SWIG_DECLARE_TYPEMAP_ARR_FN(double,double)

SWIGINTERN int SWIG_read_ptr_array(lua_State* L,int index,void **array,int size,swig_type_info *type){
	int i;
	for (i = 0; i < size; i++) {
		lua_rawgeti(L,index,i+1);
		if (!lua_isuserdata(L,-1) || SWIG_ConvertPtr(L,-1,&array[i],type,0)==-1){
			lua_pop(L,1);
			return 0;
		}
		lua_pop(L,1);
	}
	return 1;
}
SWIGINTERN void** SWIG_get_ptr_array_fixed(lua_State* L, int index, int size,swig_type_info *type){
	void **array;
	if (!lua_istable(L,index) || SWIG_itable_size(L,index) != size) {
		SWIG_Lua_pushferrstring(L,"expected a table of size %d",size);
		return 0;
	}
	array=SWIG_ALLOC_ARRAY(void*,size);
	if (!SWIG_read_ptr_array(L,index,array,size,type)){
		SWIG_Lua_pushferrstring(L,"table must contain pointers of type %s",type->name);
		SWIG_FREE_ARRAY(array);
		return 0;
	}
	return array;
}
SWIGINTERN void** SWIG_get_ptr_array_var(lua_State* L, int index, int* size,swig_type_info *type){
	void **array;
	if (!lua_istable(L,index)) {
		SWIG_Lua_pusherrstring(L,"expected a table");
		return 0;
	}
	*size=SWIG_itable_size(L,index);
	if (*size<1){
		SWIG_Lua_pusherrstring(L,"table appears to be empty");
		return 0;
	}
	array=SWIG_ALLOC_ARRAY(void*,*size);
	if (!SWIG_read_ptr_array(L,index,array,*size,type)){
		SWIG_Lua_pushferrstring(L,"table must contain pointers of type %s",type->name);
		SWIG_FREE_ARRAY(array);
		return 0;
	}
	return array;
}
SWIGINTERN void SWIG_write_ptr_array(lua_State* L,void **array,int size,swig_type_info *type,int own){
	int i;
	lua_newtable(L);
	for (i = 0; i < size; i++){
		SWIG_NewPointerObj(L,array[i],type,own);
		lua_rawseti(L,-2,i+1);/* -1 is the number, -2 is the table*/
	}
}


    bool _SWIGExtra_IMGUI_CHECKVERSION(){
        return IMGUI_CHECKVERSION();
    }

    float* ImVec2AsFloatP(ImVec2* vec){
        return (float*) vec;
    }
    float* ImVec4AsFloatP(ImVec4* vec){
        return (float*) vec;
    }
    ImVec2* FloatPAsImVec2(float* p){
        return (ImVec2*) p;
    }
    ImVec4* FloatPAsImVec4(float* p){
        return (ImVec4*) p;
    }



#include <memory>


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_string__SWIG_0(lua_State* L) { { int SWIG_arg = 0; std::string *result = 0 ;
    SWIG_check_num_args("std::string::string",0,0) result = (std::string *)new std::string();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_new_string__SWIG_1(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; std::string *result = 0 ;
    SWIG_check_num_args("std::string::string",1,1)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("std::string::string",1,"char const *"); arg1 = (char *)lua_tostring(L, 1);
    result = (std::string *)new std::string((char const *)arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_new_string(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_string__SWIG_0(L);}  if (argc == 1) { int _v = 0; { _v = SWIG_lua_isnilstring(L,argv[0]); }  if (_v) {
      return _wrap_new_string__SWIG_1(L);}  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_string'\n"
  "  Possible C/C++ prototypes are:\n" "    std::string::string()\n" "    std::string::string(char const *)\n");
  lua_error(L);return 0; }
static int _wrap_string_size(lua_State* L) { { int SWIG_arg = 0; std::string *arg1 = (std::string *) 0 ; unsigned int result;
    SWIG_check_num_args("std::string::size",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::size",1,"std::string const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
      SWIG_fail_ptr("string_size",1,SWIGTYPE_p_std__string); }  result = (unsigned int)((std::string const *)arg1)->size();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_string_length(lua_State* L) { { int SWIG_arg = 0; std::string *arg1 = (std::string *) 0 ; unsigned int result;
    SWIG_check_num_args("std::string::length",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::length",1,"std::string const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
      SWIG_fail_ptr("string_length",1,SWIGTYPE_p_std__string); }  result = (unsigned int)((std::string const *)arg1)->length();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_string_empty(lua_State* L) { { int SWIG_arg = 0; std::string *arg1 = (std::string *) 0 ; bool result;
    SWIG_check_num_args("std::string::empty",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::empty",1,"std::string const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
      SWIG_fail_ptr("string_empty",1,SWIGTYPE_p_std__string); }  result = (bool)((std::string const *)arg1)->empty();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_string_c_str(lua_State* L) { { int SWIG_arg = 0; std::string *arg1 = (std::string *) 0 ; char *result = 0 ;
    SWIG_check_num_args("std::string::c_str",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::c_str",1,"std::string const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
      SWIG_fail_ptr("string_c_str",1,SWIGTYPE_p_std__string); }  result = (char *)((std::string const *)arg1)->c_str();
    lua_pushstring(L,(const char *)result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_string_data(lua_State* L) { { int SWIG_arg = 0; std::string *arg1 = (std::string *) 0 ; char *result = 0 ;
    SWIG_check_num_args("std::string::data",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::data",1,"std::string const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
      SWIG_fail_ptr("string_data",1,SWIGTYPE_p_std__string); }  result = (char *)((std::string const *)arg1)->data();
    lua_pushstring(L,(const char *)result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_string_assign(lua_State* L) { { int SWIG_arg = 0; std::string *arg1 = (std::string *) 0 ;
    char *arg2 = (char *) 0 ; SWIG_check_num_args("std::string::assign",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::assign",1,"std::string *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("std::string::assign",2,"char const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
      SWIG_fail_ptr("string_assign",1,SWIGTYPE_p_std__string); }  arg2 = (char *)lua_tostring(L, 2);
    (arg1)->assign((char const *)arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static void swig_delete_string(void *obj) {
std::string *arg1 = (std::string *) obj;
delete arg1;
}
static int _proxy__wrap_new_string(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_string);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_string_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_string_methods[]= {
    { "size", _wrap_string_size},
    { "length", _wrap_string_length},
    { "empty", _wrap_string_empty},
    { "c_str", _wrap_string_c_str},
    { "data", _wrap_string_data},
    { "assign", _wrap_string_assign},
    {0,0}
};
static swig_lua_method swig_string_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_string_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_string_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_string_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_string_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_string_Sf_SwigStatic = {
    "string",
    swig_string_Sf_SwigStatic_methods,
    swig_string_Sf_SwigStatic_attributes,
    swig_string_Sf_SwigStatic_constants,
    swig_string_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_string_bases[] = {0};
static const char *swig_string_base_names[] = {0};
static swig_lua_class _wrap_class_string = { "string", "string", &SWIGTYPE_p_std__string,_proxy__wrap_new_string, swig_delete_string, swig_string_methods, swig_string_attributes, &swig_string_Sf_SwigStatic, swig_string_meta, swig_string_bases, swig_string_base_names };

static int _wrap_new_BoolArray(lua_State* L) { { int SWIG_arg = 0; size_t arg1 ; bool *result = 0 ;
    SWIG_check_num_args("new_BoolArray",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("new_BoolArray",1,"size_t");
    SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative"); arg1 = (size_t)lua_tonumber(L, 1);
    result = (bool *)new_BoolArray(arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_bool,0); SWIG_arg++;  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_delete_BoolArray(lua_State* L) { { int SWIG_arg = 0; bool *arg1 = (bool *) 0 ;
    SWIG_check_num_args("delete_BoolArray",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("delete_BoolArray",1,"bool *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bool,0))){ SWIG_fail_ptr("delete_BoolArray",1,SWIGTYPE_p_bool); }
     delete_BoolArray(arg1); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_BoolArray_getitem(lua_State* L) { { int SWIG_arg = 0; bool *arg1 = (bool *) 0 ; size_t arg2 ; bool result;
    SWIG_check_num_args("BoolArray_getitem",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BoolArray_getitem",1,"bool *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("BoolArray_getitem",2,"size_t");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bool,0))){
      SWIG_fail_ptr("BoolArray_getitem",1,SWIGTYPE_p_bool); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (size_t)lua_tonumber(L, 2);
    result = (bool)BoolArray_getitem(arg1,arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_BoolArray_setitem(lua_State* L) { { int SWIG_arg = 0; bool *arg1 = (bool *) 0 ; size_t arg2 ; bool arg3 ;
    SWIG_check_num_args("BoolArray_setitem",3,3) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BoolArray_setitem",1,"bool *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("BoolArray_setitem",2,"size_t");
    if(!lua_isboolean(L,3)) SWIG_fail_arg("BoolArray_setitem",3,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bool,0))){
      SWIG_fail_ptr("BoolArray_setitem",1,SWIGTYPE_p_bool); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (size_t)lua_tonumber(L, 2);
    arg3 = (lua_toboolean(L, 3)!=0); BoolArray_setitem(arg1,arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_new_IntArray(lua_State* L) { { int SWIG_arg = 0; size_t arg1 ; int *result = 0 ;
    SWIG_check_num_args("new_IntArray",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("new_IntArray",1,"size_t");
    SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative"); arg1 = (size_t)lua_tonumber(L, 1);
    result = (int *)new_IntArray(arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++;  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_delete_IntArray(lua_State* L) { { int SWIG_arg = 0; int *arg1 = (int *) 0 ;
    SWIG_check_num_args("delete_IntArray",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("delete_IntArray",1,"int *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_int,0))){ SWIG_fail_ptr("delete_IntArray",1,SWIGTYPE_p_int); } 
    delete_IntArray(arg1); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_IntArray_getitem(lua_State* L) { { int SWIG_arg = 0; int *arg1 = (int *) 0 ; size_t arg2 ; int result;
    SWIG_check_num_args("IntArray_getitem",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IntArray_getitem",1,"int *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("IntArray_getitem",2,"size_t");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_int,0))){ SWIG_fail_ptr("IntArray_getitem",1,SWIGTYPE_p_int); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (size_t)lua_tonumber(L, 2);
    result = (int)IntArray_getitem(arg1,arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_IntArray_setitem(lua_State* L) { { int SWIG_arg = 0; int *arg1 = (int *) 0 ; size_t arg2 ; int arg3 ;
    SWIG_check_num_args("IntArray_setitem",3,3) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IntArray_setitem",1,"int *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("IntArray_setitem",2,"size_t");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("IntArray_setitem",3,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_int,0))){ SWIG_fail_ptr("IntArray_setitem",1,SWIGTYPE_p_int); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (size_t)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3); IntArray_setitem(arg1,arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_new_FloatArray(lua_State* L) { { int SWIG_arg = 0; size_t arg1 ; float *result = 0 ;
    SWIG_check_num_args("new_FloatArray",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("new_FloatArray",1,"size_t");
    SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative"); arg1 = (size_t)lua_tonumber(L, 1);
    result = (float *)new_FloatArray(arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++;  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_delete_FloatArray(lua_State* L) { { int SWIG_arg = 0; float *arg1 = (float *) 0 ;
    SWIG_check_num_args("delete_FloatArray",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("delete_FloatArray",1,"float *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("delete_FloatArray",1,SWIGTYPE_p_float); }  delete_FloatArray(arg1); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_FloatArray_getitem(lua_State* L) { { int SWIG_arg = 0; float *arg1 = (float *) 0 ; size_t arg2 ; float result;
    SWIG_check_num_args("FloatArray_getitem",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatArray_getitem",1,"float *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatArray_getitem",2,"size_t");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("FloatArray_getitem",1,SWIGTYPE_p_float); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (size_t)lua_tonumber(L, 2);
    result = (float)FloatArray_getitem(arg1,arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_FloatArray_setitem(lua_State* L) { { int SWIG_arg = 0; float *arg1 = (float *) 0 ; size_t arg2 ; float arg3 ;
    SWIG_check_num_args("FloatArray_setitem",3,3) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatArray_setitem",1,"float *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatArray_setitem",2,"size_t");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatArray_setitem",3,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("FloatArray_setitem",1,SWIGTYPE_p_float); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (size_t)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3); FloatArray_setitem(arg1,arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_new_CharArray(lua_State* L) { { int SWIG_arg = 0; size_t arg1 ; char *result = 0 ;
    SWIG_check_num_args("new_CharArray",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("new_CharArray",1,"size_t");
    SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative"); arg1 = (size_t)lua_tonumber(L, 1);
    result = (char *)new_CharArray(arg1); lua_pushstring(L,(const char *)result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_delete_CharArray(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ;
    SWIG_check_num_args("delete_CharArray",1,1) if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("delete_CharArray",1,"char *");
    arg1 = (char *)lua_tostring(L, 1); delete_CharArray(arg1); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CharArray_getitem(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; size_t arg2 ; char result;
    SWIG_check_num_args("CharArray_getitem",2,2) if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("CharArray_getitem",1,"char *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CharArray_getitem",2,"size_t"); arg1 = (char *)lua_tostring(L, 1);
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (size_t)lua_tonumber(L, 2);
    result = (char)CharArray_getitem(arg1,arg2); lua_pushlstring(L, &result, 1); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }
   lua_error(L); return 0; }
static int _wrap_CharArray_setitem(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; size_t arg2 ; char arg3 ;
    SWIG_check_num_args("CharArray_setitem",3,3) if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("CharArray_setitem",1,"char *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CharArray_setitem",2,"size_t");
    if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("CharArray_setitem",3,"char"); arg1 = (char *)lua_tostring(L, 1);
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (size_t)lua_tonumber(L, 2);
    arg3 = (lua_tostring(L, 3))[0]; CharArray_setitem(arg1,arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_new_UintArray(lua_State* L) { { int SWIG_arg = 0; size_t arg1 ; unsigned int *result = 0 ;
    SWIG_check_num_args("new_UintArray",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("new_UintArray",1,"size_t");
    SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative"); arg1 = (size_t)lua_tonumber(L, 1);
    result = (unsigned int *)new_UintArray(arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_delete_UintArray(lua_State* L) { { int SWIG_arg = 0; unsigned int *arg1 = (unsigned int *) 0 ;
    SWIG_check_num_args("delete_UintArray",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("delete_UintArray",1,"unsigned int *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_unsigned_int,0))){
      SWIG_fail_ptr("delete_UintArray",1,SWIGTYPE_p_unsigned_int); }  delete_UintArray(arg1); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_UintArray_getitem(lua_State* L) { { int SWIG_arg = 0; unsigned int *arg1 = (unsigned int *) 0 ; size_t arg2 ;
    unsigned int result; SWIG_check_num_args("UintArray_getitem",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UintArray_getitem",1,"unsigned int *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("UintArray_getitem",2,"size_t");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_unsigned_int,0))){
      SWIG_fail_ptr("UintArray_getitem",1,SWIGTYPE_p_unsigned_int); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (size_t)lua_tonumber(L, 2);
    result = (unsigned int)UintArray_getitem(arg1,arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_UintArray_setitem(lua_State* L) { { int SWIG_arg = 0; unsigned int *arg1 = (unsigned int *) 0 ; size_t arg2 ;
    unsigned int arg3 ; SWIG_check_num_args("UintArray_setitem",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UintArray_setitem",1,"unsigned int *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("UintArray_setitem",2,"size_t");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("UintArray_setitem",3,"unsigned int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_unsigned_int,0))){
      SWIG_fail_ptr("UintArray_setitem",1,SWIGTYPE_p_unsigned_int); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (size_t)lua_tonumber(L, 2);
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative"); arg3 = (unsigned int)lua_tonumber(L, 3);
    UintArray_setitem(arg1,arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_UcharArray(lua_State* L) { { int SWIG_arg = 0; size_t arg1 ; unsigned char *result = 0 ;
    SWIG_check_num_args("new_UcharArray",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("new_UcharArray",1,"size_t");
    SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative"); arg1 = (size_t)lua_tonumber(L, 1);
    result = (unsigned char *)new_UcharArray(arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_delete_UcharArray(lua_State* L) { { int SWIG_arg = 0; unsigned char *arg1 = (unsigned char *) 0 ;
    SWIG_check_num_args("delete_UcharArray",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("delete_UcharArray",1,"unsigned char *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_unsigned_char,0))){
      SWIG_fail_ptr("delete_UcharArray",1,SWIGTYPE_p_unsigned_char); }  delete_UcharArray(arg1); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_UcharArray_getitem(lua_State* L) { { int SWIG_arg = 0; unsigned char *arg1 = (unsigned char *) 0 ;
    size_t arg2 ; unsigned char result; SWIG_check_num_args("UcharArray_getitem",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UcharArray_getitem",1,"unsigned char *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("UcharArray_getitem",2,"size_t");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_unsigned_char,0))){
      SWIG_fail_ptr("UcharArray_getitem",1,SWIGTYPE_p_unsigned_char); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (size_t)lua_tonumber(L, 2);
    result = (unsigned char)UcharArray_getitem(arg1,arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_UcharArray_setitem(lua_State* L) { { int SWIG_arg = 0; unsigned char *arg1 = (unsigned char *) 0 ;
    size_t arg2 ; unsigned char arg3 ; SWIG_check_num_args("UcharArray_setitem",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UcharArray_setitem",1,"unsigned char *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("UcharArray_setitem",2,"size_t");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("UcharArray_setitem",3,"unsigned char");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_unsigned_char,0))){
      SWIG_fail_ptr("UcharArray_setitem",1,SWIGTYPE_p_unsigned_char); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (size_t)lua_tonumber(L, 2);
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative"); arg3 = (unsigned char)lua_tonumber(L, 3);
    UcharArray_setitem(arg1,arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_CharPArray(lua_State* L) { { int SWIG_arg = 0; size_t arg1 ; char **result = 0 ;
    SWIG_check_num_args("new_CharPArray",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("new_CharPArray",1,"size_t");
    SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative"); arg1 = (size_t)lua_tonumber(L, 1);
    result = (char **)new_CharPArray(arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_char,0); SWIG_arg++;  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_delete_CharPArray(lua_State* L) { { int SWIG_arg = 0; char **arg1 = (char **) 0 ;
    SWIG_check_num_args("delete_CharPArray",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("delete_CharPArray",1,"char **");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_char,0))){
      SWIG_fail_ptr("delete_CharPArray",1,SWIGTYPE_p_p_char); }  delete_CharPArray(arg1); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_CharPArray_getitem(lua_State* L) { { int SWIG_arg = 0; char **arg1 = (char **) 0 ; size_t arg2 ;
    char *result = 0 ; SWIG_check_num_args("CharPArray_getitem",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CharPArray_getitem",1,"char **");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CharPArray_getitem",2,"size_t");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_char,0))){
      SWIG_fail_ptr("CharPArray_getitem",1,SWIGTYPE_p_p_char); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (size_t)lua_tonumber(L, 2);
    result = (char *)CharPArray_getitem(arg1,arg2); lua_pushstring(L,(const char *)result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CharPArray_setitem(lua_State* L) { { int SWIG_arg = 0; char **arg1 = (char **) 0 ; size_t arg2 ;
    char *arg3 = (char *) 0 ; SWIG_check_num_args("CharPArray_setitem",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CharPArray_setitem",1,"char **");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("CharPArray_setitem",2,"size_t");
    if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("CharPArray_setitem",3,"char *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_char,0))){
      SWIG_fail_ptr("CharPArray_setitem",1,SWIGTYPE_p_p_char); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (size_t)lua_tonumber(L, 2);
    arg3 = (char *)lua_tostring(L, 3); CharPArray_setitem(arg1,arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_new_ImDrawVertArray(lua_State* L) { { int SWIG_arg = 0; size_t arg1 ; ImDrawVert *result = 0 ;
    SWIG_check_num_args("new_ImDrawVertArray",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("new_ImDrawVertArray",1,"size_t");
    SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative"); arg1 = (size_t)lua_tonumber(L, 1);
    result = (ImDrawVert *)new_ImDrawVertArray(arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImDrawVert,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_delete_ImDrawVertArray(lua_State* L) { { int SWIG_arg = 0; ImDrawVert *arg1 = (ImDrawVert *) 0 ;
    SWIG_check_num_args("delete_ImDrawVertArray",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("delete_ImDrawVertArray",1,"ImDrawVert *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawVert,0))){
      SWIG_fail_ptr("delete_ImDrawVertArray",1,SWIGTYPE_p_ImDrawVert); }  delete_ImDrawVertArray(arg1); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawVertArray_getitem(lua_State* L) { { int SWIG_arg = 0; ImDrawVert *arg1 = (ImDrawVert *) 0 ; size_t arg2 ;
    ImDrawVert result; SWIG_check_num_args("ImDrawVertArray_getitem",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawVertArray_getitem",1,"ImDrawVert *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawVertArray_getitem",2,"size_t");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawVert,0))){
      SWIG_fail_ptr("ImDrawVertArray_getitem",1,SWIGTYPE_p_ImDrawVert); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (size_t)lua_tonumber(L, 2);
    result = ImDrawVertArray_getitem(arg1,arg2); { ImDrawVert * resultptr = new ImDrawVert(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImDrawVert,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImDrawVertArray_setitem(lua_State* L) { { int SWIG_arg = 0; ImDrawVert *arg1 = (ImDrawVert *) 0 ; size_t arg2 ;
    ImDrawVert arg3 ; ImDrawVert *argp3 ; SWIG_check_num_args("ImDrawVertArray_setitem",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawVertArray_setitem",1,"ImDrawVert *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawVertArray_setitem",2,"size_t");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawVertArray_setitem",3,"ImDrawVert");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawVert,0))){
      SWIG_fail_ptr("ImDrawVertArray_setitem",1,SWIGTYPE_p_ImDrawVert); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (size_t)lua_tonumber(L, 2);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_ImDrawVert,0))){
      SWIG_fail_ptr("ImDrawVertArray_setitem",3,SWIGTYPE_p_ImDrawVert); }  arg3 = *argp3;
    ImDrawVertArray_setitem(arg1,arg2,SWIG_STD_MOVE(arg3)); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_ImFontGlyphArray(lua_State* L) { { int SWIG_arg = 0; size_t arg1 ; ImFontGlyph *result = 0 ;
    SWIG_check_num_args("new_ImFontGlyphArray",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("new_ImFontGlyphArray",1,"size_t");
    SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative"); arg1 = (size_t)lua_tonumber(L, 1);
    result = (ImFontGlyph *)new_ImFontGlyphArray(arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFontGlyph,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_delete_ImFontGlyphArray(lua_State* L) { { int SWIG_arg = 0; ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
    SWIG_check_num_args("delete_ImFontGlyphArray",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("delete_ImFontGlyphArray",1,"ImFontGlyph *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyph,0))){
      SWIG_fail_ptr("delete_ImFontGlyphArray",1,SWIGTYPE_p_ImFontGlyph); }  delete_ImFontGlyphArray(arg1); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontGlyphArray_getitem(lua_State* L) { { int SWIG_arg = 0; ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
    size_t arg2 ; ImFontGlyph result; SWIG_check_num_args("ImFontGlyphArray_getitem",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyphArray_getitem",1,"ImFontGlyph *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontGlyphArray_getitem",2,"size_t");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyph,0))){
      SWIG_fail_ptr("ImFontGlyphArray_getitem",1,SWIGTYPE_p_ImFontGlyph); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (size_t)lua_tonumber(L, 2);
    result = ImFontGlyphArray_getitem(arg1,arg2); { ImFontGlyph * resultptr = new ImFontGlyph(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImFontGlyph,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImFontGlyphArray_setitem(lua_State* L) { { int SWIG_arg = 0; ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
    size_t arg2 ; ImFontGlyph arg3 ; ImFontGlyph *argp3 ; SWIG_check_num_args("ImFontGlyphArray_setitem",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyphArray_setitem",1,"ImFontGlyph *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontGlyphArray_setitem",2,"size_t");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImFontGlyphArray_setitem",3,"ImFontGlyph");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyph,0))){
      SWIG_fail_ptr("ImFontGlyphArray_setitem",1,SWIGTYPE_p_ImFontGlyph); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (size_t)lua_tonumber(L, 2);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_ImFontGlyph,0))){
      SWIG_fail_ptr("ImFontGlyphArray_setitem",3,SWIGTYPE_p_ImFontGlyph); }  arg3 = *argp3;
    ImFontGlyphArray_setitem(arg1,arg2,SWIG_STD_MOVE(arg3)); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_ImColorArray(lua_State* L) { { int SWIG_arg = 0; size_t arg1 ; ImColor *result = 0 ;
    SWIG_check_num_args("new_ImColorArray",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("new_ImColorArray",1,"size_t");
    SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative"); arg1 = (size_t)lua_tonumber(L, 1);
    result = (ImColor *)new_ImColorArray(arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImColor,0); SWIG_arg++;  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_delete_ImColorArray(lua_State* L) { { int SWIG_arg = 0; ImColor *arg1 = (ImColor *) 0 ;
    SWIG_check_num_args("delete_ImColorArray",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("delete_ImColorArray",1,"ImColor *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImColor,0))){
      SWIG_fail_ptr("delete_ImColorArray",1,SWIGTYPE_p_ImColor); }  delete_ImColorArray(arg1); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImColorArray_getitem(lua_State* L) { { int SWIG_arg = 0; ImColor *arg1 = (ImColor *) 0 ; size_t arg2 ;
    ImColor result; SWIG_check_num_args("ImColorArray_getitem",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImColorArray_getitem",1,"ImColor *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImColorArray_getitem",2,"size_t");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImColor,0))){
      SWIG_fail_ptr("ImColorArray_getitem",1,SWIGTYPE_p_ImColor); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (size_t)lua_tonumber(L, 2);
    result = ImColorArray_getitem(arg1,arg2); { ImColor * resultptr = new ImColor(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImColor,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImColorArray_setitem(lua_State* L) { { int SWIG_arg = 0; ImColor *arg1 = (ImColor *) 0 ; size_t arg2 ;
    ImColor arg3 ; ImColor *argp3 ; SWIG_check_num_args("ImColorArray_setitem",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImColorArray_setitem",1,"ImColor *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImColorArray_setitem",2,"size_t");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImColorArray_setitem",3,"ImColor");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImColor,0))){
      SWIG_fail_ptr("ImColorArray_setitem",1,SWIGTYPE_p_ImColor); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (size_t)lua_tonumber(L, 2);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_ImColor,0))){
      SWIG_fail_ptr("ImColorArray_setitem",3,SWIGTYPE_p_ImColor); }  arg3 = *argp3;
    ImColorArray_setitem(arg1,arg2,SWIG_STD_MOVE(arg3)); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_ImGuiStorageArray(lua_State* L) { { int SWIG_arg = 0; size_t arg1 ; ImGuiStorage *result = 0 ;
    SWIG_check_num_args("new_ImGuiStorageArray",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("new_ImGuiStorageArray",1,"size_t");
    SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative"); arg1 = (size_t)lua_tonumber(L, 1);
    result = (ImGuiStorage *)new_ImGuiStorageArray(arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiStorage,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_delete_ImGuiStorageArray(lua_State* L) { { int SWIG_arg = 0; ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
    SWIG_check_num_args("delete_ImGuiStorageArray",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("delete_ImGuiStorageArray",1,"ImGuiStorage *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStorage,0))){
      SWIG_fail_ptr("delete_ImGuiStorageArray",1,SWIGTYPE_p_ImGuiStorage); }  delete_ImGuiStorageArray(arg1); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStorageArray_getitem(lua_State* L) { { int SWIG_arg = 0; ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
    size_t arg2 ; ImGuiStorage result; SWIG_check_num_args("ImGuiStorageArray_getitem",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStorageArray_getitem",1,"ImGuiStorage *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStorageArray_getitem",2,"size_t");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStorage,0))){
      SWIG_fail_ptr("ImGuiStorageArray_getitem",1,SWIGTYPE_p_ImGuiStorage); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (size_t)lua_tonumber(L, 2);
    result = ImGuiStorageArray_getitem(arg1,arg2); { ImGuiStorage * resultptr = new ImGuiStorage(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImGuiStorage,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiStorageArray_setitem(lua_State* L) { { int SWIG_arg = 0; ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
    size_t arg2 ; ImGuiStorage arg3 ; ImGuiStorage *argp3 ; SWIG_check_num_args("ImGuiStorageArray_setitem",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStorageArray_setitem",1,"ImGuiStorage *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStorageArray_setitem",2,"size_t");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImGuiStorageArray_setitem",3,"ImGuiStorage");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStorage,0))){
      SWIG_fail_ptr("ImGuiStorageArray_setitem",1,SWIGTYPE_p_ImGuiStorage); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (size_t)lua_tonumber(L, 2);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_ImGuiStorage,0))){
      SWIG_fail_ptr("ImGuiStorageArray_setitem",3,SWIGTYPE_p_ImGuiStorage); }  arg3 = *argp3;
    ImGuiStorageArray_setitem(arg1,arg2,SWIG_STD_MOVE(arg3)); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_ImGuiViewportArray(lua_State* L) { { int SWIG_arg = 0; size_t arg1 ; ImGuiViewport *result = 0 ;
    SWIG_check_num_args("new_ImGuiViewportArray",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("new_ImGuiViewportArray",1,"size_t");
    SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative"); arg1 = (size_t)lua_tonumber(L, 1);
    result = (ImGuiViewport *)new_ImGuiViewportArray(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiViewport,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_delete_ImGuiViewportArray(lua_State* L) { { int SWIG_arg = 0; ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
    SWIG_check_num_args("delete_ImGuiViewportArray",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("delete_ImGuiViewportArray",1,"ImGuiViewport *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
      SWIG_fail_ptr("delete_ImGuiViewportArray",1,SWIGTYPE_p_ImGuiViewport); }  delete_ImGuiViewportArray(arg1);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiViewportArray_getitem(lua_State* L) { { int SWIG_arg = 0; ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
    size_t arg2 ; ImGuiViewport result; SWIG_check_num_args("ImGuiViewportArray_getitem",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewportArray_getitem",1,"ImGuiViewport *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiViewportArray_getitem",2,"size_t");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
      SWIG_fail_ptr("ImGuiViewportArray_getitem",1,SWIGTYPE_p_ImGuiViewport); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (size_t)lua_tonumber(L, 2);
    result = ImGuiViewportArray_getitem(arg1,arg2); { ImGuiViewport * resultptr = new ImGuiViewport(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImGuiViewport,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiViewportArray_setitem(lua_State* L) { { int SWIG_arg = 0; ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
    size_t arg2 ; ImGuiViewport arg3 ; ImGuiViewport *argp3 ; SWIG_check_num_args("ImGuiViewportArray_setitem",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewportArray_setitem",1,"ImGuiViewport *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiViewportArray_setitem",2,"size_t");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImGuiViewportArray_setitem",3,"ImGuiViewport");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
      SWIG_fail_ptr("ImGuiViewportArray_setitem",1,SWIGTYPE_p_ImGuiViewport); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (size_t)lua_tonumber(L, 2);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_ImGuiViewport,0))){
      SWIG_fail_ptr("ImGuiViewportArray_setitem",3,SWIGTYPE_p_ImGuiViewport); }  arg3 = *argp3;
    ImGuiViewportArray_setitem(arg1,arg2,SWIG_STD_MOVE(arg3)); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofColorScale_get(lua_State* L) { { int SWIG_arg = 0; float result; SWIG_check_num_args("ofColorScale",0,0)
    result = (float)ofColorScale; lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap__SWIGExtra_IMGUI_CHECKVERSION(lua_State* L) { { int SWIG_arg = 0; bool result;
    SWIG_check_num_args("_SWIGExtra_IMGUI_CHECKVERSION",0,0) result = (bool)_SWIGExtra_IMGUI_CHECKVERSION();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImVec2AsFloatP(lua_State* L) { { int SWIG_arg = 0; ImVec2 *arg1 = (ImVec2 *) 0 ; float *result = 0 ;
    SWIG_check_num_args("ImVec2AsFloatP",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImVec2AsFloatP",1,"ImVec2 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImVec2AsFloatP",1,SWIGTYPE_p_ImVec2); }  result = (float *)ImVec2AsFloatP(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImVec4AsFloatP(lua_State* L) { { int SWIG_arg = 0; ImVec4 *arg1 = (ImVec4 *) 0 ; float *result = 0 ;
    SWIG_check_num_args("ImVec4AsFloatP",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImVec4AsFloatP",1,"ImVec4 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec4,0))){
      SWIG_fail_ptr("ImVec4AsFloatP",1,SWIGTYPE_p_ImVec4); }  result = (float *)ImVec4AsFloatP(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_FloatPAsImVec2(lua_State* L) { { int SWIG_arg = 0; float *arg1 = (float *) 0 ; ImVec2 *result = 0 ;
    SWIG_check_num_args("FloatPAsImVec2",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatPAsImVec2",1,"float *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){ SWIG_fail_ptr("FloatPAsImVec2",1,SWIGTYPE_p_float); }
     result = (ImVec2 *)FloatPAsImVec2(arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++;  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_FloatPAsImVec4(lua_State* L) { { int SWIG_arg = 0; float *arg1 = (float *) 0 ; ImVec4 *result = 0 ;
    SWIG_check_num_args("FloatPAsImVec4",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatPAsImVec4",1,"float *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){ SWIG_fail_ptr("FloatPAsImVec4",1,SWIGTYPE_p_float); }
     result = (ImVec4 *)FloatPAsImVec4(arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec4,0); SWIG_arg++;  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_ofxImGuiContext__SWIG_0(lua_State* L) { { int SWIG_arg = 0; std::shared_ptr< ofAppBaseWindow > *arg1 = 0 ;
    ofxImGuiContext *result = 0 ; SWIG_check_num_args("ofxImGuiContext::ofxImGuiContext",1,1)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofxImGuiContext::ofxImGuiContext",1,"std::shared_ptr< ofAppBaseWindow > &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__shared_ptrT_ofAppBaseWindow_t,0))){
      SWIG_fail_ptr("new_ofxImGuiContext",1,SWIGTYPE_p_std__shared_ptrT_ofAppBaseWindow_t); } 
    result = (ofxImGuiContext *)new ofxImGuiContext(*arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxImGuiContext,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_new_ofxImGuiContext__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxImGuiContext *arg1 = 0 ; void *argp1 = 0 ;
    int res1 = 0 ; std::unique_ptr< ofxImGuiContext > rvrdeleter1 ; ofxImGuiContext *result = 0 ;
    SWIG_check_num_args("ofxImGuiContext::ofxImGuiContext",1,1)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofxImGuiContext::ofxImGuiContext",1,"ofxImGuiContext &&");
    res1 = SWIG_ConvertPtr(L, 1, &argp1, SWIGTYPE_p_ofxImGuiContext, SWIG_POINTER_RELEASE); if (!SWIG_IsOK(res1)) {
      if (res1 == SWIG_ERROR_RELEASE_NOT_OWNED) {
        lua_pushfstring(L, "Cannot release ownership as memory is not owned for argument 1 of type 'ofxImGuiContext &&' in new_ofxImGuiContext"); SWIG_fail; }
       else { SWIG_fail_ptr("new_ofxImGuiContext", 1, SWIGTYPE_p_ofxImGuiContext); }  }  arg1 = (ofxImGuiContext *)argp1;
    rvrdeleter1.reset(arg1); result = (ofxImGuiContext *)new ofxImGuiContext((ofxImGuiContext &&)*arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxImGuiContext,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_new_ofxImGuiContext(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v = 0; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__shared_ptrT_ofAppBaseWindow_t, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_ofxImGuiContext__SWIG_0(L);}  }  if (argc == 1) { int _v = 0;
    { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxImGuiContext, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_ofxImGuiContext__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ofxImGuiContext'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxImGuiContext::ofxImGuiContext(std::shared_ptr< ofAppBaseWindow > &)\n"
  "    ofxImGuiContext::ofxImGuiContext(ofxImGuiContext &&)\n"); lua_error(L);return 0; }
static int _wrap_ofxImGuiContext_imguiContext_set(lua_State* L) { { int SWIG_arg = 0;
    ofxImGuiContext *arg1 = (ofxImGuiContext *) 0 ; ImGuiContext *arg2 = (ImGuiContext *) 0 ;
    SWIG_check_num_args("ofxImGuiContext::imguiContext",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGuiContext::imguiContext",1,"ofxImGuiContext *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxImGuiContext::imguiContext",2,"ImGuiContext *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGuiContext,0))){
      SWIG_fail_ptr("ofxImGuiContext_imguiContext_set",1,SWIGTYPE_p_ofxImGuiContext); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiContext,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("ofxImGuiContext_imguiContext_set",2,SWIGTYPE_p_ImGuiContext); }  if (arg1) (arg1)->imguiContext = arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxImGuiContext_imguiContext_get(lua_State* L) { { int SWIG_arg = 0;
    ofxImGuiContext *arg1 = (ofxImGuiContext *) 0 ; ImGuiContext *result = 0 ;
    SWIG_check_num_args("ofxImGuiContext::imguiContext",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGuiContext::imguiContext",1,"ofxImGuiContext *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGuiContext,0))){
      SWIG_fail_ptr("ofxImGuiContext_imguiContext_get",1,SWIGTYPE_p_ofxImGuiContext); } 
    result = (ImGuiContext *) ((arg1)->imguiContext); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiContext,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxImGuiContext_ofWindow_set(lua_State* L) { { int SWIG_arg = 0;
    ofxImGuiContext *arg1 = (ofxImGuiContext *) 0 ; std::shared_ptr< ofAppBaseWindow > arg2 ;
    std::shared_ptr< ofAppBaseWindow > *argp2 ; SWIG_check_num_args("ofxImGuiContext::ofWindow",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGuiContext::ofWindow",1,"ofxImGuiContext *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxImGuiContext::ofWindow",2,"std::shared_ptr< ofAppBaseWindow >");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGuiContext,0))){
      SWIG_fail_ptr("ofxImGuiContext_ofWindow_set",1,SWIGTYPE_p_ofxImGuiContext); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__shared_ptrT_ofAppBaseWindow_t,0))){
      SWIG_fail_ptr("ofxImGuiContext_ofWindow_set",2,SWIGTYPE_p_std__shared_ptrT_ofAppBaseWindow_t); }  arg2 = *argp2;
    if (arg1) (arg1)->ofWindow = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxImGuiContext_ofWindow_get(lua_State* L) { { int SWIG_arg = 0;
    ofxImGuiContext *arg1 = (ofxImGuiContext *) 0 ; std::shared_ptr< ofAppBaseWindow > result;
    SWIG_check_num_args("ofxImGuiContext::ofWindow",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGuiContext::ofWindow",1,"ofxImGuiContext *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGuiContext,0))){
      SWIG_fail_ptr("ofxImGuiContext_ofWindow_get",1,SWIGTYPE_p_ofxImGuiContext); }  result =  ((arg1)->ofWindow); {
      std::shared_ptr< ofAppBaseWindow > * resultptr = new std::shared_ptr< ofAppBaseWindow >(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_ofAppBaseWindow_t,1); SWIG_arg++; }  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxImGuiContext_autoDraw_set(lua_State* L) { { int SWIG_arg = 0;
    ofxImGuiContext *arg1 = (ofxImGuiContext *) 0 ; bool arg2 ; SWIG_check_num_args("ofxImGuiContext::autoDraw",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGuiContext::autoDraw",1,"ofxImGuiContext *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxImGuiContext::autoDraw",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGuiContext,0))){
      SWIG_fail_ptr("ofxImGuiContext_autoDraw_set",1,SWIGTYPE_p_ofxImGuiContext); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->autoDraw = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxImGuiContext_autoDraw_get(lua_State* L) { { int SWIG_arg = 0;
    ofxImGuiContext *arg1 = (ofxImGuiContext *) 0 ; bool result; SWIG_check_num_args("ofxImGuiContext::autoDraw",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGuiContext::autoDraw",1,"ofxImGuiContext *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGuiContext,0))){
      SWIG_fail_ptr("ofxImGuiContext_autoDraw_get",1,SWIGTYPE_p_ofxImGuiContext); }  result = (bool) ((arg1)->autoDraw);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxImGuiContext_isShared(lua_State* L) { { int SWIG_arg = 0; ofxImGuiContext *arg1 = (ofxImGuiContext *) 0 ;
    bool result; SWIG_check_num_args("ofxImGuiContext::isShared",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGuiContext::isShared",1,"ofxImGuiContext const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGuiContext,0))){
      SWIG_fail_ptr("ofxImGuiContext_isShared",1,SWIGTYPE_p_ofxImGuiContext); } 
    result = (bool)((ofxImGuiContext const *)arg1)->isShared(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static void swig_delete_ofxImGuiContext(void *obj) {
ofxImGuiContext *arg1 = (ofxImGuiContext *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofxImGuiContext(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofxImGuiContext);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofxImGuiContext_attributes[] = {
    { "imguiContext", _wrap_ofxImGuiContext_imguiContext_get, _wrap_ofxImGuiContext_imguiContext_set },
    { "ofWindow", _wrap_ofxImGuiContext_ofWindow_get, _wrap_ofxImGuiContext_ofWindow_set },
    { "autoDraw", _wrap_ofxImGuiContext_autoDraw_get, _wrap_ofxImGuiContext_autoDraw_set },
    {0,0,0}
};
static swig_lua_method swig_ofxImGuiContext_methods[]= {
    { "isShared", _wrap_ofxImGuiContext_isShared},
    {0,0}
};
static swig_lua_method swig_ofxImGuiContext_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofxImGuiContext_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofxImGuiContext_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofxImGuiContext_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofxImGuiContext_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofxImGuiContext_Sf_SwigStatic = {
    "ofxImGuiContext",
    swig_ofxImGuiContext_Sf_SwigStatic_methods,
    swig_ofxImGuiContext_Sf_SwigStatic_attributes,
    swig_ofxImGuiContext_Sf_SwigStatic_constants,
    swig_ofxImGuiContext_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofxImGuiContext_bases[] = {0};
static const char *swig_ofxImGuiContext_base_names[] = {0};
static swig_lua_class _wrap_class_ofxImGuiContext = { "ofxImGuiContext", "ofxImGuiContext", &SWIGTYPE_p_ofxImGuiContext,_proxy__wrap_new_ofxImGuiContext, swig_delete_ofxImGuiContext, swig_ofxImGuiContext_methods, swig_ofxImGuiContext_attributes, &swig_ofxImGuiContext_Sf_SwigStatic, swig_ofxImGuiContext_meta, swig_ofxImGuiContext_bases, swig_ofxImGuiContext_base_names };

static int _wrap_new_Gui(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *result = 0 ;
    SWIG_check_num_args("ofxImGui::Gui::Gui",0,0) result = (ofxImGui::Gui *)new ofxImGui::Gui();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxImGui__Gui,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_Gui_setup__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    BaseTheme *arg2 = (BaseTheme *) nullptr ; bool arg3 = (bool) true ;
    ImGuiConfigFlags arg4 = (ImGuiConfigFlags) ImGuiConfigFlags_None ; bool arg5 = (bool) false ; bool arg6 = (bool) false ;
    ofxImGui::SetupState result; SWIG_check_num_args("ofxImGui::Gui::setup",1,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::setup",1,"ofxImGui::Gui *");
    if(lua_gettop(L)>=2 && !SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxImGui::Gui::setup",2,"BaseTheme *");
    if(lua_gettop(L)>=3 && !lua_isboolean(L,3)) SWIG_fail_arg("ofxImGui::Gui::setup",3,"bool");
    if(lua_gettop(L)>=4 && !lua_isnumber(L,4)) SWIG_fail_arg("ofxImGui::Gui::setup",4,"ImGuiConfigFlags");
    if(lua_gettop(L)>=5 && !lua_isboolean(L,5)) SWIG_fail_arg("ofxImGui::Gui::setup",5,"bool");
    if(lua_gettop(L)>=6 && !lua_isboolean(L,6)) SWIG_fail_arg("ofxImGui::Gui::setup",6,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("Gui_setup",1,SWIGTYPE_p_ofxImGui__Gui); }  if(lua_gettop(L)>=2){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BaseTheme,0))){
        SWIG_fail_ptr("Gui_setup",2,SWIGTYPE_p_BaseTheme); }  }  if(lua_gettop(L)>=3){ arg3 = (lua_toboolean(L, 3)!=0);} 
    if(lua_gettop(L)>=4){ arg4 = (ImGuiConfigFlags)lua_tonumber(L, 4);}  if(lua_gettop(L)>=5){ arg5 = (lua_toboolean(L, 5)!=0);}
     if(lua_gettop(L)>=6){ arg6 = (lua_toboolean(L, 6)!=0);} 
    result = (ofxImGui::SetupState)(arg1)->setup(arg2,arg3,arg4,arg5,arg6);
    lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Gui_setup__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    std::shared_ptr< ofAppBaseWindow > *arg2 = 0 ; BaseTheme *arg3 = (BaseTheme *) nullptr ; bool arg4 = (bool) true ;
    ImGuiConfigFlags arg5 = (ImGuiConfigFlags) ImGuiConfigFlags_None ; bool arg6 = (bool) false ; bool arg7 = (bool) false ;
    ofxImGui::SetupState result; SWIG_check_num_args("ofxImGui::Gui::setup",2,7)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::setup",1,"ofxImGui::Gui *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxImGui::Gui::setup",2,"std::shared_ptr< ofAppBaseWindow > &");
    if(lua_gettop(L)>=3 && !SWIG_isptrtype(L,3)) SWIG_fail_arg("ofxImGui::Gui::setup",3,"BaseTheme *");
    if(lua_gettop(L)>=4 && !lua_isboolean(L,4)) SWIG_fail_arg("ofxImGui::Gui::setup",4,"bool");
    if(lua_gettop(L)>=5 && !lua_isnumber(L,5)) SWIG_fail_arg("ofxImGui::Gui::setup",5,"ImGuiConfigFlags");
    if(lua_gettop(L)>=6 && !lua_isboolean(L,6)) SWIG_fail_arg("ofxImGui::Gui::setup",6,"bool");
    if(lua_gettop(L)>=7 && !lua_isboolean(L,7)) SWIG_fail_arg("ofxImGui::Gui::setup",7,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("Gui_setup",1,SWIGTYPE_p_ofxImGui__Gui); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__shared_ptrT_ofAppBaseWindow_t,0))){
      SWIG_fail_ptr("Gui_setup",2,SWIGTYPE_p_std__shared_ptrT_ofAppBaseWindow_t); }  if(lua_gettop(L)>=3){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_BaseTheme,0))){
        SWIG_fail_ptr("Gui_setup",3,SWIGTYPE_p_BaseTheme); }  }  if(lua_gettop(L)>=4){ arg4 = (lua_toboolean(L, 4)!=0);} 
    if(lua_gettop(L)>=5){ arg5 = (ImGuiConfigFlags)lua_tonumber(L, 5);}  if(lua_gettop(L)>=6){ arg6 = (lua_toboolean(L, 6)!=0);}
     if(lua_gettop(L)>=7){ arg7 = (lua_toboolean(L, 7)!=0);} 
    result = (ofxImGui::SetupState)(arg1)->setup(*arg2,arg3,arg4,arg5,arg6,arg7);
    lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Gui_setup(lua_State* L) { int argc; int argv[8]={ 1,2,3,4,5,6,7,8} ; argc = lua_gettop(L);
  if ((argc >= 1) && (argc <= 6)) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxImGui__Gui, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { if (argc <= 1) { return _wrap_Gui_setup__SWIG_0(L);}  { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_BaseTheme, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { if (argc <= 2) { return _wrap_Gui_setup__SWIG_0(L);}  { _v = lua_isboolean(L,argv[2]); }
         if (_v) { if (argc <= 3) { return _wrap_Gui_setup__SWIG_0(L);}  { _v = lua_isnumber(L,argv[3]); }  if (_v) {
            if (argc <= 4) { return _wrap_Gui_setup__SWIG_0(L);}  { _v = lua_isboolean(L,argv[4]); }  if (_v) { if (argc <= 5) {
                return _wrap_Gui_setup__SWIG_0(L);}  { _v = lua_isboolean(L,argv[5]); }  if (_v) {
                return _wrap_Gui_setup__SWIG_0(L);}  }  }  }  }  }  }  if ((argc >= 2) && (argc <= 7)) { int _v = 0; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxImGui__Gui, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__shared_ptrT_ofAppBaseWindow_t, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { if (argc <= 2) { return _wrap_Gui_setup__SWIG_1(L);}  { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_BaseTheme, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { if (argc <= 3) { return _wrap_Gui_setup__SWIG_1(L);}  {
            _v = lua_isboolean(L,argv[3]); }  if (_v) { if (argc <= 4) { return _wrap_Gui_setup__SWIG_1(L);}  {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { if (argc <= 5) { return _wrap_Gui_setup__SWIG_1(L);}  {
                _v = lua_isboolean(L,argv[5]); }  if (_v) { if (argc <= 6) { return _wrap_Gui_setup__SWIG_1(L);}  {
                  _v = lua_isboolean(L,argv[6]); }  if (_v) { return _wrap_Gui_setup__SWIG_1(L);}  }  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Gui_setup'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxImGui::Gui::setup(BaseTheme *,bool,ImGuiConfigFlags,bool,bool)\n"
  "    ofxImGui::Gui::setup(std::shared_ptr< ofAppBaseWindow > &,BaseTheme *,bool,ImGuiConfigFlags,bool,bool)\n");
  lua_error(L);return 0; }
static int _wrap_Gui_exit(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    SWIG_check_num_args("ofxImGui::Gui::exit",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::exit",1,"ofxImGui::Gui *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("Gui_exit",1,SWIGTYPE_p_ofxImGui__Gui); }  (arg1)->exit(); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_Gui_isInSharedMode(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ; bool result;
    SWIG_check_num_args("ofxImGui::Gui::isInSharedMode",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::isInSharedMode",1,"ofxImGui::Gui const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("Gui_isInSharedMode",1,SWIGTYPE_p_ofxImGui__Gui); } 
    result = (bool)((ofxImGui::Gui const *)arg1)->isInSharedMode(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Gui_isMaster(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ; bool result;
    SWIG_check_num_args("ofxImGui::Gui::isMaster",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::isMaster",1,"ofxImGui::Gui const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("Gui_isMaster",1,SWIGTYPE_p_ofxImGui__Gui); }  result = (bool)((ofxImGui::Gui const *)arg1)->isMaster();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Gui_beginGui(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    SWIG_check_num_args("ofxImGui::Gui::begin",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::begin",1,"ofxImGui::Gui *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("Gui_beginGui",1,SWIGTYPE_p_ofxImGui__Gui); }  (arg1)->begin(); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_Gui_endGui(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    SWIG_check_num_args("ofxImGui::Gui::end",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::end",1,"ofxImGui::Gui *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("Gui_endGui",1,SWIGTYPE_p_ofxImGui__Gui); }  (arg1)->end(); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_Gui_draw(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    SWIG_check_num_args("ofxImGui::Gui::draw",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::draw",1,"ofxImGui::Gui *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("Gui_draw",1,SWIGTYPE_p_ofxImGui__Gui); }  (arg1)->draw(); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_Gui_setDefaultFont__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    int arg2 ; bool result; SWIG_check_num_args("ofxImGui::Gui::setDefaultFont",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::setDefaultFont",1,"ofxImGui::Gui *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxImGui::Gui::setDefaultFont",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("Gui_setDefaultFont",1,SWIGTYPE_p_ofxImGui__Gui); }  arg2 = (int)lua_tonumber(L, 2);
    result = (bool)(arg1)->setDefaultFont(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Gui_setDefaultFont__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    ImFont *arg2 = (ImFont *) 0 ; bool result; SWIG_check_num_args("ofxImGui::Gui::setDefaultFont",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::setDefaultFont",1,"ofxImGui::Gui *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxImGui::Gui::setDefaultFont",2,"ImFont *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("Gui_setDefaultFont",1,SWIGTYPE_p_ofxImGui__Gui); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("Gui_setDefaultFont",2,SWIGTYPE_p_ImFont); }  result = (bool)(arg1)->setDefaultFont(arg2);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Gui_setDefaultFont(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxImGui__Gui, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImFont, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Gui_setDefaultFont__SWIG_1(L);}  }  }  if (argc == 2) { int _v = 0; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxImGui__Gui, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_Gui_setDefaultFont__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Gui_setDefaultFont'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxImGui::Gui::setDefaultFont(int)\n" "    ofxImGui::Gui::setDefaultFont(ImFont *)\n"); lua_error(L);return 0; }
static int _wrap_Gui_addFont(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    std::string *arg2 = 0 ; float arg3 = (float) 13.0 ; ImFontConfig *arg4 = (ImFontConfig *) nullptr ;
    ImWchar *arg5 = (ImWchar *) nullptr ; bool arg6 = (bool) false ; std::string temp2 ; ImFont *result = 0 ;
    SWIG_check_num_args("ofxImGui::Gui::addFont",2,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::addFont",1,"ofxImGui::Gui *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxImGui::Gui::addFont",2,"std::string const &");
    if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("ofxImGui::Gui::addFont",3,"float");
    if(lua_gettop(L)>=4 && !SWIG_isptrtype(L,4)) SWIG_fail_arg("ofxImGui::Gui::addFont",4,"ImFontConfig const *");
    if(lua_gettop(L)>=5 && !SWIG_isptrtype(L,5)) SWIG_fail_arg("ofxImGui::Gui::addFont",5,"ImWchar const *");
    if(lua_gettop(L)>=6 && !lua_isboolean(L,6)) SWIG_fail_arg("ofxImGui::Gui::addFont",6,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("Gui_addFont",1,SWIGTYPE_p_ofxImGui__Gui); }  { size_t len; const char *ptr = lua_tolstring(L, 2, &len);
      temp2.assign(ptr, len); arg2=&temp2; }  if(lua_gettop(L)>=3){ arg3 = (float)lua_tonumber(L, 3);}  if(lua_gettop(L)>=4){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImFontConfig,0))){
        SWIG_fail_ptr("Gui_addFont",4,SWIGTYPE_p_ImFontConfig); }  }  if(lua_gettop(L)>=5){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_unsigned_short,0))){
        SWIG_fail_ptr("Gui_addFont",5,SWIGTYPE_p_unsigned_short); }  }  if(lua_gettop(L)>=6){ arg6 = (lua_toboolean(L, 6)!=0);} 
    result = (ImFont *)(arg1)->addFont((std::string const &)*arg2,arg3,(ImFontConfig const *)arg4,(ImWchar const *)arg5,arg6);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFont,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_Gui_addFontFromMemory(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    void *arg2 = (void *) 0 ; int arg3 ; float arg4 = (float) 13.0 ; ImFontConfig *arg5 = (ImFontConfig *) nullptr ;
    ImWchar *arg6 = (ImWchar *) nullptr ; bool arg7 = (bool) false ; ImFont *result = 0 ;
    SWIG_check_num_args("ofxImGui::Gui::addFontFromMemory",3,7)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::addFontFromMemory",1,"ofxImGui::Gui *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxImGui::Gui::addFontFromMemory",2,"void *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxImGui::Gui::addFontFromMemory",3,"int");
    if(lua_gettop(L)>=4 && !lua_isnumber(L,4)) SWIG_fail_arg("ofxImGui::Gui::addFontFromMemory",4,"float");
    if(lua_gettop(L)>=5 && !SWIG_isptrtype(L,5)) SWIG_fail_arg("ofxImGui::Gui::addFontFromMemory",5,"ImFontConfig const *");
    if(lua_gettop(L)>=6 && !SWIG_isptrtype(L,6)) SWIG_fail_arg("ofxImGui::Gui::addFontFromMemory",6,"ImWchar const *");
    if(lua_gettop(L)>=7 && !lua_isboolean(L,7)) SWIG_fail_arg("ofxImGui::Gui::addFontFromMemory",7,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("Gui_addFontFromMemory",1,SWIGTYPE_p_ofxImGui__Gui); } 
    arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Gui_addFontFromMemory"); arg3 = (int)lua_tonumber(L, 3); if(lua_gettop(L)>=4){
      arg4 = (float)lua_tonumber(L, 4);}  if(lua_gettop(L)>=5){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImFontConfig,0))){
        SWIG_fail_ptr("Gui_addFontFromMemory",5,SWIGTYPE_p_ImFontConfig); }  }  if(lua_gettop(L)>=6){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_unsigned_short,0))){
        SWIG_fail_ptr("Gui_addFontFromMemory",6,SWIGTYPE_p_unsigned_short); }  }  if(lua_gettop(L)>=7){
      arg7 = (lua_toboolean(L, 7)!=0);} 
    result = (ImFont *)(arg1)->addFontFromMemory(arg2,arg3,arg4,(ImFontConfig const *)arg5,(ImWchar const *)arg6,arg7);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFont,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_Gui_rebuildFontsTexture(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    bool result; SWIG_check_num_args("ofxImGui::Gui::rebuildFontsTexture",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::rebuildFontsTexture",1,"ofxImGui::Gui *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("Gui_rebuildFontsTexture",1,SWIGTYPE_p_ofxImGui__Gui); }  result = (bool)(arg1)->rebuildFontsTexture();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Gui_setTheme(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    BaseTheme *arg2 = (BaseTheme *) 0 ; SWIG_check_num_args("ofxImGui::Gui::setTheme",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::setTheme",1,"ofxImGui::Gui *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxImGui::Gui::setTheme",2,"BaseTheme *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("Gui_setTheme",1,SWIGTYPE_p_ofxImGui__Gui); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BaseTheme,0))){
      SWIG_fail_ptr("Gui_setTheme",2,SWIGTYPE_p_BaseTheme); }  (arg1)->setTheme(arg2); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_Gui_loadImage__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    ofImage *arg2 = 0 ; GLuint result; SWIG_check_num_args("ofxImGui::Gui::loadImage",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::loadImage",1,"ofxImGui::Gui *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxImGui::Gui::loadImage",2,"ofImage &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("Gui_loadImage",1,SWIGTYPE_p_ofxImGui__Gui); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofImage,0))){
      SWIG_fail_ptr("Gui_loadImage",2,SWIGTYPE_p_ofImage); }  result = (arg1)->loadImage(*arg2); {
      GLuint * resultptr = new GLuint(result); SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_GLuint,1); SWIG_arg++; } 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Gui_loadImage__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    std::string *arg2 = 0 ; std::string temp2 ; GLuint result; SWIG_check_num_args("ofxImGui::Gui::loadImage",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::loadImage",1,"ofxImGui::Gui *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxImGui::Gui::loadImage",2,"std::string const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("Gui_loadImage",1,SWIGTYPE_p_ofxImGui__Gui); }  { size_t len; const char *ptr = lua_tolstring(L, 2, &len);
      temp2.assign(ptr, len); arg2=&temp2; }  result = (arg1)->loadImage((std::string const &)*arg2); {
      GLuint * resultptr = new GLuint(result); SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_GLuint,1); SWIG_arg++; } 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Gui_loadImage(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxImGui__Gui, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofImage, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Gui_loadImage__SWIG_0(L);}  }  }  if (argc == 2) { int _v = 0;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxImGui__Gui, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_Gui_loadImage__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Gui_loadImage'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxImGui::Gui::loadImage(ofImage &)\n" "    ofxImGui::Gui::loadImage(std::string const &)\n"); lua_error(L);return 0; }
static int _wrap_Gui_loadPixels__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    std::string *arg2 = 0 ; std::string temp2 ; GLuint result; SWIG_check_num_args("ofxImGui::Gui::loadPixels",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::loadPixels",1,"ofxImGui::Gui *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxImGui::Gui::loadPixels",2,"std::string const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("Gui_loadPixels",1,SWIGTYPE_p_ofxImGui__Gui); }  { size_t len; const char *ptr = lua_tolstring(L, 2, &len);
      temp2.assign(ptr, len); arg2=&temp2; }  result = (arg1)->loadPixels((std::string const &)*arg2); {
      GLuint * resultptr = new GLuint(result); SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_GLuint,1); SWIG_arg++; } 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Gui_loadPixels__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    ofPixels *arg2 = 0 ; GLuint result; SWIG_check_num_args("ofxImGui::Gui::loadPixels",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::loadPixels",1,"ofxImGui::Gui *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxImGui::Gui::loadPixels",2,"ofPixels &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("Gui_loadPixels",1,SWIGTYPE_p_ofxImGui__Gui); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels,0))){
      SWIG_fail_ptr("Gui_loadPixels",2,SWIGTYPE_p_ofPixels); }  result = (arg1)->loadPixels(*arg2); {
      GLuint * resultptr = new GLuint(result); SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_GLuint,1); SWIG_arg++; } 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Gui_loadPixels(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxImGui__Gui, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Gui_loadPixels__SWIG_1(L);}  }  }  if (argc == 2) { int _v = 0;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxImGui__Gui, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_Gui_loadPixels__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Gui_loadPixels'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxImGui::Gui::loadPixels(std::string const &)\n" "    ofxImGui::Gui::loadPixels(ofPixels &)\n"); lua_error(L);return 0; }
static int _wrap_Gui_loadTexture__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    std::string *arg2 = 0 ; std::string temp2 ; GLuint result; SWIG_check_num_args("ofxImGui::Gui::loadTexture",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::loadTexture",1,"ofxImGui::Gui *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxImGui::Gui::loadTexture",2,"std::string const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("Gui_loadTexture",1,SWIGTYPE_p_ofxImGui__Gui); }  { size_t len; const char *ptr = lua_tolstring(L, 2, &len);
      temp2.assign(ptr, len); arg2=&temp2; }  result = (arg1)->loadTexture((std::string const &)*arg2); {
      GLuint * resultptr = new GLuint(result); SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_GLuint,1); SWIG_arg++; } 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Gui_loadTexture__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    ofTexture *arg2 = 0 ; std::string *arg3 = 0 ; std::string temp3 ; GLuint result;
    SWIG_check_num_args("ofxImGui::Gui::loadTexture",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::loadTexture",1,"ofxImGui::Gui *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxImGui::Gui::loadTexture",2,"ofTexture &");
    if(!lua_isstring(L,3)) SWIG_fail_arg("ofxImGui::Gui::loadTexture",3,"std::string const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("Gui_loadTexture",1,SWIGTYPE_p_ofxImGui__Gui); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofTexture,0))){
      SWIG_fail_ptr("Gui_loadTexture",2,SWIGTYPE_p_ofTexture); }  { size_t len; const char *ptr = lua_tolstring(L, 3, &len);
      temp3.assign(ptr, len); arg3=&temp3; }  result = (arg1)->loadTexture(*arg2,(std::string const &)*arg3); {
      GLuint * resultptr = new GLuint(result); SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_GLuint,1); SWIG_arg++; } 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Gui_loadTexture(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxImGui__Gui, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { return _wrap_Gui_loadTexture__SWIG_0(L);}  }
     }  if (argc == 3) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxImGui__Gui, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofTexture, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[2]); }  if (_v) {
          return _wrap_Gui_loadTexture__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Gui_loadTexture'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxImGui::Gui::loadTexture(std::string const &)\n" "    ofxImGui::Gui::loadTexture(ofTexture &,std::string const &)\n");
  lua_error(L);return 0; }
static int _wrap_Gui_afterDraw(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    ofEventArgs *arg2 = 0 ; SWIG_check_num_args("ofxImGui::Gui::afterDraw",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::afterDraw",1,"ofxImGui::Gui *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxImGui::Gui::afterDraw",2,"ofEventArgs &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("Gui_afterDraw",1,SWIGTYPE_p_ofxImGui__Gui); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofEventArgs,0))){
      SWIG_fail_ptr("Gui_afterDraw",2,SWIGTYPE_p_ofEventArgs); }  (arg1)->afterDraw(*arg2); return SWIG_arg; fail: SWIGUNUSED; }
   lua_error(L); return 0; }
static int _wrap_Gui_drawOfxImGuiDebugWindow(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    bool *arg2 = (bool *) nullptr ; SWIG_check_num_args("ofxImGui::Gui::drawOfxImGuiDebugWindow",1,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::drawOfxImGuiDebugWindow",1,"ofxImGui::Gui const *");
    if(lua_gettop(L)>=2 && !SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxImGui::Gui::drawOfxImGuiDebugWindow",2,"bool *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("Gui_drawOfxImGuiDebugWindow",1,SWIGTYPE_p_ofxImGui__Gui); }  if(lua_gettop(L)>=2){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
        SWIG_fail_ptr("Gui_drawOfxImGuiDebugWindow",2,SWIGTYPE_p_bool); }  } 
    ((ofxImGui::Gui const *)arg1)->drawOfxImGuiDebugWindow(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Gui_getMainWindowViewportRect(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    bool arg2 = (bool) false ; bool arg3 = (bool) true ; bool arg4 = (bool) true ; ofRectangle result;
    SWIG_check_num_args("ofxImGui::Gui::getMainWindowViewportRect",1,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::getMainWindowViewportRect",1,"ofxImGui::Gui const *");
    if(lua_gettop(L)>=2 && !lua_isboolean(L,2)) SWIG_fail_arg("ofxImGui::Gui::getMainWindowViewportRect",2,"bool");
    if(lua_gettop(L)>=3 && !lua_isboolean(L,3)) SWIG_fail_arg("ofxImGui::Gui::getMainWindowViewportRect",3,"bool");
    if(lua_gettop(L)>=4 && !lua_isboolean(L,4)) SWIG_fail_arg("ofxImGui::Gui::getMainWindowViewportRect",4,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("Gui_getMainWindowViewportRect",1,SWIGTYPE_p_ofxImGui__Gui); }  if(lua_gettop(L)>=2){
      arg2 = (lua_toboolean(L, 2)!=0);}  if(lua_gettop(L)>=3){ arg3 = (lua_toboolean(L, 3)!=0);}  if(lua_gettop(L)>=4){
      arg4 = (lua_toboolean(L, 4)!=0);}  result = ((ofxImGui::Gui const *)arg1)->getMainWindowViewportRect(arg2,arg3,arg4); {
      ofRectangle * resultptr = new ofRectangle(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofRectangle,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_Gui_getMenuHeight(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ; int result;
    SWIG_check_num_args("ofxImGui::Gui::getMenuHeight",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::getMenuHeight",1,"ofxImGui::Gui const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("Gui_getMenuHeight",1,SWIGTYPE_p_ofxImGui__Gui); } 
    result = (int)((ofxImGui::Gui const *)arg1)->getMenuHeight(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Gui_getDockingViewport(lua_State* L) { { int SWIG_arg = 0; ofxImGui::Gui *arg1 = (ofxImGui::Gui *) 0 ;
    ofRectangle result; SWIG_check_num_args("ofxImGui::Gui::getDockingViewport",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxImGui::Gui::getDockingViewport",1,"ofxImGui::Gui const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxImGui__Gui,0))){
      SWIG_fail_ptr("Gui_getDockingViewport",1,SWIGTYPE_p_ofxImGui__Gui); } 
    result = ((ofxImGui::Gui const *)arg1)->getDockingViewport(); { ofRectangle * resultptr = new ofRectangle(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofRectangle,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static void swig_delete_Gui(void *obj) {
ofxImGui::Gui *arg1 = (ofxImGui::Gui *) obj;
delete arg1;
}
static int _proxy__wrap_new_Gui(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Gui);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Gui_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Gui_methods[]= {
    { "setup", _wrap_Gui_setup},
    { "exit", _wrap_Gui_exit},
    { "isInSharedMode", _wrap_Gui_isInSharedMode},
    { "isMaster", _wrap_Gui_isMaster},
    { "beginGui", _wrap_Gui_beginGui},
    { "endGui", _wrap_Gui_endGui},
    { "draw", _wrap_Gui_draw},
    { "setDefaultFont", _wrap_Gui_setDefaultFont},
    { "addFont", _wrap_Gui_addFont},
    { "addFontFromMemory", _wrap_Gui_addFontFromMemory},
    { "rebuildFontsTexture", _wrap_Gui_rebuildFontsTexture},
    { "setTheme", _wrap_Gui_setTheme},
    { "loadImage", _wrap_Gui_loadImage},
    { "loadPixels", _wrap_Gui_loadPixels},
    { "loadTexture", _wrap_Gui_loadTexture},
    { "afterDraw", _wrap_Gui_afterDraw},
    { "drawOfxImGuiDebugWindow", _wrap_Gui_drawOfxImGuiDebugWindow},
    { "getMainWindowViewportRect", _wrap_Gui_getMainWindowViewportRect},
    { "getMenuHeight", _wrap_Gui_getMenuHeight},
    { "getDockingViewport", _wrap_Gui_getDockingViewport},
    {0,0}
};
static swig_lua_method swig_Gui_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Gui_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Gui_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Gui_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Gui_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Gui_Sf_SwigStatic = {
    "Gui",
    swig_Gui_Sf_SwigStatic_methods,
    swig_Gui_Sf_SwigStatic_attributes,
    swig_Gui_Sf_SwigStatic_constants,
    swig_Gui_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Gui_bases[] = {0};
static const char *swig_Gui_base_names[] = {0};
static swig_lua_class _wrap_class_Gui = { "Gui", "Gui", &SWIGTYPE_p_ofxImGui__Gui,_proxy__wrap_new_Gui, swig_delete_Gui, swig_Gui_methods, swig_Gui_attributes, &swig_Gui_Sf_SwigStatic, swig_Gui_meta, swig_Gui_bases, swig_Gui_base_names };

static int _wrap_ImVec2_x_set(lua_State* L) { { int SWIG_arg = 0; ImVec2 *arg1 = (ImVec2 *) 0 ; float arg2 ;
    SWIG_check_num_args("ImVec2::x",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImVec2::x",1,"ImVec2 *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImVec2::x",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){ SWIG_fail_ptr("ImVec2_x_set",1,SWIGTYPE_p_ImVec2); }
     arg2 = (float)lua_tonumber(L, 2); if (arg1) (arg1)->x = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImVec2_x_get(lua_State* L) { { int SWIG_arg = 0; ImVec2 *arg1 = (ImVec2 *) 0 ; float result;
    SWIG_check_num_args("ImVec2::x",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImVec2::x",1,"ImVec2 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){ SWIG_fail_ptr("ImVec2_x_get",1,SWIGTYPE_p_ImVec2); }
     result = (float) ((arg1)->x); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImVec2_y_set(lua_State* L) { { int SWIG_arg = 0; ImVec2 *arg1 = (ImVec2 *) 0 ; float arg2 ;
    SWIG_check_num_args("ImVec2::y",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImVec2::y",1,"ImVec2 *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImVec2::y",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){ SWIG_fail_ptr("ImVec2_y_set",1,SWIGTYPE_p_ImVec2); }
     arg2 = (float)lua_tonumber(L, 2); if (arg1) (arg1)->y = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImVec2_y_get(lua_State* L) { { int SWIG_arg = 0; ImVec2 *arg1 = (ImVec2 *) 0 ; float result;
    SWIG_check_num_args("ImVec2::y",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImVec2::y",1,"ImVec2 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){ SWIG_fail_ptr("ImVec2_y_get",1,SWIGTYPE_p_ImVec2); }
     result = (float) ((arg1)->y); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_new_ImVec2__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ImVec2 *result = 0 ;
    SWIG_check_num_args("ImVec2::ImVec2",0,0) result = (ImVec2 *)new ImVec2();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_new_ImVec2__SWIG_1(lua_State* L) { { int SWIG_arg = 0; float arg1 ; float arg2 ; ImVec2 *result = 0 ;
    SWIG_check_num_args("ImVec2::ImVec2",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ImVec2::ImVec2",1,"float");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImVec2::ImVec2",2,"float"); arg1 = (float)lua_tonumber(L, 1);
    arg2 = (float)lua_tonumber(L, 2); result = (ImVec2 *)new ImVec2(arg1,arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_new_ImVec2__SWIG_2(lua_State* L) { { int SWIG_arg = 0; ofVec2f *arg1 = 0 ; ImVec2 *result = 0 ;
    SWIG_check_num_args("ImVec2::ImVec2",1,1) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImVec2::ImVec2",1,"ofVec2f const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("new_ImVec2",1,SWIGTYPE_p_ofVec2f); }
     result = (ImVec2 *)new ImVec2((ofVec2f const &)*arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,1); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_ImVec2__SWIG_3(lua_State* L) { { int SWIG_arg = 0; ofVec3f *arg1 = 0 ; ImVec2 *result = 0 ;
    SWIG_check_num_args("ImVec2::ImVec2",1,1) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImVec2::ImVec2",1,"ofVec3f const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("new_ImVec2",1,SWIGTYPE_p_ofVec3f); }
     result = (ImVec2 *)new ImVec2((ofVec3f const &)*arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,1); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_ImVec2(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_ImVec2__SWIG_0(L);}  if (argc == 1) { int _v = 0; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_ImVec2__SWIG_2(L);}  }  if (argc == 1) { int _v = 0; {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_ImVec2__SWIG_3(L);}  }  if (argc == 2) { int _v = 0; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_new_ImVec2__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ImVec2'\n" "  Possible C/C++ prototypes are:\n"
  "    ImVec2::ImVec2()\n" "    ImVec2::ImVec2(float,float)\n" "    ImVec2::ImVec2(ofVec2f const &)\n"
  "    ImVec2::ImVec2(ofVec3f const &)\n"); lua_error(L);return 0; }
static void swig_delete_ImVec2(void *obj) {
ImVec2 *arg1 = (ImVec2 *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImVec2(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImVec2);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImVec2_attributes[] = {
    { "x", _wrap_ImVec2_x_get, _wrap_ImVec2_x_set },
    { "y", _wrap_ImVec2_y_get, _wrap_ImVec2_y_set },
    {0,0,0}
};
static swig_lua_method swig_ImVec2_methods[]= {
    {0,0}
};
static swig_lua_method swig_ImVec2_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImVec2_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImVec2_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImVec2_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImVec2_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImVec2_Sf_SwigStatic = {
    "ImVec2",
    swig_ImVec2_Sf_SwigStatic_methods,
    swig_ImVec2_Sf_SwigStatic_attributes,
    swig_ImVec2_Sf_SwigStatic_constants,
    swig_ImVec2_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImVec2_bases[] = {0};
static const char *swig_ImVec2_base_names[] = {0};
static swig_lua_class _wrap_class_ImVec2 = { "ImVec2", "ImVec2", &SWIGTYPE_p_ImVec2,_proxy__wrap_new_ImVec2, swig_delete_ImVec2, swig_ImVec2_methods, swig_ImVec2_attributes, &swig_ImVec2_Sf_SwigStatic, swig_ImVec2_meta, swig_ImVec2_bases, swig_ImVec2_base_names };

static int _wrap_ImVec4_x_set(lua_State* L) { { int SWIG_arg = 0; ImVec4 *arg1 = (ImVec4 *) 0 ; float arg2 ;
    SWIG_check_num_args("ImVec4::x",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImVec4::x",1,"ImVec4 *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImVec4::x",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec4,0))){ SWIG_fail_ptr("ImVec4_x_set",1,SWIGTYPE_p_ImVec4); }
     arg2 = (float)lua_tonumber(L, 2); if (arg1) (arg1)->x = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImVec4_x_get(lua_State* L) { { int SWIG_arg = 0; ImVec4 *arg1 = (ImVec4 *) 0 ; float result;
    SWIG_check_num_args("ImVec4::x",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImVec4::x",1,"ImVec4 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec4,0))){ SWIG_fail_ptr("ImVec4_x_get",1,SWIGTYPE_p_ImVec4); }
     result = (float) ((arg1)->x); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImVec4_y_set(lua_State* L) { { int SWIG_arg = 0; ImVec4 *arg1 = (ImVec4 *) 0 ; float arg2 ;
    SWIG_check_num_args("ImVec4::y",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImVec4::y",1,"ImVec4 *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImVec4::y",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec4,0))){ SWIG_fail_ptr("ImVec4_y_set",1,SWIGTYPE_p_ImVec4); }
     arg2 = (float)lua_tonumber(L, 2); if (arg1) (arg1)->y = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImVec4_y_get(lua_State* L) { { int SWIG_arg = 0; ImVec4 *arg1 = (ImVec4 *) 0 ; float result;
    SWIG_check_num_args("ImVec4::y",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImVec4::y",1,"ImVec4 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec4,0))){ SWIG_fail_ptr("ImVec4_y_get",1,SWIGTYPE_p_ImVec4); }
     result = (float) ((arg1)->y); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImVec4_z_set(lua_State* L) { { int SWIG_arg = 0; ImVec4 *arg1 = (ImVec4 *) 0 ; float arg2 ;
    SWIG_check_num_args("ImVec4::z",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImVec4::z",1,"ImVec4 *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImVec4::z",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec4,0))){ SWIG_fail_ptr("ImVec4_z_set",1,SWIGTYPE_p_ImVec4); }
     arg2 = (float)lua_tonumber(L, 2); if (arg1) (arg1)->z = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImVec4_z_get(lua_State* L) { { int SWIG_arg = 0; ImVec4 *arg1 = (ImVec4 *) 0 ; float result;
    SWIG_check_num_args("ImVec4::z",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImVec4::z",1,"ImVec4 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec4,0))){ SWIG_fail_ptr("ImVec4_z_get",1,SWIGTYPE_p_ImVec4); }
     result = (float) ((arg1)->z); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImVec4_w_set(lua_State* L) { { int SWIG_arg = 0; ImVec4 *arg1 = (ImVec4 *) 0 ; float arg2 ;
    SWIG_check_num_args("ImVec4::w",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImVec4::w",1,"ImVec4 *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImVec4::w",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec4,0))){ SWIG_fail_ptr("ImVec4_w_set",1,SWIGTYPE_p_ImVec4); }
     arg2 = (float)lua_tonumber(L, 2); if (arg1) (arg1)->w = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImVec4_w_get(lua_State* L) { { int SWIG_arg = 0; ImVec4 *arg1 = (ImVec4 *) 0 ; float result;
    SWIG_check_num_args("ImVec4::w",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImVec4::w",1,"ImVec4 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec4,0))){ SWIG_fail_ptr("ImVec4_w_get",1,SWIGTYPE_p_ImVec4); }
     result = (float) ((arg1)->w); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_new_ImVec4__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ImVec4 *result = 0 ;
    SWIG_check_num_args("ImVec4::ImVec4",0,0) result = (ImVec4 *)new ImVec4();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec4,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_new_ImVec4__SWIG_1(lua_State* L) { { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
    ImVec4 *result = 0 ; SWIG_check_num_args("ImVec4::ImVec4",4,4)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImVec4::ImVec4",1,"float");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImVec4::ImVec4",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImVec4::ImVec4",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ImVec4::ImVec4",4,"float"); arg1 = (float)lua_tonumber(L, 1);
    arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
    result = (ImVec4 *)new ImVec4(arg1,arg2,arg3,arg4); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec4,1); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_ImVec4__SWIG_2(lua_State* L) { { int SWIG_arg = 0; ofVec4f *arg1 = 0 ; ImVec4 *result = 0 ;
    SWIG_check_num_args("ImVec4::ImVec4",1,1) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImVec4::ImVec4",1,"ofVec4f const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){ SWIG_fail_ptr("new_ImVec4",1,SWIGTYPE_p_ofVec4f); }
     result = (ImVec4 *)new ImVec4((ofVec4f const &)*arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec4,1); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_ImVec4__SWIG_3(lua_State* L) { { int SWIG_arg = 0; glm::vec4 *arg1 = 0 ; ImVec4 *result = 0 ;
    SWIG_check_num_args("ImVec4::ImVec4",1,1) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImVec4::ImVec4",1,"glm::vec4 const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_glm__vec4,0))){
      SWIG_fail_ptr("new_ImVec4",1,SWIGTYPE_p_glm__vec4); }  result = (ImVec4 *)new ImVec4((glm::vec4 const &)*arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec4,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_new_ImVec4__SWIG_4(lua_State* L) { { int SWIG_arg = 0; ofColor *arg1 = 0 ; float arg2 ; ImVec4 *result = 0 ;
    SWIG_check_num_args("ImVec4::ImVec4",2,2) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImVec4::ImVec4",1,"ofColor const &");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImVec4::ImVec4",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor,0))){ SWIG_fail_ptr("new_ImVec4",1,SWIGTYPE_p_ofColor); }
     arg2 = (float)lua_tonumber(L, 2); result = (ImVec4 *)new ImVec4((ofColor const &)*arg1,arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec4,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_new_ImVec4__SWIG_5(lua_State* L) { { int SWIG_arg = 0; ofColor *arg1 = 0 ; ImVec4 *result = 0 ;
    SWIG_check_num_args("ImVec4::ImVec4",1,1) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImVec4::ImVec4",1,"ofColor const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor,0))){ SWIG_fail_ptr("new_ImVec4",1,SWIGTYPE_p_ofColor); }
     result = (ImVec4 *)new ImVec4((ofColor const &)*arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec4,1); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_ImVec4__SWIG_6(lua_State* L) { { int SWIG_arg = 0; ofFloatColor *arg1 = 0 ; float arg2 ;
    ImVec4 *result = 0 ; SWIG_check_num_args("ImVec4::ImVec4",2,2)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImVec4::ImVec4",1,"ofFloatColor const &");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImVec4::ImVec4",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFloatColor,0))){
      SWIG_fail_ptr("new_ImVec4",1,SWIGTYPE_p_ofFloatColor); }  arg2 = (float)lua_tonumber(L, 2);
    result = (ImVec4 *)new ImVec4((ofFloatColor const &)*arg1,arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec4,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_new_ImVec4__SWIG_7(lua_State* L) { { int SWIG_arg = 0; ofFloatColor *arg1 = 0 ; ImVec4 *result = 0 ;
    SWIG_check_num_args("ImVec4::ImVec4",1,1) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImVec4::ImVec4",1,"ofFloatColor const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFloatColor,0))){
      SWIG_fail_ptr("new_ImVec4",1,SWIGTYPE_p_ofFloatColor); }  result = (ImVec4 *)new ImVec4((ofFloatColor const &)*arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec4,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_new_ImVec4(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_ImVec4__SWIG_0(L);}  if (argc == 1) { int _v = 0; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec4f, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_ImVec4__SWIG_2(L);}  }  if (argc == 1) { int _v = 0; {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_glm__vec4, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_ImVec4__SWIG_3(L);}  }  if (argc == 1) { int _v = 0; {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_ImVec4__SWIG_5(L);}  }  if (argc == 1) { int _v = 0; {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFloatColor, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_ImVec4__SWIG_7(L);}  }  if (argc == 2) { int _v = 0; {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFloatColor, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_new_ImVec4__SWIG_6(L);}  }  }  if (argc == 2) { int _v = 0; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_new_ImVec4__SWIG_4(L);}  }  }  if (argc == 4) { int _v = 0; { _v = lua_isnumber(L,argv[0]); }  if (_v) { {
        _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }
           if (_v) { return _wrap_new_ImVec4__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ImVec4'\n" "  Possible C/C++ prototypes are:\n"
  "    ImVec4::ImVec4()\n" "    ImVec4::ImVec4(float,float,float,float)\n" "    ImVec4::ImVec4(ofVec4f const &)\n"
  "    ImVec4::ImVec4(glm::vec4 const &)\n" "    ImVec4::ImVec4(ofColor const &,float)\n"
  "    ImVec4::ImVec4(ofColor const &)\n" "    ImVec4::ImVec4(ofFloatColor const &,float)\n"
  "    ImVec4::ImVec4(ofFloatColor const &)\n"); lua_error(L);return 0; }
static void swig_delete_ImVec4(void *obj) {
ImVec4 *arg1 = (ImVec4 *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImVec4(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImVec4);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImVec4_attributes[] = {
    { "x", _wrap_ImVec4_x_get, _wrap_ImVec4_x_set },
    { "y", _wrap_ImVec4_y_get, _wrap_ImVec4_y_set },
    { "z", _wrap_ImVec4_z_get, _wrap_ImVec4_z_set },
    { "w", _wrap_ImVec4_w_get, _wrap_ImVec4_w_set },
    {0,0,0}
};
static swig_lua_method swig_ImVec4_methods[]= {
    {0,0}
};
static swig_lua_method swig_ImVec4_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImVec4_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImVec4_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImVec4_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImVec4_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImVec4_Sf_SwigStatic = {
    "ImVec4",
    swig_ImVec4_Sf_SwigStatic_methods,
    swig_ImVec4_Sf_SwigStatic_attributes,
    swig_ImVec4_Sf_SwigStatic_constants,
    swig_ImVec4_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImVec4_bases[] = {0};
static const char *swig_ImVec4_base_names[] = {0};
static swig_lua_class _wrap_class_ImVec4 = { "ImVec4", "ImVec4", &SWIGTYPE_p_ImVec4,_proxy__wrap_new_ImVec4, swig_delete_ImVec4, swig_ImVec4_methods, swig_ImVec4_attributes, &swig_ImVec4_Sf_SwigStatic, swig_ImVec4_meta, swig_ImVec4_bases, swig_ImVec4_base_names };

static int _wrap_CreateContext(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) NULL ;
    ImGuiContext *result = 0 ; SWIG_check_num_args("ImGui::CreateContext",0,1)
    if(lua_gettop(L)>=1 && !SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::CreateContext",1,"ImFontAtlas *"); if(lua_gettop(L)>=1){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
        SWIG_fail_ptr("CreateContext",1,SWIGTYPE_p_ImFontAtlas); }  }  result = (ImGuiContext *)ImGui::CreateContext(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiContext,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_DestroyContext(lua_State* L) { { int SWIG_arg = 0; ImGuiContext *arg1 = (ImGuiContext *) NULL ;
    SWIG_check_num_args("ImGui::DestroyContext",0,1)
    if(lua_gettop(L)>=1 && !SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::DestroyContext",1,"ImGuiContext *");
    if(lua_gettop(L)>=1){ if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
        SWIG_fail_ptr("DestroyContext",1,SWIGTYPE_p_ImGuiContext); }  }  ImGui::DestroyContext(arg1); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetCurrentContext(lua_State* L) { { int SWIG_arg = 0; ImGuiContext *result = 0 ;
    SWIG_check_num_args("ImGui::GetCurrentContext",0,0) result = (ImGuiContext *)ImGui::GetCurrentContext();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiContext,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_SetCurrentContext(lua_State* L) { { int SWIG_arg = 0; ImGuiContext *arg1 = (ImGuiContext *) 0 ;
    SWIG_check_num_args("ImGui::SetCurrentContext",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::SetCurrentContext",1,"ImGuiContext *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiContext,0))){
      SWIG_fail_ptr("SetCurrentContext",1,SWIGTYPE_p_ImGuiContext); }  ImGui::SetCurrentContext(arg1); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetIO(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *result = 0 ; SWIG_check_num_args("ImGui::GetIO",0,0)
    result = (ImGuiIO *) &ImGui::GetIO(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiIO,0); SWIG_arg++;  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetPlatformIO(lua_State* L) { { int SWIG_arg = 0; ImGuiPlatformIO *result = 0 ;
    SWIG_check_num_args("ImGui::GetPlatformIO",0,0) result = (ImGuiPlatformIO *) &ImGui::GetPlatformIO();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiPlatformIO,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_GetStyle(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *result = 0 ;
    SWIG_check_num_args("ImGui::GetStyle",0,0) result = (ImGuiStyle *) &ImGui::GetStyle();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiStyle,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_NewFrame(lua_State* L) { { int SWIG_arg = 0; SWIG_check_num_args("ImGui::NewFrame",0,0) ImGui::NewFrame();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_EndFrame(lua_State* L) { { int SWIG_arg = 0; SWIG_check_num_args("ImGui::EndFrame",0,0) ImGui::EndFrame();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Render(lua_State* L) { { int SWIG_arg = 0; SWIG_check_num_args("ImGui::Render",0,0) ImGui::Render();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetDrawData(lua_State* L) { { int SWIG_arg = 0; ImDrawData *result = 0 ;
    SWIG_check_num_args("ImGui::GetDrawData",0,0) result = (ImDrawData *)ImGui::GetDrawData();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImDrawData,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ShowDemoWindow_1(lua_State* L) { { int SWIG_arg = 0; bool *arg1 = (bool *) 0 ;
    SWIG_check_num_args("ImGui::ShowDemoWindow",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::ShowDemoWindow",1,"bool *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bool,0))){ SWIG_fail_ptr("ShowDemoWindow_1",1,SWIGTYPE_p_bool); }
     ImGui::ShowDemoWindow(arg1); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ShowDemoWindow_0(lua_State* L) { { int SWIG_arg = 0; SWIG_check_num_args("ImGui::ShowDemoWindow",0,0)
    ImGui::ShowDemoWindow(); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ShowMetricsWindow_1(lua_State* L) { { int SWIG_arg = 0; bool *arg1 = (bool *) 0 ;
    SWIG_check_num_args("ImGui::ShowMetricsWindow",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::ShowMetricsWindow",1,"bool *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bool,0))){
      SWIG_fail_ptr("ShowMetricsWindow_1",1,SWIGTYPE_p_bool); }  ImGui::ShowMetricsWindow(arg1); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ShowMetricsWindow_0(lua_State* L) { { int SWIG_arg = 0; SWIG_check_num_args("ImGui::ShowMetricsWindow",0,0)
    ImGui::ShowMetricsWindow(); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ShowDebugLogWindow(lua_State* L) { { int SWIG_arg = 0; bool *arg1 = (bool *) NULL ;
    SWIG_check_num_args("ImGui::ShowDebugLogWindow",0,1)
    if(lua_gettop(L)>=1 && !SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::ShowDebugLogWindow",1,"bool *"); if(lua_gettop(L)>=1){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bool,0))){
        SWIG_fail_ptr("ShowDebugLogWindow",1,SWIGTYPE_p_bool); }  }  ImGui::ShowDebugLogWindow(arg1); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ShowIDStackToolWindow(lua_State* L) { { int SWIG_arg = 0; bool *arg1 = (bool *) NULL ;
    SWIG_check_num_args("ImGui::ShowIDStackToolWindow",0,1)
    if(lua_gettop(L)>=1 && !SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::ShowIDStackToolWindow",1,"bool *"); if(lua_gettop(L)>=1){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bool,0))){
        SWIG_fail_ptr("ShowIDStackToolWindow",1,SWIGTYPE_p_bool); }  }  ImGui::ShowIDStackToolWindow(arg1); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ShowAboutWindow_1(lua_State* L) { { int SWIG_arg = 0; bool *arg1 = (bool *) 0 ;
    SWIG_check_num_args("ImGui::ShowAboutWindow",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::ShowAboutWindow",1,"bool *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bool,0))){
      SWIG_fail_ptr("ShowAboutWindow_1",1,SWIGTYPE_p_bool); }  ImGui::ShowAboutWindow(arg1); return SWIG_arg; fail: SWIGUNUSED; }
   lua_error(L); return 0; }
static int _wrap_ShowAboutWindow_0(lua_State* L) { { int SWIG_arg = 0; SWIG_check_num_args("ImGui::ShowAboutWindow",0,0)
    ImGui::ShowAboutWindow(); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ShowStyleEditor(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) NULL ;
    SWIG_check_num_args("ImGui::ShowStyleEditor",0,1)
    if(lua_gettop(L)>=1 && !SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::ShowStyleEditor",1,"ImGuiStyle *"); if(lua_gettop(L)>=1){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
        SWIG_fail_ptr("ShowStyleEditor",1,SWIGTYPE_p_ImGuiStyle); }  }  ImGui::ShowStyleEditor(arg1); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ShowStyleSelector(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; bool result;
    SWIG_check_num_args("ImGui::ShowStyleSelector",1,1)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::ShowStyleSelector",1,"char const *");
    arg1 = (char *)lua_tostring(L, 1); result = (bool)ImGui::ShowStyleSelector((char const *)arg1);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ShowFontSelector(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ;
    SWIG_check_num_args("ImGui::ShowFontSelector",1,1)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::ShowFontSelector",1,"char const *"); arg1 = (char *)lua_tostring(L, 1);
    ImGui::ShowFontSelector((char const *)arg1); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ShowUserGuide(lua_State* L) { { int SWIG_arg = 0; SWIG_check_num_args("ImGui::ShowUserGuide",0,0)
    ImGui::ShowUserGuide(); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetVersion(lua_State* L) { { int SWIG_arg = 0; char *result = 0 ; SWIG_check_num_args("ImGui::GetVersion",0,0)
    result = (char *)ImGui::GetVersion(); lua_pushstring(L,(const char *)result); SWIG_arg++; delete [] result; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_StyleColorsDark(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) NULL ;
    SWIG_check_num_args("ImGui::StyleColorsDark",0,1)
    if(lua_gettop(L)>=1 && !SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::StyleColorsDark",1,"ImGuiStyle *"); if(lua_gettop(L)>=1){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
        SWIG_fail_ptr("StyleColorsDark",1,SWIGTYPE_p_ImGuiStyle); }  }  ImGui::StyleColorsDark(arg1); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_StyleColorsLight(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) NULL ;
    SWIG_check_num_args("ImGui::StyleColorsLight",0,1)
    if(lua_gettop(L)>=1 && !SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::StyleColorsLight",1,"ImGuiStyle *");
    if(lua_gettop(L)>=1){ if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
        SWIG_fail_ptr("StyleColorsLight",1,SWIGTYPE_p_ImGuiStyle); }  }  ImGui::StyleColorsLight(arg1); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_StyleColorsClassic(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) NULL ;
    SWIG_check_num_args("ImGui::StyleColorsClassic",0,1)
    if(lua_gettop(L)>=1 && !SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::StyleColorsClassic",1,"ImGuiStyle *");
    if(lua_gettop(L)>=1){ if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
        SWIG_fail_ptr("StyleColorsClassic",1,SWIGTYPE_p_ImGuiStyle); }  }  ImGui::StyleColorsClassic(arg1); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Begin_3(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; bool *arg2 = (bool *) 0 ;
    ImGuiWindowFlags arg3 ; bool result; SWIG_check_num_args("ImGui::Begin",3,3)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::Begin",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::Begin",2,"bool *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::Begin",3,"ImGuiWindowFlags"); arg1 = (char *)lua_tostring(L, 1);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){ SWIG_fail_ptr("Begin_3",2,SWIGTYPE_p_bool); } 
    arg3 = (ImGuiWindowFlags)lua_tonumber(L, 3); result = (bool)ImGui::Begin((char const *)arg1,arg2,arg3);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Begin_2(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; bool *arg2 = (bool *) 0 ; bool result;
    SWIG_check_num_args("ImGui::Begin",2,2) if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::Begin",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::Begin",2,"bool *"); arg1 = (char *)lua_tostring(L, 1);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){ SWIG_fail_ptr("Begin_2",2,SWIGTYPE_p_bool); } 
    result = (bool)ImGui::Begin((char const *)arg1,arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Begin_1(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; bool result;
    SWIG_check_num_args("ImGui::Begin",1,1) if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::Begin",1,"char const *");
    arg1 = (char *)lua_tostring(L, 1); result = (bool)ImGui::Begin((char const *)arg1);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_End(lua_State* L) { { int SWIG_arg = 0; SWIG_check_num_args("ImGui::End",0,0) ImGui::End(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_BeginChild__SWIG_0(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ;
    ImVec2 const &arg2_defvalue = ImVec2(0, 0) ; ImVec2 *arg2 = (ImVec2 *) &arg2_defvalue ;
    ImGuiChildFlags arg3 = (ImGuiChildFlags) 0 ; ImGuiWindowFlags arg4 = (ImGuiWindowFlags) 0 ; bool result;
    SWIG_check_num_args("ImGui::BeginChild",1,4)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::BeginChild",1,"char const *");
    if(lua_gettop(L)>=2 && !lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::BeginChild",2,"ImVec2 const &");
    if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("ImGui::BeginChild",3,"ImGuiChildFlags");
    if(lua_gettop(L)>=4 && !lua_isnumber(L,4)) SWIG_fail_arg("ImGui::BeginChild",4,"ImGuiWindowFlags");
    arg1 = (char *)lua_tostring(L, 1); if(lua_gettop(L)>=2){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){ SWIG_fail_ptr("BeginChild",2,SWIGTYPE_p_ImVec2); }
       }  if(lua_gettop(L)>=3){ arg3 = (ImGuiChildFlags)lua_tonumber(L, 3);}  if(lua_gettop(L)>=4){
      arg4 = (ImGuiWindowFlags)lua_tonumber(L, 4);} 
    result = (bool)ImGui::BeginChild((char const *)arg1,(ImVec2 const &)*arg2,arg3,arg4);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_BeginChild__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ImGuiID arg1 ;
    ImVec2 const &arg2_defvalue = ImVec2(0, 0) ; ImVec2 *arg2 = (ImVec2 *) &arg2_defvalue ;
    ImGuiChildFlags arg3 = (ImGuiChildFlags) 0 ; ImGuiWindowFlags arg4 = (ImGuiWindowFlags) 0 ; bool result;
    SWIG_check_num_args("ImGui::BeginChild",1,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::BeginChild",1,"ImGuiID");
    if(lua_gettop(L)>=2 && !lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::BeginChild",2,"ImVec2 const &");
    if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("ImGui::BeginChild",3,"ImGuiChildFlags");
    if(lua_gettop(L)>=4 && !lua_isnumber(L,4)) SWIG_fail_arg("ImGui::BeginChild",4,"ImGuiWindowFlags");
    SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative"); arg1 = (ImGuiID)lua_tonumber(L, 1);
    if(lua_gettop(L)>=2){ if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
        SWIG_fail_ptr("BeginChild",2,SWIGTYPE_p_ImVec2); }  }  if(lua_gettop(L)>=3){ arg3 = (ImGuiChildFlags)lua_tonumber(L, 3);}
     if(lua_gettop(L)>=4){ arg4 = (ImGuiWindowFlags)lua_tonumber(L, 4);} 
    result = (bool)ImGui::BeginChild(arg1,(ImVec2 const &)*arg2,arg3,arg4); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_BeginChild(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if ((argc >= 1) && (argc <= 4)) { int _v = 0; { _v = lua_isnumber(L,argv[0]); }  if (_v) { if (argc <= 1) {
        return _wrap_BeginChild__SWIG_1(L);}  { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { if (argc <= 2) { return _wrap_BeginChild__SWIG_1(L);}  {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { if (argc <= 3) { return _wrap_BeginChild__SWIG_1(L);}  {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_BeginChild__SWIG_1(L);}  }  }  }  } 
  if ((argc >= 1) && (argc <= 4)) { int _v = 0; { _v = SWIG_lua_isnilstring(L,argv[0]); }  if (_v) { if (argc <= 1) {
        return _wrap_BeginChild__SWIG_0(L);}  { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { if (argc <= 2) { return _wrap_BeginChild__SWIG_0(L);}  {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { if (argc <= 3) { return _wrap_BeginChild__SWIG_0(L);}  {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_BeginChild__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BeginChild'\n" "  Possible C/C++ prototypes are:\n"
  "    ImGui::BeginChild(char const *,ImVec2 const &,ImGuiChildFlags,ImGuiWindowFlags)\n"
  "    ImGui::BeginChild(ImGuiID,ImVec2 const &,ImGuiChildFlags,ImGuiWindowFlags)\n"); lua_error(L);return 0; }
static int _wrap_EndChild(lua_State* L) { { int SWIG_arg = 0; SWIG_check_num_args("ImGui::EndChild",0,0) ImGui::EndChild();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_IsWindowAppearing(lua_State* L) { { int SWIG_arg = 0; bool result;
    SWIG_check_num_args("ImGui::IsWindowAppearing",0,0) result = (bool)ImGui::IsWindowAppearing();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_IsWindowCollapsed(lua_State* L) { { int SWIG_arg = 0; bool result;
    SWIG_check_num_args("ImGui::IsWindowCollapsed",0,0) result = (bool)ImGui::IsWindowCollapsed();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_IsWindowFocused(lua_State* L) { { int SWIG_arg = 0; ImGuiFocusedFlags arg1 = (ImGuiFocusedFlags) 0 ;
    bool result; SWIG_check_num_args("ImGui::IsWindowFocused",0,1)
    if(lua_gettop(L)>=1 && !lua_isnumber(L,1)) SWIG_fail_arg("ImGui::IsWindowFocused",1,"ImGuiFocusedFlags");
    if(lua_gettop(L)>=1){ arg1 = (ImGuiFocusedFlags)lua_tonumber(L, 1);}  result = (bool)ImGui::IsWindowFocused(arg1);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_IsWindowHovered(lua_State* L) { { int SWIG_arg = 0; ImGuiHoveredFlags arg1 = (ImGuiHoveredFlags) 0 ;
    bool result; SWIG_check_num_args("ImGui::IsWindowHovered",0,1)
    if(lua_gettop(L)>=1 && !lua_isnumber(L,1)) SWIG_fail_arg("ImGui::IsWindowHovered",1,"ImGuiHoveredFlags");
    if(lua_gettop(L)>=1){ arg1 = (ImGuiHoveredFlags)lua_tonumber(L, 1);}  result = (bool)ImGui::IsWindowHovered(arg1);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetWindowDrawList(lua_State* L) { { int SWIG_arg = 0; ImDrawList *result = 0 ;
    SWIG_check_num_args("ImGui::GetWindowDrawList",0,0) result = (ImDrawList *)ImGui::GetWindowDrawList();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImDrawList,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_GetWindowDpiScale(lua_State* L) { { int SWIG_arg = 0; float result;
    SWIG_check_num_args("ImGui::GetWindowDpiScale",0,0) result = (float)ImGui::GetWindowDpiScale();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetWindowPos(lua_State* L) { { int SWIG_arg = 0; ImVec2 result; SWIG_check_num_args("ImGui::GetWindowPos",0,0)
    result = ImGui::GetWindowPos(); { ImVec2 * resultptr = new ImVec2(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_GetWindowSize(lua_State* L) { { int SWIG_arg = 0; ImVec2 result;
    SWIG_check_num_args("ImGui::GetWindowSize",0,0) result = ImGui::GetWindowSize(); { ImVec2 * resultptr = new ImVec2(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_GetWindowWidth(lua_State* L) { { int SWIG_arg = 0; float result;
    SWIG_check_num_args("ImGui::GetWindowWidth",0,0) result = (float)ImGui::GetWindowWidth();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetWindowHeight(lua_State* L) { { int SWIG_arg = 0; float result;
    SWIG_check_num_args("ImGui::GetWindowHeight",0,0) result = (float)ImGui::GetWindowHeight();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetWindowViewport(lua_State* L) { { int SWIG_arg = 0; ImGuiViewport *result = 0 ;
    SWIG_check_num_args("ImGui::GetWindowViewport",0,0) result = (ImGuiViewport *)ImGui::GetWindowViewport();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiViewport,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_SetNextWindowPos(lua_State* L) { { int SWIG_arg = 0; ImVec2 *arg1 = 0 ; ImGuiCond arg2 = (ImGuiCond) 0 ;
    ImVec2 const &arg3_defvalue = ImVec2(0, 0) ; ImVec2 *arg3 = (ImVec2 *) &arg3_defvalue ;
    SWIG_check_num_args("ImGui::SetNextWindowPos",1,3)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::SetNextWindowPos",1,"ImVec2 const &");
    if(lua_gettop(L)>=2 && !lua_isnumber(L,2)) SWIG_fail_arg("ImGui::SetNextWindowPos",2,"ImGuiCond");
    if(lua_gettop(L)>=3 && !lua_isuserdata(L,3)) SWIG_fail_arg("ImGui::SetNextWindowPos",3,"ImVec2 const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("SetNextWindowPos",1,SWIGTYPE_p_ImVec2); }  if(lua_gettop(L)>=2){ arg2 = (ImGuiCond)lua_tonumber(L, 2);} 
    if(lua_gettop(L)>=3){ if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
        SWIG_fail_ptr("SetNextWindowPos",3,SWIGTYPE_p_ImVec2); }  } 
    ImGui::SetNextWindowPos((ImVec2 const &)*arg1,arg2,(ImVec2 const &)*arg3); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_SetNextWindowSize(lua_State* L) { { int SWIG_arg = 0; ImVec2 *arg1 = 0 ; ImGuiCond arg2 = (ImGuiCond) 0 ;
    SWIG_check_num_args("ImGui::SetNextWindowSize",1,2)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::SetNextWindowSize",1,"ImVec2 const &");
    if(lua_gettop(L)>=2 && !lua_isnumber(L,2)) SWIG_fail_arg("ImGui::SetNextWindowSize",2,"ImGuiCond");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("SetNextWindowSize",1,SWIGTYPE_p_ImVec2); }  if(lua_gettop(L)>=2){ arg2 = (ImGuiCond)lua_tonumber(L, 2);} 
    ImGui::SetNextWindowSize((ImVec2 const &)*arg1,arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SetNextWindowSizeConstraints(lua_State* L) { { int SWIG_arg = 0; ImVec2 *arg1 = 0 ; ImVec2 *arg2 = 0 ;
    ImGuiSizeCallback arg3 = (ImGuiSizeCallback) NULL ; void *arg4 = (void *) NULL ;
    SWIG_check_num_args("ImGui::SetNextWindowSizeConstraints",2,4)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::SetNextWindowSizeConstraints",1,"ImVec2 const &");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::SetNextWindowSizeConstraints",2,"ImVec2 const &");
    if(lua_gettop(L)>=3 && !SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::SetNextWindowSizeConstraints",3,"ImGuiSizeCallback");
    if(lua_gettop(L)>=4 && !SWIG_isptrtype(L,4)) SWIG_fail_arg("ImGui::SetNextWindowSizeConstraints",4,"void *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("SetNextWindowSizeConstraints",1,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("SetNextWindowSizeConstraints",2,SWIGTYPE_p_ImVec2); }  if(lua_gettop(L)>=3){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_f_p_ImGuiSizeCallbackData__void,0))){
        SWIG_fail_ptr("SetNextWindowSizeConstraints",3,SWIGTYPE_p_f_p_ImGuiSizeCallbackData__void); }  }  if(lua_gettop(L)>=4){
      arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"SetNextWindowSizeConstraints");} 
    ImGui::SetNextWindowSizeConstraints((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,arg3,arg4); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SetNextWindowContentSize(lua_State* L) { { int SWIG_arg = 0; ImVec2 *arg1 = 0 ;
    SWIG_check_num_args("ImGui::SetNextWindowContentSize",1,1)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::SetNextWindowContentSize",1,"ImVec2 const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("SetNextWindowContentSize",1,SWIGTYPE_p_ImVec2); }  ImGui::SetNextWindowContentSize((ImVec2 const &)*arg1);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SetNextWindowCollapsed(lua_State* L) { { int SWIG_arg = 0; bool arg1 ; ImGuiCond arg2 = (ImGuiCond) 0 ;
    SWIG_check_num_args("ImGui::SetNextWindowCollapsed",1,2)
    if(!lua_isboolean(L,1)) SWIG_fail_arg("ImGui::SetNextWindowCollapsed",1,"bool");
    if(lua_gettop(L)>=2 && !lua_isnumber(L,2)) SWIG_fail_arg("ImGui::SetNextWindowCollapsed",2,"ImGuiCond");
    arg1 = (lua_toboolean(L, 1)!=0); if(lua_gettop(L)>=2){ arg2 = (ImGuiCond)lua_tonumber(L, 2);} 
    ImGui::SetNextWindowCollapsed(arg1,arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SetNextWindowFocus(lua_State* L) { { int SWIG_arg = 0; SWIG_check_num_args("ImGui::SetNextWindowFocus",0,0)
    ImGui::SetNextWindowFocus(); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SetNextWindowScroll(lua_State* L) { { int SWIG_arg = 0; ImVec2 *arg1 = 0 ;
    SWIG_check_num_args("ImGui::SetNextWindowScroll",1,1)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::SetNextWindowScroll",1,"ImVec2 const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("SetNextWindowScroll",1,SWIGTYPE_p_ImVec2); }  ImGui::SetNextWindowScroll((ImVec2 const &)*arg1);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SetNextWindowBgAlpha(lua_State* L) { { int SWIG_arg = 0; float arg1 ;
    SWIG_check_num_args("ImGui::SetNextWindowBgAlpha",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SetNextWindowBgAlpha",1,"float"); arg1 = (float)lua_tonumber(L, 1);
    ImGui::SetNextWindowBgAlpha(arg1); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SetNextWindowViewport(lua_State* L) { { int SWIG_arg = 0; ImGuiID arg1 ;
    SWIG_check_num_args("ImGui::SetNextWindowViewport",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SetNextWindowViewport",1,"ImGuiID");
    SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative"); arg1 = (ImGuiID)lua_tonumber(L, 1);
    ImGui::SetNextWindowViewport(arg1); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SetWindowPos__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ImVec2 *arg1 = 0 ; ImGuiCond arg2 = (ImGuiCond) 0 ;
    SWIG_check_num_args("ImGui::SetWindowPos",1,2)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::SetWindowPos",1,"ImVec2 const &");
    if(lua_gettop(L)>=2 && !lua_isnumber(L,2)) SWIG_fail_arg("ImGui::SetWindowPos",2,"ImGuiCond");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){ SWIG_fail_ptr("SetWindowPos",1,SWIGTYPE_p_ImVec2); }
     if(lua_gettop(L)>=2){ arg2 = (ImGuiCond)lua_tonumber(L, 2);}  ImGui::SetWindowPos((ImVec2 const &)*arg1,arg2);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SetWindowSize__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ImVec2 *arg1 = 0 ; ImGuiCond arg2 = (ImGuiCond) 0 ;
    SWIG_check_num_args("ImGui::SetWindowSize",1,2)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::SetWindowSize",1,"ImVec2 const &");
    if(lua_gettop(L)>=2 && !lua_isnumber(L,2)) SWIG_fail_arg("ImGui::SetWindowSize",2,"ImGuiCond");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("SetWindowSize",1,SWIGTYPE_p_ImVec2); }  if(lua_gettop(L)>=2){ arg2 = (ImGuiCond)lua_tonumber(L, 2);} 
    ImGui::SetWindowSize((ImVec2 const &)*arg1,arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SetWindowCollapsed__SWIG_0(lua_State* L) { { int SWIG_arg = 0; bool arg1 ; ImGuiCond arg2 = (ImGuiCond) 0 ;
    SWIG_check_num_args("ImGui::SetWindowCollapsed",1,2)
    if(!lua_isboolean(L,1)) SWIG_fail_arg("ImGui::SetWindowCollapsed",1,"bool");
    if(lua_gettop(L)>=2 && !lua_isnumber(L,2)) SWIG_fail_arg("ImGui::SetWindowCollapsed",2,"ImGuiCond");
    arg1 = (lua_toboolean(L, 1)!=0); if(lua_gettop(L)>=2){ arg2 = (ImGuiCond)lua_tonumber(L, 2);} 
    ImGui::SetWindowCollapsed(arg1,arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SetWindowFocus__SWIG_0(lua_State* L) { { int SWIG_arg = 0; SWIG_check_num_args("ImGui::SetWindowFocus",0,0)
    ImGui::SetWindowFocus(); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SetWindowFontScale(lua_State* L) { { int SWIG_arg = 0; float arg1 ;
    SWIG_check_num_args("ImGui::SetWindowFontScale",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SetWindowFontScale",1,"float"); arg1 = (float)lua_tonumber(L, 1);
    ImGui::SetWindowFontScale(arg1); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SetWindowPos__SWIG_1(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; ImVec2 *arg2 = 0 ;
    ImGuiCond arg3 = (ImGuiCond) 0 ; SWIG_check_num_args("ImGui::SetWindowPos",2,3)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SetWindowPos",1,"char const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::SetWindowPos",2,"ImVec2 const &");
    if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SetWindowPos",3,"ImGuiCond");
    arg1 = (char *)lua_tostring(L, 1); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("SetWindowPos",2,SWIGTYPE_p_ImVec2); }  if(lua_gettop(L)>=3){ arg3 = (ImGuiCond)lua_tonumber(L, 3);} 
    ImGui::SetWindowPos((char const *)arg1,(ImVec2 const &)*arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_SetWindowPos(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if ((argc >= 1) && (argc <= 2)) { int _v = 0; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { if (argc <= 1) { return _wrap_SetWindowPos__SWIG_0(L);}  {
        _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_SetWindowPos__SWIG_0(L);}  }  } 
  if ((argc >= 2) && (argc <= 3)) { int _v = 0; { _v = SWIG_lua_isnilstring(L,argv[0]); }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { if (argc <= 2) { return _wrap_SetWindowPos__SWIG_1(L);}  {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_SetWindowPos__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SetWindowPos'\n" "  Possible C/C++ prototypes are:\n"
  "    ImGui::SetWindowPos(ImVec2 const &,ImGuiCond)\n" "    ImGui::SetWindowPos(char const *,ImVec2 const &,ImGuiCond)\n");
  lua_error(L);return 0; }
static int _wrap_SetWindowSize__SWIG_1(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; ImVec2 *arg2 = 0 ;
    ImGuiCond arg3 = (ImGuiCond) 0 ; SWIG_check_num_args("ImGui::SetWindowSize",2,3)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SetWindowSize",1,"char const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::SetWindowSize",2,"ImVec2 const &");
    if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SetWindowSize",3,"ImGuiCond");
    arg1 = (char *)lua_tostring(L, 1); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("SetWindowSize",2,SWIGTYPE_p_ImVec2); }  if(lua_gettop(L)>=3){ arg3 = (ImGuiCond)lua_tonumber(L, 3);} 
    ImGui::SetWindowSize((char const *)arg1,(ImVec2 const &)*arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_SetWindowSize(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if ((argc >= 1) && (argc <= 2)) { int _v = 0; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { if (argc <= 1) { return _wrap_SetWindowSize__SWIG_0(L);}  {
        _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_SetWindowSize__SWIG_0(L);}  }  } 
  if ((argc >= 2) && (argc <= 3)) { int _v = 0; { _v = SWIG_lua_isnilstring(L,argv[0]); }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { if (argc <= 2) { return _wrap_SetWindowSize__SWIG_1(L);}  {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_SetWindowSize__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SetWindowSize'\n" "  Possible C/C++ prototypes are:\n"
  "    ImGui::SetWindowSize(ImVec2 const &,ImGuiCond)\n" "    ImGui::SetWindowSize(char const *,ImVec2 const &,ImGuiCond)\n");
  lua_error(L);return 0; }
static int _wrap_SetWindowCollapsed__SWIG_1(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; bool arg2 ;
    ImGuiCond arg3 = (ImGuiCond) 0 ; SWIG_check_num_args("ImGui::SetWindowCollapsed",2,3)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SetWindowCollapsed",1,"char const *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGui::SetWindowCollapsed",2,"bool");
    if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SetWindowCollapsed",3,"ImGuiCond");
    arg1 = (char *)lua_tostring(L, 1); arg2 = (lua_toboolean(L, 2)!=0); if(lua_gettop(L)>=3){
      arg3 = (ImGuiCond)lua_tonumber(L, 3);}  ImGui::SetWindowCollapsed((char const *)arg1,arg2,arg3); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SetWindowCollapsed(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if ((argc >= 1) && (argc <= 2)) { int _v = 0; { _v = lua_isboolean(L,argv[0]); }  if (_v) { if (argc <= 1) {
        return _wrap_SetWindowCollapsed__SWIG_0(L);}  { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_SetWindowCollapsed__SWIG_0(L);}  }  }  if ((argc >= 2) && (argc <= 3)) { int _v = 0; {
      _v = SWIG_lua_isnilstring(L,argv[0]); }  if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) { if (argc <= 2) {
          return _wrap_SetWindowCollapsed__SWIG_1(L);}  { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_SetWindowCollapsed__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SetWindowCollapsed'\n" "  Possible C/C++ prototypes are:\n"
  "    ImGui::SetWindowCollapsed(bool,ImGuiCond)\n" "    ImGui::SetWindowCollapsed(char const *,bool,ImGuiCond)\n");
  lua_error(L);return 0; }
static int _wrap_SetWindowFocus__SWIG_1(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ;
    SWIG_check_num_args("ImGui::SetWindowFocus",1,1)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SetWindowFocus",1,"char const *"); arg1 = (char *)lua_tostring(L, 1);
    ImGui::SetWindowFocus((char const *)arg1); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SetWindowFocus(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_SetWindowFocus__SWIG_0(L);}  if (argc == 1) { int _v = 0; { _v = SWIG_lua_isnilstring(L,argv[0]); }  if (_v) {
      return _wrap_SetWindowFocus__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SetWindowFocus'\n" "  Possible C/C++ prototypes are:\n"
  "    ImGui::SetWindowFocus()\n" "    ImGui::SetWindowFocus(char const *)\n"); lua_error(L);return 0; }
static int _wrap_GetScrollX(lua_State* L) { { int SWIG_arg = 0; float result; SWIG_check_num_args("ImGui::GetScrollX",0,0)
    result = (float)ImGui::GetScrollX(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }
   lua_error(L); return 0; }
static int _wrap_GetScrollY(lua_State* L) { { int SWIG_arg = 0; float result; SWIG_check_num_args("ImGui::GetScrollY",0,0)
    result = (float)ImGui::GetScrollY(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }
   lua_error(L); return 0; }
static int _wrap_SetScrollX(lua_State* L) { { int SWIG_arg = 0; float arg1 ; SWIG_check_num_args("ImGui::SetScrollX",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SetScrollX",1,"float"); arg1 = (float)lua_tonumber(L, 1);
    ImGui::SetScrollX(arg1); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SetScrollY(lua_State* L) { { int SWIG_arg = 0; float arg1 ; SWIG_check_num_args("ImGui::SetScrollY",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SetScrollY",1,"float"); arg1 = (float)lua_tonumber(L, 1);
    ImGui::SetScrollY(arg1); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetScrollMaxX(lua_State* L) { { int SWIG_arg = 0; float result; SWIG_check_num_args("ImGui::GetScrollMaxX",0,0)
    result = (float)ImGui::GetScrollMaxX(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetScrollMaxY(lua_State* L) { { int SWIG_arg = 0; float result; SWIG_check_num_args("ImGui::GetScrollMaxY",0,0)
    result = (float)ImGui::GetScrollMaxY(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SetScrollHereX(lua_State* L) { { int SWIG_arg = 0; float arg1 = (float) 0.5 ;
    SWIG_check_num_args("ImGui::SetScrollHereX",0,1)
    if(lua_gettop(L)>=1 && !lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SetScrollHereX",1,"float"); if(lua_gettop(L)>=1){
      arg1 = (float)lua_tonumber(L, 1);}  ImGui::SetScrollHereX(arg1); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_SetScrollHereY(lua_State* L) { { int SWIG_arg = 0; float arg1 = (float) 0.5 ;
    SWIG_check_num_args("ImGui::SetScrollHereY",0,1)
    if(lua_gettop(L)>=1 && !lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SetScrollHereY",1,"float"); if(lua_gettop(L)>=1){
      arg1 = (float)lua_tonumber(L, 1);}  ImGui::SetScrollHereY(arg1); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_SetScrollFromPosX(lua_State* L) { { int SWIG_arg = 0; float arg1 ; float arg2 = (float) 0.5 ;
    SWIG_check_num_args("ImGui::SetScrollFromPosX",1,2)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SetScrollFromPosX",1,"float");
    if(lua_gettop(L)>=2 && !lua_isnumber(L,2)) SWIG_fail_arg("ImGui::SetScrollFromPosX",2,"float");
    arg1 = (float)lua_tonumber(L, 1); if(lua_gettop(L)>=2){ arg2 = (float)lua_tonumber(L, 2);} 
    ImGui::SetScrollFromPosX(arg1,arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SetScrollFromPosY(lua_State* L) { { int SWIG_arg = 0; float arg1 ; float arg2 = (float) 0.5 ;
    SWIG_check_num_args("ImGui::SetScrollFromPosY",1,2)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SetScrollFromPosY",1,"float");
    if(lua_gettop(L)>=2 && !lua_isnumber(L,2)) SWIG_fail_arg("ImGui::SetScrollFromPosY",2,"float");
    arg1 = (float)lua_tonumber(L, 1); if(lua_gettop(L)>=2){ arg2 = (float)lua_tonumber(L, 2);} 
    ImGui::SetScrollFromPosY(arg1,arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_PushFont(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ;
    SWIG_check_num_args("ImGui::PushFont",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::PushFont",1,"ImFont *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){ SWIG_fail_ptr("PushFont",1,SWIGTYPE_p_ImFont); } 
    ImGui::PushFont(arg1); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_PopFont(lua_State* L) { { int SWIG_arg = 0; SWIG_check_num_args("ImGui::PopFont",0,0) ImGui::PopFont();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_PushStyleColor__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ImGuiCol arg1 ; ImU32 arg2 ;
    SWIG_check_num_args("ImGui::PushStyleColor",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::PushStyleColor",1,"ImGuiCol");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::PushStyleColor",2,"ImU32"); arg1 = (ImGuiCol)lua_tonumber(L, 1);
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (ImU32)lua_tonumber(L, 2);
    ImGui::PushStyleColor(arg1,arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_PushStyleColor__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ImGuiCol arg1 ; ImVec4 *arg2 = 0 ;
    SWIG_check_num_args("ImGui::PushStyleColor",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::PushStyleColor",1,"ImGuiCol");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::PushStyleColor",2,"ImVec4 const &"); arg1 = (ImGuiCol)lua_tonumber(L, 1);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec4,0))){
      SWIG_fail_ptr("PushStyleColor",2,SWIGTYPE_p_ImVec4); }  ImGui::PushStyleColor(arg1,(ImVec4 const &)*arg2);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_PushStyleColor(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) {
    int _v = 0; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec4, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_PushStyleColor__SWIG_1(L);}  }  }  if (argc == 2) { int _v = 0;
    { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_PushStyleColor__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PushStyleColor'\n" "  Possible C/C++ prototypes are:\n"
  "    ImGui::PushStyleColor(ImGuiCol,ImU32)\n" "    ImGui::PushStyleColor(ImGuiCol,ImVec4 const &)\n"); lua_error(L);return 0; }
static int _wrap_PopStyleColor(lua_State* L) { { int SWIG_arg = 0; int arg1 = (int) 1 ;
    SWIG_check_num_args("ImGui::PopStyleColor",0,1)
    if(lua_gettop(L)>=1 && !lua_isnumber(L,1)) SWIG_fail_arg("ImGui::PopStyleColor",1,"int"); if(lua_gettop(L)>=1){
      arg1 = (int)lua_tonumber(L, 1);}  ImGui::PopStyleColor(arg1); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_PushStyleVar__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ImGuiStyleVar arg1 ; float arg2 ;
    SWIG_check_num_args("ImGui::PushStyleVar",2,2)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::PushStyleVar",1,"ImGuiStyleVar");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::PushStyleVar",2,"float"); arg1 = (ImGuiStyleVar)lua_tonumber(L, 1);
    arg2 = (float)lua_tonumber(L, 2); ImGui::PushStyleVar(arg1,arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_PushStyleVar__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ImGuiStyleVar arg1 ; ImVec2 *arg2 = 0 ;
    SWIG_check_num_args("ImGui::PushStyleVar",2,2)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::PushStyleVar",1,"ImGuiStyleVar");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::PushStyleVar",2,"ImVec2 const &"); arg1 = (ImGuiStyleVar)lua_tonumber(L, 1);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){ SWIG_fail_ptr("PushStyleVar",2,SWIGTYPE_p_ImVec2); }
     ImGui::PushStyleVar(arg1,(ImVec2 const &)*arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_PushStyleVar(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) {
    int _v = 0; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_PushStyleVar__SWIG_1(L);}  }  }  if (argc == 2) { int _v = 0; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_PushStyleVar__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PushStyleVar'\n" "  Possible C/C++ prototypes are:\n"
  "    ImGui::PushStyleVar(ImGuiStyleVar,float)\n" "    ImGui::PushStyleVar(ImGuiStyleVar,ImVec2 const &)\n");
  lua_error(L);return 0; }
static int _wrap_PushStyleVarX(lua_State* L) { { int SWIG_arg = 0; ImGuiStyleVar arg1 ; float arg2 ;
    SWIG_check_num_args("ImGui::PushStyleVarX",2,2)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::PushStyleVarX",1,"ImGuiStyleVar");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::PushStyleVarX",2,"float"); arg1 = (ImGuiStyleVar)lua_tonumber(L, 1);
    arg2 = (float)lua_tonumber(L, 2); ImGui::PushStyleVarX(arg1,arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_PushStyleVarY(lua_State* L) { { int SWIG_arg = 0; ImGuiStyleVar arg1 ; float arg2 ;
    SWIG_check_num_args("ImGui::PushStyleVarY",2,2)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::PushStyleVarY",1,"ImGuiStyleVar");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::PushStyleVarY",2,"float"); arg1 = (ImGuiStyleVar)lua_tonumber(L, 1);
    arg2 = (float)lua_tonumber(L, 2); ImGui::PushStyleVarY(arg1,arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_PopStyleVar(lua_State* L) { { int SWIG_arg = 0; int arg1 = (int) 1 ;
    SWIG_check_num_args("ImGui::PopStyleVar",0,1)
    if(lua_gettop(L)>=1 && !lua_isnumber(L,1)) SWIG_fail_arg("ImGui::PopStyleVar",1,"int"); if(lua_gettop(L)>=1){
      arg1 = (int)lua_tonumber(L, 1);}  ImGui::PopStyleVar(arg1); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_PushItemFlag(lua_State* L) { { int SWIG_arg = 0; ImGuiItemFlags arg1 ; bool arg2 ;
    SWIG_check_num_args("ImGui::PushItemFlag",2,2)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::PushItemFlag",1,"ImGuiItemFlags");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGui::PushItemFlag",2,"bool"); arg1 = (ImGuiItemFlags)lua_tonumber(L, 1);
    arg2 = (lua_toboolean(L, 2)!=0); ImGui::PushItemFlag(arg1,arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_PopItemFlag(lua_State* L) { { int SWIG_arg = 0; SWIG_check_num_args("ImGui::PopItemFlag",0,0)
    ImGui::PopItemFlag(); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_PushItemWidth(lua_State* L) { { int SWIG_arg = 0; float arg1 ; SWIG_check_num_args("ImGui::PushItemWidth",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::PushItemWidth",1,"float"); arg1 = (float)lua_tonumber(L, 1);
    ImGui::PushItemWidth(arg1); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_PopItemWidth(lua_State* L) { { int SWIG_arg = 0; SWIG_check_num_args("ImGui::PopItemWidth",0,0)
    ImGui::PopItemWidth(); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SetNextItemWidth(lua_State* L) { { int SWIG_arg = 0; float arg1 ;
    SWIG_check_num_args("ImGui::SetNextItemWidth",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SetNextItemWidth",1,"float"); arg1 = (float)lua_tonumber(L, 1);
    ImGui::SetNextItemWidth(arg1); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CalcItemWidth(lua_State* L) { { int SWIG_arg = 0; float result; SWIG_check_num_args("ImGui::CalcItemWidth",0,0)
    result = (float)ImGui::CalcItemWidth(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_PushTextWrapPos(lua_State* L) { { int SWIG_arg = 0; float arg1 = (float) 0.0 ;
    SWIG_check_num_args("ImGui::PushTextWrapPos",0,1)
    if(lua_gettop(L)>=1 && !lua_isnumber(L,1)) SWIG_fail_arg("ImGui::PushTextWrapPos",1,"float"); if(lua_gettop(L)>=1){
      arg1 = (float)lua_tonumber(L, 1);}  ImGui::PushTextWrapPos(arg1); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_PopTextWrapPos(lua_State* L) { { int SWIG_arg = 0; SWIG_check_num_args("ImGui::PopTextWrapPos",0,0)
    ImGui::PopTextWrapPos(); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetFont(lua_State* L) { { int SWIG_arg = 0; ImFont *result = 0 ; SWIG_check_num_args("ImGui::GetFont",0,0)
    result = (ImFont *)ImGui::GetFont(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFont,0); SWIG_arg++;  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetFontSize(lua_State* L) { { int SWIG_arg = 0; float result; SWIG_check_num_args("ImGui::GetFontSize",0,0)
    result = (float)ImGui::GetFontSize(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetFontTexUvWhitePixel(lua_State* L) { { int SWIG_arg = 0; ImVec2 result;
    SWIG_check_num_args("ImGui::GetFontTexUvWhitePixel",0,0) result = ImGui::GetFontTexUvWhitePixel(); {
      ImVec2 * resultptr = new ImVec2(result); SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++; } 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetColorU32__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ImGuiCol arg1 ; float arg2 = (float) 1.0 ;
    ImU32 result; SWIG_check_num_args("ImGui::GetColorU32",1,2)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::GetColorU32",1,"ImGuiCol");
    if(lua_gettop(L)>=2 && !lua_isnumber(L,2)) SWIG_fail_arg("ImGui::GetColorU32",2,"float");
    arg1 = (ImGuiCol)lua_tonumber(L, 1); if(lua_gettop(L)>=2){ arg2 = (float)lua_tonumber(L, 2);} 
    result = (ImU32)ImGui::GetColorU32(arg1,arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetColorU32__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ImVec4 *arg1 = 0 ; ImU32 result;
    SWIG_check_num_args("ImGui::GetColorU32",1,1)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::GetColorU32",1,"ImVec4 const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec4,0))){ SWIG_fail_ptr("GetColorU32",1,SWIGTYPE_p_ImVec4); }
     result = (ImU32)ImGui::GetColorU32((ImVec4 const &)*arg1); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetColorU32(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) { int _v = 0;
    { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec4, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_GetColorU32__SWIG_1(L);}  }  if ((argc >= 1) && (argc <= 2)) {
    int _v = 0; { _v = lua_isnumber(L,argv[0]); }  if (_v) { if (argc <= 1) { return _wrap_GetColorU32__SWIG_0(L);}  {
        _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_GetColorU32__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'GetColorU32'\n" "  Possible C/C++ prototypes are:\n"
  "    ImGui::GetColorU32(ImGuiCol,float)\n" "    ImGui::GetColorU32(ImVec4 const &)\n"); lua_error(L);return 0; }
static int _wrap_GetStyleColorVec4(lua_State* L) { { int SWIG_arg = 0; ImGuiCol arg1 ; ImVec4 *result = 0 ;
    SWIG_check_num_args("ImGui::GetStyleColorVec4",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::GetStyleColorVec4",1,"ImGuiCol"); arg1 = (ImGuiCol)lua_tonumber(L, 1);
    result = (ImVec4 *) &ImGui::GetStyleColorVec4(arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec4,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetCursorScreenPos(lua_State* L) { { int SWIG_arg = 0; ImVec2 result;
    SWIG_check_num_args("ImGui::GetCursorScreenPos",0,0) result = ImGui::GetCursorScreenPos(); {
      ImVec2 * resultptr = new ImVec2(result); SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++; } 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SetCursorScreenPos(lua_State* L) { { int SWIG_arg = 0; ImVec2 *arg1 = 0 ;
    SWIG_check_num_args("ImGui::SetCursorScreenPos",1,1)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::SetCursorScreenPos",1,"ImVec2 const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("SetCursorScreenPos",1,SWIGTYPE_p_ImVec2); }  ImGui::SetCursorScreenPos((ImVec2 const &)*arg1);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetContentRegionAvail(lua_State* L) { { int SWIG_arg = 0; ImVec2 result;
    SWIG_check_num_args("ImGui::GetContentRegionAvail",0,0) result = ImGui::GetContentRegionAvail(); {
      ImVec2 * resultptr = new ImVec2(result); SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++; } 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetCursorPos(lua_State* L) { { int SWIG_arg = 0; ImVec2 result; SWIG_check_num_args("ImGui::GetCursorPos",0,0)
    result = ImGui::GetCursorPos(); { ImVec2 * resultptr = new ImVec2(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_GetCursorPosX(lua_State* L) { { int SWIG_arg = 0; float result; SWIG_check_num_args("ImGui::GetCursorPosX",0,0)
    result = (float)ImGui::GetCursorPosX(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetCursorPosY(lua_State* L) { { int SWIG_arg = 0; float result; SWIG_check_num_args("ImGui::GetCursorPosY",0,0)
    result = (float)ImGui::GetCursorPosY(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SetCursorPos(lua_State* L) { { int SWIG_arg = 0; ImVec2 *arg1 = 0 ;
    SWIG_check_num_args("ImGui::SetCursorPos",1,1)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::SetCursorPos",1,"ImVec2 const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){ SWIG_fail_ptr("SetCursorPos",1,SWIGTYPE_p_ImVec2); }
     ImGui::SetCursorPos((ImVec2 const &)*arg1); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SetCursorPosX(lua_State* L) { { int SWIG_arg = 0; float arg1 ; SWIG_check_num_args("ImGui::SetCursorPosX",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SetCursorPosX",1,"float"); arg1 = (float)lua_tonumber(L, 1);
    ImGui::SetCursorPosX(arg1); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SetCursorPosY(lua_State* L) { { int SWIG_arg = 0; float arg1 ; SWIG_check_num_args("ImGui::SetCursorPosY",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SetCursorPosY",1,"float"); arg1 = (float)lua_tonumber(L, 1);
    ImGui::SetCursorPosY(arg1); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetCursorStartPos(lua_State* L) { { int SWIG_arg = 0; ImVec2 result;
    SWIG_check_num_args("ImGui::GetCursorStartPos",0,0) result = ImGui::GetCursorStartPos(); {
      ImVec2 * resultptr = new ImVec2(result); SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++; } 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Separator(lua_State* L) { { int SWIG_arg = 0; SWIG_check_num_args("ImGui::Separator",0,0) ImGui::Separator();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SameLine(lua_State* L) { { int SWIG_arg = 0; float arg1 = (float) 0.0 ; float arg2 = (float) -1.0 ;
    SWIG_check_num_args("ImGui::SameLine",0,2)
    if(lua_gettop(L)>=1 && !lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SameLine",1,"float");
    if(lua_gettop(L)>=2 && !lua_isnumber(L,2)) SWIG_fail_arg("ImGui::SameLine",2,"float"); if(lua_gettop(L)>=1){
      arg1 = (float)lua_tonumber(L, 1);}  if(lua_gettop(L)>=2){ arg2 = (float)lua_tonumber(L, 2);}  ImGui::SameLine(arg1,arg2);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_NewLine(lua_State* L) { { int SWIG_arg = 0; SWIG_check_num_args("ImGui::NewLine",0,0) ImGui::NewLine();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Spacing(lua_State* L) { { int SWIG_arg = 0; SWIG_check_num_args("ImGui::Spacing",0,0) ImGui::Spacing();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Dummy(lua_State* L) { { int SWIG_arg = 0; ImVec2 *arg1 = 0 ; SWIG_check_num_args("ImGui::Dummy",1,1)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::Dummy",1,"ImVec2 const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){ SWIG_fail_ptr("Dummy",1,SWIGTYPE_p_ImVec2); } 
    ImGui::Dummy((ImVec2 const &)*arg1); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Indent(lua_State* L) { { int SWIG_arg = 0; float arg1 = (float) 0.0 ; SWIG_check_num_args("ImGui::Indent",0,1)
    if(lua_gettop(L)>=1 && !lua_isnumber(L,1)) SWIG_fail_arg("ImGui::Indent",1,"float"); if(lua_gettop(L)>=1){
      arg1 = (float)lua_tonumber(L, 1);}  ImGui::Indent(arg1); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Unindent(lua_State* L) { { int SWIG_arg = 0; float arg1 = (float) 0.0 ;
    SWIG_check_num_args("ImGui::Unindent",0,1)
    if(lua_gettop(L)>=1 && !lua_isnumber(L,1)) SWIG_fail_arg("ImGui::Unindent",1,"float"); if(lua_gettop(L)>=1){
      arg1 = (float)lua_tonumber(L, 1);}  ImGui::Unindent(arg1); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_BeginGroup(lua_State* L) { { int SWIG_arg = 0; SWIG_check_num_args("ImGui::BeginGroup",0,0)
    ImGui::BeginGroup(); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_EndGroup(lua_State* L) { { int SWIG_arg = 0; SWIG_check_num_args("ImGui::EndGroup",0,0) ImGui::EndGroup();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AlignTextToFramePadding(lua_State* L) { { int SWIG_arg = 0;
    SWIG_check_num_args("ImGui::AlignTextToFramePadding",0,0) ImGui::AlignTextToFramePadding(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetTextLineHeight(lua_State* L) { { int SWIG_arg = 0; float result;
    SWIG_check_num_args("ImGui::GetTextLineHeight",0,0) result = (float)ImGui::GetTextLineHeight();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetTextLineHeightWithSpacing(lua_State* L) { { int SWIG_arg = 0; float result;
    SWIG_check_num_args("ImGui::GetTextLineHeightWithSpacing",0,0) result = (float)ImGui::GetTextLineHeightWithSpacing();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetFrameHeight(lua_State* L) { { int SWIG_arg = 0; float result;
    SWIG_check_num_args("ImGui::GetFrameHeight",0,0) result = (float)ImGui::GetFrameHeight();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetFrameHeightWithSpacing(lua_State* L) { { int SWIG_arg = 0; float result;
    SWIG_check_num_args("ImGui::GetFrameHeightWithSpacing",0,0) result = (float)ImGui::GetFrameHeightWithSpacing();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_PushID__SWIG_0(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ;
    SWIG_check_num_args("ImGui::PushID",1,1) if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::PushID",1,"char const *");
    arg1 = (char *)lua_tostring(L, 1); ImGui::PushID((char const *)arg1); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_PushID__SWIG_1(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; char *arg2 = (char *) 0 ;
    SWIG_check_num_args("ImGui::PushID",2,2) if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::PushID",1,"char const *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::PushID",2,"char const *"); arg1 = (char *)lua_tostring(L, 1);
    arg2 = (char *)lua_tostring(L, 2); ImGui::PushID((char const *)arg1,(char const *)arg2); return SWIG_arg; fail: SWIGUNUSED; }
   lua_error(L); return 0; }
static int _wrap_PushID__SWIG_2(lua_State* L) { { int SWIG_arg = 0; void *arg1 = (void *) 0 ;
    SWIG_check_num_args("ImGui::PushID",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::PushID",1,"void const *");
    arg1=(void *)SWIG_MustGetPtr(L,1,0,0,1,"PushID"); ImGui::PushID((void const *)arg1); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_PushID__SWIG_3(lua_State* L) { { int SWIG_arg = 0; int arg1 ; SWIG_check_num_args("ImGui::PushID",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::PushID",1,"int"); arg1 = (int)lua_tonumber(L, 1); ImGui::PushID(arg1);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_PushID(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) { int _v = 0; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, 0, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { return _wrap_PushID__SWIG_2(L);}  }  if (argc == 1) { int _v = 0; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_PushID__SWIG_3(L);}  }  if (argc == 1) { int _v = 0; {
      _v = SWIG_lua_isnilstring(L,argv[0]); }  if (_v) { return _wrap_PushID__SWIG_0(L);}  }  if (argc == 2) { int _v = 0; {
      _v = SWIG_lua_isnilstring(L,argv[0]); }  if (_v) { { _v = SWIG_lua_isnilstring(L,argv[1]); }  if (_v) {
        return _wrap_PushID__SWIG_1(L);}  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PushID'\n"
  "  Possible C/C++ prototypes are:\n" "    ImGui::PushID(char const *)\n" "    ImGui::PushID(char const *,char const *)\n"
  "    ImGui::PushID(void const *)\n" "    ImGui::PushID(int)\n"); lua_error(L);return 0; }
static int _wrap_PopID(lua_State* L) { { int SWIG_arg = 0; SWIG_check_num_args("ImGui::PopID",0,0) ImGui::PopID();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetID__SWIG_0(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; ImGuiID result;
    SWIG_check_num_args("ImGui::GetID",1,1) if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::GetID",1,"char const *");
    arg1 = (char *)lua_tostring(L, 1); result = (ImGuiID)ImGui::GetID((char const *)arg1);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetID__SWIG_1(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; char *arg2 = (char *) 0 ;
    ImGuiID result; SWIG_check_num_args("ImGui::GetID",2,2)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::GetID",1,"char const *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::GetID",2,"char const *"); arg1 = (char *)lua_tostring(L, 1);
    arg2 = (char *)lua_tostring(L, 2); result = (ImGuiID)ImGui::GetID((char const *)arg1,(char const *)arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetID__SWIG_2(lua_State* L) { { int SWIG_arg = 0; void *arg1 = (void *) 0 ; ImGuiID result;
    SWIG_check_num_args("ImGui::GetID",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::GetID",1,"void const *");
    arg1=(void *)SWIG_MustGetPtr(L,1,0,0,1,"GetID"); result = (ImGuiID)ImGui::GetID((void const *)arg1);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetID__SWIG_3(lua_State* L) { { int SWIG_arg = 0; int arg1 ; ImGuiID result;
    SWIG_check_num_args("ImGui::GetID",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::GetID",1,"int");
    arg1 = (int)lua_tonumber(L, 1); result = (ImGuiID)ImGui::GetID(arg1); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetID(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) { int _v = 0; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, 0, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { return _wrap_GetID__SWIG_2(L);}  }  if (argc == 1) { int _v = 0; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_GetID__SWIG_3(L);}  }  if (argc == 1) { int _v = 0; {
      _v = SWIG_lua_isnilstring(L,argv[0]); }  if (_v) { return _wrap_GetID__SWIG_0(L);}  }  if (argc == 2) { int _v = 0; {
      _v = SWIG_lua_isnilstring(L,argv[0]); }  if (_v) { { _v = SWIG_lua_isnilstring(L,argv[1]); }  if (_v) {
        return _wrap_GetID__SWIG_1(L);}  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'GetID'\n"
  "  Possible C/C++ prototypes are:\n" "    ImGui::GetID(char const *)\n" "    ImGui::GetID(char const *,char const *)\n"
  "    ImGui::GetID(void const *)\n" "    ImGui::GetID(int)\n"); lua_error(L);return 0; }
static int _wrap_TextUnformatted(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; char *arg2 = (char *) NULL ;
    SWIG_check_num_args("ImGui::TextUnformatted",1,2)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::TextUnformatted",1,"char const *");
    if(lua_gettop(L)>=2 && !SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::TextUnformatted",2,"char const *");
    arg1 = (char *)lua_tostring(L, 1); if(lua_gettop(L)>=2){ arg2 = (char *)lua_tostring(L, 2);} 
    ImGui::TextUnformatted((char const *)arg1,(char const *)arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_Text(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; void *arg2 = 0 ;
    SWIG_check_num_args("ImGui::Text",1,1) if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::Text",1,"char const *");
    arg1 = (char *)lua_tostring(L, 1); ImGui::Text((char const *)arg1,arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_TextV(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; va_list arg2 ; va_list *argp2 ;
    SWIG_check_num_args("ImGui::TextV",2,2) if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::TextV",1,"char const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::TextV",2,"va_list"); arg1 = (char *)lua_tostring(L, 1);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_va_list,0))){ SWIG_fail_ptr("TextV",2,SWIGTYPE_p_va_list); } 
    arg2 = *argp2; ImGui::TextV((char const *)arg1,SWIG_STD_MOVE(arg2)); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_TextColored(lua_State* L) { { int SWIG_arg = 0; ImVec4 *arg1 = 0 ; char *arg2 = (char *) 0 ; void *arg3 = 0 ;
    SWIG_check_num_args("ImGui::TextColored",2,2)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::TextColored",1,"ImVec4 const &");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::TextColored",2,"char const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec4,0))){ SWIG_fail_ptr("TextColored",1,SWIGTYPE_p_ImVec4); }
     arg2 = (char *)lua_tostring(L, 2); ImGui::TextColored((ImVec4 const &)*arg1,(char const *)arg2,arg3); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_TextColoredV(lua_State* L) { { int SWIG_arg = 0; ImVec4 *arg1 = 0 ; char *arg2 = (char *) 0 ; va_list arg3 ;
    va_list *argp3 ; SWIG_check_num_args("ImGui::TextColoredV",3,3)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::TextColoredV",1,"ImVec4 const &");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::TextColoredV",2,"char const *");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImGui::TextColoredV",3,"va_list");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec4,0))){ SWIG_fail_ptr("TextColoredV",1,SWIGTYPE_p_ImVec4); }
     arg2 = (char *)lua_tostring(L, 2); if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_va_list,0))){
      SWIG_fail_ptr("TextColoredV",3,SWIGTYPE_p_va_list); }  arg3 = *argp3;
    ImGui::TextColoredV((ImVec4 const &)*arg1,(char const *)arg2,SWIG_STD_MOVE(arg3)); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_TextDisabled(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; void *arg2 = 0 ;
    SWIG_check_num_args("ImGui::TextDisabled",1,1)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::TextDisabled",1,"char const *"); arg1 = (char *)lua_tostring(L, 1);
    ImGui::TextDisabled((char const *)arg1,arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_TextDisabledV(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; va_list arg2 ; va_list *argp2 ;
    SWIG_check_num_args("ImGui::TextDisabledV",2,2)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::TextDisabledV",1,"char const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::TextDisabledV",2,"va_list"); arg1 = (char *)lua_tostring(L, 1);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_va_list,0))){
      SWIG_fail_ptr("TextDisabledV",2,SWIGTYPE_p_va_list); }  arg2 = *argp2;
    ImGui::TextDisabledV((char const *)arg1,SWIG_STD_MOVE(arg2)); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_TextWrapped(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; void *arg2 = 0 ;
    SWIG_check_num_args("ImGui::TextWrapped",1,1)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::TextWrapped",1,"char const *"); arg1 = (char *)lua_tostring(L, 1);
    ImGui::TextWrapped((char const *)arg1,arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_TextWrappedV(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; va_list arg2 ; va_list *argp2 ;
    SWIG_check_num_args("ImGui::TextWrappedV",2,2)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::TextWrappedV",1,"char const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::TextWrappedV",2,"va_list"); arg1 = (char *)lua_tostring(L, 1);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_va_list,0))){
      SWIG_fail_ptr("TextWrappedV",2,SWIGTYPE_p_va_list); }  arg2 = *argp2;
    ImGui::TextWrappedV((char const *)arg1,SWIG_STD_MOVE(arg2)); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_LabelText(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; char *arg2 = (char *) 0 ;
    void *arg3 = 0 ; SWIG_check_num_args("ImGui::LabelText",2,2)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::LabelText",1,"char const *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::LabelText",2,"char const *"); arg1 = (char *)lua_tostring(L, 1);
    arg2 = (char *)lua_tostring(L, 2); ImGui::LabelText((char const *)arg1,(char const *)arg2,arg3); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_LabelTextV(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; char *arg2 = (char *) 0 ;
    va_list arg3 ; va_list *argp3 ; SWIG_check_num_args("ImGui::LabelTextV",3,3)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::LabelTextV",1,"char const *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::LabelTextV",2,"char const *");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImGui::LabelTextV",3,"va_list"); arg1 = (char *)lua_tostring(L, 1);
    arg2 = (char *)lua_tostring(L, 2); if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_va_list,0))){
      SWIG_fail_ptr("LabelTextV",3,SWIGTYPE_p_va_list); }  arg3 = *argp3;
    ImGui::LabelTextV((char const *)arg1,(char const *)arg2,SWIG_STD_MOVE(arg3)); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_BulletText(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; void *arg2 = 0 ;
    SWIG_check_num_args("ImGui::BulletText",1,1)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::BulletText",1,"char const *"); arg1 = (char *)lua_tostring(L, 1);
    ImGui::BulletText((char const *)arg1,arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_BulletTextV(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; va_list arg2 ; va_list *argp2 ;
    SWIG_check_num_args("ImGui::BulletTextV",2,2)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::BulletTextV",1,"char const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::BulletTextV",2,"va_list"); arg1 = (char *)lua_tostring(L, 1);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_va_list,0))){
      SWIG_fail_ptr("BulletTextV",2,SWIGTYPE_p_va_list); }  arg2 = *argp2;
    ImGui::BulletTextV((char const *)arg1,SWIG_STD_MOVE(arg2)); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SeparatorText(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ;
    SWIG_check_num_args("ImGui::SeparatorText",1,1)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SeparatorText",1,"char const *"); arg1 = (char *)lua_tostring(L, 1);
    ImGui::SeparatorText((char const *)arg1); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Button(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ;
    ImVec2 const &arg2_defvalue = ImVec2(0, 0) ; ImVec2 *arg2 = (ImVec2 *) &arg2_defvalue ; bool result;
    SWIG_check_num_args("ImGui::Button",1,2) if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::Button",1,"char const *");
    if(lua_gettop(L)>=2 && !lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::Button",2,"ImVec2 const &");
    arg1 = (char *)lua_tostring(L, 1); if(lua_gettop(L)>=2){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){ SWIG_fail_ptr("Button",2,SWIGTYPE_p_ImVec2); }  }
     result = (bool)ImGui::Button((char const *)arg1,(ImVec2 const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SmallButton(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; bool result;
    SWIG_check_num_args("ImGui::SmallButton",1,1)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SmallButton",1,"char const *"); arg1 = (char *)lua_tostring(L, 1);
    result = (bool)ImGui::SmallButton((char const *)arg1); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_InvisibleButton(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; ImVec2 *arg2 = 0 ;
    ImGuiButtonFlags arg3 = (ImGuiButtonFlags) 0 ; bool result; SWIG_check_num_args("ImGui::InvisibleButton",2,3)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InvisibleButton",1,"char const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::InvisibleButton",2,"ImVec2 const &");
    if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("ImGui::InvisibleButton",3,"ImGuiButtonFlags");
    arg1 = (char *)lua_tostring(L, 1); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("InvisibleButton",2,SWIGTYPE_p_ImVec2); }  if(lua_gettop(L)>=3){
      arg3 = (ImGuiButtonFlags)lua_tonumber(L, 3);} 
    result = (bool)ImGui::InvisibleButton((char const *)arg1,(ImVec2 const &)*arg2,arg3);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ArrowButton(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; ImGuiDir arg2 ; bool result;
    SWIG_check_num_args("ImGui::ArrowButton",2,2)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::ArrowButton",1,"char const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::ArrowButton",2,"ImGuiDir"); arg1 = (char *)lua_tostring(L, 1);
    arg2 = (ImGuiDir)(int)lua_tonumber(L, 2); result = (bool)ImGui::ArrowButton((char const *)arg1,arg2);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Checkbox(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; bool *arg2 = (bool *) 0 ; bool result;
    SWIG_check_num_args("ImGui::Checkbox",2,2) if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::Checkbox",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::Checkbox",2,"bool *"); arg1 = (char *)lua_tostring(L, 1);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){ SWIG_fail_ptr("Checkbox",2,SWIGTYPE_p_bool); } 
    result = (bool)ImGui::Checkbox((char const *)arg1,arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CheckboxFlags__SWIG_0(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; int *arg2 = (int *) 0 ;
    int arg3 ; bool result; SWIG_check_num_args("ImGui::CheckboxFlags",3,3)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::CheckboxFlags",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::CheckboxFlags",2,"int *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::CheckboxFlags",3,"int"); arg1 = (char *)lua_tostring(L, 1);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){ SWIG_fail_ptr("CheckboxFlags",2,SWIGTYPE_p_int); } 
    arg3 = (int)lua_tonumber(L, 3); result = (bool)ImGui::CheckboxFlags((char const *)arg1,arg2,arg3);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CheckboxFlags__SWIG_1(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ;
    unsigned int *arg2 = (unsigned int *) 0 ; unsigned int arg3 ; bool result; SWIG_check_num_args("ImGui::CheckboxFlags",3,3)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::CheckboxFlags",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::CheckboxFlags",2,"unsigned int *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::CheckboxFlags",3,"unsigned int"); arg1 = (char *)lua_tostring(L, 1);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
      SWIG_fail_ptr("CheckboxFlags",2,SWIGTYPE_p_unsigned_int); } 
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative"); arg3 = (unsigned int)lua_tonumber(L, 3);
    result = (bool)ImGui::CheckboxFlags((char const *)arg1,arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CheckboxFlags(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 3) {
    int _v = 0; { _v = SWIG_lua_isnilstring(L,argv[0]); }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) { _v = 0; }  else {
          _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_CheckboxFlags__SWIG_0(L);}  }  }  } 
  if (argc == 3) { int _v = 0; { _v = SWIG_lua_isnilstring(L,argv[0]); }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_int, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_CheckboxFlags__SWIG_1(L);}  }
       }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CheckboxFlags'\n"
  "  Possible C/C++ prototypes are:\n" "    ImGui::CheckboxFlags(char const *,int *,int)\n"
  "    ImGui::CheckboxFlags(char const *,unsigned int *,unsigned int)\n"); lua_error(L);return 0; }
static int _wrap_RadioButton(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; bool arg2 ; bool result;
    SWIG_check_num_args("ImGui::RadioButton",2,2)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::RadioButton",1,"char const *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGui::RadioButton",2,"bool"); arg1 = (char *)lua_tostring(L, 1);
    arg2 = (lua_toboolean(L, 2)!=0); result = (bool)ImGui::RadioButton((char const *)arg1,arg2);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_RadioButton_shortcut(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; int *arg2 = (int *) 0 ;
    int arg3 ; bool result; SWIG_check_num_args("ImGui::RadioButton",3,3)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::RadioButton",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::RadioButton",2,"int *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::RadioButton",3,"int"); arg1 = (char *)lua_tostring(L, 1);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
      SWIG_fail_ptr("RadioButton_shortcut",2,SWIGTYPE_p_int); }  arg3 = (int)lua_tonumber(L, 3);
    result = (bool)ImGui::RadioButton((char const *)arg1,arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ProgressBar(lua_State* L) { { int SWIG_arg = 0; float arg1 ;
    ImVec2 const &arg2_defvalue = ImVec2(-FLT_MIN, 0) ; ImVec2 *arg2 = (ImVec2 *) &arg2_defvalue ; char *arg3 = (char *) NULL ;
    SWIG_check_num_args("ImGui::ProgressBar",1,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::ProgressBar",1,"float");
    if(lua_gettop(L)>=2 && !lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::ProgressBar",2,"ImVec2 const &");
    if(lua_gettop(L)>=3 && !SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGui::ProgressBar",3,"char const *");
    arg1 = (float)lua_tonumber(L, 1); if(lua_gettop(L)>=2){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
        SWIG_fail_ptr("ProgressBar",2,SWIGTYPE_p_ImVec2); }  }  if(lua_gettop(L)>=3){ arg3 = (char *)lua_tostring(L, 3);} 
    ImGui::ProgressBar(arg1,(ImVec2 const &)*arg2,(char const *)arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_Bullet(lua_State* L) { { int SWIG_arg = 0; SWIG_check_num_args("ImGui::Bullet",0,0) ImGui::Bullet();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_TextLink(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; bool result;
    SWIG_check_num_args("ImGui::TextLink",1,1) if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::TextLink",1,"char const *");
    arg1 = (char *)lua_tostring(L, 1); result = (bool)ImGui::TextLink((char const *)arg1);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_TextLinkOpenURL(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; char *arg2 = (char *) NULL ;
    SWIG_check_num_args("ImGui::TextLinkOpenURL",1,2)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::TextLinkOpenURL",1,"char const *");
    if(lua_gettop(L)>=2 && !SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::TextLinkOpenURL",2,"char const *");
    arg1 = (char *)lua_tostring(L, 1); if(lua_gettop(L)>=2){ arg2 = (char *)lua_tostring(L, 2);} 
    ImGui::TextLinkOpenURL((char const *)arg1,(char const *)arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_Image(lua_State* L) { { int SWIG_arg = 0; int arg1 ; ImVec2 *arg2 = 0 ;
    ImVec2 const &arg3_defvalue = ImVec2(0, 0) ; ImVec2 *arg3 = (ImVec2 *) &arg3_defvalue ;
    ImVec2 const &arg4_defvalue = ImVec2(1, 1) ; ImVec2 *arg4 = (ImVec2 *) &arg4_defvalue ;
    ImVec4 const &arg5_defvalue = ImVec4(1, 1, 1, 1) ; ImVec4 *arg5 = (ImVec4 *) &arg5_defvalue ;
    ImVec4 const &arg6_defvalue = ImVec4(0, 0, 0, 0) ; ImVec4 *arg6 = (ImVec4 *) &arg6_defvalue ;
    SWIG_check_num_args("ImGui::Image",2,6) if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::Image",1,"int");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::Image",2,"ImVec2 const &");
    if(lua_gettop(L)>=3 && !lua_isuserdata(L,3)) SWIG_fail_arg("ImGui::Image",3,"ImVec2 const &");
    if(lua_gettop(L)>=4 && !lua_isuserdata(L,4)) SWIG_fail_arg("ImGui::Image",4,"ImVec2 const &");
    if(lua_gettop(L)>=5 && !lua_isuserdata(L,5)) SWIG_fail_arg("ImGui::Image",5,"ImVec4 const &");
    if(lua_gettop(L)>=6 && !lua_isuserdata(L,6)) SWIG_fail_arg("ImGui::Image",6,"ImVec4 const &");
    arg1 = (int)lua_tonumber(L, 1); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("Image",2,SWIGTYPE_p_ImVec2); }  if(lua_gettop(L)>=3){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){ SWIG_fail_ptr("Image",3,SWIGTYPE_p_ImVec2); }  } 
    if(lua_gettop(L)>=4){ if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
        SWIG_fail_ptr("Image",4,SWIGTYPE_p_ImVec2); }  }  if(lua_gettop(L)>=5){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImVec4,0))){ SWIG_fail_ptr("Image",5,SWIGTYPE_p_ImVec4); }  } 
    if(lua_gettop(L)>=6){ if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ImVec4,0))){
        SWIG_fail_ptr("Image",6,SWIGTYPE_p_ImVec4); }  } 
    ImGui::Image(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec4 const &)*arg5,(ImVec4 const &)*arg6);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImageButton(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; int arg2 ; ImVec2 *arg3 = 0 ;
    ImVec2 const &arg4_defvalue = ImVec2(0, 0) ; ImVec2 *arg4 = (ImVec2 *) &arg4_defvalue ;
    ImVec2 const &arg5_defvalue = ImVec2(1, 1) ; ImVec2 *arg5 = (ImVec2 *) &arg5_defvalue ;
    ImVec4 const &arg6_defvalue = ImVec4(0, 0, 0, 0) ; ImVec4 *arg6 = (ImVec4 *) &arg6_defvalue ;
    ImVec4 const &arg7_defvalue = ImVec4(1, 1, 1, 1) ; ImVec4 *arg7 = (ImVec4 *) &arg7_defvalue ; bool result;
    SWIG_check_num_args("ImGui::ImageButton",3,7)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::ImageButton",1,"char const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::ImageButton",2,"int");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImGui::ImageButton",3,"ImVec2 const &");
    if(lua_gettop(L)>=4 && !lua_isuserdata(L,4)) SWIG_fail_arg("ImGui::ImageButton",4,"ImVec2 const &");
    if(lua_gettop(L)>=5 && !lua_isuserdata(L,5)) SWIG_fail_arg("ImGui::ImageButton",5,"ImVec2 const &");
    if(lua_gettop(L)>=6 && !lua_isuserdata(L,6)) SWIG_fail_arg("ImGui::ImageButton",6,"ImVec4 const &");
    if(lua_gettop(L)>=7 && !lua_isuserdata(L,7)) SWIG_fail_arg("ImGui::ImageButton",7,"ImVec4 const &");
    arg1 = (char *)lua_tostring(L, 1); arg2 = (int)lua_tonumber(L, 2);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){ SWIG_fail_ptr("ImageButton",3,SWIGTYPE_p_ImVec2); }
     if(lua_gettop(L)>=4){ if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
        SWIG_fail_ptr("ImageButton",4,SWIGTYPE_p_ImVec2); }  }  if(lua_gettop(L)>=5){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImVec2,0))){
        SWIG_fail_ptr("ImageButton",5,SWIGTYPE_p_ImVec2); }  }  if(lua_gettop(L)>=6){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ImVec4,0))){
        SWIG_fail_ptr("ImageButton",6,SWIGTYPE_p_ImVec4); }  }  if(lua_gettop(L)>=7){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_ImVec4,0))){
        SWIG_fail_ptr("ImageButton",7,SWIGTYPE_p_ImVec4); }  } 
    result = (bool)ImGui::ImageButton((char const *)arg1,arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec4 const &)*arg6,(ImVec4 const &)*arg7);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_BeginCombo(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; char *arg2 = (char *) 0 ;
    ImGuiComboFlags arg3 = (ImGuiComboFlags) 0 ; bool result; SWIG_check_num_args("ImGui::BeginCombo",2,3)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::BeginCombo",1,"char const *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::BeginCombo",2,"char const *");
    if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("ImGui::BeginCombo",3,"ImGuiComboFlags");
    arg1 = (char *)lua_tostring(L, 1); arg2 = (char *)lua_tostring(L, 2); if(lua_gettop(L)>=3){
      arg3 = (ImGuiComboFlags)lua_tonumber(L, 3);} 
    result = (bool)ImGui::BeginCombo((char const *)arg1,(char const *)arg2,arg3);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_EndCombo(lua_State* L) { { int SWIG_arg = 0; SWIG_check_num_args("ImGui::EndCombo",0,0) ImGui::EndCombo();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Combo__SWIG_0(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; int *arg2 = (int *) 0 ;
    char **arg3 = (char **) (char **)0 ; int arg4 ; int arg5 = (int) -1 ; bool result; SWIG_check_num_args("ImGui::Combo",4,5)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::Combo",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::Combo",2,"int *");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::Combo",3,"char const *const []");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::Combo",4,"int");
    if(lua_gettop(L)>=5 && !lua_isnumber(L,5)) SWIG_fail_arg("ImGui::Combo",5,"int"); arg1 = (char *)lua_tostring(L, 1);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){ SWIG_fail_ptr("Combo",2,SWIGTYPE_p_int); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_char,0))){ SWIG_fail_ptr("Combo",3,SWIGTYPE_p_p_char); } 
    arg4 = (int)lua_tonumber(L, 4); if(lua_gettop(L)>=5){ arg5 = (int)lua_tonumber(L, 5);} 
    result = (bool)ImGui::Combo((char const *)arg1,arg2,(char const *const (*))arg3,arg4,arg5);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Combo_itemsSeperatedByZeros(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ;
    int *arg2 = (int *) 0 ; char *arg3 = (char *) 0 ; int arg4 = (int) -1 ; bool result; SWIG_check_num_args("ImGui::Combo",3,4)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::Combo",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::Combo",2,"int *");
    if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGui::Combo",3,"char const *");
    if(lua_gettop(L)>=4 && !lua_isnumber(L,4)) SWIG_fail_arg("ImGui::Combo",4,"int"); arg1 = (char *)lua_tostring(L, 1);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
      SWIG_fail_ptr("Combo_itemsSeperatedByZeros",2,SWIGTYPE_p_int); }  arg3 = (char *)lua_tostring(L, 3); if(lua_gettop(L)>=4){
      arg4 = (int)lua_tonumber(L, 4);}  result = (bool)ImGui::Combo((char const *)arg1,arg2,(char const *)arg3,arg4);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Combo__SWIG_1(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; int *arg2 = (int *) 0 ;
    char *(*arg3)(void *,int) = (char *(*)(void *,int)) 0 ; void *arg4 = (void *) 0 ; int arg5 ; int arg6 = (int) -1 ;
    bool result; SWIG_check_num_args("ImGui::Combo",5,6)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::Combo",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::Combo",2,"int *");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::Combo",3,"char const *(*)(void *,int)");
    if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImGui::Combo",4,"void *");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::Combo",5,"int");
    if(lua_gettop(L)>=6 && !lua_isnumber(L,6)) SWIG_fail_arg("ImGui::Combo",6,"int"); arg1 = (char *)lua_tostring(L, 1);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){ SWIG_fail_ptr("Combo",2,SWIGTYPE_p_int); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_f_p_void_int__p_char,0))){
      SWIG_fail_ptr("Combo",3,SWIGTYPE_p_f_p_void_int__p_char); }  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"Combo");
    arg5 = (int)lua_tonumber(L, 5); if(lua_gettop(L)>=6){ arg6 = (int)lua_tonumber(L, 6);} 
    result = (bool)ImGui::Combo((char const *)arg1,arg2,(char const *(*)(void *,int))arg3,arg4,arg5,arg6);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Combo(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L);
  if ((argc >= 4) && (argc <= 5)) { int _v = 0; { _v = SWIG_lua_isnilstring(L,argv[0]); }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) { _v = 0; }  else {
          _v = 1; }  }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_char, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { if (argc <= 4) {
              return _wrap_Combo__SWIG_0(L);}  { _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_Combo__SWIG_0(L);}  }  }
         }  }  }  if ((argc >= 5) && (argc <= 6)) { int _v = 0; { _v = SWIG_lua_isnilstring(L,argv[0]); }  if (_v) { {
        void *ptr; if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_f_p_void_int__p_char, 0)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, 0, 0)) { _v = 0; }  else { _v = 1; }
             }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { if (argc <= 5) { return _wrap_Combo__SWIG_1(L);}  {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { return _wrap_Combo__SWIG_1(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Combo'\n" "  Possible C/C++ prototypes are:\n"
  "    ImGui::Combo(char const *,int *,char const *const [],int,int)\n"
  "    ImGui::Combo(char const *,int *,char const *(*)(void *,int),void *,int,int)\n"); lua_error(L);return 0; }
static int _wrap_DragFloat(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; float *arg2 = (float *) 0 ;
    float arg3 = (float) 1.0 ; float arg4 = (float) 0.0 ; float arg5 = (float) 0.0 ; char *arg6 = (char *) "%.3f" ;
    ImGuiSliderFlags arg7 = (ImGuiSliderFlags) 0 ; bool result; SWIG_check_num_args("ImGui::DragFloat",2,7)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragFloat",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragFloat",2,"float *");
    if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragFloat",3,"float");
    if(lua_gettop(L)>=4 && !lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragFloat",4,"float");
    if(lua_gettop(L)>=5 && !lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragFloat",5,"float");
    if(lua_gettop(L)>=6 && !SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::DragFloat",6,"char const *");
    if(lua_gettop(L)>=7 && !lua_isnumber(L,7)) SWIG_fail_arg("ImGui::DragFloat",7,"ImGuiSliderFlags");
    arg1 = (char *)lua_tostring(L, 1); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("DragFloat",2,SWIGTYPE_p_float); }  if(lua_gettop(L)>=3){ arg3 = (float)lua_tonumber(L, 3);} 
    if(lua_gettop(L)>=4){ arg4 = (float)lua_tonumber(L, 4);}  if(lua_gettop(L)>=5){ arg5 = (float)lua_tonumber(L, 5);} 
    if(lua_gettop(L)>=6){ arg6 = (char *)lua_tostring(L, 6);}  if(lua_gettop(L)>=7){
      arg7 = (ImGuiSliderFlags)lua_tonumber(L, 7);} 
    result = (bool)ImGui::DragFloat((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_DragFloat2(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; float *arg2 = (float *) (float *)0 ;
    float arg3 = (float) 1.0 ; float arg4 = (float) 0.0 ; float arg5 = (float) 0.0 ; char *arg6 = (char *) "%.3f" ;
    ImGuiSliderFlags arg7 = (ImGuiSliderFlags) 0 ; bool result; SWIG_check_num_args("ImGui::DragFloat2",2,7)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragFloat2",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragFloat2",2,"float [2]");
    if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragFloat2",3,"float");
    if(lua_gettop(L)>=4 && !lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragFloat2",4,"float");
    if(lua_gettop(L)>=5 && !lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragFloat2",5,"float");
    if(lua_gettop(L)>=6 && !SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::DragFloat2",6,"char const *");
    if(lua_gettop(L)>=7 && !lua_isnumber(L,7)) SWIG_fail_arg("ImGui::DragFloat2",7,"ImGuiSliderFlags");
    arg1 = (char *)lua_tostring(L, 1); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("DragFloat2",2,SWIGTYPE_p_float); }  if(lua_gettop(L)>=3){ arg3 = (float)lua_tonumber(L, 3);} 
    if(lua_gettop(L)>=4){ arg4 = (float)lua_tonumber(L, 4);}  if(lua_gettop(L)>=5){ arg5 = (float)lua_tonumber(L, 5);} 
    if(lua_gettop(L)>=6){ arg6 = (char *)lua_tostring(L, 6);}  if(lua_gettop(L)>=7){
      arg7 = (ImGuiSliderFlags)lua_tonumber(L, 7);} 
    result = (bool)ImGui::DragFloat2((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_DragFloat3(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; float *arg2 = (float *) (float *)0 ;
    float arg3 = (float) 1.0 ; float arg4 = (float) 0.0 ; float arg5 = (float) 0.0 ; char *arg6 = (char *) "%.3f" ;
    ImGuiSliderFlags arg7 = (ImGuiSliderFlags) 0 ; bool result; SWIG_check_num_args("ImGui::DragFloat3",2,7)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragFloat3",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragFloat3",2,"float [3]");
    if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragFloat3",3,"float");
    if(lua_gettop(L)>=4 && !lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragFloat3",4,"float");
    if(lua_gettop(L)>=5 && !lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragFloat3",5,"float");
    if(lua_gettop(L)>=6 && !SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::DragFloat3",6,"char const *");
    if(lua_gettop(L)>=7 && !lua_isnumber(L,7)) SWIG_fail_arg("ImGui::DragFloat3",7,"ImGuiSliderFlags");
    arg1 = (char *)lua_tostring(L, 1); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("DragFloat3",2,SWIGTYPE_p_float); }  if(lua_gettop(L)>=3){ arg3 = (float)lua_tonumber(L, 3);} 
    if(lua_gettop(L)>=4){ arg4 = (float)lua_tonumber(L, 4);}  if(lua_gettop(L)>=5){ arg5 = (float)lua_tonumber(L, 5);} 
    if(lua_gettop(L)>=6){ arg6 = (char *)lua_tostring(L, 6);}  if(lua_gettop(L)>=7){
      arg7 = (ImGuiSliderFlags)lua_tonumber(L, 7);} 
    result = (bool)ImGui::DragFloat3((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_DragFloat4(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; float *arg2 = (float *) (float *)0 ;
    float arg3 = (float) 1.0 ; float arg4 = (float) 0.0 ; float arg5 = (float) 0.0 ; char *arg6 = (char *) "%.3f" ;
    ImGuiSliderFlags arg7 = (ImGuiSliderFlags) 0 ; bool result; SWIG_check_num_args("ImGui::DragFloat4",2,7)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragFloat4",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragFloat4",2,"float [4]");
    if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragFloat4",3,"float");
    if(lua_gettop(L)>=4 && !lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragFloat4",4,"float");
    if(lua_gettop(L)>=5 && !lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragFloat4",5,"float");
    if(lua_gettop(L)>=6 && !SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::DragFloat4",6,"char const *");
    if(lua_gettop(L)>=7 && !lua_isnumber(L,7)) SWIG_fail_arg("ImGui::DragFloat4",7,"ImGuiSliderFlags");
    arg1 = (char *)lua_tostring(L, 1); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("DragFloat4",2,SWIGTYPE_p_float); }  if(lua_gettop(L)>=3){ arg3 = (float)lua_tonumber(L, 3);} 
    if(lua_gettop(L)>=4){ arg4 = (float)lua_tonumber(L, 4);}  if(lua_gettop(L)>=5){ arg5 = (float)lua_tonumber(L, 5);} 
    if(lua_gettop(L)>=6){ arg6 = (char *)lua_tostring(L, 6);}  if(lua_gettop(L)>=7){
      arg7 = (ImGuiSliderFlags)lua_tonumber(L, 7);} 
    result = (bool)ImGui::DragFloat4((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_DragFloatRange2(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; float *arg2 = (float *) 0 ;
    float *arg3 = (float *) 0 ; float arg4 = (float) 1.0 ; float arg5 = (float) 0.0 ; float arg6 = (float) 0.0 ;
    char *arg7 = (char *) "%.3f" ; char *arg8 = (char *) NULL ; ImGuiSliderFlags arg9 = (ImGuiSliderFlags) 0 ; bool result;
    SWIG_check_num_args("ImGui::DragFloatRange2",3,9)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragFloatRange2",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragFloatRange2",2,"float *");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::DragFloatRange2",3,"float *");
    if(lua_gettop(L)>=4 && !lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragFloatRange2",4,"float");
    if(lua_gettop(L)>=5 && !lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragFloatRange2",5,"float");
    if(lua_gettop(L)>=6 && !lua_isnumber(L,6)) SWIG_fail_arg("ImGui::DragFloatRange2",6,"float");
    if(lua_gettop(L)>=7 && !SWIG_lua_isnilstring(L,7)) SWIG_fail_arg("ImGui::DragFloatRange2",7,"char const *");
    if(lua_gettop(L)>=8 && !SWIG_lua_isnilstring(L,8)) SWIG_fail_arg("ImGui::DragFloatRange2",8,"char const *");
    if(lua_gettop(L)>=9 && !lua_isnumber(L,9)) SWIG_fail_arg("ImGui::DragFloatRange2",9,"ImGuiSliderFlags");
    arg1 = (char *)lua_tostring(L, 1); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("DragFloatRange2",2,SWIGTYPE_p_float); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("DragFloatRange2",3,SWIGTYPE_p_float); }  if(lua_gettop(L)>=4){ arg4 = (float)lua_tonumber(L, 4);} 
    if(lua_gettop(L)>=5){ arg5 = (float)lua_tonumber(L, 5);}  if(lua_gettop(L)>=6){ arg6 = (float)lua_tonumber(L, 6);} 
    if(lua_gettop(L)>=7){ arg7 = (char *)lua_tostring(L, 7);}  if(lua_gettop(L)>=8){ arg8 = (char *)lua_tostring(L, 8);} 
    if(lua_gettop(L)>=9){ arg9 = (ImGuiSliderFlags)lua_tonumber(L, 9);} 
    result = (bool)ImGui::DragFloatRange2((char const *)arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7,(char const *)arg8,arg9);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_DragInt(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; int *arg2 = (int *) 0 ;
    float arg3 = (float) 1.0 ; int arg4 = (int) 0 ; int arg5 = (int) 0 ; char *arg6 = (char *) "%d" ;
    ImGuiSliderFlags arg7 = (ImGuiSliderFlags) 0 ; bool result; SWIG_check_num_args("ImGui::DragInt",2,7)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragInt",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragInt",2,"int *");
    if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragInt",3,"float");
    if(lua_gettop(L)>=4 && !lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragInt",4,"int");
    if(lua_gettop(L)>=5 && !lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragInt",5,"int");
    if(lua_gettop(L)>=6 && !SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::DragInt",6,"char const *");
    if(lua_gettop(L)>=7 && !lua_isnumber(L,7)) SWIG_fail_arg("ImGui::DragInt",7,"ImGuiSliderFlags");
    arg1 = (char *)lua_tostring(L, 1); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
      SWIG_fail_ptr("DragInt",2,SWIGTYPE_p_int); }  if(lua_gettop(L)>=3){ arg3 = (float)lua_tonumber(L, 3);} 
    if(lua_gettop(L)>=4){ arg4 = (int)lua_tonumber(L, 4);}  if(lua_gettop(L)>=5){ arg5 = (int)lua_tonumber(L, 5);} 
    if(lua_gettop(L)>=6){ arg6 = (char *)lua_tostring(L, 6);}  if(lua_gettop(L)>=7){
      arg7 = (ImGuiSliderFlags)lua_tonumber(L, 7);} 
    result = (bool)ImGui::DragInt((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_DragInt2(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; int *arg2 = (int *) (int *)0 ;
    float arg3 = (float) 1.0 ; int arg4 = (int) 0 ; int arg5 = (int) 0 ; char *arg6 = (char *) "%d" ;
    ImGuiSliderFlags arg7 = (ImGuiSliderFlags) 0 ; bool result; SWIG_check_num_args("ImGui::DragInt2",2,7)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragInt2",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragInt2",2,"int [2]");
    if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragInt2",3,"float");
    if(lua_gettop(L)>=4 && !lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragInt2",4,"int");
    if(lua_gettop(L)>=5 && !lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragInt2",5,"int");
    if(lua_gettop(L)>=6 && !SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::DragInt2",6,"char const *");
    if(lua_gettop(L)>=7 && !lua_isnumber(L,7)) SWIG_fail_arg("ImGui::DragInt2",7,"ImGuiSliderFlags");
    arg1 = (char *)lua_tostring(L, 1); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
      SWIG_fail_ptr("DragInt2",2,SWIGTYPE_p_int); }  if(lua_gettop(L)>=3){ arg3 = (float)lua_tonumber(L, 3);} 
    if(lua_gettop(L)>=4){ arg4 = (int)lua_tonumber(L, 4);}  if(lua_gettop(L)>=5){ arg5 = (int)lua_tonumber(L, 5);} 
    if(lua_gettop(L)>=6){ arg6 = (char *)lua_tostring(L, 6);}  if(lua_gettop(L)>=7){
      arg7 = (ImGuiSliderFlags)lua_tonumber(L, 7);} 
    result = (bool)ImGui::DragInt2((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_DragInt3(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; int *arg2 = (int *) (int *)0 ;
    float arg3 = (float) 1.0 ; int arg4 = (int) 0 ; int arg5 = (int) 0 ; char *arg6 = (char *) "%d" ;
    ImGuiSliderFlags arg7 = (ImGuiSliderFlags) 0 ; bool result; SWIG_check_num_args("ImGui::DragInt3",2,7)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragInt3",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragInt3",2,"int [3]");
    if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragInt3",3,"float");
    if(lua_gettop(L)>=4 && !lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragInt3",4,"int");
    if(lua_gettop(L)>=5 && !lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragInt3",5,"int");
    if(lua_gettop(L)>=6 && !SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::DragInt3",6,"char const *");
    if(lua_gettop(L)>=7 && !lua_isnumber(L,7)) SWIG_fail_arg("ImGui::DragInt3",7,"ImGuiSliderFlags");
    arg1 = (char *)lua_tostring(L, 1); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
      SWIG_fail_ptr("DragInt3",2,SWIGTYPE_p_int); }  if(lua_gettop(L)>=3){ arg3 = (float)lua_tonumber(L, 3);} 
    if(lua_gettop(L)>=4){ arg4 = (int)lua_tonumber(L, 4);}  if(lua_gettop(L)>=5){ arg5 = (int)lua_tonumber(L, 5);} 
    if(lua_gettop(L)>=6){ arg6 = (char *)lua_tostring(L, 6);}  if(lua_gettop(L)>=7){
      arg7 = (ImGuiSliderFlags)lua_tonumber(L, 7);} 
    result = (bool)ImGui::DragInt3((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_DragInt4(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; int *arg2 = (int *) (int *)0 ;
    float arg3 = (float) 1.0 ; int arg4 = (int) 0 ; int arg5 = (int) 0 ; char *arg6 = (char *) "%d" ;
    ImGuiSliderFlags arg7 = (ImGuiSliderFlags) 0 ; bool result; SWIG_check_num_args("ImGui::DragInt4",2,7)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragInt4",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragInt4",2,"int [4]");
    if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DragInt4",3,"float");
    if(lua_gettop(L)>=4 && !lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragInt4",4,"int");
    if(lua_gettop(L)>=5 && !lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragInt4",5,"int");
    if(lua_gettop(L)>=6 && !SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::DragInt4",6,"char const *");
    if(lua_gettop(L)>=7 && !lua_isnumber(L,7)) SWIG_fail_arg("ImGui::DragInt4",7,"ImGuiSliderFlags");
    arg1 = (char *)lua_tostring(L, 1); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
      SWIG_fail_ptr("DragInt4",2,SWIGTYPE_p_int); }  if(lua_gettop(L)>=3){ arg3 = (float)lua_tonumber(L, 3);} 
    if(lua_gettop(L)>=4){ arg4 = (int)lua_tonumber(L, 4);}  if(lua_gettop(L)>=5){ arg5 = (int)lua_tonumber(L, 5);} 
    if(lua_gettop(L)>=6){ arg6 = (char *)lua_tostring(L, 6);}  if(lua_gettop(L)>=7){
      arg7 = (ImGuiSliderFlags)lua_tonumber(L, 7);} 
    result = (bool)ImGui::DragInt4((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_DragIntRange2(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; int *arg2 = (int *) 0 ;
    int *arg3 = (int *) 0 ; float arg4 = (float) 1.0 ; int arg5 = (int) 0 ; int arg6 = (int) 0 ; char *arg7 = (char *) "%d" ;
    char *arg8 = (char *) NULL ; ImGuiSliderFlags arg9 = (ImGuiSliderFlags) 0 ; bool result;
    SWIG_check_num_args("ImGui::DragIntRange2",3,9)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragIntRange2",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DragIntRange2",2,"int *");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::DragIntRange2",3,"int *");
    if(lua_gettop(L)>=4 && !lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragIntRange2",4,"float");
    if(lua_gettop(L)>=5 && !lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragIntRange2",5,"int");
    if(lua_gettop(L)>=6 && !lua_isnumber(L,6)) SWIG_fail_arg("ImGui::DragIntRange2",6,"int");
    if(lua_gettop(L)>=7 && !SWIG_lua_isnilstring(L,7)) SWIG_fail_arg("ImGui::DragIntRange2",7,"char const *");
    if(lua_gettop(L)>=8 && !SWIG_lua_isnilstring(L,8)) SWIG_fail_arg("ImGui::DragIntRange2",8,"char const *");
    if(lua_gettop(L)>=9 && !lua_isnumber(L,9)) SWIG_fail_arg("ImGui::DragIntRange2",9,"ImGuiSliderFlags");
    arg1 = (char *)lua_tostring(L, 1); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
      SWIG_fail_ptr("DragIntRange2",2,SWIGTYPE_p_int); }  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
      SWIG_fail_ptr("DragIntRange2",3,SWIGTYPE_p_int); }  if(lua_gettop(L)>=4){ arg4 = (float)lua_tonumber(L, 4);} 
    if(lua_gettop(L)>=5){ arg5 = (int)lua_tonumber(L, 5);}  if(lua_gettop(L)>=6){ arg6 = (int)lua_tonumber(L, 6);} 
    if(lua_gettop(L)>=7){ arg7 = (char *)lua_tostring(L, 7);}  if(lua_gettop(L)>=8){ arg8 = (char *)lua_tostring(L, 8);} 
    if(lua_gettop(L)>=9){ arg9 = (ImGuiSliderFlags)lua_tonumber(L, 9);} 
    result = (bool)ImGui::DragIntRange2((char const *)arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7,(char const *)arg8,arg9);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_DragScalar(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; ImGuiDataType arg2 ;
    void *arg3 = (void *) 0 ; float arg4 = (float) 1.0 ; void *arg5 = (void *) NULL ; void *arg6 = (void *) NULL ;
    char *arg7 = (char *) NULL ; ImGuiSliderFlags arg8 = (ImGuiSliderFlags) 0 ; bool result;
    SWIG_check_num_args("ImGui::DragScalar",3,8)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragScalar",1,"char const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::DragScalar",2,"ImGuiDataType");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::DragScalar",3,"void *");
    if(lua_gettop(L)>=4 && !lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragScalar",4,"float");
    if(lua_gettop(L)>=5 && !SWIG_isptrtype(L,5)) SWIG_fail_arg("ImGui::DragScalar",5,"void const *");
    if(lua_gettop(L)>=6 && !SWIG_isptrtype(L,6)) SWIG_fail_arg("ImGui::DragScalar",6,"void const *");
    if(lua_gettop(L)>=7 && !SWIG_lua_isnilstring(L,7)) SWIG_fail_arg("ImGui::DragScalar",7,"char const *");
    if(lua_gettop(L)>=8 && !lua_isnumber(L,8)) SWIG_fail_arg("ImGui::DragScalar",8,"ImGuiSliderFlags");
    arg1 = (char *)lua_tostring(L, 1); arg2 = (ImGuiDataType)lua_tonumber(L, 2);
    arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"DragScalar"); if(lua_gettop(L)>=4){ arg4 = (float)lua_tonumber(L, 4);} 
    if(lua_gettop(L)>=5){ arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"DragScalar");}  if(lua_gettop(L)>=6){
      arg6=(void *)SWIG_MustGetPtr(L,6,0,0,6,"DragScalar");}  if(lua_gettop(L)>=7){ arg7 = (char *)lua_tostring(L, 7);} 
    if(lua_gettop(L)>=8){ arg8 = (ImGuiSliderFlags)lua_tonumber(L, 8);} 
    result = (bool)ImGui::DragScalar((char const *)arg1,arg2,arg3,arg4,(void const *)arg5,(void const *)arg6,(char const *)arg7,arg8);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_DragScalarN(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; ImGuiDataType arg2 ;
    void *arg3 = (void *) 0 ; int arg4 ; float arg5 = (float) 1.0 ; void *arg6 = (void *) NULL ; void *arg7 = (void *) NULL ;
    char *arg8 = (char *) NULL ; ImGuiSliderFlags arg9 = (ImGuiSliderFlags) 0 ; bool result;
    SWIG_check_num_args("ImGui::DragScalarN",4,9)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DragScalarN",1,"char const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::DragScalarN",2,"ImGuiDataType");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::DragScalarN",3,"void *");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DragScalarN",4,"int");
    if(lua_gettop(L)>=5 && !lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DragScalarN",5,"float");
    if(lua_gettop(L)>=6 && !SWIG_isptrtype(L,6)) SWIG_fail_arg("ImGui::DragScalarN",6,"void const *");
    if(lua_gettop(L)>=7 && !SWIG_isptrtype(L,7)) SWIG_fail_arg("ImGui::DragScalarN",7,"void const *");
    if(lua_gettop(L)>=8 && !SWIG_lua_isnilstring(L,8)) SWIG_fail_arg("ImGui::DragScalarN",8,"char const *");
    if(lua_gettop(L)>=9 && !lua_isnumber(L,9)) SWIG_fail_arg("ImGui::DragScalarN",9,"ImGuiSliderFlags");
    arg1 = (char *)lua_tostring(L, 1); arg2 = (ImGuiDataType)lua_tonumber(L, 2);
    arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"DragScalarN"); arg4 = (int)lua_tonumber(L, 4); if(lua_gettop(L)>=5){
      arg5 = (float)lua_tonumber(L, 5);}  if(lua_gettop(L)>=6){ arg6=(void *)SWIG_MustGetPtr(L,6,0,0,6,"DragScalarN");} 
    if(lua_gettop(L)>=7){ arg7=(void *)SWIG_MustGetPtr(L,7,0,0,7,"DragScalarN");}  if(lua_gettop(L)>=8){
      arg8 = (char *)lua_tostring(L, 8);}  if(lua_gettop(L)>=9){ arg9 = (ImGuiSliderFlags)lua_tonumber(L, 9);} 
    result = (bool)ImGui::DragScalarN((char const *)arg1,arg2,arg3,arg4,arg5,(void const *)arg6,(void const *)arg7,(char const *)arg8,arg9);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SliderFloat(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; float *arg2 = (float *) 0 ;
    float arg3 ; float arg4 ; char *arg5 = (char *) "%.3f" ; ImGuiSliderFlags arg6 = (ImGuiSliderFlags) 0 ; bool result;
    SWIG_check_num_args("ImGui::SliderFloat",4,6)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderFloat",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::SliderFloat",2,"float *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SliderFloat",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::SliderFloat",4,"float");
    if(lua_gettop(L)>=5 && !SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::SliderFloat",5,"char const *");
    if(lua_gettop(L)>=6 && !lua_isnumber(L,6)) SWIG_fail_arg("ImGui::SliderFloat",6,"ImGuiSliderFlags");
    arg1 = (char *)lua_tostring(L, 1); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("SliderFloat",2,SWIGTYPE_p_float); }  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
    if(lua_gettop(L)>=5){ arg5 = (char *)lua_tostring(L, 5);}  if(lua_gettop(L)>=6){
      arg6 = (ImGuiSliderFlags)lua_tonumber(L, 6);} 
    result = (bool)ImGui::SliderFloat((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SliderFloat2(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; float *arg2 = (float *) (float *)0 ;
    float arg3 ; float arg4 ; char *arg5 = (char *) "%.3f" ; ImGuiSliderFlags arg6 = (ImGuiSliderFlags) 0 ; bool result;
    SWIG_check_num_args("ImGui::SliderFloat2",4,6)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderFloat2",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::SliderFloat2",2,"float [2]");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SliderFloat2",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::SliderFloat2",4,"float");
    if(lua_gettop(L)>=5 && !SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::SliderFloat2",5,"char const *");
    if(lua_gettop(L)>=6 && !lua_isnumber(L,6)) SWIG_fail_arg("ImGui::SliderFloat2",6,"ImGuiSliderFlags");
    arg1 = (char *)lua_tostring(L, 1); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("SliderFloat2",2,SWIGTYPE_p_float); }  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
    if(lua_gettop(L)>=5){ arg5 = (char *)lua_tostring(L, 5);}  if(lua_gettop(L)>=6){
      arg6 = (ImGuiSliderFlags)lua_tonumber(L, 6);} 
    result = (bool)ImGui::SliderFloat2((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SliderFloat3(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; float *arg2 = (float *) (float *)0 ;
    float arg3 ; float arg4 ; char *arg5 = (char *) "%.3f" ; ImGuiSliderFlags arg6 = (ImGuiSliderFlags) 0 ; bool result;
    SWIG_check_num_args("ImGui::SliderFloat3",4,6)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderFloat3",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::SliderFloat3",2,"float [3]");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SliderFloat3",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::SliderFloat3",4,"float");
    if(lua_gettop(L)>=5 && !SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::SliderFloat3",5,"char const *");
    if(lua_gettop(L)>=6 && !lua_isnumber(L,6)) SWIG_fail_arg("ImGui::SliderFloat3",6,"ImGuiSliderFlags");
    arg1 = (char *)lua_tostring(L, 1); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("SliderFloat3",2,SWIGTYPE_p_float); }  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
    if(lua_gettop(L)>=5){ arg5 = (char *)lua_tostring(L, 5);}  if(lua_gettop(L)>=6){
      arg6 = (ImGuiSliderFlags)lua_tonumber(L, 6);} 
    result = (bool)ImGui::SliderFloat3((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SliderFloat4(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; float *arg2 = (float *) (float *)0 ;
    float arg3 ; float arg4 ; char *arg5 = (char *) "%.3f" ; ImGuiSliderFlags arg6 = (ImGuiSliderFlags) 0 ; bool result;
    SWIG_check_num_args("ImGui::SliderFloat4",4,6)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderFloat4",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::SliderFloat4",2,"float [4]");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SliderFloat4",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::SliderFloat4",4,"float");
    if(lua_gettop(L)>=5 && !SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::SliderFloat4",5,"char const *");
    if(lua_gettop(L)>=6 && !lua_isnumber(L,6)) SWIG_fail_arg("ImGui::SliderFloat4",6,"ImGuiSliderFlags");
    arg1 = (char *)lua_tostring(L, 1); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("SliderFloat4",2,SWIGTYPE_p_float); }  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
    if(lua_gettop(L)>=5){ arg5 = (char *)lua_tostring(L, 5);}  if(lua_gettop(L)>=6){
      arg6 = (ImGuiSliderFlags)lua_tonumber(L, 6);} 
    result = (bool)ImGui::SliderFloat4((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SliderAngle(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; float *arg2 = (float *) 0 ;
    float arg3 = (float) -360.0 ; float arg4 = (float) +360.0 ; char *arg5 = (char *) "%.0f deg" ;
    ImGuiSliderFlags arg6 = (ImGuiSliderFlags) 0 ; bool result; SWIG_check_num_args("ImGui::SliderAngle",2,6)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderAngle",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::SliderAngle",2,"float *");
    if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SliderAngle",3,"float");
    if(lua_gettop(L)>=4 && !lua_isnumber(L,4)) SWIG_fail_arg("ImGui::SliderAngle",4,"float");
    if(lua_gettop(L)>=5 && !SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::SliderAngle",5,"char const *");
    if(lua_gettop(L)>=6 && !lua_isnumber(L,6)) SWIG_fail_arg("ImGui::SliderAngle",6,"ImGuiSliderFlags");
    arg1 = (char *)lua_tostring(L, 1); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("SliderAngle",2,SWIGTYPE_p_float); }  if(lua_gettop(L)>=3){ arg3 = (float)lua_tonumber(L, 3);} 
    if(lua_gettop(L)>=4){ arg4 = (float)lua_tonumber(L, 4);}  if(lua_gettop(L)>=5){ arg5 = (char *)lua_tostring(L, 5);} 
    if(lua_gettop(L)>=6){ arg6 = (ImGuiSliderFlags)lua_tonumber(L, 6);} 
    result = (bool)ImGui::SliderAngle((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SliderInt(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; int *arg2 = (int *) 0 ; int arg3 ;
    int arg4 ; char *arg5 = (char *) "%d" ; ImGuiSliderFlags arg6 = (ImGuiSliderFlags) 0 ; bool result;
    SWIG_check_num_args("ImGui::SliderInt",4,6)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderInt",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::SliderInt",2,"int *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SliderInt",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::SliderInt",4,"int");
    if(lua_gettop(L)>=5 && !SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::SliderInt",5,"char const *");
    if(lua_gettop(L)>=6 && !lua_isnumber(L,6)) SWIG_fail_arg("ImGui::SliderInt",6,"ImGuiSliderFlags");
    arg1 = (char *)lua_tostring(L, 1); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
      SWIG_fail_ptr("SliderInt",2,SWIGTYPE_p_int); }  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
    if(lua_gettop(L)>=5){ arg5 = (char *)lua_tostring(L, 5);}  if(lua_gettop(L)>=6){
      arg6 = (ImGuiSliderFlags)lua_tonumber(L, 6);} 
    result = (bool)ImGui::SliderInt((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SliderInt2(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; int *arg2 = (int *) (int *)0 ;
    int arg3 ; int arg4 ; char *arg5 = (char *) "%d" ; ImGuiSliderFlags arg6 = (ImGuiSliderFlags) 0 ; bool result;
    SWIG_check_num_args("ImGui::SliderInt2",4,6)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderInt2",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::SliderInt2",2,"int [2]");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SliderInt2",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::SliderInt2",4,"int");
    if(lua_gettop(L)>=5 && !SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::SliderInt2",5,"char const *");
    if(lua_gettop(L)>=6 && !lua_isnumber(L,6)) SWIG_fail_arg("ImGui::SliderInt2",6,"ImGuiSliderFlags");
    arg1 = (char *)lua_tostring(L, 1); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
      SWIG_fail_ptr("SliderInt2",2,SWIGTYPE_p_int); }  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
    if(lua_gettop(L)>=5){ arg5 = (char *)lua_tostring(L, 5);}  if(lua_gettop(L)>=6){
      arg6 = (ImGuiSliderFlags)lua_tonumber(L, 6);} 
    result = (bool)ImGui::SliderInt2((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SliderInt3(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; int *arg2 = (int *) (int *)0 ;
    int arg3 ; int arg4 ; char *arg5 = (char *) "%d" ; ImGuiSliderFlags arg6 = (ImGuiSliderFlags) 0 ; bool result;
    SWIG_check_num_args("ImGui::SliderInt3",4,6)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderInt3",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::SliderInt3",2,"int [3]");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SliderInt3",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::SliderInt3",4,"int");
    if(lua_gettop(L)>=5 && !SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::SliderInt3",5,"char const *");
    if(lua_gettop(L)>=6 && !lua_isnumber(L,6)) SWIG_fail_arg("ImGui::SliderInt3",6,"ImGuiSliderFlags");
    arg1 = (char *)lua_tostring(L, 1); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
      SWIG_fail_ptr("SliderInt3",2,SWIGTYPE_p_int); }  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
    if(lua_gettop(L)>=5){ arg5 = (char *)lua_tostring(L, 5);}  if(lua_gettop(L)>=6){
      arg6 = (ImGuiSliderFlags)lua_tonumber(L, 6);} 
    result = (bool)ImGui::SliderInt3((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SliderInt4(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; int *arg2 = (int *) (int *)0 ;
    int arg3 ; int arg4 ; char *arg5 = (char *) "%d" ; ImGuiSliderFlags arg6 = (ImGuiSliderFlags) 0 ; bool result;
    SWIG_check_num_args("ImGui::SliderInt4",4,6)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderInt4",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::SliderInt4",2,"int [4]");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SliderInt4",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::SliderInt4",4,"int");
    if(lua_gettop(L)>=5 && !SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::SliderInt4",5,"char const *");
    if(lua_gettop(L)>=6 && !lua_isnumber(L,6)) SWIG_fail_arg("ImGui::SliderInt4",6,"ImGuiSliderFlags");
    arg1 = (char *)lua_tostring(L, 1); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
      SWIG_fail_ptr("SliderInt4",2,SWIGTYPE_p_int); }  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
    if(lua_gettop(L)>=5){ arg5 = (char *)lua_tostring(L, 5);}  if(lua_gettop(L)>=6){
      arg6 = (ImGuiSliderFlags)lua_tonumber(L, 6);} 
    result = (bool)ImGui::SliderInt4((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SliderScalar(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; ImGuiDataType arg2 ;
    void *arg3 = (void *) 0 ; void *arg4 = (void *) 0 ; void *arg5 = (void *) 0 ; char *arg6 = (char *) NULL ;
    ImGuiSliderFlags arg7 = (ImGuiSliderFlags) 0 ; bool result; SWIG_check_num_args("ImGui::SliderScalar",5,7)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderScalar",1,"char const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::SliderScalar",2,"ImGuiDataType");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::SliderScalar",3,"void *");
    if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImGui::SliderScalar",4,"void const *");
    if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImGui::SliderScalar",5,"void const *");
    if(lua_gettop(L)>=6 && !SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::SliderScalar",6,"char const *");
    if(lua_gettop(L)>=7 && !lua_isnumber(L,7)) SWIG_fail_arg("ImGui::SliderScalar",7,"ImGuiSliderFlags");
    arg1 = (char *)lua_tostring(L, 1); arg2 = (ImGuiDataType)lua_tonumber(L, 2);
    arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"SliderScalar"); arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"SliderScalar");
    arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"SliderScalar"); if(lua_gettop(L)>=6){ arg6 = (char *)lua_tostring(L, 6);} 
    if(lua_gettop(L)>=7){ arg7 = (ImGuiSliderFlags)lua_tonumber(L, 7);} 
    result = (bool)ImGui::SliderScalar((char const *)arg1,arg2,arg3,(void const *)arg4,(void const *)arg5,(char const *)arg6,arg7);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SliderScalarN(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; ImGuiDataType arg2 ;
    void *arg3 = (void *) 0 ; int arg4 ; void *arg5 = (void *) 0 ; void *arg6 = (void *) 0 ; char *arg7 = (char *) NULL ;
    ImGuiSliderFlags arg8 = (ImGuiSliderFlags) 0 ; bool result; SWIG_check_num_args("ImGui::SliderScalarN",6,8)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SliderScalarN",1,"char const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::SliderScalarN",2,"ImGuiDataType");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::SliderScalarN",3,"void *");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::SliderScalarN",4,"int");
    if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImGui::SliderScalarN",5,"void const *");
    if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ImGui::SliderScalarN",6,"void const *");
    if(lua_gettop(L)>=7 && !SWIG_lua_isnilstring(L,7)) SWIG_fail_arg("ImGui::SliderScalarN",7,"char const *");
    if(lua_gettop(L)>=8 && !lua_isnumber(L,8)) SWIG_fail_arg("ImGui::SliderScalarN",8,"ImGuiSliderFlags");
    arg1 = (char *)lua_tostring(L, 1); arg2 = (ImGuiDataType)lua_tonumber(L, 2);
    arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"SliderScalarN"); arg4 = (int)lua_tonumber(L, 4);
    arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"SliderScalarN"); arg6=(void *)SWIG_MustGetPtr(L,6,0,0,6,"SliderScalarN");
    if(lua_gettop(L)>=7){ arg7 = (char *)lua_tostring(L, 7);}  if(lua_gettop(L)>=8){
      arg8 = (ImGuiSliderFlags)lua_tonumber(L, 8);} 
    result = (bool)ImGui::SliderScalarN((char const *)arg1,arg2,arg3,arg4,(void const *)arg5,(void const *)arg6,(char const *)arg7,arg8);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_VSliderFloat(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; ImVec2 *arg2 = 0 ;
    float *arg3 = (float *) 0 ; float arg4 ; float arg5 ; char *arg6 = (char *) "%.3f" ;
    ImGuiSliderFlags arg7 = (ImGuiSliderFlags) 0 ; bool result; SWIG_check_num_args("ImGui::VSliderFloat",5,7)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::VSliderFloat",1,"char const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::VSliderFloat",2,"ImVec2 const &");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::VSliderFloat",3,"float *");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::VSliderFloat",4,"float");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::VSliderFloat",5,"float");
    if(lua_gettop(L)>=6 && !SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::VSliderFloat",6,"char const *");
    if(lua_gettop(L)>=7 && !lua_isnumber(L,7)) SWIG_fail_arg("ImGui::VSliderFloat",7,"ImGuiSliderFlags");
    arg1 = (char *)lua_tostring(L, 1); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("VSliderFloat",2,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){ SWIG_fail_ptr("VSliderFloat",3,SWIGTYPE_p_float); } 
    arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5); if(lua_gettop(L)>=6){ arg6 = (char *)lua_tostring(L, 6);}
     if(lua_gettop(L)>=7){ arg7 = (ImGuiSliderFlags)lua_tonumber(L, 7);} 
    result = (bool)ImGui::VSliderFloat((char const *)arg1,(ImVec2 const &)*arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_VSliderInt(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; ImVec2 *arg2 = 0 ;
    int *arg3 = (int *) 0 ; int arg4 ; int arg5 ; char *arg6 = (char *) "%d" ; ImGuiSliderFlags arg7 = (ImGuiSliderFlags) 0 ;
    bool result; SWIG_check_num_args("ImGui::VSliderInt",5,7)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::VSliderInt",1,"char const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::VSliderInt",2,"ImVec2 const &");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::VSliderInt",3,"int *");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::VSliderInt",4,"int");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::VSliderInt",5,"int");
    if(lua_gettop(L)>=6 && !SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::VSliderInt",6,"char const *");
    if(lua_gettop(L)>=7 && !lua_isnumber(L,7)) SWIG_fail_arg("ImGui::VSliderInt",7,"ImGuiSliderFlags");
    arg1 = (char *)lua_tostring(L, 1); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("VSliderInt",2,SWIGTYPE_p_ImVec2); }  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
      SWIG_fail_ptr("VSliderInt",3,SWIGTYPE_p_int); }  arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5);
    if(lua_gettop(L)>=6){ arg6 = (char *)lua_tostring(L, 6);}  if(lua_gettop(L)>=7){
      arg7 = (ImGuiSliderFlags)lua_tonumber(L, 7);} 
    result = (bool)ImGui::VSliderInt((char const *)arg1,(ImVec2 const &)*arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_VSliderScalar(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; ImVec2 *arg2 = 0 ;
    ImGuiDataType arg3 ; void *arg4 = (void *) 0 ; void *arg5 = (void *) 0 ; void *arg6 = (void *) 0 ;
    char *arg7 = (char *) NULL ; ImGuiSliderFlags arg8 = (ImGuiSliderFlags) 0 ; bool result;
    SWIG_check_num_args("ImGui::VSliderScalar",6,8)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::VSliderScalar",1,"char const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::VSliderScalar",2,"ImVec2 const &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::VSliderScalar",3,"ImGuiDataType");
    if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImGui::VSliderScalar",4,"void *");
    if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImGui::VSliderScalar",5,"void const *");
    if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ImGui::VSliderScalar",6,"void const *");
    if(lua_gettop(L)>=7 && !SWIG_lua_isnilstring(L,7)) SWIG_fail_arg("ImGui::VSliderScalar",7,"char const *");
    if(lua_gettop(L)>=8 && !lua_isnumber(L,8)) SWIG_fail_arg("ImGui::VSliderScalar",8,"ImGuiSliderFlags");
    arg1 = (char *)lua_tostring(L, 1); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("VSliderScalar",2,SWIGTYPE_p_ImVec2); }  arg3 = (ImGuiDataType)lua_tonumber(L, 3);
    arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"VSliderScalar"); arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"VSliderScalar");
    arg6=(void *)SWIG_MustGetPtr(L,6,0,0,6,"VSliderScalar"); if(lua_gettop(L)>=7){ arg7 = (char *)lua_tostring(L, 7);} 
    if(lua_gettop(L)>=8){ arg8 = (ImGuiSliderFlags)lua_tonumber(L, 8);} 
    result = (bool)ImGui::VSliderScalar((char const *)arg1,(ImVec2 const &)*arg2,arg3,arg4,(void const *)arg5,(void const *)arg6,(char const *)arg7,arg8);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_InputText(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; char *arg2 = (char *) 0 ; size_t arg3 ;
    ImGuiInputTextFlags arg4 = (ImGuiInputTextFlags) 0 ; ImGuiInputTextCallback arg5 = (ImGuiInputTextCallback) NULL ;
    void *arg6 = (void *) NULL ; bool result; SWIG_check_num_args("ImGui::InputText",3,6)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputText",1,"char const *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::InputText",2,"char *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::InputText",3,"size_t");
    if(lua_gettop(L)>=4 && !lua_isnumber(L,4)) SWIG_fail_arg("ImGui::InputText",4,"ImGuiInputTextFlags");
    if(lua_gettop(L)>=5 && !SWIG_isptrtype(L,5)) SWIG_fail_arg("ImGui::InputText",5,"ImGuiInputTextCallback");
    if(lua_gettop(L)>=6 && !SWIG_isptrtype(L,6)) SWIG_fail_arg("ImGui::InputText",6,"void *");
    arg1 = (char *)lua_tostring(L, 1); arg2 = (char *)lua_tostring(L, 2);
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative"); arg3 = (size_t)lua_tonumber(L, 3);
    if(lua_gettop(L)>=4){ arg4 = (ImGuiInputTextFlags)lua_tonumber(L, 4);}  if(lua_gettop(L)>=5){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_f_p_ImGuiInputTextCallbackData__int,0))){
        SWIG_fail_ptr("InputText",5,SWIGTYPE_p_f_p_ImGuiInputTextCallbackData__int); }  }  if(lua_gettop(L)>=6){
      arg6=(void *)SWIG_MustGetPtr(L,6,0,0,6,"InputText");} 
    result = (bool)ImGui::InputText((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_InputTextMultiline(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; char *arg2 = (char *) 0 ;
    size_t arg3 ; ImVec2 const &arg4_defvalue = ImVec2(0, 0) ; ImVec2 *arg4 = (ImVec2 *) &arg4_defvalue ;
    ImGuiInputTextFlags arg5 = (ImGuiInputTextFlags) 0 ; ImGuiInputTextCallback arg6 = (ImGuiInputTextCallback) NULL ;
    void *arg7 = (void *) NULL ; bool result; SWIG_check_num_args("ImGui::InputTextMultiline",3,7)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputTextMultiline",1,"char const *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::InputTextMultiline",2,"char *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::InputTextMultiline",3,"size_t");
    if(lua_gettop(L)>=4 && !lua_isuserdata(L,4)) SWIG_fail_arg("ImGui::InputTextMultiline",4,"ImVec2 const &");
    if(lua_gettop(L)>=5 && !lua_isnumber(L,5)) SWIG_fail_arg("ImGui::InputTextMultiline",5,"ImGuiInputTextFlags");
    if(lua_gettop(L)>=6 && !SWIG_isptrtype(L,6)) SWIG_fail_arg("ImGui::InputTextMultiline",6,"ImGuiInputTextCallback");
    if(lua_gettop(L)>=7 && !SWIG_isptrtype(L,7)) SWIG_fail_arg("ImGui::InputTextMultiline",7,"void *");
    arg1 = (char *)lua_tostring(L, 1); arg2 = (char *)lua_tostring(L, 2);
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative"); arg3 = (size_t)lua_tonumber(L, 3);
    if(lua_gettop(L)>=4){ if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
        SWIG_fail_ptr("InputTextMultiline",4,SWIGTYPE_p_ImVec2); }  }  if(lua_gettop(L)>=5){
      arg5 = (ImGuiInputTextFlags)lua_tonumber(L, 5);}  if(lua_gettop(L)>=6){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_f_p_ImGuiInputTextCallbackData__int,0))){
        SWIG_fail_ptr("InputTextMultiline",6,SWIGTYPE_p_f_p_ImGuiInputTextCallbackData__int); }  }  if(lua_gettop(L)>=7){
      arg7=(void *)SWIG_MustGetPtr(L,7,0,0,7,"InputTextMultiline");} 
    result = (bool)ImGui::InputTextMultiline((char const *)arg1,arg2,arg3,(ImVec2 const &)*arg4,arg5,arg6,arg7);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_InputTextWithHint(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ; size_t arg4 ; ImGuiInputTextFlags arg5 = (ImGuiInputTextFlags) 0 ;
    ImGuiInputTextCallback arg6 = (ImGuiInputTextCallback) NULL ; void *arg7 = (void *) NULL ; bool result;
    SWIG_check_num_args("ImGui::InputTextWithHint",4,7)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputTextWithHint",1,"char const *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::InputTextWithHint",2,"char const *");
    if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGui::InputTextWithHint",3,"char *");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::InputTextWithHint",4,"size_t");
    if(lua_gettop(L)>=5 && !lua_isnumber(L,5)) SWIG_fail_arg("ImGui::InputTextWithHint",5,"ImGuiInputTextFlags");
    if(lua_gettop(L)>=6 && !SWIG_isptrtype(L,6)) SWIG_fail_arg("ImGui::InputTextWithHint",6,"ImGuiInputTextCallback");
    if(lua_gettop(L)>=7 && !SWIG_isptrtype(L,7)) SWIG_fail_arg("ImGui::InputTextWithHint",7,"void *");
    arg1 = (char *)lua_tostring(L, 1); arg2 = (char *)lua_tostring(L, 2); arg3 = (char *)lua_tostring(L, 3);
    SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative"); arg4 = (size_t)lua_tonumber(L, 4);
    if(lua_gettop(L)>=5){ arg5 = (ImGuiInputTextFlags)lua_tonumber(L, 5);}  if(lua_gettop(L)>=6){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_f_p_ImGuiInputTextCallbackData__int,0))){
        SWIG_fail_ptr("InputTextWithHint",6,SWIGTYPE_p_f_p_ImGuiInputTextCallbackData__int); }  }  if(lua_gettop(L)>=7){
      arg7=(void *)SWIG_MustGetPtr(L,7,0,0,7,"InputTextWithHint");} 
    result = (bool)ImGui::InputTextWithHint((char const *)arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_InputFloat(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; float *arg2 = (float *) 0 ;
    float arg3 = (float) 0.0 ; float arg4 = (float) 0.0 ; char *arg5 = (char *) "%.3f" ;
    ImGuiInputTextFlags arg6 = (ImGuiInputTextFlags) 0 ; bool result; SWIG_check_num_args("ImGui::InputFloat",2,6)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputFloat",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::InputFloat",2,"float *");
    if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("ImGui::InputFloat",3,"float");
    if(lua_gettop(L)>=4 && !lua_isnumber(L,4)) SWIG_fail_arg("ImGui::InputFloat",4,"float");
    if(lua_gettop(L)>=5 && !SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::InputFloat",5,"char const *");
    if(lua_gettop(L)>=6 && !lua_isnumber(L,6)) SWIG_fail_arg("ImGui::InputFloat",6,"ImGuiInputTextFlags");
    arg1 = (char *)lua_tostring(L, 1); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("InputFloat",2,SWIGTYPE_p_float); }  if(lua_gettop(L)>=3){ arg3 = (float)lua_tonumber(L, 3);} 
    if(lua_gettop(L)>=4){ arg4 = (float)lua_tonumber(L, 4);}  if(lua_gettop(L)>=5){ arg5 = (char *)lua_tostring(L, 5);} 
    if(lua_gettop(L)>=6){ arg6 = (ImGuiInputTextFlags)lua_tonumber(L, 6);} 
    result = (bool)ImGui::InputFloat((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_InputFloat2(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; float *arg2 = (float *) (float *)0 ;
    char *arg3 = (char *) "%.3f" ; ImGuiInputTextFlags arg4 = (ImGuiInputTextFlags) 0 ; bool result;
    SWIG_check_num_args("ImGui::InputFloat2",2,4)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputFloat2",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::InputFloat2",2,"float [2]");
    if(lua_gettop(L)>=3 && !SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGui::InputFloat2",3,"char const *");
    if(lua_gettop(L)>=4 && !lua_isnumber(L,4)) SWIG_fail_arg("ImGui::InputFloat2",4,"ImGuiInputTextFlags");
    arg1 = (char *)lua_tostring(L, 1); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("InputFloat2",2,SWIGTYPE_p_float); }  if(lua_gettop(L)>=3){ arg3 = (char *)lua_tostring(L, 3);} 
    if(lua_gettop(L)>=4){ arg4 = (ImGuiInputTextFlags)lua_tonumber(L, 4);} 
    result = (bool)ImGui::InputFloat2((char const *)arg1,arg2,(char const *)arg3,arg4);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_InputFloat3(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; float *arg2 = (float *) (float *)0 ;
    char *arg3 = (char *) "%.3f" ; ImGuiInputTextFlags arg4 = (ImGuiInputTextFlags) 0 ; bool result;
    SWIG_check_num_args("ImGui::InputFloat3",2,4)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputFloat3",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::InputFloat3",2,"float [3]");
    if(lua_gettop(L)>=3 && !SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGui::InputFloat3",3,"char const *");
    if(lua_gettop(L)>=4 && !lua_isnumber(L,4)) SWIG_fail_arg("ImGui::InputFloat3",4,"ImGuiInputTextFlags");
    arg1 = (char *)lua_tostring(L, 1); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("InputFloat3",2,SWIGTYPE_p_float); }  if(lua_gettop(L)>=3){ arg3 = (char *)lua_tostring(L, 3);} 
    if(lua_gettop(L)>=4){ arg4 = (ImGuiInputTextFlags)lua_tonumber(L, 4);} 
    result = (bool)ImGui::InputFloat3((char const *)arg1,arg2,(char const *)arg3,arg4);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_InputFloat4(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; float *arg2 = (float *) (float *)0 ;
    char *arg3 = (char *) "%.3f" ; ImGuiInputTextFlags arg4 = (ImGuiInputTextFlags) 0 ; bool result;
    SWIG_check_num_args("ImGui::InputFloat4",2,4)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputFloat4",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::InputFloat4",2,"float [4]");
    if(lua_gettop(L)>=3 && !SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGui::InputFloat4",3,"char const *");
    if(lua_gettop(L)>=4 && !lua_isnumber(L,4)) SWIG_fail_arg("ImGui::InputFloat4",4,"ImGuiInputTextFlags");
    arg1 = (char *)lua_tostring(L, 1); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("InputFloat4",2,SWIGTYPE_p_float); }  if(lua_gettop(L)>=3){ arg3 = (char *)lua_tostring(L, 3);} 
    if(lua_gettop(L)>=4){ arg4 = (ImGuiInputTextFlags)lua_tonumber(L, 4);} 
    result = (bool)ImGui::InputFloat4((char const *)arg1,arg2,(char const *)arg3,arg4);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_InputInt(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; int *arg2 = (int *) 0 ;
    int arg3 = (int) 1 ; int arg4 = (int) 100 ; ImGuiInputTextFlags arg5 = (ImGuiInputTextFlags) 0 ; bool result;
    SWIG_check_num_args("ImGui::InputInt",2,5) if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputInt",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::InputInt",2,"int *");
    if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("ImGui::InputInt",3,"int");
    if(lua_gettop(L)>=4 && !lua_isnumber(L,4)) SWIG_fail_arg("ImGui::InputInt",4,"int");
    if(lua_gettop(L)>=5 && !lua_isnumber(L,5)) SWIG_fail_arg("ImGui::InputInt",5,"ImGuiInputTextFlags");
    arg1 = (char *)lua_tostring(L, 1); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
      SWIG_fail_ptr("InputInt",2,SWIGTYPE_p_int); }  if(lua_gettop(L)>=3){ arg3 = (int)lua_tonumber(L, 3);} 
    if(lua_gettop(L)>=4){ arg4 = (int)lua_tonumber(L, 4);}  if(lua_gettop(L)>=5){
      arg5 = (ImGuiInputTextFlags)lua_tonumber(L, 5);}  result = (bool)ImGui::InputInt((char const *)arg1,arg2,arg3,arg4,arg5);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_InputInt2(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; int *arg2 = (int *) (int *)0 ;
    ImGuiInputTextFlags arg3 = (ImGuiInputTextFlags) 0 ; bool result; SWIG_check_num_args("ImGui::InputInt2",2,3)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputInt2",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::InputInt2",2,"int [2]");
    if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("ImGui::InputInt2",3,"ImGuiInputTextFlags");
    arg1 = (char *)lua_tostring(L, 1); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
      SWIG_fail_ptr("InputInt2",2,SWIGTYPE_p_int); }  if(lua_gettop(L)>=3){ arg3 = (ImGuiInputTextFlags)lua_tonumber(L, 3);} 
    result = (bool)ImGui::InputInt2((char const *)arg1,arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_InputInt3(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; int *arg2 = (int *) (int *)0 ;
    ImGuiInputTextFlags arg3 = (ImGuiInputTextFlags) 0 ; bool result; SWIG_check_num_args("ImGui::InputInt3",2,3)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputInt3",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::InputInt3",2,"int [3]");
    if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("ImGui::InputInt3",3,"ImGuiInputTextFlags");
    arg1 = (char *)lua_tostring(L, 1); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
      SWIG_fail_ptr("InputInt3",2,SWIGTYPE_p_int); }  if(lua_gettop(L)>=3){ arg3 = (ImGuiInputTextFlags)lua_tonumber(L, 3);} 
    result = (bool)ImGui::InputInt3((char const *)arg1,arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_InputInt4(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; int *arg2 = (int *) (int *)0 ;
    ImGuiInputTextFlags arg3 = (ImGuiInputTextFlags) 0 ; bool result; SWIG_check_num_args("ImGui::InputInt4",2,3)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputInt4",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::InputInt4",2,"int [4]");
    if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("ImGui::InputInt4",3,"ImGuiInputTextFlags");
    arg1 = (char *)lua_tostring(L, 1); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
      SWIG_fail_ptr("InputInt4",2,SWIGTYPE_p_int); }  if(lua_gettop(L)>=3){ arg3 = (ImGuiInputTextFlags)lua_tonumber(L, 3);} 
    result = (bool)ImGui::InputInt4((char const *)arg1,arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_InputDouble(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; double *arg2 = (double *) 0 ;
    double arg3 = (double) 0.0 ; double arg4 = (double) 0.0 ; char *arg5 = (char *) "%.6f" ;
    ImGuiInputTextFlags arg6 = (ImGuiInputTextFlags) 0 ; bool result; SWIG_check_num_args("ImGui::InputDouble",2,6)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputDouble",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::InputDouble",2,"double *");
    if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("ImGui::InputDouble",3,"double");
    if(lua_gettop(L)>=4 && !lua_isnumber(L,4)) SWIG_fail_arg("ImGui::InputDouble",4,"double");
    if(lua_gettop(L)>=5 && !SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::InputDouble",5,"char const *");
    if(lua_gettop(L)>=6 && !lua_isnumber(L,6)) SWIG_fail_arg("ImGui::InputDouble",6,"ImGuiInputTextFlags");
    arg1 = (char *)lua_tostring(L, 1); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
      SWIG_fail_ptr("InputDouble",2,SWIGTYPE_p_double); }  if(lua_gettop(L)>=3){ arg3 = (double)lua_tonumber(L, 3);} 
    if(lua_gettop(L)>=4){ arg4 = (double)lua_tonumber(L, 4);}  if(lua_gettop(L)>=5){ arg5 = (char *)lua_tostring(L, 5);} 
    if(lua_gettop(L)>=6){ arg6 = (ImGuiInputTextFlags)lua_tonumber(L, 6);} 
    result = (bool)ImGui::InputDouble((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_InputScalar(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; ImGuiDataType arg2 ;
    void *arg3 = (void *) 0 ; void *arg4 = (void *) NULL ; void *arg5 = (void *) NULL ; char *arg6 = (char *) NULL ;
    ImGuiInputTextFlags arg7 = (ImGuiInputTextFlags) 0 ; bool result; SWIG_check_num_args("ImGui::InputScalar",3,7)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputScalar",1,"char const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::InputScalar",2,"ImGuiDataType");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::InputScalar",3,"void *");
    if(lua_gettop(L)>=4 && !SWIG_isptrtype(L,4)) SWIG_fail_arg("ImGui::InputScalar",4,"void const *");
    if(lua_gettop(L)>=5 && !SWIG_isptrtype(L,5)) SWIG_fail_arg("ImGui::InputScalar",5,"void const *");
    if(lua_gettop(L)>=6 && !SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::InputScalar",6,"char const *");
    if(lua_gettop(L)>=7 && !lua_isnumber(L,7)) SWIG_fail_arg("ImGui::InputScalar",7,"ImGuiInputTextFlags");
    arg1 = (char *)lua_tostring(L, 1); arg2 = (ImGuiDataType)lua_tonumber(L, 2);
    arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"InputScalar"); if(lua_gettop(L)>=4){
      arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"InputScalar");}  if(lua_gettop(L)>=5){
      arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"InputScalar");}  if(lua_gettop(L)>=6){ arg6 = (char *)lua_tostring(L, 6);} 
    if(lua_gettop(L)>=7){ arg7 = (ImGuiInputTextFlags)lua_tonumber(L, 7);} 
    result = (bool)ImGui::InputScalar((char const *)arg1,arg2,arg3,(void const *)arg4,(void const *)arg5,(char const *)arg6,arg7);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_InputScalarN(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; ImGuiDataType arg2 ;
    void *arg3 = (void *) 0 ; int arg4 ; void *arg5 = (void *) NULL ; void *arg6 = (void *) NULL ; char *arg7 = (char *) NULL ;
    ImGuiInputTextFlags arg8 = (ImGuiInputTextFlags) 0 ; bool result; SWIG_check_num_args("ImGui::InputScalarN",4,8)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::InputScalarN",1,"char const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::InputScalarN",2,"ImGuiDataType");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::InputScalarN",3,"void *");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::InputScalarN",4,"int");
    if(lua_gettop(L)>=5 && !SWIG_isptrtype(L,5)) SWIG_fail_arg("ImGui::InputScalarN",5,"void const *");
    if(lua_gettop(L)>=6 && !SWIG_isptrtype(L,6)) SWIG_fail_arg("ImGui::InputScalarN",6,"void const *");
    if(lua_gettop(L)>=7 && !SWIG_lua_isnilstring(L,7)) SWIG_fail_arg("ImGui::InputScalarN",7,"char const *");
    if(lua_gettop(L)>=8 && !lua_isnumber(L,8)) SWIG_fail_arg("ImGui::InputScalarN",8,"ImGuiInputTextFlags");
    arg1 = (char *)lua_tostring(L, 1); arg2 = (ImGuiDataType)lua_tonumber(L, 2);
    arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"InputScalarN"); arg4 = (int)lua_tonumber(L, 4); if(lua_gettop(L)>=5){
      arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"InputScalarN");}  if(lua_gettop(L)>=6){
      arg6=(void *)SWIG_MustGetPtr(L,6,0,0,6,"InputScalarN");}  if(lua_gettop(L)>=7){ arg7 = (char *)lua_tostring(L, 7);} 
    if(lua_gettop(L)>=8){ arg8 = (ImGuiInputTextFlags)lua_tonumber(L, 8);} 
    result = (bool)ImGui::InputScalarN((char const *)arg1,arg2,arg3,arg4,(void const *)arg5,(void const *)arg6,(char const *)arg7,arg8);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ColorEdit3(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; float *arg2 = (float *) (float *)0 ;
    ImGuiColorEditFlags arg3 = (ImGuiColorEditFlags) 0 ; bool result; SWIG_check_num_args("ImGui::ColorEdit3",2,3)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::ColorEdit3",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::ColorEdit3",2,"float [3]");
    if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("ImGui::ColorEdit3",3,"ImGuiColorEditFlags");
    arg1 = (char *)lua_tostring(L, 1); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("ColorEdit3",2,SWIGTYPE_p_float); }  if(lua_gettop(L)>=3){ arg3 = (ImGuiColorEditFlags)lua_tonumber(L, 3);} 
    result = (bool)ImGui::ColorEdit3((char const *)arg1,arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ColorEdit4(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; float *arg2 = (float *) (float *)0 ;
    ImGuiColorEditFlags arg3 = (ImGuiColorEditFlags) 0 ; bool result; SWIG_check_num_args("ImGui::ColorEdit4",2,3)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::ColorEdit4",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::ColorEdit4",2,"float [4]");
    if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("ImGui::ColorEdit4",3,"ImGuiColorEditFlags");
    arg1 = (char *)lua_tostring(L, 1); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("ColorEdit4",2,SWIGTYPE_p_float); }  if(lua_gettop(L)>=3){ arg3 = (ImGuiColorEditFlags)lua_tonumber(L, 3);} 
    result = (bool)ImGui::ColorEdit4((char const *)arg1,arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ColorPicker3(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; float *arg2 = (float *) (float *)0 ;
    ImGuiColorEditFlags arg3 = (ImGuiColorEditFlags) 0 ; bool result; SWIG_check_num_args("ImGui::ColorPicker3",2,3)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::ColorPicker3",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::ColorPicker3",2,"float [3]");
    if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("ImGui::ColorPicker3",3,"ImGuiColorEditFlags");
    arg1 = (char *)lua_tostring(L, 1); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("ColorPicker3",2,SWIGTYPE_p_float); }  if(lua_gettop(L)>=3){ arg3 = (ImGuiColorEditFlags)lua_tonumber(L, 3);}
     result = (bool)ImGui::ColorPicker3((char const *)arg1,arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ColorPicker4(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; float *arg2 = (float *) (float *)0 ;
    ImGuiColorEditFlags arg3 = (ImGuiColorEditFlags) 0 ; float *arg4 = (float *) NULL ; bool result;
    SWIG_check_num_args("ImGui::ColorPicker4",2,4)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::ColorPicker4",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::ColorPicker4",2,"float [4]");
    if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("ImGui::ColorPicker4",3,"ImGuiColorEditFlags");
    if(lua_gettop(L)>=4 && !SWIG_isptrtype(L,4)) SWIG_fail_arg("ImGui::ColorPicker4",4,"float const *");
    arg1 = (char *)lua_tostring(L, 1); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("ColorPicker4",2,SWIGTYPE_p_float); }  if(lua_gettop(L)>=3){ arg3 = (ImGuiColorEditFlags)lua_tonumber(L, 3);}
     if(lua_gettop(L)>=4){ if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
        SWIG_fail_ptr("ColorPicker4",4,SWIGTYPE_p_float); }  } 
    result = (bool)ImGui::ColorPicker4((char const *)arg1,arg2,arg3,(float const *)arg4);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ColorButton(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; ImVec4 *arg2 = 0 ;
    ImGuiColorEditFlags arg3 = (ImGuiColorEditFlags) 0 ; ImVec2 const &arg4_defvalue = ImVec2(0, 0) ;
    ImVec2 *arg4 = (ImVec2 *) &arg4_defvalue ; bool result; SWIG_check_num_args("ImGui::ColorButton",2,4)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::ColorButton",1,"char const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::ColorButton",2,"ImVec4 const &");
    if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("ImGui::ColorButton",3,"ImGuiColorEditFlags");
    if(lua_gettop(L)>=4 && !lua_isuserdata(L,4)) SWIG_fail_arg("ImGui::ColorButton",4,"ImVec2 const &");
    arg1 = (char *)lua_tostring(L, 1); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec4,0))){
      SWIG_fail_ptr("ColorButton",2,SWIGTYPE_p_ImVec4); }  if(lua_gettop(L)>=3){ arg3 = (ImGuiColorEditFlags)lua_tonumber(L, 3);}
     if(lua_gettop(L)>=4){ if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
        SWIG_fail_ptr("ColorButton",4,SWIGTYPE_p_ImVec2); }  } 
    result = (bool)ImGui::ColorButton((char const *)arg1,(ImVec4 const &)*arg2,arg3,(ImVec2 const &)*arg4);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SetColorEditOptions(lua_State* L) { { int SWIG_arg = 0; ImGuiColorEditFlags arg1 ;
    SWIG_check_num_args("ImGui::SetColorEditOptions",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SetColorEditOptions",1,"ImGuiColorEditFlags");
    arg1 = (ImGuiColorEditFlags)lua_tonumber(L, 1); ImGui::SetColorEditOptions(arg1); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_TreeNode__SWIG_0(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; bool result;
    SWIG_check_num_args("ImGui::TreeNode",1,1) if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::TreeNode",1,"char const *");
    arg1 = (char *)lua_tostring(L, 1); result = (bool)ImGui::TreeNode((char const *)arg1);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_TreeNode__SWIG_1(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; char *arg2 = (char *) 0 ;
    void *arg3 = 0 ; bool result; SWIG_check_num_args("ImGui::TreeNode",2,2)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::TreeNode",1,"char const *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::TreeNode",2,"char const *"); arg1 = (char *)lua_tostring(L, 1);
    arg2 = (char *)lua_tostring(L, 2); result = (bool)ImGui::TreeNode((char const *)arg1,(char const *)arg2,arg3);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_TreeNode__SWIG_2(lua_State* L) { { int SWIG_arg = 0; void *arg1 = (void *) 0 ; char *arg2 = (char *) 0 ;
    void *arg3 = 0 ; bool result; SWIG_check_num_args("ImGui::TreeNode",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::TreeNode",1,"void const *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::TreeNode",2,"char const *");
    arg1=(void *)SWIG_MustGetPtr(L,1,0,0,1,"TreeNode"); arg2 = (char *)lua_tostring(L, 2);
    result = (bool)ImGui::TreeNode((void const *)arg1,(char const *)arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_TreeNode(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) { int _v = 0; {
      _v = SWIG_lua_isnilstring(L,argv[0]); }  if (_v) { return _wrap_TreeNode__SWIG_0(L);}  }  if (argc == 2) { int _v = 0; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, 0, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = SWIG_lua_isnilstring(L,argv[1]); }  if (_v) { if (argc <= 2) {
          return _wrap_TreeNode__SWIG_2(L);}  return _wrap_TreeNode__SWIG_2(L);}  }  }  if (argc == 2) { int _v = 0; {
      _v = SWIG_lua_isnilstring(L,argv[0]); }  if (_v) { { _v = SWIG_lua_isnilstring(L,argv[1]); }  if (_v) { if (argc <= 2) {
          return _wrap_TreeNode__SWIG_1(L);}  return _wrap_TreeNode__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TreeNode'\n" "  Possible C/C++ prototypes are:\n"
  "    ImGui::TreeNode(char const *)\n" "    ImGui::TreeNode(char const *,char const *,...)\n"
  "    ImGui::TreeNode(void const *,char const *,...)\n"); lua_error(L);return 0; }
static int _wrap_TreeNodeV__SWIG_0(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; char *arg2 = (char *) 0 ;
    va_list arg3 ; va_list *argp3 ; bool result; SWIG_check_num_args("ImGui::TreeNodeV",3,3)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::TreeNodeV",1,"char const *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::TreeNodeV",2,"char const *");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImGui::TreeNodeV",3,"va_list"); arg1 = (char *)lua_tostring(L, 1);
    arg2 = (char *)lua_tostring(L, 2); if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_va_list,0))){
      SWIG_fail_ptr("TreeNodeV",3,SWIGTYPE_p_va_list); }  arg3 = *argp3;
    result = (bool)ImGui::TreeNodeV((char const *)arg1,(char const *)arg2,SWIG_STD_MOVE(arg3));
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_TreeNodeV__SWIG_1(lua_State* L) { { int SWIG_arg = 0; void *arg1 = (void *) 0 ; char *arg2 = (char *) 0 ;
    va_list arg3 ; va_list *argp3 ; bool result; SWIG_check_num_args("ImGui::TreeNodeV",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::TreeNodeV",1,"void const *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::TreeNodeV",2,"char const *");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImGui::TreeNodeV",3,"va_list"); arg1=(void *)SWIG_MustGetPtr(L,1,0,0,1,"TreeNodeV");
    arg2 = (char *)lua_tostring(L, 2); if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_va_list,0))){
      SWIG_fail_ptr("TreeNodeV",3,SWIGTYPE_p_va_list); }  arg3 = *argp3;
    result = (bool)ImGui::TreeNodeV((void const *)arg1,(char const *)arg2,SWIG_STD_MOVE(arg3));
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_TreeNodeV(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 3) { int _v = 0;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, 0, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = SWIG_lua_isnilstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_va_list, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_TreeNodeV__SWIG_1(L);}  }  }  }  if (argc == 3) { int _v = 0;
    { _v = SWIG_lua_isnilstring(L,argv[0]); }  if (_v) { { _v = SWIG_lua_isnilstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_va_list, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_TreeNodeV__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TreeNodeV'\n" "  Possible C/C++ prototypes are:\n"
  "    ImGui::TreeNodeV(char const *,char const *,va_list)\n" "    ImGui::TreeNodeV(void const *,char const *,va_list)\n");
  lua_error(L);return 0; }
static int _wrap_TreeNodeEx__SWIG_0(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ;
    ImGuiTreeNodeFlags arg2 = (ImGuiTreeNodeFlags) 0 ; bool result; SWIG_check_num_args("ImGui::TreeNodeEx",1,2)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::TreeNodeEx",1,"char const *");
    if(lua_gettop(L)>=2 && !lua_isnumber(L,2)) SWIG_fail_arg("ImGui::TreeNodeEx",2,"ImGuiTreeNodeFlags");
    arg1 = (char *)lua_tostring(L, 1); if(lua_gettop(L)>=2){ arg2 = (ImGuiTreeNodeFlags)lua_tonumber(L, 2);} 
    result = (bool)ImGui::TreeNodeEx((char const *)arg1,arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_TreeNodeEx__SWIG_1(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; ImGuiTreeNodeFlags arg2 ;
    char *arg3 = (char *) 0 ; void *arg4 = 0 ; bool result; SWIG_check_num_args("ImGui::TreeNodeEx",3,3)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::TreeNodeEx",1,"char const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::TreeNodeEx",2,"ImGuiTreeNodeFlags");
    if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGui::TreeNodeEx",3,"char const *"); arg1 = (char *)lua_tostring(L, 1);
    arg2 = (ImGuiTreeNodeFlags)lua_tonumber(L, 2); arg3 = (char *)lua_tostring(L, 3);
    result = (bool)ImGui::TreeNodeEx((char const *)arg1,arg2,(char const *)arg3,arg4);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_TreeNodeEx__SWIG_2(lua_State* L) { { int SWIG_arg = 0; void *arg1 = (void *) 0 ; ImGuiTreeNodeFlags arg2 ;
    char *arg3 = (char *) 0 ; void *arg4 = 0 ; bool result; SWIG_check_num_args("ImGui::TreeNodeEx",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::TreeNodeEx",1,"void const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::TreeNodeEx",2,"ImGuiTreeNodeFlags");
    if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGui::TreeNodeEx",3,"char const *");
    arg1=(void *)SWIG_MustGetPtr(L,1,0,0,1,"TreeNodeEx"); arg2 = (ImGuiTreeNodeFlags)lua_tonumber(L, 2);
    arg3 = (char *)lua_tostring(L, 3); result = (bool)ImGui::TreeNodeEx((void const *)arg1,arg2,(char const *)arg3,arg4);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_TreeNodeEx(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if ((argc >= 1) && (argc <= 2)) { int _v = 0; { _v = SWIG_lua_isnilstring(L,argv[0]); }  if (_v) { if (argc <= 1) {
        return _wrap_TreeNodeEx__SWIG_0(L);}  { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_TreeNodeEx__SWIG_0(L);}
       }  }  if (argc == 3) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, 0, 0)) { _v = 0; }  else { _v = 1; }  } 
    if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = SWIG_lua_isnilstring(L,argv[2]); }  if (_v) { if (argc <= 3) {
            return _wrap_TreeNodeEx__SWIG_2(L);}  return _wrap_TreeNodeEx__SWIG_2(L);}  }  }  }  if (argc == 3) { int _v = 0; {
      _v = SWIG_lua_isnilstring(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = SWIG_lua_isnilstring(L,argv[2]); }  if (_v) { if (argc <= 3) { return _wrap_TreeNodeEx__SWIG_1(L);} 
          return _wrap_TreeNodeEx__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TreeNodeEx'\n" "  Possible C/C++ prototypes are:\n"
  "    ImGui::TreeNodeEx(char const *,ImGuiTreeNodeFlags)\n"
  "    ImGui::TreeNodeEx(char const *,ImGuiTreeNodeFlags,char const *,...)\n"
  "    ImGui::TreeNodeEx(void const *,ImGuiTreeNodeFlags,char const *,...)\n"); lua_error(L);return 0; }
static int _wrap_TreeNodeExV__SWIG_0(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; ImGuiTreeNodeFlags arg2 ;
    char *arg3 = (char *) 0 ; va_list arg4 ; va_list *argp4 ; bool result; SWIG_check_num_args("ImGui::TreeNodeExV",4,4)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::TreeNodeExV",1,"char const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::TreeNodeExV",2,"ImGuiTreeNodeFlags");
    if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGui::TreeNodeExV",3,"char const *");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImGui::TreeNodeExV",4,"va_list"); arg1 = (char *)lua_tostring(L, 1);
    arg2 = (ImGuiTreeNodeFlags)lua_tonumber(L, 2); arg3 = (char *)lua_tostring(L, 3);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_va_list,0))){
      SWIG_fail_ptr("TreeNodeExV",4,SWIGTYPE_p_va_list); }  arg4 = *argp4;
    result = (bool)ImGui::TreeNodeExV((char const *)arg1,arg2,(char const *)arg3,SWIG_STD_MOVE(arg4));
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_TreeNodeExV__SWIG_1(lua_State* L) { { int SWIG_arg = 0; void *arg1 = (void *) 0 ; ImGuiTreeNodeFlags arg2 ;
    char *arg3 = (char *) 0 ; va_list arg4 ; va_list *argp4 ; bool result; SWIG_check_num_args("ImGui::TreeNodeExV",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::TreeNodeExV",1,"void const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::TreeNodeExV",2,"ImGuiTreeNodeFlags");
    if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGui::TreeNodeExV",3,"char const *");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImGui::TreeNodeExV",4,"va_list");
    arg1=(void *)SWIG_MustGetPtr(L,1,0,0,1,"TreeNodeExV"); arg2 = (ImGuiTreeNodeFlags)lua_tonumber(L, 2);
    arg3 = (char *)lua_tostring(L, 3); if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_va_list,0))){
      SWIG_fail_ptr("TreeNodeExV",4,SWIGTYPE_p_va_list); }  arg4 = *argp4;
    result = (bool)ImGui::TreeNodeExV((void const *)arg1,arg2,(char const *)arg3,SWIG_STD_MOVE(arg4));
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_TreeNodeExV(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 4) {
    int _v = 0; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, 0, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = SWIG_lua_isnilstring(L,argv[2]); } 
        if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_va_list, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_TreeNodeExV__SWIG_1(L);}  }  }  }  }  if (argc == 4) {
    int _v = 0; { _v = SWIG_lua_isnilstring(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = SWIG_lua_isnilstring(L,argv[2]); }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_va_list, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_TreeNodeExV__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TreeNodeExV'\n" "  Possible C/C++ prototypes are:\n"
  "    ImGui::TreeNodeExV(char const *,ImGuiTreeNodeFlags,char const *,va_list)\n"
  "    ImGui::TreeNodeExV(void const *,ImGuiTreeNodeFlags,char const *,va_list)\n"); lua_error(L);return 0; }
static int _wrap_TreePush__SWIG_0(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ;
    SWIG_check_num_args("ImGui::TreePush",1,1) if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::TreePush",1,"char const *");
    arg1 = (char *)lua_tostring(L, 1); ImGui::TreePush((char const *)arg1); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_TreePush__SWIG_1(lua_State* L) { { int SWIG_arg = 0; void *arg1 = (void *) 0 ;
    SWIG_check_num_args("ImGui::TreePush",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::TreePush",1,"void const *");
    arg1=(void *)SWIG_MustGetPtr(L,1,0,0,1,"TreePush"); ImGui::TreePush((void const *)arg1); return SWIG_arg; fail: SWIGUNUSED; }
   lua_error(L); return 0; }
static int _wrap_TreePush(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v = 0; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, 0, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { return _wrap_TreePush__SWIG_1(L);}  }  if (argc == 1) { int _v = 0; {
      _v = SWIG_lua_isnilstring(L,argv[0]); }  if (_v) { return _wrap_TreePush__SWIG_0(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TreePush'\n" "  Possible C/C++ prototypes are:\n"
  "    ImGui::TreePush(char const *)\n" "    ImGui::TreePush(void const *)\n"); lua_error(L);return 0; }
static int _wrap_TreePop(lua_State* L) { { int SWIG_arg = 0; SWIG_check_num_args("ImGui::TreePop",0,0) ImGui::TreePop();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetTreeNodeToLabelSpacing(lua_State* L) { { int SWIG_arg = 0; float result;
    SWIG_check_num_args("ImGui::GetTreeNodeToLabelSpacing",0,0) result = (float)ImGui::GetTreeNodeToLabelSpacing();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CollapsingHeader_shortcut(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ;
    ImGuiTreeNodeFlags arg2 = (ImGuiTreeNodeFlags) 0 ; bool result; SWIG_check_num_args("ImGui::CollapsingHeader",1,2)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::CollapsingHeader",1,"char const *");
    if(lua_gettop(L)>=2 && !lua_isnumber(L,2)) SWIG_fail_arg("ImGui::CollapsingHeader",2,"ImGuiTreeNodeFlags");
    arg1 = (char *)lua_tostring(L, 1); if(lua_gettop(L)>=2){ arg2 = (ImGuiTreeNodeFlags)lua_tonumber(L, 2);} 
    result = (bool)ImGui::CollapsingHeader((char const *)arg1,arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CollapsingHeader(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; bool *arg2 = (bool *) 0 ;
    ImGuiTreeNodeFlags arg3 = (ImGuiTreeNodeFlags) 0 ; bool result; SWIG_check_num_args("ImGui::CollapsingHeader",2,3)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::CollapsingHeader",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::CollapsingHeader",2,"bool *");
    if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("ImGui::CollapsingHeader",3,"ImGuiTreeNodeFlags");
    arg1 = (char *)lua_tostring(L, 1); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
      SWIG_fail_ptr("CollapsingHeader",2,SWIGTYPE_p_bool); }  if(lua_gettop(L)>=3){
      arg3 = (ImGuiTreeNodeFlags)lua_tonumber(L, 3);}  result = (bool)ImGui::CollapsingHeader((char const *)arg1,arg2,arg3);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SetNextItemOpen(lua_State* L) { { int SWIG_arg = 0; bool arg1 ; ImGuiCond arg2 = (ImGuiCond) 0 ;
    SWIG_check_num_args("ImGui::SetNextItemOpen",1,2) if(!lua_isboolean(L,1)) SWIG_fail_arg("ImGui::SetNextItemOpen",1,"bool");
    if(lua_gettop(L)>=2 && !lua_isnumber(L,2)) SWIG_fail_arg("ImGui::SetNextItemOpen",2,"ImGuiCond");
    arg1 = (lua_toboolean(L, 1)!=0); if(lua_gettop(L)>=2){ arg2 = (ImGuiCond)lua_tonumber(L, 2);} 
    ImGui::SetNextItemOpen(arg1,arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SetNextItemStorageID(lua_State* L) { { int SWIG_arg = 0; ImGuiID arg1 ;
    SWIG_check_num_args("ImGui::SetNextItemStorageID",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SetNextItemStorageID",1,"ImGuiID");
    SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative"); arg1 = (ImGuiID)lua_tonumber(L, 1);
    ImGui::SetNextItemStorageID(arg1); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Selectable(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; bool *arg2 = (bool *) 0 ;
    ImGuiSelectableFlags arg3 = (ImGuiSelectableFlags) 0 ; ImVec2 const &arg4_defvalue = ImVec2(0, 0) ;
    ImVec2 *arg4 = (ImVec2 *) &arg4_defvalue ; bool result; SWIG_check_num_args("ImGui::Selectable",2,4)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::Selectable",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::Selectable",2,"bool *");
    if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("ImGui::Selectable",3,"ImGuiSelectableFlags");
    if(lua_gettop(L)>=4 && !lua_isuserdata(L,4)) SWIG_fail_arg("ImGui::Selectable",4,"ImVec2 const &");
    arg1 = (char *)lua_tostring(L, 1); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
      SWIG_fail_ptr("Selectable",2,SWIGTYPE_p_bool); }  if(lua_gettop(L)>=3){ arg3 = (ImGuiSelectableFlags)lua_tonumber(L, 3);} 
    if(lua_gettop(L)>=4){ if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
        SWIG_fail_ptr("Selectable",4,SWIGTYPE_p_ImVec2); }  } 
    result = (bool)ImGui::Selectable((char const *)arg1,arg2,arg3,(ImVec2 const &)*arg4);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_BeginMultiSelect(lua_State* L) { { int SWIG_arg = 0; ImGuiMultiSelectFlags arg1 ; int arg2 = (int) -1 ;
    int arg3 = (int) -1 ; ImGuiMultiSelectIO *result = 0 ; SWIG_check_num_args("ImGui::BeginMultiSelect",1,3)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::BeginMultiSelect",1,"ImGuiMultiSelectFlags");
    if(lua_gettop(L)>=2 && !lua_isnumber(L,2)) SWIG_fail_arg("ImGui::BeginMultiSelect",2,"int");
    if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("ImGui::BeginMultiSelect",3,"int");
    arg1 = (ImGuiMultiSelectFlags)lua_tonumber(L, 1); if(lua_gettop(L)>=2){ arg2 = (int)lua_tonumber(L, 2);} 
    if(lua_gettop(L)>=3){ arg3 = (int)lua_tonumber(L, 3);} 
    result = (ImGuiMultiSelectIO *)ImGui::BeginMultiSelect(arg1,arg2,arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiMultiSelectIO,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_EndMultiSelect(lua_State* L) { { int SWIG_arg = 0; ImGuiMultiSelectIO *result = 0 ;
    SWIG_check_num_args("ImGui::EndMultiSelect",0,0) result = (ImGuiMultiSelectIO *)ImGui::EndMultiSelect();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiMultiSelectIO,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_SetNextItemSelectionUserData(lua_State* L) { { int SWIG_arg = 0; ImGuiSelectionUserData arg1 ;
    SWIG_check_num_args("ImGui::SetNextItemSelectionUserData",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SetNextItemSelectionUserData",1,"ImGuiSelectionUserData");
    arg1 = (ImGuiSelectionUserData)lua_tonumber(L, 1); ImGui::SetNextItemSelectionUserData(arg1); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_IsItemToggledSelection(lua_State* L) { { int SWIG_arg = 0; bool result;
    SWIG_check_num_args("ImGui::IsItemToggledSelection",0,0) result = (bool)ImGui::IsItemToggledSelection();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_BeginListBox(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ;
    ImVec2 const &arg2_defvalue = ImVec2(0, 0) ; ImVec2 *arg2 = (ImVec2 *) &arg2_defvalue ; bool result;
    SWIG_check_num_args("ImGui::BeginListBox",1,2)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::BeginListBox",1,"char const *");
    if(lua_gettop(L)>=2 && !lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::BeginListBox",2,"ImVec2 const &");
    arg1 = (char *)lua_tostring(L, 1); if(lua_gettop(L)>=2){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
        SWIG_fail_ptr("BeginListBox",2,SWIGTYPE_p_ImVec2); }  } 
    result = (bool)ImGui::BeginListBox((char const *)arg1,(ImVec2 const &)*arg2);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_EndListBox(lua_State* L) { { int SWIG_arg = 0; SWIG_check_num_args("ImGui::EndListBox",0,0)
    ImGui::EndListBox(); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ListBox__SWIG_0(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; int *arg2 = (int *) 0 ;
    char **arg3 = (char **) (char **)0 ; int arg4 ; int arg5 = (int) -1 ; bool result; SWIG_check_num_args("ImGui::ListBox",4,5)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::ListBox",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::ListBox",2,"int *");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::ListBox",3,"char const *const []");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::ListBox",4,"int");
    if(lua_gettop(L)>=5 && !lua_isnumber(L,5)) SWIG_fail_arg("ImGui::ListBox",5,"int"); arg1 = (char *)lua_tostring(L, 1);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){ SWIG_fail_ptr("ListBox",2,SWIGTYPE_p_int); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_char,0))){ SWIG_fail_ptr("ListBox",3,SWIGTYPE_p_p_char); } 
    arg4 = (int)lua_tonumber(L, 4); if(lua_gettop(L)>=5){ arg5 = (int)lua_tonumber(L, 5);} 
    result = (bool)ImGui::ListBox((char const *)arg1,arg2,(char const *const (*))arg3,arg4,arg5);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ListBox__SWIG_1(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; int *arg2 = (int *) 0 ;
    char *(*arg3)(void *,int) = (char *(*)(void *,int)) 0 ; void *arg4 = (void *) 0 ; int arg5 ; int arg6 = (int) -1 ;
    bool result; SWIG_check_num_args("ImGui::ListBox",5,6)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::ListBox",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::ListBox",2,"int *");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::ListBox",3,"char const *(*)(void *,int)");
    if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImGui::ListBox",4,"void *");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::ListBox",5,"int");
    if(lua_gettop(L)>=6 && !lua_isnumber(L,6)) SWIG_fail_arg("ImGui::ListBox",6,"int"); arg1 = (char *)lua_tostring(L, 1);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){ SWIG_fail_ptr("ListBox",2,SWIGTYPE_p_int); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_f_p_void_int__p_char,0))){
      SWIG_fail_ptr("ListBox",3,SWIGTYPE_p_f_p_void_int__p_char); }  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"ListBox");
    arg5 = (int)lua_tonumber(L, 5); if(lua_gettop(L)>=6){ arg6 = (int)lua_tonumber(L, 6);} 
    result = (bool)ImGui::ListBox((char const *)arg1,arg2,(char const *(*)(void *,int))arg3,arg4,arg5,arg6);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ListBox(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L);
  if ((argc >= 4) && (argc <= 5)) { int _v = 0; { _v = SWIG_lua_isnilstring(L,argv[0]); }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) { _v = 0; }  else {
          _v = 1; }  }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_char, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { if (argc <= 4) {
              return _wrap_ListBox__SWIG_0(L);}  { _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_ListBox__SWIG_0(L);}
             }  }  }  }  }  if ((argc >= 5) && (argc <= 6)) { int _v = 0; { _v = SWIG_lua_isnilstring(L,argv[0]); }  if (_v) { {
        void *ptr; if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_f_p_void_int__p_char, 0)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, 0, 0)) { _v = 0; }  else { _v = 1; }
             }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { if (argc <= 5) { return _wrap_ListBox__SWIG_1(L);}  {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { return _wrap_ListBox__SWIG_1(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ListBox'\n" "  Possible C/C++ prototypes are:\n"
  "    ImGui::ListBox(char const *,int *,char const *const [],int,int)\n"
  "    ImGui::ListBox(char const *,int *,char const *(*)(void *,int),void *,int,int)\n"); lua_error(L);return 0; }
static int _wrap_PlotLines__SWIG_0(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; float *arg2 = (float *) 0 ;
    int arg3 ; int arg4 = (int) 0 ; char *arg5 = (char *) NULL ; float arg6 = (float) FLT_MAX ; float arg7 = (float) FLT_MAX ;
    ImVec2 arg8 = (ImVec2) ImVec2(0, 0) ; int arg9 = (int) sizeof(float) ; ImVec2 *argp8 ;
    SWIG_check_num_args("ImGui::PlotLines",3,9)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::PlotLines",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::PlotLines",2,"float const *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::PlotLines",3,"int");
    if(lua_gettop(L)>=4 && !lua_isnumber(L,4)) SWIG_fail_arg("ImGui::PlotLines",4,"int");
    if(lua_gettop(L)>=5 && !SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::PlotLines",5,"char const *");
    if(lua_gettop(L)>=6 && !lua_isnumber(L,6)) SWIG_fail_arg("ImGui::PlotLines",6,"float");
    if(lua_gettop(L)>=7 && !lua_isnumber(L,7)) SWIG_fail_arg("ImGui::PlotLines",7,"float");
    if(lua_gettop(L)>=8 && !lua_isuserdata(L,8)) SWIG_fail_arg("ImGui::PlotLines",8,"ImVec2");
    if(lua_gettop(L)>=9 && !lua_isnumber(L,9)) SWIG_fail_arg("ImGui::PlotLines",9,"int"); arg1 = (char *)lua_tostring(L, 1);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){ SWIG_fail_ptr("PlotLines",2,SWIGTYPE_p_float); } 
    arg3 = (int)lua_tonumber(L, 3); if(lua_gettop(L)>=4){ arg4 = (int)lua_tonumber(L, 4);}  if(lua_gettop(L)>=5){
      arg5 = (char *)lua_tostring(L, 5);}  if(lua_gettop(L)>=6){ arg6 = (float)lua_tonumber(L, 6);}  if(lua_gettop(L)>=7){
      arg7 = (float)lua_tonumber(L, 7);}  if(lua_gettop(L)>=8){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_ImVec2,0))){ SWIG_fail_ptr("PlotLines",8,SWIGTYPE_p_ImVec2); }
       arg8 = *argp8; }  if(lua_gettop(L)>=9){ arg9 = (int)lua_tonumber(L, 9);} 
    ImGui::PlotLines((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5,arg6,arg7,SWIG_STD_MOVE(arg8),arg9);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_PlotLines__SWIG_1(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ;
    float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ; void *arg3 = (void *) 0 ; int arg4 ; int arg5 = (int) 0 ;
    char *arg6 = (char *) NULL ; float arg7 = (float) FLT_MAX ; float arg8 = (float) FLT_MAX ;
    ImVec2 arg9 = (ImVec2) ImVec2(0, 0) ; ImVec2 *argp9 ; SWIG_check_num_args("ImGui::PlotLines",4,9)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::PlotLines",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::PlotLines",2,"float (*)(void *,int)");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::PlotLines",3,"void *");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::PlotLines",4,"int");
    if(lua_gettop(L)>=5 && !lua_isnumber(L,5)) SWIG_fail_arg("ImGui::PlotLines",5,"int");
    if(lua_gettop(L)>=6 && !SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::PlotLines",6,"char const *");
    if(lua_gettop(L)>=7 && !lua_isnumber(L,7)) SWIG_fail_arg("ImGui::PlotLines",7,"float");
    if(lua_gettop(L)>=8 && !lua_isnumber(L,8)) SWIG_fail_arg("ImGui::PlotLines",8,"float");
    if(lua_gettop(L)>=9 && !lua_isuserdata(L,9)) SWIG_fail_arg("ImGui::PlotLines",9,"ImVec2");
    arg1 = (char *)lua_tostring(L, 1); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_void_int__float,0))){
      SWIG_fail_ptr("PlotLines",2,SWIGTYPE_p_f_p_void_int__float); }  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"PlotLines");
    arg4 = (int)lua_tonumber(L, 4); if(lua_gettop(L)>=5){ arg5 = (int)lua_tonumber(L, 5);}  if(lua_gettop(L)>=6){
      arg6 = (char *)lua_tostring(L, 6);}  if(lua_gettop(L)>=7){ arg7 = (float)lua_tonumber(L, 7);}  if(lua_gettop(L)>=8){
      arg8 = (float)lua_tonumber(L, 8);}  if(lua_gettop(L)>=9){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_ImVec2,0))){ SWIG_fail_ptr("PlotLines",9,SWIGTYPE_p_ImVec2); }
       arg9 = *argp9; } 
    ImGui::PlotLines((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7,arg8,SWIG_STD_MOVE(arg9)); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_PlotLines(lua_State* L) { int argc; int argv[10]={ 1,2,3,4,5,6,7,8,9,10} ; argc = lua_gettop(L);
  if ((argc >= 3) && (argc <= 9)) { int _v = 0; { _v = SWIG_lua_isnilstring(L,argv[0]); }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }  else {
          _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { if (argc <= 3) {
            return _wrap_PlotLines__SWIG_0(L);}  { _v = lua_isnumber(L,argv[3]); }  if (_v) { if (argc <= 4) {
              return _wrap_PlotLines__SWIG_0(L);}  { _v = SWIG_lua_isnilstring(L,argv[4]); }  if (_v) { if (argc <= 5) {
                return _wrap_PlotLines__SWIG_0(L);}  { _v = lua_isnumber(L,argv[5]); }  if (_v) { if (argc <= 6) {
                  return _wrap_PlotLines__SWIG_0(L);}  { _v = lua_isnumber(L,argv[6]); }  if (_v) { if (argc <= 7) {
                    return _wrap_PlotLines__SWIG_0(L);}  { void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                      _v = 0; }  else { _v = 1; }  }  if (_v) { if (argc <= 8) { return _wrap_PlotLines__SWIG_0(L);}  {
                      _v = lua_isnumber(L,argv[8]); }  if (_v) { return _wrap_PlotLines__SWIG_0(L);}  }  }  }  }  }  }  }  }  } 
  if ((argc >= 4) && (argc <= 9)) { int _v = 0; { _v = SWIG_lua_isnilstring(L,argv[0]); }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_f_p_void_int__float, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) { _v = 0; }  else { _v = 1; }  }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { if (argc <= 4) { return _wrap_PlotLines__SWIG_1(L);}  {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { if (argc <= 5) { return _wrap_PlotLines__SWIG_1(L);}  {
                _v = SWIG_lua_isnilstring(L,argv[5]); }  if (_v) { if (argc <= 6) { return _wrap_PlotLines__SWIG_1(L);}  {
                  _v = lua_isnumber(L,argv[6]); }  if (_v) { if (argc <= 7) { return _wrap_PlotLines__SWIG_1(L);}  {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { if (argc <= 8) { return _wrap_PlotLines__SWIG_1(L);}  {
                      void *ptr;
                      if (lua_isuserdata(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_PlotLines__SWIG_1(L);}  }  }  }  }  }  }  }  }  }
   SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PlotLines'\n" "  Possible C/C++ prototypes are:\n"
  "    ImGui::PlotLines(char const *,float const *,int,int,char const *,float,float,ImVec2,int)\n"
  "    ImGui::PlotLines(char const *,float (*)(void *,int),void *,int,int,char const *,float,float,ImVec2)\n");
  lua_error(L);return 0; }
static int _wrap_PlotHistogram__SWIG_0(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; float *arg2 = (float *) 0 ;
    int arg3 ; int arg4 = (int) 0 ; char *arg5 = (char *) NULL ; float arg6 = (float) FLT_MAX ; float arg7 = (float) FLT_MAX ;
    ImVec2 arg8 = (ImVec2) ImVec2(0, 0) ; int arg9 = (int) sizeof(float) ; ImVec2 *argp8 ;
    SWIG_check_num_args("ImGui::PlotHistogram",3,9)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::PlotHistogram",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::PlotHistogram",2,"float const *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::PlotHistogram",3,"int");
    if(lua_gettop(L)>=4 && !lua_isnumber(L,4)) SWIG_fail_arg("ImGui::PlotHistogram",4,"int");
    if(lua_gettop(L)>=5 && !SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImGui::PlotHistogram",5,"char const *");
    if(lua_gettop(L)>=6 && !lua_isnumber(L,6)) SWIG_fail_arg("ImGui::PlotHistogram",6,"float");
    if(lua_gettop(L)>=7 && !lua_isnumber(L,7)) SWIG_fail_arg("ImGui::PlotHistogram",7,"float");
    if(lua_gettop(L)>=8 && !lua_isuserdata(L,8)) SWIG_fail_arg("ImGui::PlotHistogram",8,"ImVec2");
    if(lua_gettop(L)>=9 && !lua_isnumber(L,9)) SWIG_fail_arg("ImGui::PlotHistogram",9,"int"); arg1 = (char *)lua_tostring(L, 1);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){ SWIG_fail_ptr("PlotHistogram",2,SWIGTYPE_p_float); }
     arg3 = (int)lua_tonumber(L, 3); if(lua_gettop(L)>=4){ arg4 = (int)lua_tonumber(L, 4);}  if(lua_gettop(L)>=5){
      arg5 = (char *)lua_tostring(L, 5);}  if(lua_gettop(L)>=6){ arg6 = (float)lua_tonumber(L, 6);}  if(lua_gettop(L)>=7){
      arg7 = (float)lua_tonumber(L, 7);}  if(lua_gettop(L)>=8){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_ImVec2,0))){
        SWIG_fail_ptr("PlotHistogram",8,SWIGTYPE_p_ImVec2); }  arg8 = *argp8; }  if(lua_gettop(L)>=9){
      arg9 = (int)lua_tonumber(L, 9);} 
    ImGui::PlotHistogram((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5,arg6,arg7,SWIG_STD_MOVE(arg8),arg9);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_PlotHistogram__SWIG_1(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ;
    float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ; void *arg3 = (void *) 0 ; int arg4 ; int arg5 = (int) 0 ;
    char *arg6 = (char *) NULL ; float arg7 = (float) FLT_MAX ; float arg8 = (float) FLT_MAX ;
    ImVec2 arg9 = (ImVec2) ImVec2(0, 0) ; ImVec2 *argp9 ; SWIG_check_num_args("ImGui::PlotHistogram",4,9)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::PlotHistogram",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::PlotHistogram",2,"float (*)(void *,int)");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::PlotHistogram",3,"void *");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::PlotHistogram",4,"int");
    if(lua_gettop(L)>=5 && !lua_isnumber(L,5)) SWIG_fail_arg("ImGui::PlotHistogram",5,"int");
    if(lua_gettop(L)>=6 && !SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImGui::PlotHistogram",6,"char const *");
    if(lua_gettop(L)>=7 && !lua_isnumber(L,7)) SWIG_fail_arg("ImGui::PlotHistogram",7,"float");
    if(lua_gettop(L)>=8 && !lua_isnumber(L,8)) SWIG_fail_arg("ImGui::PlotHistogram",8,"float");
    if(lua_gettop(L)>=9 && !lua_isuserdata(L,9)) SWIG_fail_arg("ImGui::PlotHistogram",9,"ImVec2");
    arg1 = (char *)lua_tostring(L, 1); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_void_int__float,0))){
      SWIG_fail_ptr("PlotHistogram",2,SWIGTYPE_p_f_p_void_int__float); } 
    arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"PlotHistogram"); arg4 = (int)lua_tonumber(L, 4); if(lua_gettop(L)>=5){
      arg5 = (int)lua_tonumber(L, 5);}  if(lua_gettop(L)>=6){ arg6 = (char *)lua_tostring(L, 6);}  if(lua_gettop(L)>=7){
      arg7 = (float)lua_tonumber(L, 7);}  if(lua_gettop(L)>=8){ arg8 = (float)lua_tonumber(L, 8);}  if(lua_gettop(L)>=9){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_ImVec2,0))){
        SWIG_fail_ptr("PlotHistogram",9,SWIGTYPE_p_ImVec2); }  arg9 = *argp9; } 
    ImGui::PlotHistogram((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7,arg8,SWIG_STD_MOVE(arg9));
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_PlotHistogram(lua_State* L) { int argc; int argv[10]={ 1,2,3,4,5,6,7,8,9,10} ; argc = lua_gettop(L);
  if ((argc >= 3) && (argc <= 9)) { int _v = 0; { _v = SWIG_lua_isnilstring(L,argv[0]); }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }  else {
          _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { if (argc <= 3) {
            return _wrap_PlotHistogram__SWIG_0(L);}  { _v = lua_isnumber(L,argv[3]); }  if (_v) { if (argc <= 4) {
              return _wrap_PlotHistogram__SWIG_0(L);}  { _v = SWIG_lua_isnilstring(L,argv[4]); }  if (_v) { if (argc <= 5) {
                return _wrap_PlotHistogram__SWIG_0(L);}  { _v = lua_isnumber(L,argv[5]); }  if (_v) { if (argc <= 6) {
                  return _wrap_PlotHistogram__SWIG_0(L);}  { _v = lua_isnumber(L,argv[6]); }  if (_v) { if (argc <= 7) {
                    return _wrap_PlotHistogram__SWIG_0(L);}  { void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                      _v = 0; }  else { _v = 1; }  }  if (_v) { if (argc <= 8) { return _wrap_PlotHistogram__SWIG_0(L);}  {
                      _v = lua_isnumber(L,argv[8]); }  if (_v) { return _wrap_PlotHistogram__SWIG_0(L);}  }  }  }  }  }  }  }  }
     }  if ((argc >= 4) && (argc <= 9)) { int _v = 0; { _v = SWIG_lua_isnilstring(L,argv[0]); }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_f_p_void_int__float, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) { _v = 0; }  else { _v = 1; }  }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { if (argc <= 4) { return _wrap_PlotHistogram__SWIG_1(L);}  {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { if (argc <= 5) { return _wrap_PlotHistogram__SWIG_1(L);}  {
                _v = SWIG_lua_isnilstring(L,argv[5]); }  if (_v) { if (argc <= 6) { return _wrap_PlotHistogram__SWIG_1(L);}  {
                  _v = lua_isnumber(L,argv[6]); }  if (_v) { if (argc <= 7) { return _wrap_PlotHistogram__SWIG_1(L);}  {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { if (argc <= 8) { return _wrap_PlotHistogram__SWIG_1(L);}  {
                      void *ptr;
                      if (lua_isuserdata(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
                        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_PlotHistogram__SWIG_1(L);}  }  }  }  }  }  }  }  }
     }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PlotHistogram'\n"
  "  Possible C/C++ prototypes are:\n"
  "    ImGui::PlotHistogram(char const *,float const *,int,int,char const *,float,float,ImVec2,int)\n"
  "    ImGui::PlotHistogram(char const *,float (*)(void *,int),void *,int,int,char const *,float,float,ImVec2)\n");
  lua_error(L);return 0; }
static int _wrap_Value__SWIG_0(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; bool arg2 ;
    SWIG_check_num_args("ImGui::Value",2,2) if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::Value",1,"char const *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGui::Value",2,"bool"); arg1 = (char *)lua_tostring(L, 1);
    arg2 = (lua_toboolean(L, 2)!=0); ImGui::Value((char const *)arg1,arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_Value__SWIG_1(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; float arg2 ;
    char *arg3 = (char *) NULL ; SWIG_check_num_args("ImGui::Value",2,3)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::Value",1,"char const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::Value",2,"float");
    if(lua_gettop(L)>=3 && !SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGui::Value",3,"char const *");
    arg1 = (char *)lua_tostring(L, 1); arg2 = (float)lua_tonumber(L, 2); if(lua_gettop(L)>=3){
      arg3 = (char *)lua_tostring(L, 3);}  ImGui::Value((char const *)arg1,arg2,(char const *)arg3); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Value(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) { int _v = 0; {
      _v = SWIG_lua_isnilstring(L,argv[0]); }  if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) {
        return _wrap_Value__SWIG_0(L);}  }  }  if ((argc >= 2) && (argc <= 3)) { int _v = 0; {
      _v = SWIG_lua_isnilstring(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { if (argc <= 2) {
          return _wrap_Value__SWIG_1(L);}  { _v = SWIG_lua_isnilstring(L,argv[2]); }  if (_v) { return _wrap_Value__SWIG_1(L);}
         }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Value'\n"
  "  Possible C/C++ prototypes are:\n" "    ImGui::Value(char const *,bool)\n"
  "    ImGui::Value(char const *,float,char const *)\n"); lua_error(L);return 0; }
static int _wrap_BeginMenuBar(lua_State* L) { { int SWIG_arg = 0; bool result; SWIG_check_num_args("ImGui::BeginMenuBar",0,0)
    result = (bool)ImGui::BeginMenuBar(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_EndMenuBar(lua_State* L) { { int SWIG_arg = 0; SWIG_check_num_args("ImGui::EndMenuBar",0,0)
    ImGui::EndMenuBar(); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_BeginMainMenuBar(lua_State* L) { { int SWIG_arg = 0; bool result;
    SWIG_check_num_args("ImGui::BeginMainMenuBar",0,0) result = (bool)ImGui::BeginMainMenuBar();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_EndMainMenuBar(lua_State* L) { { int SWIG_arg = 0; SWIG_check_num_args("ImGui::EndMainMenuBar",0,0)
    ImGui::EndMainMenuBar(); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_BeginMenu(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; bool arg2 = (bool) true ; bool result;
    SWIG_check_num_args("ImGui::BeginMenu",1,2)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::BeginMenu",1,"char const *");
    if(lua_gettop(L)>=2 && !lua_isboolean(L,2)) SWIG_fail_arg("ImGui::BeginMenu",2,"bool"); arg1 = (char *)lua_tostring(L, 1);
    if(lua_gettop(L)>=2){ arg2 = (lua_toboolean(L, 2)!=0);}  result = (bool)ImGui::BeginMenu((char const *)arg1,arg2);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_EndMenu(lua_State* L) { { int SWIG_arg = 0; SWIG_check_num_args("ImGui::EndMenu",0,0) ImGui::EndMenu();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_MenuItem(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; char *arg2 = (char *) 0 ;
    bool *arg3 = (bool *) 0 ; bool arg4 = (bool) true ; bool result; SWIG_check_num_args("ImGui::MenuItem",3,4)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::MenuItem",1,"char const *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::MenuItem",2,"char const *");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::MenuItem",3,"bool *");
    if(lua_gettop(L)>=4 && !lua_isboolean(L,4)) SWIG_fail_arg("ImGui::MenuItem",4,"bool"); arg1 = (char *)lua_tostring(L, 1);
    arg2 = (char *)lua_tostring(L, 2); if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_bool,0))){
      SWIG_fail_ptr("MenuItem",3,SWIGTYPE_p_bool); }  if(lua_gettop(L)>=4){ arg4 = (lua_toboolean(L, 4)!=0);} 
    result = (bool)ImGui::MenuItem((char const *)arg1,(char const *)arg2,arg3,arg4);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_BeginTooltip(lua_State* L) { { int SWIG_arg = 0; bool result; SWIG_check_num_args("ImGui::BeginTooltip",0,0)
    result = (bool)ImGui::BeginTooltip(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_EndTooltip(lua_State* L) { { int SWIG_arg = 0; SWIG_check_num_args("ImGui::EndTooltip",0,0)
    ImGui::EndTooltip(); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SetTooltip(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; void *arg2 = 0 ;
    SWIG_check_num_args("ImGui::SetTooltip",1,1)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SetTooltip",1,"char const *"); arg1 = (char *)lua_tostring(L, 1);
    ImGui::SetTooltip((char const *)arg1,arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SetTooltipV(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; va_list arg2 ; va_list *argp2 ;
    SWIG_check_num_args("ImGui::SetTooltipV",2,2)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SetTooltipV",1,"char const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::SetTooltipV",2,"va_list"); arg1 = (char *)lua_tostring(L, 1);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_va_list,0))){
      SWIG_fail_ptr("SetTooltipV",2,SWIGTYPE_p_va_list); }  arg2 = *argp2;
    ImGui::SetTooltipV((char const *)arg1,SWIG_STD_MOVE(arg2)); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_BeginItemTooltip(lua_State* L) { { int SWIG_arg = 0; bool result;
    SWIG_check_num_args("ImGui::BeginItemTooltip",0,0) result = (bool)ImGui::BeginItemTooltip();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SetItemTooltip(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; void *arg2 = 0 ;
    SWIG_check_num_args("ImGui::SetItemTooltip",1,1)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SetItemTooltip",1,"char const *"); arg1 = (char *)lua_tostring(L, 1);
    ImGui::SetItemTooltip((char const *)arg1,arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SetItemTooltipV(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; va_list arg2 ; va_list *argp2 ;
    SWIG_check_num_args("ImGui::SetItemTooltipV",2,2)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SetItemTooltipV",1,"char const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::SetItemTooltipV",2,"va_list"); arg1 = (char *)lua_tostring(L, 1);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_va_list,0))){
      SWIG_fail_ptr("SetItemTooltipV",2,SWIGTYPE_p_va_list); }  arg2 = *argp2;
    ImGui::SetItemTooltipV((char const *)arg1,SWIG_STD_MOVE(arg2)); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_BeginPopup(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ;
    ImGuiWindowFlags arg2 = (ImGuiWindowFlags) 0 ; bool result; SWIG_check_num_args("ImGui::BeginPopup",1,2)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::BeginPopup",1,"char const *");
    if(lua_gettop(L)>=2 && !lua_isnumber(L,2)) SWIG_fail_arg("ImGui::BeginPopup",2,"ImGuiWindowFlags");
    arg1 = (char *)lua_tostring(L, 1); if(lua_gettop(L)>=2){ arg2 = (ImGuiWindowFlags)lua_tonumber(L, 2);} 
    result = (bool)ImGui::BeginPopup((char const *)arg1,arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_BeginPopupModal_3(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; bool *arg2 = (bool *) 0 ;
    ImGuiWindowFlags arg3 ; bool result; SWIG_check_num_args("ImGui::BeginPopupModal",3,3)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::BeginPopupModal",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::BeginPopupModal",2,"bool *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::BeginPopupModal",3,"ImGuiWindowFlags"); arg1 = (char *)lua_tostring(L, 1);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
      SWIG_fail_ptr("BeginPopupModal_3",2,SWIGTYPE_p_bool); }  arg3 = (ImGuiWindowFlags)lua_tonumber(L, 3);
    result = (bool)ImGui::BeginPopupModal((char const *)arg1,arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_BeginPopupModal_2(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; bool *arg2 = (bool *) 0 ;
    bool result; SWIG_check_num_args("ImGui::BeginPopupModal",2,2)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::BeginPopupModal",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::BeginPopupModal",2,"bool *"); arg1 = (char *)lua_tostring(L, 1);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
      SWIG_fail_ptr("BeginPopupModal_2",2,SWIGTYPE_p_bool); }  result = (bool)ImGui::BeginPopupModal((char const *)arg1,arg2);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_BeginPopupModal_1(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; bool result;
    SWIG_check_num_args("ImGui::BeginPopupModal",1,1)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::BeginPopupModal",1,"char const *"); arg1 = (char *)lua_tostring(L, 1);
    result = (bool)ImGui::BeginPopupModal((char const *)arg1); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_EndPopup(lua_State* L) { { int SWIG_arg = 0; SWIG_check_num_args("ImGui::EndPopup",0,0) ImGui::EndPopup();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_OpenPopup__SWIG_0(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ;
    ImGuiPopupFlags arg2 = (ImGuiPopupFlags) 0 ; SWIG_check_num_args("ImGui::OpenPopup",1,2)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::OpenPopup",1,"char const *");
    if(lua_gettop(L)>=2 && !lua_isnumber(L,2)) SWIG_fail_arg("ImGui::OpenPopup",2,"ImGuiPopupFlags");
    arg1 = (char *)lua_tostring(L, 1); if(lua_gettop(L)>=2){ arg2 = (ImGuiPopupFlags)lua_tonumber(L, 2);} 
    ImGui::OpenPopup((char const *)arg1,arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_OpenPopup__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ImGuiID arg1 ;
    ImGuiPopupFlags arg2 = (ImGuiPopupFlags) 0 ; SWIG_check_num_args("ImGui::OpenPopup",1,2)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::OpenPopup",1,"ImGuiID");
    if(lua_gettop(L)>=2 && !lua_isnumber(L,2)) SWIG_fail_arg("ImGui::OpenPopup",2,"ImGuiPopupFlags");
    SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative"); arg1 = (ImGuiID)lua_tonumber(L, 1);
    if(lua_gettop(L)>=2){ arg2 = (ImGuiPopupFlags)lua_tonumber(L, 2);}  ImGui::OpenPopup(arg1,arg2); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_OpenPopup(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L);
  if ((argc >= 1) && (argc <= 2)) { int _v = 0; { _v = lua_isnumber(L,argv[0]); }  if (_v) { if (argc <= 1) {
        return _wrap_OpenPopup__SWIG_1(L);}  { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_OpenPopup__SWIG_1(L);}  }
     }  if ((argc >= 1) && (argc <= 2)) { int _v = 0; { _v = SWIG_lua_isnilstring(L,argv[0]); }  if (_v) { if (argc <= 1) {
        return _wrap_OpenPopup__SWIG_0(L);}  { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_OpenPopup__SWIG_0(L);}  }
     }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OpenPopup'\n" "  Possible C/C++ prototypes are:\n"
  "    ImGui::OpenPopup(char const *,ImGuiPopupFlags)\n" "    ImGui::OpenPopup(ImGuiID,ImGuiPopupFlags)\n");
  lua_error(L);return 0; }
static int _wrap_OpenPopupOnItemClick(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) NULL ;
    ImGuiPopupFlags arg2 = (ImGuiPopupFlags) 1 ; SWIG_check_num_args("ImGui::OpenPopupOnItemClick",0,2)
    if(lua_gettop(L)>=1 && !SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::OpenPopupOnItemClick",1,"char const *");
    if(lua_gettop(L)>=2 && !lua_isnumber(L,2)) SWIG_fail_arg("ImGui::OpenPopupOnItemClick",2,"ImGuiPopupFlags");
    if(lua_gettop(L)>=1){ arg1 = (char *)lua_tostring(L, 1);}  if(lua_gettop(L)>=2){ arg2 = (ImGuiPopupFlags)lua_tonumber(L, 2);}
     ImGui::OpenPopupOnItemClick((char const *)arg1,arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_CloseCurrentPopup(lua_State* L) { { int SWIG_arg = 0; SWIG_check_num_args("ImGui::CloseCurrentPopup",0,0)
    ImGui::CloseCurrentPopup(); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_BeginPopupContextItem(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) NULL ;
    ImGuiPopupFlags arg2 = (ImGuiPopupFlags) 1 ; bool result; SWIG_check_num_args("ImGui::BeginPopupContextItem",0,2)
    if(lua_gettop(L)>=1 && !SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::BeginPopupContextItem",1,"char const *");
    if(lua_gettop(L)>=2 && !lua_isnumber(L,2)) SWIG_fail_arg("ImGui::BeginPopupContextItem",2,"ImGuiPopupFlags");
    if(lua_gettop(L)>=1){ arg1 = (char *)lua_tostring(L, 1);}  if(lua_gettop(L)>=2){ arg2 = (ImGuiPopupFlags)lua_tonumber(L, 2);}
     result = (bool)ImGui::BeginPopupContextItem((char const *)arg1,arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_BeginPopupContextWindow(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) NULL ;
    ImGuiPopupFlags arg2 = (ImGuiPopupFlags) 1 ; bool result; SWIG_check_num_args("ImGui::BeginPopupContextWindow",0,2)
    if(lua_gettop(L)>=1 && !SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::BeginPopupContextWindow",1,"char const *");
    if(lua_gettop(L)>=2 && !lua_isnumber(L,2)) SWIG_fail_arg("ImGui::BeginPopupContextWindow",2,"ImGuiPopupFlags");
    if(lua_gettop(L)>=1){ arg1 = (char *)lua_tostring(L, 1);}  if(lua_gettop(L)>=2){ arg2 = (ImGuiPopupFlags)lua_tonumber(L, 2);}
     result = (bool)ImGui::BeginPopupContextWindow((char const *)arg1,arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_BeginPopupContextVoid(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) NULL ;
    ImGuiPopupFlags arg2 = (ImGuiPopupFlags) 1 ; bool result; SWIG_check_num_args("ImGui::BeginPopupContextVoid",0,2)
    if(lua_gettop(L)>=1 && !SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::BeginPopupContextVoid",1,"char const *");
    if(lua_gettop(L)>=2 && !lua_isnumber(L,2)) SWIG_fail_arg("ImGui::BeginPopupContextVoid",2,"ImGuiPopupFlags");
    if(lua_gettop(L)>=1){ arg1 = (char *)lua_tostring(L, 1);}  if(lua_gettop(L)>=2){ arg2 = (ImGuiPopupFlags)lua_tonumber(L, 2);}
     result = (bool)ImGui::BeginPopupContextVoid((char const *)arg1,arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_IsPopupOpen(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ;
    ImGuiPopupFlags arg2 = (ImGuiPopupFlags) 0 ; bool result; SWIG_check_num_args("ImGui::IsPopupOpen",1,2)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::IsPopupOpen",1,"char const *");
    if(lua_gettop(L)>=2 && !lua_isnumber(L,2)) SWIG_fail_arg("ImGui::IsPopupOpen",2,"ImGuiPopupFlags");
    arg1 = (char *)lua_tostring(L, 1); if(lua_gettop(L)>=2){ arg2 = (ImGuiPopupFlags)lua_tonumber(L, 2);} 
    result = (bool)ImGui::IsPopupOpen((char const *)arg1,arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_BeginTable(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; int arg2 ;
    ImGuiTableFlags arg3 = (ImGuiTableFlags) 0 ; ImVec2 const &arg4_defvalue = ImVec2(0.0f, 0.0f) ;
    ImVec2 *arg4 = (ImVec2 *) &arg4_defvalue ; float arg5 = (float) 0.0 ; bool result;
    SWIG_check_num_args("ImGui::BeginTable",2,5)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::BeginTable",1,"char const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::BeginTable",2,"int");
    if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("ImGui::BeginTable",3,"ImGuiTableFlags");
    if(lua_gettop(L)>=4 && !lua_isuserdata(L,4)) SWIG_fail_arg("ImGui::BeginTable",4,"ImVec2 const &");
    if(lua_gettop(L)>=5 && !lua_isnumber(L,5)) SWIG_fail_arg("ImGui::BeginTable",5,"float"); arg1 = (char *)lua_tostring(L, 1);
    arg2 = (int)lua_tonumber(L, 2); if(lua_gettop(L)>=3){ arg3 = (ImGuiTableFlags)lua_tonumber(L, 3);}  if(lua_gettop(L)>=4){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){ SWIG_fail_ptr("BeginTable",4,SWIGTYPE_p_ImVec2); }
       }  if(lua_gettop(L)>=5){ arg5 = (float)lua_tonumber(L, 5);} 
    result = (bool)ImGui::BeginTable((char const *)arg1,arg2,arg3,(ImVec2 const &)*arg4,arg5);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_EndTable(lua_State* L) { { int SWIG_arg = 0; SWIG_check_num_args("ImGui::EndTable",0,0) ImGui::EndTable();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_TableNextRow(lua_State* L) { { int SWIG_arg = 0; ImGuiTableRowFlags arg1 = (ImGuiTableRowFlags) 0 ;
    float arg2 = (float) 0.0 ; SWIG_check_num_args("ImGui::TableNextRow",0,2)
    if(lua_gettop(L)>=1 && !lua_isnumber(L,1)) SWIG_fail_arg("ImGui::TableNextRow",1,"ImGuiTableRowFlags");
    if(lua_gettop(L)>=2 && !lua_isnumber(L,2)) SWIG_fail_arg("ImGui::TableNextRow",2,"float"); if(lua_gettop(L)>=1){
      arg1 = (ImGuiTableRowFlags)lua_tonumber(L, 1);}  if(lua_gettop(L)>=2){ arg2 = (float)lua_tonumber(L, 2);} 
    ImGui::TableNextRow(arg1,arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_TableNextColumn(lua_State* L) { { int SWIG_arg = 0; bool result;
    SWIG_check_num_args("ImGui::TableNextColumn",0,0) result = (bool)ImGui::TableNextColumn();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_TableSetColumnIndex(lua_State* L) { { int SWIG_arg = 0; int arg1 ; bool result;
    SWIG_check_num_args("ImGui::TableSetColumnIndex",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::TableSetColumnIndex",1,"int"); arg1 = (int)lua_tonumber(L, 1);
    result = (bool)ImGui::TableSetColumnIndex(arg1); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_TableSetupColumn(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ;
    ImGuiTableColumnFlags arg2 = (ImGuiTableColumnFlags) 0 ; float arg3 = (float) 0.0 ; ImGuiID arg4 = (ImGuiID) 0 ;
    SWIG_check_num_args("ImGui::TableSetupColumn",1,4)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::TableSetupColumn",1,"char const *");
    if(lua_gettop(L)>=2 && !lua_isnumber(L,2)) SWIG_fail_arg("ImGui::TableSetupColumn",2,"ImGuiTableColumnFlags");
    if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("ImGui::TableSetupColumn",3,"float");
    if(lua_gettop(L)>=4 && !lua_isnumber(L,4)) SWIG_fail_arg("ImGui::TableSetupColumn",4,"ImGuiID");
    arg1 = (char *)lua_tostring(L, 1); if(lua_gettop(L)>=2){ arg2 = (ImGuiTableColumnFlags)lua_tonumber(L, 2);} 
    if(lua_gettop(L)>=3){ arg3 = (float)lua_tonumber(L, 3);}  if(lua_gettop(L)>=4){
      SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative"); arg4 = (ImGuiID)lua_tonumber(L, 4);} 
    ImGui::TableSetupColumn((char const *)arg1,arg2,arg3,arg4); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_TableSetupScrollFreeze(lua_State* L) { { int SWIG_arg = 0; int arg1 ; int arg2 ;
    SWIG_check_num_args("ImGui::TableSetupScrollFreeze",2,2)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::TableSetupScrollFreeze",1,"int");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::TableSetupScrollFreeze",2,"int"); arg1 = (int)lua_tonumber(L, 1);
    arg2 = (int)lua_tonumber(L, 2); ImGui::TableSetupScrollFreeze(arg1,arg2); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_TableHeader(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ;
    SWIG_check_num_args("ImGui::TableHeader",1,1)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::TableHeader",1,"char const *"); arg1 = (char *)lua_tostring(L, 1);
    ImGui::TableHeader((char const *)arg1); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_TableHeadersRow(lua_State* L) { { int SWIG_arg = 0; SWIG_check_num_args("ImGui::TableHeadersRow",0,0)
    ImGui::TableHeadersRow(); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_TableAngledHeadersRow(lua_State* L) { { int SWIG_arg = 0;
    SWIG_check_num_args("ImGui::TableAngledHeadersRow",0,0) ImGui::TableAngledHeadersRow(); return SWIG_arg; fail: SWIGUNUSED; }
   lua_error(L); return 0; }
static int _wrap_TableGetSortSpecs(lua_State* L) { { int SWIG_arg = 0; ImGuiTableSortSpecs *result = 0 ;
    SWIG_check_num_args("ImGui::TableGetSortSpecs",0,0) result = (ImGuiTableSortSpecs *)ImGui::TableGetSortSpecs();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiTableSortSpecs,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_TableGetColumnCount(lua_State* L) { { int SWIG_arg = 0; int result;
    SWIG_check_num_args("ImGui::TableGetColumnCount",0,0) result = (int)ImGui::TableGetColumnCount();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_TableGetColumnIndex(lua_State* L) { { int SWIG_arg = 0; int result;
    SWIG_check_num_args("ImGui::TableGetColumnIndex",0,0) result = (int)ImGui::TableGetColumnIndex();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_TableGetRowIndex(lua_State* L) { { int SWIG_arg = 0; int result;
    SWIG_check_num_args("ImGui::TableGetRowIndex",0,0) result = (int)ImGui::TableGetRowIndex();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_TableGetColumnName(lua_State* L) { { int SWIG_arg = 0; int arg1 = (int) -1 ; char *result = 0 ;
    SWIG_check_num_args("ImGui::TableGetColumnName",0,1)
    if(lua_gettop(L)>=1 && !lua_isnumber(L,1)) SWIG_fail_arg("ImGui::TableGetColumnName",1,"int"); if(lua_gettop(L)>=1){
      arg1 = (int)lua_tonumber(L, 1);}  result = (char *)ImGui::TableGetColumnName(arg1);
    lua_pushstring(L,(const char *)result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_TableGetColumnFlags(lua_State* L) { { int SWIG_arg = 0; int arg1 = (int) -1 ; ImGuiTableColumnFlags result;
    SWIG_check_num_args("ImGui::TableGetColumnFlags",0,1)
    if(lua_gettop(L)>=1 && !lua_isnumber(L,1)) SWIG_fail_arg("ImGui::TableGetColumnFlags",1,"int"); if(lua_gettop(L)>=1){
      arg1 = (int)lua_tonumber(L, 1);}  result = (ImGuiTableColumnFlags)ImGui::TableGetColumnFlags(arg1);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_TableSetColumnEnabled(lua_State* L) { { int SWIG_arg = 0; int arg1 ; bool arg2 ;
    SWIG_check_num_args("ImGui::TableSetColumnEnabled",2,2)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::TableSetColumnEnabled",1,"int");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGui::TableSetColumnEnabled",2,"bool"); arg1 = (int)lua_tonumber(L, 1);
    arg2 = (lua_toboolean(L, 2)!=0); ImGui::TableSetColumnEnabled(arg1,arg2); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_TableGetHoveredColumn(lua_State* L) { { int SWIG_arg = 0; int result;
    SWIG_check_num_args("ImGui::TableGetHoveredColumn",0,0) result = (int)ImGui::TableGetHoveredColumn();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_TableSetBgColor(lua_State* L) { { int SWIG_arg = 0; ImGuiTableBgTarget arg1 ; ImU32 arg2 ;
    int arg3 = (int) -1 ; SWIG_check_num_args("ImGui::TableSetBgColor",2,3)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::TableSetBgColor",1,"ImGuiTableBgTarget");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::TableSetBgColor",2,"ImU32");
    if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("ImGui::TableSetBgColor",3,"int");
    arg1 = (ImGuiTableBgTarget)lua_tonumber(L, 1); SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
    arg2 = (ImU32)lua_tonumber(L, 2); if(lua_gettop(L)>=3){ arg3 = (int)lua_tonumber(L, 3);} 
    ImGui::TableSetBgColor(arg1,arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Columns(lua_State* L) { { int SWIG_arg = 0; int arg1 = (int) 1 ; char *arg2 = (char *) NULL ;
    bool arg3 = (bool) true ; SWIG_check_num_args("ImGui::Columns",0,3)
    if(lua_gettop(L)>=1 && !lua_isnumber(L,1)) SWIG_fail_arg("ImGui::Columns",1,"int");
    if(lua_gettop(L)>=2 && !SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::Columns",2,"char const *");
    if(lua_gettop(L)>=3 && !lua_isboolean(L,3)) SWIG_fail_arg("ImGui::Columns",3,"bool"); if(lua_gettop(L)>=1){
      arg1 = (int)lua_tonumber(L, 1);}  if(lua_gettop(L)>=2){ arg2 = (char *)lua_tostring(L, 2);}  if(lua_gettop(L)>=3){
      arg3 = (lua_toboolean(L, 3)!=0);}  ImGui::Columns(arg1,(char const *)arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_NextColumn(lua_State* L) { { int SWIG_arg = 0; SWIG_check_num_args("ImGui::NextColumn",0,0)
    ImGui::NextColumn(); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetColumnIndex(lua_State* L) { { int SWIG_arg = 0; int result; SWIG_check_num_args("ImGui::GetColumnIndex",0,0)
    result = (int)ImGui::GetColumnIndex(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetColumnWidth(lua_State* L) { { int SWIG_arg = 0; int arg1 = (int) -1 ; float result;
    SWIG_check_num_args("ImGui::GetColumnWidth",0,1)
    if(lua_gettop(L)>=1 && !lua_isnumber(L,1)) SWIG_fail_arg("ImGui::GetColumnWidth",1,"int"); if(lua_gettop(L)>=1){
      arg1 = (int)lua_tonumber(L, 1);}  result = (float)ImGui::GetColumnWidth(arg1);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SetColumnWidth(lua_State* L) { { int SWIG_arg = 0; int arg1 ; float arg2 ;
    SWIG_check_num_args("ImGui::SetColumnWidth",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SetColumnWidth",1,"int");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::SetColumnWidth",2,"float"); arg1 = (int)lua_tonumber(L, 1);
    arg2 = (float)lua_tonumber(L, 2); ImGui::SetColumnWidth(arg1,arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_GetColumnOffset(lua_State* L) { { int SWIG_arg = 0; int arg1 = (int) -1 ; float result;
    SWIG_check_num_args("ImGui::GetColumnOffset",0,1)
    if(lua_gettop(L)>=1 && !lua_isnumber(L,1)) SWIG_fail_arg("ImGui::GetColumnOffset",1,"int"); if(lua_gettop(L)>=1){
      arg1 = (int)lua_tonumber(L, 1);}  result = (float)ImGui::GetColumnOffset(arg1);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SetColumnOffset(lua_State* L) { { int SWIG_arg = 0; int arg1 ; float arg2 ;
    SWIG_check_num_args("ImGui::SetColumnOffset",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SetColumnOffset",1,"int");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::SetColumnOffset",2,"float"); arg1 = (int)lua_tonumber(L, 1);
    arg2 = (float)lua_tonumber(L, 2); ImGui::SetColumnOffset(arg1,arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_GetColumnsCount(lua_State* L) { { int SWIG_arg = 0; int result;
    SWIG_check_num_args("ImGui::GetColumnsCount",0,0) result = (int)ImGui::GetColumnsCount();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_BeginTabBar(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ;
    ImGuiTabBarFlags arg2 = (ImGuiTabBarFlags) 0 ; bool result; SWIG_check_num_args("ImGui::BeginTabBar",1,2)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::BeginTabBar",1,"char const *");
    if(lua_gettop(L)>=2 && !lua_isnumber(L,2)) SWIG_fail_arg("ImGui::BeginTabBar",2,"ImGuiTabBarFlags");
    arg1 = (char *)lua_tostring(L, 1); if(lua_gettop(L)>=2){ arg2 = (ImGuiTabBarFlags)lua_tonumber(L, 2);} 
    result = (bool)ImGui::BeginTabBar((char const *)arg1,arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_EndTabBar(lua_State* L) { { int SWIG_arg = 0; SWIG_check_num_args("ImGui::EndTabBar",0,0) ImGui::EndTabBar();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_BeginTabItem_3(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; bool *arg2 = (bool *) 0 ;
    ImGuiTabItemFlags arg3 ; bool result; SWIG_check_num_args("ImGui::BeginTabItem",3,3)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::BeginTabItem",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::BeginTabItem",2,"bool *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::BeginTabItem",3,"ImGuiTabItemFlags"); arg1 = (char *)lua_tostring(L, 1);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){ SWIG_fail_ptr("BeginTabItem_3",2,SWIGTYPE_p_bool); } 
    arg3 = (ImGuiTabItemFlags)lua_tonumber(L, 3); result = (bool)ImGui::BeginTabItem((char const *)arg1,arg2,arg3);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_BeginTabItem_2(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; bool *arg2 = (bool *) 0 ;
    bool result; SWIG_check_num_args("ImGui::BeginTabItem",2,2)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::BeginTabItem",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::BeginTabItem",2,"bool *"); arg1 = (char *)lua_tostring(L, 1);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){ SWIG_fail_ptr("BeginTabItem_2",2,SWIGTYPE_p_bool); } 
    result = (bool)ImGui::BeginTabItem((char const *)arg1,arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_BeginTabItem_1(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; bool result;
    SWIG_check_num_args("ImGui::BeginTabItem",1,1)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::BeginTabItem",1,"char const *"); arg1 = (char *)lua_tostring(L, 1);
    result = (bool)ImGui::BeginTabItem((char const *)arg1); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_EndTabItem(lua_State* L) { { int SWIG_arg = 0; SWIG_check_num_args("ImGui::EndTabItem",0,0)
    ImGui::EndTabItem(); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_TabItemButton(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ;
    ImGuiTabItemFlags arg2 = (ImGuiTabItemFlags) 0 ; bool result; SWIG_check_num_args("ImGui::TabItemButton",1,2)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::TabItemButton",1,"char const *");
    if(lua_gettop(L)>=2 && !lua_isnumber(L,2)) SWIG_fail_arg("ImGui::TabItemButton",2,"ImGuiTabItemFlags");
    arg1 = (char *)lua_tostring(L, 1); if(lua_gettop(L)>=2){ arg2 = (ImGuiTabItemFlags)lua_tonumber(L, 2);} 
    result = (bool)ImGui::TabItemButton((char const *)arg1,arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SetTabItemClosed(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ;
    SWIG_check_num_args("ImGui::SetTabItemClosed",1,1)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SetTabItemClosed",1,"char const *"); arg1 = (char *)lua_tostring(L, 1);
    ImGui::SetTabItemClosed((char const *)arg1); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_DockSpace(lua_State* L) { { int SWIG_arg = 0; ImGuiID arg1 ; ImVec2 const &arg2_defvalue = ImVec2(0, 0) ;
    ImVec2 *arg2 = (ImVec2 *) &arg2_defvalue ; ImGuiDockNodeFlags arg3 = (ImGuiDockNodeFlags) 0 ;
    ImGuiWindowClass *arg4 = (ImGuiWindowClass *) NULL ; ImGuiID result; SWIG_check_num_args("ImGui::DockSpace",1,4)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::DockSpace",1,"ImGuiID");
    if(lua_gettop(L)>=2 && !lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::DockSpace",2,"ImVec2 const &");
    if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DockSpace",3,"ImGuiDockNodeFlags");
    if(lua_gettop(L)>=4 && !SWIG_isptrtype(L,4)) SWIG_fail_arg("ImGui::DockSpace",4,"ImGuiWindowClass const *");
    SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative"); arg1 = (ImGuiID)lua_tonumber(L, 1);
    if(lua_gettop(L)>=2){ if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
        SWIG_fail_ptr("DockSpace",2,SWIGTYPE_p_ImVec2); }  }  if(lua_gettop(L)>=3){
      arg3 = (ImGuiDockNodeFlags)lua_tonumber(L, 3);}  if(lua_gettop(L)>=4){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImGuiWindowClass,0))){
        SWIG_fail_ptr("DockSpace",4,SWIGTYPE_p_ImGuiWindowClass); }  } 
    result = (ImGuiID)ImGui::DockSpace(arg1,(ImVec2 const &)*arg2,arg3,(ImGuiWindowClass const *)arg4);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_DockSpaceOverViewport(lua_State* L) { { int SWIG_arg = 0; ImGuiID arg1 = (ImGuiID) 0 ;
    ImGuiViewport *arg2 = (ImGuiViewport *) NULL ; ImGuiDockNodeFlags arg3 = (ImGuiDockNodeFlags) 0 ;
    ImGuiWindowClass *arg4 = (ImGuiWindowClass *) NULL ; ImGuiID result; SWIG_check_num_args("ImGui::DockSpaceOverViewport",0,4)
    if(lua_gettop(L)>=1 && !lua_isnumber(L,1)) SWIG_fail_arg("ImGui::DockSpaceOverViewport",1,"ImGuiID");
    if(lua_gettop(L)>=2 && !SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::DockSpaceOverViewport",2,"ImGuiViewport const *");
    if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DockSpaceOverViewport",3,"ImGuiDockNodeFlags");
    if(lua_gettop(L)>=4 && !SWIG_isptrtype(L,4)) SWIG_fail_arg("ImGui::DockSpaceOverViewport",4,"ImGuiWindowClass const *");
    if(lua_gettop(L)>=1){ SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
      arg1 = (ImGuiID)lua_tonumber(L, 1);}  if(lua_gettop(L)>=2){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiViewport,0))){
        SWIG_fail_ptr("DockSpaceOverViewport",2,SWIGTYPE_p_ImGuiViewport); }  }  if(lua_gettop(L)>=3){
      arg3 = (ImGuiDockNodeFlags)lua_tonumber(L, 3);}  if(lua_gettop(L)>=4){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImGuiWindowClass,0))){
        SWIG_fail_ptr("DockSpaceOverViewport",4,SWIGTYPE_p_ImGuiWindowClass); }  } 
    result = (ImGuiID)ImGui::DockSpaceOverViewport(arg1,(ImGuiViewport const *)arg2,arg3,(ImGuiWindowClass const *)arg4);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SetNextWindowDockID(lua_State* L) { { int SWIG_arg = 0; ImGuiID arg1 ; ImGuiCond arg2 = (ImGuiCond) 0 ;
    SWIG_check_num_args("ImGui::SetNextWindowDockID",1,2)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SetNextWindowDockID",1,"ImGuiID");
    if(lua_gettop(L)>=2 && !lua_isnumber(L,2)) SWIG_fail_arg("ImGui::SetNextWindowDockID",2,"ImGuiCond");
    SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative"); arg1 = (ImGuiID)lua_tonumber(L, 1);
    if(lua_gettop(L)>=2){ arg2 = (ImGuiCond)lua_tonumber(L, 2);}  ImGui::SetNextWindowDockID(arg1,arg2); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SetNextWindowClass(lua_State* L) { { int SWIG_arg = 0; ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ;
    SWIG_check_num_args("ImGui::SetNextWindowClass",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::SetNextWindowClass",1,"ImGuiWindowClass const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowClass,0))){
      SWIG_fail_ptr("SetNextWindowClass",1,SWIGTYPE_p_ImGuiWindowClass); } 
    ImGui::SetNextWindowClass((ImGuiWindowClass const *)arg1); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetWindowDockID(lua_State* L) { { int SWIG_arg = 0; ImGuiID result;
    SWIG_check_num_args("ImGui::GetWindowDockID",0,0) result = (ImGuiID)ImGui::GetWindowDockID();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_IsWindowDocked(lua_State* L) { { int SWIG_arg = 0; bool result;
    SWIG_check_num_args("ImGui::IsWindowDocked",0,0) result = (bool)ImGui::IsWindowDocked();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_LogToTTY(lua_State* L) { { int SWIG_arg = 0; int arg1 = (int) -1 ; SWIG_check_num_args("ImGui::LogToTTY",0,1)
    if(lua_gettop(L)>=1 && !lua_isnumber(L,1)) SWIG_fail_arg("ImGui::LogToTTY",1,"int"); if(lua_gettop(L)>=1){
      arg1 = (int)lua_tonumber(L, 1);}  ImGui::LogToTTY(arg1); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_LogToFile(lua_State* L) { { int SWIG_arg = 0; int arg1 = (int) -1 ; char *arg2 = (char *) NULL ;
    SWIG_check_num_args("ImGui::LogToFile",0,2)
    if(lua_gettop(L)>=1 && !lua_isnumber(L,1)) SWIG_fail_arg("ImGui::LogToFile",1,"int");
    if(lua_gettop(L)>=2 && !SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::LogToFile",2,"char const *"); if(lua_gettop(L)>=1){
      arg1 = (int)lua_tonumber(L, 1);}  if(lua_gettop(L)>=2){ arg2 = (char *)lua_tostring(L, 2);} 
    ImGui::LogToFile(arg1,(char const *)arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_LogToClipboard(lua_State* L) { { int SWIG_arg = 0; int arg1 = (int) -1 ;
    SWIG_check_num_args("ImGui::LogToClipboard",0,1)
    if(lua_gettop(L)>=1 && !lua_isnumber(L,1)) SWIG_fail_arg("ImGui::LogToClipboard",1,"int"); if(lua_gettop(L)>=1){
      arg1 = (int)lua_tonumber(L, 1);}  ImGui::LogToClipboard(arg1); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_LogFinish(lua_State* L) { { int SWIG_arg = 0; SWIG_check_num_args("ImGui::LogFinish",0,0) ImGui::LogFinish();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_LogButtons(lua_State* L) { { int SWIG_arg = 0; SWIG_check_num_args("ImGui::LogButtons",0,0)
    ImGui::LogButtons(); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_LogText(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; void *arg2 = 0 ;
    SWIG_check_num_args("ImGui::LogText",1,1) if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::LogText",1,"char const *");
    arg1 = (char *)lua_tostring(L, 1); ImGui::LogText((char const *)arg1,arg2); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_LogTextV(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; va_list arg2 ; va_list *argp2 ;
    SWIG_check_num_args("ImGui::LogTextV",2,2) if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::LogTextV",1,"char const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::LogTextV",2,"va_list"); arg1 = (char *)lua_tostring(L, 1);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_va_list,0))){ SWIG_fail_ptr("LogTextV",2,SWIGTYPE_p_va_list); }
     arg2 = *argp2; ImGui::LogTextV((char const *)arg1,SWIG_STD_MOVE(arg2)); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_BeginDragDropSource(lua_State* L) { { int SWIG_arg = 0; ImGuiDragDropFlags arg1 = (ImGuiDragDropFlags) 0 ;
    bool result; SWIG_check_num_args("ImGui::BeginDragDropSource",0,1)
    if(lua_gettop(L)>=1 && !lua_isnumber(L,1)) SWIG_fail_arg("ImGui::BeginDragDropSource",1,"ImGuiDragDropFlags");
    if(lua_gettop(L)>=1){ arg1 = (ImGuiDragDropFlags)lua_tonumber(L, 1);}  result = (bool)ImGui::BeginDragDropSource(arg1);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SetDragDropPayload(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; void *arg2 = (void *) 0 ;
    size_t arg3 ; ImGuiCond arg4 = (ImGuiCond) 0 ; bool result; SWIG_check_num_args("ImGui::SetDragDropPayload",3,4)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SetDragDropPayload",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::SetDragDropPayload",2,"void const *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::SetDragDropPayload",3,"size_t");
    if(lua_gettop(L)>=4 && !lua_isnumber(L,4)) SWIG_fail_arg("ImGui::SetDragDropPayload",4,"ImGuiCond");
    arg1 = (char *)lua_tostring(L, 1); arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"SetDragDropPayload");
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative"); arg3 = (size_t)lua_tonumber(L, 3);
    if(lua_gettop(L)>=4){ arg4 = (ImGuiCond)lua_tonumber(L, 4);} 
    result = (bool)ImGui::SetDragDropPayload((char const *)arg1,(void const *)arg2,arg3,arg4);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_EndDragDropSource(lua_State* L) { { int SWIG_arg = 0; SWIG_check_num_args("ImGui::EndDragDropSource",0,0)
    ImGui::EndDragDropSource(); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_BeginDragDropTarget(lua_State* L) { { int SWIG_arg = 0; bool result;
    SWIG_check_num_args("ImGui::BeginDragDropTarget",0,0) result = (bool)ImGui::BeginDragDropTarget();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_AcceptDragDropPayload(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ;
    ImGuiDragDropFlags arg2 = (ImGuiDragDropFlags) 0 ; ImGuiPayload *result = 0 ;
    SWIG_check_num_args("ImGui::AcceptDragDropPayload",1,2)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::AcceptDragDropPayload",1,"char const *");
    if(lua_gettop(L)>=2 && !lua_isnumber(L,2)) SWIG_fail_arg("ImGui::AcceptDragDropPayload",2,"ImGuiDragDropFlags");
    arg1 = (char *)lua_tostring(L, 1); if(lua_gettop(L)>=2){ arg2 = (ImGuiDragDropFlags)lua_tonumber(L, 2);} 
    result = (ImGuiPayload *)ImGui::AcceptDragDropPayload((char const *)arg1,arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiPayload,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_EndDragDropTarget(lua_State* L) { { int SWIG_arg = 0; SWIG_check_num_args("ImGui::EndDragDropTarget",0,0)
    ImGui::EndDragDropTarget(); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetDragDropPayload(lua_State* L) { { int SWIG_arg = 0; ImGuiPayload *result = 0 ;
    SWIG_check_num_args("ImGui::GetDragDropPayload",0,0) result = (ImGuiPayload *)ImGui::GetDragDropPayload();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiPayload,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_BeginDisabled(lua_State* L) { { int SWIG_arg = 0; bool arg1 = (bool) true ;
    SWIG_check_num_args("ImGui::BeginDisabled",0,1)
    if(lua_gettop(L)>=1 && !lua_isboolean(L,1)) SWIG_fail_arg("ImGui::BeginDisabled",1,"bool"); if(lua_gettop(L)>=1){
      arg1 = (lua_toboolean(L, 1)!=0);}  ImGui::BeginDisabled(arg1); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_EndDisabled(lua_State* L) { { int SWIG_arg = 0; SWIG_check_num_args("ImGui::EndDisabled",0,0)
    ImGui::EndDisabled(); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_PushClipRect(lua_State* L) { { int SWIG_arg = 0; ImVec2 *arg1 = 0 ; ImVec2 *arg2 = 0 ; bool arg3 ;
    SWIG_check_num_args("ImGui::PushClipRect",3,3)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::PushClipRect",1,"ImVec2 const &");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::PushClipRect",2,"ImVec2 const &");
    if(!lua_isboolean(L,3)) SWIG_fail_arg("ImGui::PushClipRect",3,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){ SWIG_fail_ptr("PushClipRect",1,SWIGTYPE_p_ImVec2); }
     if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("PushClipRect",2,SWIGTYPE_p_ImVec2); }  arg3 = (lua_toboolean(L, 3)!=0);
    ImGui::PushClipRect((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_PopClipRect(lua_State* L) { { int SWIG_arg = 0; SWIG_check_num_args("ImGui::PopClipRect",0,0)
    ImGui::PopClipRect(); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SetItemDefaultFocus(lua_State* L) { { int SWIG_arg = 0; SWIG_check_num_args("ImGui::SetItemDefaultFocus",0,0)
    ImGui::SetItemDefaultFocus(); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SetKeyboardFocusHere(lua_State* L) { { int SWIG_arg = 0; int arg1 = (int) 0 ;
    SWIG_check_num_args("ImGui::SetKeyboardFocusHere",0,1)
    if(lua_gettop(L)>=1 && !lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SetKeyboardFocusHere",1,"int"); if(lua_gettop(L)>=1){
      arg1 = (int)lua_tonumber(L, 1);}  ImGui::SetKeyboardFocusHere(arg1); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_SetNavCursorVisible(lua_State* L) { { int SWIG_arg = 0; bool arg1 ;
    SWIG_check_num_args("ImGui::SetNavCursorVisible",1,1)
    if(!lua_isboolean(L,1)) SWIG_fail_arg("ImGui::SetNavCursorVisible",1,"bool"); arg1 = (lua_toboolean(L, 1)!=0);
    ImGui::SetNavCursorVisible(arg1); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SetNextItemAllowOverlap(lua_State* L) { { int SWIG_arg = 0;
    SWIG_check_num_args("ImGui::SetNextItemAllowOverlap",0,0) ImGui::SetNextItemAllowOverlap(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_IsItemHovered(lua_State* L) { { int SWIG_arg = 0; ImGuiHoveredFlags arg1 = (ImGuiHoveredFlags) 0 ; bool result;
    SWIG_check_num_args("ImGui::IsItemHovered",0,1)
    if(lua_gettop(L)>=1 && !lua_isnumber(L,1)) SWIG_fail_arg("ImGui::IsItemHovered",1,"ImGuiHoveredFlags");
    if(lua_gettop(L)>=1){ arg1 = (ImGuiHoveredFlags)lua_tonumber(L, 1);}  result = (bool)ImGui::IsItemHovered(arg1);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_IsItemActive(lua_State* L) { { int SWIG_arg = 0; bool result; SWIG_check_num_args("ImGui::IsItemActive",0,0)
    result = (bool)ImGui::IsItemActive(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_IsItemFocused(lua_State* L) { { int SWIG_arg = 0; bool result; SWIG_check_num_args("ImGui::IsItemFocused",0,0)
    result = (bool)ImGui::IsItemFocused(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }
   lua_error(L); return 0; }
static int _wrap_IsItemClicked(lua_State* L) { { int SWIG_arg = 0; ImGuiMouseButton arg1 = (ImGuiMouseButton) 0 ; bool result;
    SWIG_check_num_args("ImGui::IsItemClicked",0,1)
    if(lua_gettop(L)>=1 && !lua_isnumber(L,1)) SWIG_fail_arg("ImGui::IsItemClicked",1,"ImGuiMouseButton"); if(lua_gettop(L)>=1){
      arg1 = (ImGuiMouseButton)lua_tonumber(L, 1);}  result = (bool)ImGui::IsItemClicked(arg1);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_IsItemVisible(lua_State* L) { { int SWIG_arg = 0; bool result; SWIG_check_num_args("ImGui::IsItemVisible",0,0)
    result = (bool)ImGui::IsItemVisible(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }
   lua_error(L); return 0; }
static int _wrap_IsItemEdited(lua_State* L) { { int SWIG_arg = 0; bool result; SWIG_check_num_args("ImGui::IsItemEdited",0,0)
    result = (bool)ImGui::IsItemEdited(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_IsItemActivated(lua_State* L) { { int SWIG_arg = 0; bool result;
    SWIG_check_num_args("ImGui::IsItemActivated",0,0) result = (bool)ImGui::IsItemActivated();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_IsItemDeactivated(lua_State* L) { { int SWIG_arg = 0; bool result;
    SWIG_check_num_args("ImGui::IsItemDeactivated",0,0) result = (bool)ImGui::IsItemDeactivated();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_IsItemDeactivatedAfterEdit(lua_State* L) { { int SWIG_arg = 0; bool result;
    SWIG_check_num_args("ImGui::IsItemDeactivatedAfterEdit",0,0) result = (bool)ImGui::IsItemDeactivatedAfterEdit();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_IsItemToggledOpen(lua_State* L) { { int SWIG_arg = 0; bool result;
    SWIG_check_num_args("ImGui::IsItemToggledOpen",0,0) result = (bool)ImGui::IsItemToggledOpen();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_IsAnyItemHovered(lua_State* L) { { int SWIG_arg = 0; bool result;
    SWIG_check_num_args("ImGui::IsAnyItemHovered",0,0) result = (bool)ImGui::IsAnyItemHovered();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_IsAnyItemActive(lua_State* L) { { int SWIG_arg = 0; bool result;
    SWIG_check_num_args("ImGui::IsAnyItemActive",0,0) result = (bool)ImGui::IsAnyItemActive();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_IsAnyItemFocused(lua_State* L) { { int SWIG_arg = 0; bool result;
    SWIG_check_num_args("ImGui::IsAnyItemFocused",0,0) result = (bool)ImGui::IsAnyItemFocused();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetItemID(lua_State* L) { { int SWIG_arg = 0; ImGuiID result; SWIG_check_num_args("ImGui::GetItemID",0,0)
    result = (ImGuiID)ImGui::GetItemID(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetItemRectMin(lua_State* L) { { int SWIG_arg = 0; ImVec2 result;
    SWIG_check_num_args("ImGui::GetItemRectMin",0,0) result = ImGui::GetItemRectMin(); {
      ImVec2 * resultptr = new ImVec2(result); SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++; } 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetItemRectMax(lua_State* L) { { int SWIG_arg = 0; ImVec2 result;
    SWIG_check_num_args("ImGui::GetItemRectMax",0,0) result = ImGui::GetItemRectMax(); {
      ImVec2 * resultptr = new ImVec2(result); SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++; } 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetItemRectSize(lua_State* L) { { int SWIG_arg = 0; ImVec2 result;
    SWIG_check_num_args("ImGui::GetItemRectSize",0,0) result = ImGui::GetItemRectSize(); {
      ImVec2 * resultptr = new ImVec2(result); SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++; } 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetMainViewport(lua_State* L) { { int SWIG_arg = 0; ImGuiViewport *result = 0 ;
    SWIG_check_num_args("ImGui::GetMainViewport",0,0) result = (ImGuiViewport *)ImGui::GetMainViewport();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiViewport,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_GetBackgroundDrawList(lua_State* L) { { int SWIG_arg = 0; ImGuiViewport *arg1 = (ImGuiViewport *) NULL ;
    ImDrawList *result = 0 ; SWIG_check_num_args("ImGui::GetBackgroundDrawList",0,1)
    if(lua_gettop(L)>=1 && !SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::GetBackgroundDrawList",1,"ImGuiViewport *");
    if(lua_gettop(L)>=1){ if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
        SWIG_fail_ptr("GetBackgroundDrawList",1,SWIGTYPE_p_ImGuiViewport); }  } 
    result = (ImDrawList *)ImGui::GetBackgroundDrawList(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImDrawList,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_GetForegroundDrawList(lua_State* L) { { int SWIG_arg = 0; ImGuiViewport *arg1 = (ImGuiViewport *) NULL ;
    ImDrawList *result = 0 ; SWIG_check_num_args("ImGui::GetForegroundDrawList",0,1)
    if(lua_gettop(L)>=1 && !SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::GetForegroundDrawList",1,"ImGuiViewport *");
    if(lua_gettop(L)>=1){ if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
        SWIG_fail_ptr("GetForegroundDrawList",1,SWIGTYPE_p_ImGuiViewport); }  } 
    result = (ImDrawList *)ImGui::GetForegroundDrawList(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImDrawList,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_IsRectVisible__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ImVec2 *arg1 = 0 ; bool result;
    SWIG_check_num_args("ImGui::IsRectVisible",1,1)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::IsRectVisible",1,"ImVec2 const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("IsRectVisible",1,SWIGTYPE_p_ImVec2); }  result = (bool)ImGui::IsRectVisible((ImVec2 const &)*arg1);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_IsRectVisible__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ImVec2 *arg1 = 0 ; ImVec2 *arg2 = 0 ; bool result;
    SWIG_check_num_args("ImGui::IsRectVisible",2,2)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::IsRectVisible",1,"ImVec2 const &");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::IsRectVisible",2,"ImVec2 const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("IsRectVisible",1,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("IsRectVisible",2,SWIGTYPE_p_ImVec2); } 
    result = (bool)ImGui::IsRectVisible((ImVec2 const &)*arg1,(ImVec2 const &)*arg2);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_IsRectVisible(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v = 0; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_IsRectVisible__SWIG_0(L);}  }  if (argc == 2) { int _v = 0; {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_IsRectVisible__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IsRectVisible'\n" "  Possible C/C++ prototypes are:\n"
  "    ImGui::IsRectVisible(ImVec2 const &)\n" "    ImGui::IsRectVisible(ImVec2 const &,ImVec2 const &)\n");
  lua_error(L);return 0; }
static int _wrap_GetTime(lua_State* L) { { int SWIG_arg = 0; double result; SWIG_check_num_args("ImGui::GetTime",0,0)
    result = (double)ImGui::GetTime(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_GetFrameCount(lua_State* L) { { int SWIG_arg = 0; int result; SWIG_check_num_args("ImGui::GetFrameCount",0,0)
    result = (int)ImGui::GetFrameCount(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetDrawListSharedData(lua_State* L) { { int SWIG_arg = 0; ImDrawListSharedData *result = 0 ;
    SWIG_check_num_args("ImGui::GetDrawListSharedData",0,0) result = (ImDrawListSharedData *)ImGui::GetDrawListSharedData();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImDrawListSharedData,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_GetStyleColorName(lua_State* L) { { int SWIG_arg = 0; ImGuiCol arg1 ; char *result = 0 ;
    SWIG_check_num_args("ImGui::GetStyleColorName",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::GetStyleColorName",1,"ImGuiCol"); arg1 = (ImGuiCol)lua_tonumber(L, 1);
    result = (char *)ImGui::GetStyleColorName(arg1); lua_pushstring(L,(const char *)result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SetStateStorage(lua_State* L) { { int SWIG_arg = 0; ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
    SWIG_check_num_args("ImGui::SetStateStorage",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::SetStateStorage",1,"ImGuiStorage *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStorage,0))){
      SWIG_fail_ptr("SetStateStorage",1,SWIGTYPE_p_ImGuiStorage); }  ImGui::SetStateStorage(arg1); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetStateStorage(lua_State* L) { { int SWIG_arg = 0; ImGuiStorage *result = 0 ;
    SWIG_check_num_args("ImGui::GetStateStorage",0,0) result = (ImGuiStorage *)ImGui::GetStateStorage();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiStorage,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_CalcTextSize(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; char *arg2 = (char *) NULL ;
    bool arg3 = (bool) false ; float arg4 = (float) -1.0 ; ImVec2 result; SWIG_check_num_args("ImGui::CalcTextSize",1,4)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::CalcTextSize",1,"char const *");
    if(lua_gettop(L)>=2 && !SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGui::CalcTextSize",2,"char const *");
    if(lua_gettop(L)>=3 && !lua_isboolean(L,3)) SWIG_fail_arg("ImGui::CalcTextSize",3,"bool");
    if(lua_gettop(L)>=4 && !lua_isnumber(L,4)) SWIG_fail_arg("ImGui::CalcTextSize",4,"float");
    arg1 = (char *)lua_tostring(L, 1); if(lua_gettop(L)>=2){ arg2 = (char *)lua_tostring(L, 2);}  if(lua_gettop(L)>=3){
      arg3 = (lua_toboolean(L, 3)!=0);}  if(lua_gettop(L)>=4){ arg4 = (float)lua_tonumber(L, 4);} 
    result = ImGui::CalcTextSize((char const *)arg1,(char const *)arg2,arg3,arg4); { ImVec2 * resultptr = new ImVec2(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ColorConvertU32ToFloat4(lua_State* L) { { int SWIG_arg = 0; ImU32 arg1 ; ImVec4 result;
    SWIG_check_num_args("ImGui::ColorConvertU32ToFloat4",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::ColorConvertU32ToFloat4",1,"ImU32");
    SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative"); arg1 = (ImU32)lua_tonumber(L, 1);
    result = ImGui::ColorConvertU32ToFloat4(arg1); { ImVec4 * resultptr = new ImVec4(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec4,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ColorConvertFloat4ToU32(lua_State* L) { { int SWIG_arg = 0; ImVec4 *arg1 = 0 ; ImU32 result;
    SWIG_check_num_args("ImGui::ColorConvertFloat4ToU32",1,1)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::ColorConvertFloat4ToU32",1,"ImVec4 const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec4,0))){
      SWIG_fail_ptr("ColorConvertFloat4ToU32",1,SWIGTYPE_p_ImVec4); } 
    result = (ImU32)ImGui::ColorConvertFloat4ToU32((ImVec4 const &)*arg1); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ColorConvertRGBtoHSV(lua_State* L) { { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
    float *arg4 = 0 ; float *arg5 = 0 ; float *arg6 = 0 ; SWIG_check_num_args("ImGui::ColorConvertRGBtoHSV",6,6)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::ColorConvertRGBtoHSV",1,"float");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::ColorConvertRGBtoHSV",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::ColorConvertRGBtoHSV",3,"float");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImGui::ColorConvertRGBtoHSV",4,"float &");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ImGui::ColorConvertRGBtoHSV",5,"float &");
    if(!lua_isuserdata(L,6)) SWIG_fail_arg("ImGui::ColorConvertRGBtoHSV",6,"float &"); arg1 = (float)lua_tonumber(L, 1);
    arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("ColorConvertRGBtoHSV",4,SWIGTYPE_p_float); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("ColorConvertRGBtoHSV",5,SWIGTYPE_p_float); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("ColorConvertRGBtoHSV",6,SWIGTYPE_p_float); } 
    ImGui::ColorConvertRGBtoHSV(arg1,arg2,arg3,*arg4,*arg5,*arg6); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ColorConvertHSVtoRGB(lua_State* L) { { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
    float *arg4 = 0 ; float *arg5 = 0 ; float *arg6 = 0 ; SWIG_check_num_args("ImGui::ColorConvertHSVtoRGB",6,6)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::ColorConvertHSVtoRGB",1,"float");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::ColorConvertHSVtoRGB",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::ColorConvertHSVtoRGB",3,"float");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImGui::ColorConvertHSVtoRGB",4,"float &");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ImGui::ColorConvertHSVtoRGB",5,"float &");
    if(!lua_isuserdata(L,6)) SWIG_fail_arg("ImGui::ColorConvertHSVtoRGB",6,"float &"); arg1 = (float)lua_tonumber(L, 1);
    arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("ColorConvertHSVtoRGB",4,SWIGTYPE_p_float); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("ColorConvertHSVtoRGB",5,SWIGTYPE_p_float); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("ColorConvertHSVtoRGB",6,SWIGTYPE_p_float); } 
    ImGui::ColorConvertHSVtoRGB(arg1,arg2,arg3,*arg4,*arg5,*arg6); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_IsKeyDown(lua_State* L) { { int SWIG_arg = 0; ImGuiKey arg1 ; bool result;
    SWIG_check_num_args("ImGui::IsKeyDown",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::IsKeyDown",1,"ImGuiKey");
    arg1 = (ImGuiKey)(int)lua_tonumber(L, 1); result = (bool)ImGui::IsKeyDown(arg1);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_IsKeyPressed(lua_State* L) { { int SWIG_arg = 0; ImGuiKey arg1 ; bool arg2 = (bool) true ; bool result;
    SWIG_check_num_args("ImGui::IsKeyPressed",1,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::IsKeyPressed",1,"ImGuiKey");
    if(lua_gettop(L)>=2 && !lua_isboolean(L,2)) SWIG_fail_arg("ImGui::IsKeyPressed",2,"bool");
    arg1 = (ImGuiKey)(int)lua_tonumber(L, 1); if(lua_gettop(L)>=2){ arg2 = (lua_toboolean(L, 2)!=0);} 
    result = (bool)ImGui::IsKeyPressed(arg1,arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_IsKeyReleased(lua_State* L) { { int SWIG_arg = 0; ImGuiKey arg1 ; bool result;
    SWIG_check_num_args("ImGui::IsKeyReleased",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::IsKeyReleased",1,"ImGuiKey");
    arg1 = (ImGuiKey)(int)lua_tonumber(L, 1); result = (bool)ImGui::IsKeyReleased(arg1);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_IsKeyChordPressed(lua_State* L) { { int SWIG_arg = 0; ImGuiKeyChord arg1 ; bool result;
    SWIG_check_num_args("ImGui::IsKeyChordPressed",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::IsKeyChordPressed",1,"ImGuiKeyChord");
    arg1 = (ImGuiKeyChord)lua_tonumber(L, 1); result = (bool)ImGui::IsKeyChordPressed(arg1);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetKeyPressedAmount(lua_State* L) { { int SWIG_arg = 0; ImGuiKey arg1 ; float arg2 ; float arg3 ; int result;
    SWIG_check_num_args("ImGui::GetKeyPressedAmount",3,3)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::GetKeyPressedAmount",1,"ImGuiKey");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::GetKeyPressedAmount",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::GetKeyPressedAmount",3,"float"); arg1 = (ImGuiKey)(int)lua_tonumber(L, 1);
    arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
    result = (int)ImGui::GetKeyPressedAmount(arg1,arg2,arg3); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetKeyName(lua_State* L) { { int SWIG_arg = 0; ImGuiKey arg1 ; char *result = 0 ;
    SWIG_check_num_args("ImGui::GetKeyName",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::GetKeyName",1,"ImGuiKey");
    arg1 = (ImGuiKey)(int)lua_tonumber(L, 1); result = (char *)ImGui::GetKeyName(arg1);
    lua_pushstring(L,(const char *)result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SetNextFrameWantCaptureKeyboard(lua_State* L) { { int SWIG_arg = 0; bool arg1 ;
    SWIG_check_num_args("ImGui::SetNextFrameWantCaptureKeyboard",1,1)
    if(!lua_isboolean(L,1)) SWIG_fail_arg("ImGui::SetNextFrameWantCaptureKeyboard",1,"bool"); arg1 = (lua_toboolean(L, 1)!=0);
    ImGui::SetNextFrameWantCaptureKeyboard(arg1); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Shortcut(lua_State* L) { { int SWIG_arg = 0; ImGuiKeyChord arg1 ; ImGuiInputFlags arg2 = (ImGuiInputFlags) 0 ;
    bool result; SWIG_check_num_args("ImGui::Shortcut",1,2)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::Shortcut",1,"ImGuiKeyChord");
    if(lua_gettop(L)>=2 && !lua_isnumber(L,2)) SWIG_fail_arg("ImGui::Shortcut",2,"ImGuiInputFlags");
    arg1 = (ImGuiKeyChord)lua_tonumber(L, 1); if(lua_gettop(L)>=2){ arg2 = (ImGuiInputFlags)lua_tonumber(L, 2);} 
    result = (bool)ImGui::Shortcut(arg1,arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SetNextItemShortcut(lua_State* L) { { int SWIG_arg = 0; ImGuiKeyChord arg1 ;
    ImGuiInputFlags arg2 = (ImGuiInputFlags) 0 ; SWIG_check_num_args("ImGui::SetNextItemShortcut",1,2)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SetNextItemShortcut",1,"ImGuiKeyChord");
    if(lua_gettop(L)>=2 && !lua_isnumber(L,2)) SWIG_fail_arg("ImGui::SetNextItemShortcut",2,"ImGuiInputFlags");
    arg1 = (ImGuiKeyChord)lua_tonumber(L, 1); if(lua_gettop(L)>=2){ arg2 = (ImGuiInputFlags)lua_tonumber(L, 2);} 
    ImGui::SetNextItemShortcut(arg1,arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SetItemKeyOwner(lua_State* L) { { int SWIG_arg = 0; ImGuiKey arg1 ;
    SWIG_check_num_args("ImGui::SetItemKeyOwner",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SetItemKeyOwner",1,"ImGuiKey"); arg1 = (ImGuiKey)(int)lua_tonumber(L, 1);
    ImGui::SetItemKeyOwner(arg1); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_IsMouseDown(lua_State* L) { { int SWIG_arg = 0; ImGuiMouseButton arg1 ; bool result;
    SWIG_check_num_args("ImGui::IsMouseDown",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::IsMouseDown",1,"ImGuiMouseButton");
    arg1 = (ImGuiMouseButton)lua_tonumber(L, 1); result = (bool)ImGui::IsMouseDown(arg1);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_IsMouseClicked(lua_State* L) { { int SWIG_arg = 0; ImGuiMouseButton arg1 ; bool arg2 = (bool) false ;
    bool result; SWIG_check_num_args("ImGui::IsMouseClicked",1,2)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::IsMouseClicked",1,"ImGuiMouseButton");
    if(lua_gettop(L)>=2 && !lua_isboolean(L,2)) SWIG_fail_arg("ImGui::IsMouseClicked",2,"bool");
    arg1 = (ImGuiMouseButton)lua_tonumber(L, 1); if(lua_gettop(L)>=2){ arg2 = (lua_toboolean(L, 2)!=0);} 
    result = (bool)ImGui::IsMouseClicked(arg1,arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_IsMouseReleased(lua_State* L) { { int SWIG_arg = 0; ImGuiMouseButton arg1 ; bool result;
    SWIG_check_num_args("ImGui::IsMouseReleased",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::IsMouseReleased",1,"ImGuiMouseButton");
    arg1 = (ImGuiMouseButton)lua_tonumber(L, 1); result = (bool)ImGui::IsMouseReleased(arg1);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_IsMouseDoubleClicked(lua_State* L) { { int SWIG_arg = 0; ImGuiMouseButton arg1 ; bool result;
    SWIG_check_num_args("ImGui::IsMouseDoubleClicked",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::IsMouseDoubleClicked",1,"ImGuiMouseButton");
    arg1 = (ImGuiMouseButton)lua_tonumber(L, 1); result = (bool)ImGui::IsMouseDoubleClicked(arg1);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetMouseClickedCount(lua_State* L) { { int SWIG_arg = 0; ImGuiMouseButton arg1 ; int result;
    SWIG_check_num_args("ImGui::GetMouseClickedCount",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::GetMouseClickedCount",1,"ImGuiMouseButton");
    arg1 = (ImGuiMouseButton)lua_tonumber(L, 1); result = (int)ImGui::GetMouseClickedCount(arg1);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_IsMouseHoveringRect(lua_State* L) { { int SWIG_arg = 0; ImVec2 *arg1 = 0 ; ImVec2 *arg2 = 0 ;
    bool arg3 = (bool) true ; bool result; SWIG_check_num_args("ImGui::IsMouseHoveringRect",2,3)
    if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImGui::IsMouseHoveringRect",1,"ImVec2 const &");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::IsMouseHoveringRect",2,"ImVec2 const &");
    if(lua_gettop(L)>=3 && !lua_isboolean(L,3)) SWIG_fail_arg("ImGui::IsMouseHoveringRect",3,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("IsMouseHoveringRect",1,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("IsMouseHoveringRect",2,SWIGTYPE_p_ImVec2); }  if(lua_gettop(L)>=3){ arg3 = (lua_toboolean(L, 3)!=0);} 
    result = (bool)ImGui::IsMouseHoveringRect((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,arg3);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_IsMousePosValid(lua_State* L) { { int SWIG_arg = 0; ImVec2 *arg1 = (ImVec2 *) NULL ; bool result;
    SWIG_check_num_args("ImGui::IsMousePosValid",0,1)
    if(lua_gettop(L)>=1 && !SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::IsMousePosValid",1,"ImVec2 const *");
    if(lua_gettop(L)>=1){ if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec2,0))){
        SWIG_fail_ptr("IsMousePosValid",1,SWIGTYPE_p_ImVec2); }  }  result = (bool)ImGui::IsMousePosValid((ImVec2 const *)arg1);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_IsAnyMouseDown(lua_State* L) { { int SWIG_arg = 0; bool result;
    SWIG_check_num_args("ImGui::IsAnyMouseDown",0,0) result = (bool)ImGui::IsAnyMouseDown();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetMousePos(lua_State* L) { { int SWIG_arg = 0; ImVec2 result; SWIG_check_num_args("ImGui::GetMousePos",0,0)
    result = ImGui::GetMousePos(); { ImVec2 * resultptr = new ImVec2(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_GetMousePosOnOpeningCurrentPopup(lua_State* L) { { int SWIG_arg = 0; ImVec2 result;
    SWIG_check_num_args("ImGui::GetMousePosOnOpeningCurrentPopup",0,0) result = ImGui::GetMousePosOnOpeningCurrentPopup(); {
      ImVec2 * resultptr = new ImVec2(result); SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++; } 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_IsMouseDragging(lua_State* L) { { int SWIG_arg = 0; ImGuiMouseButton arg1 ; float arg2 = (float) -1.0 ;
    bool result; SWIG_check_num_args("ImGui::IsMouseDragging",1,2)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::IsMouseDragging",1,"ImGuiMouseButton");
    if(lua_gettop(L)>=2 && !lua_isnumber(L,2)) SWIG_fail_arg("ImGui::IsMouseDragging",2,"float");
    arg1 = (ImGuiMouseButton)lua_tonumber(L, 1); if(lua_gettop(L)>=2){ arg2 = (float)lua_tonumber(L, 2);} 
    result = (bool)ImGui::IsMouseDragging(arg1,arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetMouseDragDelta(lua_State* L) { { int SWIG_arg = 0; ImGuiMouseButton arg1 = (ImGuiMouseButton) 0 ;
    float arg2 = (float) -1.0 ; ImVec2 result; SWIG_check_num_args("ImGui::GetMouseDragDelta",0,2)
    if(lua_gettop(L)>=1 && !lua_isnumber(L,1)) SWIG_fail_arg("ImGui::GetMouseDragDelta",1,"ImGuiMouseButton");
    if(lua_gettop(L)>=2 && !lua_isnumber(L,2)) SWIG_fail_arg("ImGui::GetMouseDragDelta",2,"float"); if(lua_gettop(L)>=1){
      arg1 = (ImGuiMouseButton)lua_tonumber(L, 1);}  if(lua_gettop(L)>=2){ arg2 = (float)lua_tonumber(L, 2);} 
    result = ImGui::GetMouseDragDelta(arg1,arg2); { ImVec2 * resultptr = new ImVec2(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ResetMouseDragDelta(lua_State* L) { { int SWIG_arg = 0; ImGuiMouseButton arg1 = (ImGuiMouseButton) 0 ;
    SWIG_check_num_args("ImGui::ResetMouseDragDelta",0,1)
    if(lua_gettop(L)>=1 && !lua_isnumber(L,1)) SWIG_fail_arg("ImGui::ResetMouseDragDelta",1,"ImGuiMouseButton");
    if(lua_gettop(L)>=1){ arg1 = (ImGuiMouseButton)lua_tonumber(L, 1);}  ImGui::ResetMouseDragDelta(arg1); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetMouseCursor(lua_State* L) { { int SWIG_arg = 0; ImGuiMouseCursor result;
    SWIG_check_num_args("ImGui::GetMouseCursor",0,0) result = (ImGuiMouseCursor)ImGui::GetMouseCursor();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SetMouseCursor(lua_State* L) { { int SWIG_arg = 0; ImGuiMouseCursor arg1 ;
    SWIG_check_num_args("ImGui::SetMouseCursor",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::SetMouseCursor",1,"ImGuiMouseCursor");
    arg1 = (ImGuiMouseCursor)lua_tonumber(L, 1); ImGui::SetMouseCursor(arg1); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_SetNextFrameWantCaptureMouse(lua_State* L) { { int SWIG_arg = 0; bool arg1 ;
    SWIG_check_num_args("ImGui::SetNextFrameWantCaptureMouse",1,1)
    if(!lua_isboolean(L,1)) SWIG_fail_arg("ImGui::SetNextFrameWantCaptureMouse",1,"bool"); arg1 = (lua_toboolean(L, 1)!=0);
    ImGui::SetNextFrameWantCaptureMouse(arg1); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetClipboardText(lua_State* L) { { int SWIG_arg = 0; char *result = 0 ;
    SWIG_check_num_args("ImGui::GetClipboardText",0,0) result = (char *)ImGui::GetClipboardText();
    lua_pushstring(L,(const char *)result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SetClipboardText(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ;
    SWIG_check_num_args("ImGui::SetClipboardText",1,1)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SetClipboardText",1,"char const *"); arg1 = (char *)lua_tostring(L, 1);
    ImGui::SetClipboardText((char const *)arg1); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_LoadIniSettingsFromDisk(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ;
    SWIG_check_num_args("ImGui::LoadIniSettingsFromDisk",1,1)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::LoadIniSettingsFromDisk",1,"char const *");
    arg1 = (char *)lua_tostring(L, 1); ImGui::LoadIniSettingsFromDisk((char const *)arg1); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_LoadIniSettingsFromMemory(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ;
    size_t arg2 = (size_t) 0 ; SWIG_check_num_args("ImGui::LoadIniSettingsFromMemory",1,2)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::LoadIniSettingsFromMemory",1,"char const *");
    if(lua_gettop(L)>=2 && !lua_isnumber(L,2)) SWIG_fail_arg("ImGui::LoadIniSettingsFromMemory",2,"size_t");
    arg1 = (char *)lua_tostring(L, 1); if(lua_gettop(L)>=2){
      SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (size_t)lua_tonumber(L, 2);} 
    ImGui::LoadIniSettingsFromMemory((char const *)arg1,arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SaveIniSettingsToDisk(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ;
    SWIG_check_num_args("ImGui::SaveIniSettingsToDisk",1,1)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::SaveIniSettingsToDisk",1,"char const *");
    arg1 = (char *)lua_tostring(L, 1); ImGui::SaveIniSettingsToDisk((char const *)arg1); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_SaveIniSettingsToMemory(lua_State* L) { { int SWIG_arg = 0; size_t *arg1 = (size_t *) NULL ; char *result = 0 ;
    SWIG_check_num_args("ImGui::SaveIniSettingsToMemory",0,1)
    if(lua_gettop(L)>=1 && !SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::SaveIniSettingsToMemory",1,"size_t *");
    if(lua_gettop(L)>=1){ if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_unsigned_int,0))){
        SWIG_fail_ptr("SaveIniSettingsToMemory",1,SWIGTYPE_p_unsigned_int); }  } 
    result = (char *)ImGui::SaveIniSettingsToMemory(arg1); lua_pushstring(L,(const char *)result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_DebugTextEncoding(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ;
    SWIG_check_num_args("ImGui::DebugTextEncoding",1,1)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DebugTextEncoding",1,"char const *");
    arg1 = (char *)lua_tostring(L, 1); ImGui::DebugTextEncoding((char const *)arg1); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_DebugFlashStyleColor(lua_State* L) { { int SWIG_arg = 0; ImGuiCol arg1 ;
    SWIG_check_num_args("ImGui::DebugFlashStyleColor",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::DebugFlashStyleColor",1,"ImGuiCol"); arg1 = (ImGuiCol)lua_tonumber(L, 1);
    ImGui::DebugFlashStyleColor(arg1); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_DebugStartItemPicker(lua_State* L) { { int SWIG_arg = 0; SWIG_check_num_args("ImGui::DebugStartItemPicker",0,0)
    ImGui::DebugStartItemPicker(); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_DebugCheckVersionAndDataLayout(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; size_t arg2 ;
    size_t arg3 ; size_t arg4 ; size_t arg5 ; size_t arg6 ; size_t arg7 ; bool result;
    SWIG_check_num_args("ImGui::DebugCheckVersionAndDataLayout",7,7)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DebugCheckVersionAndDataLayout",1,"char const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGui::DebugCheckVersionAndDataLayout",2,"size_t");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGui::DebugCheckVersionAndDataLayout",3,"size_t");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGui::DebugCheckVersionAndDataLayout",4,"size_t");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::DebugCheckVersionAndDataLayout",5,"size_t");
    if(!lua_isnumber(L,6)) SWIG_fail_arg("ImGui::DebugCheckVersionAndDataLayout",6,"size_t");
    if(!lua_isnumber(L,7)) SWIG_fail_arg("ImGui::DebugCheckVersionAndDataLayout",7,"size_t"); arg1 = (char *)lua_tostring(L, 1);
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (size_t)lua_tonumber(L, 2);
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative"); arg3 = (size_t)lua_tonumber(L, 3);
    SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative"); arg4 = (size_t)lua_tonumber(L, 4);
    SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative"); arg5 = (size_t)lua_tonumber(L, 5);
    SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative"); arg6 = (size_t)lua_tonumber(L, 6);
    SWIG_contract_assert((lua_tonumber(L,7)>=0),"number must not be negative"); arg7 = (size_t)lua_tonumber(L, 7);
    result = (bool)ImGui::DebugCheckVersionAndDataLayout((char const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_DebugLog(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; void *arg2 = 0 ;
    SWIG_check_num_args("ImGui::DebugLog",1,1) if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DebugLog",1,"char const *");
    arg1 = (char *)lua_tostring(L, 1); ImGui::DebugLog((char const *)arg1,arg2); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_DebugLogV(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; va_list arg2 ; va_list *argp2 ;
    SWIG_check_num_args("ImGui::DebugLogV",2,2)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::DebugLogV",1,"char const *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::DebugLogV",2,"va_list"); arg1 = (char *)lua_tostring(L, 1);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_va_list,0))){ SWIG_fail_ptr("DebugLogV",2,SWIGTYPE_p_va_list); }
     arg2 = *argp2; ImGui::DebugLogV((char const *)arg1,SWIG_STD_MOVE(arg2)); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_SetAllocatorFunctions(lua_State* L) { { int SWIG_arg = 0; ImGuiMemAllocFunc arg1 = (ImGuiMemAllocFunc) 0 ;
    ImGuiMemFreeFunc arg2 = (ImGuiMemFreeFunc) 0 ; void *arg3 = (void *) NULL ;
    SWIG_check_num_args("ImGui::SetAllocatorFunctions",2,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::SetAllocatorFunctions",1,"ImGuiMemAllocFunc");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::SetAllocatorFunctions",2,"ImGuiMemFreeFunc");
    if(lua_gettop(L)>=3 && !SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::SetAllocatorFunctions",3,"void *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_f_unsigned_int_p_void__p_void,0))){
      SWIG_fail_ptr("SetAllocatorFunctions",1,SWIGTYPE_p_f_unsigned_int_p_void__p_void); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_void_p_void__void,0))){
      SWIG_fail_ptr("SetAllocatorFunctions",2,SWIGTYPE_p_f_p_void_p_void__void); }  if(lua_gettop(L)>=3){
      arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"SetAllocatorFunctions");}  ImGui::SetAllocatorFunctions(arg1,arg2,arg3);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetAllocatorFunctions(lua_State* L) { { int SWIG_arg = 0; ImGuiMemAllocFunc *arg1 = (ImGuiMemAllocFunc *) 0 ;
    ImGuiMemFreeFunc *arg2 = (ImGuiMemFreeFunc *) 0 ; void **arg3 = (void **) 0 ;
    SWIG_check_num_args("ImGui::GetAllocatorFunctions",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::GetAllocatorFunctions",1,"ImGuiMemAllocFunc *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::GetAllocatorFunctions",2,"ImGuiMemFreeFunc *");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::GetAllocatorFunctions",3,"void **");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_f_unsigned_int_p_void__p_void,0))){
      SWIG_fail_ptr("GetAllocatorFunctions",1,SWIGTYPE_p_p_f_unsigned_int_p_void__p_void); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_f_p_void_p_void__void,0))){
      SWIG_fail_ptr("GetAllocatorFunctions",2,SWIGTYPE_p_p_f_p_void_p_void__void); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_void,0))){
      SWIG_fail_ptr("GetAllocatorFunctions",3,SWIGTYPE_p_p_void); }  ImGui::GetAllocatorFunctions(arg1,arg2,arg3);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_MemAlloc(lua_State* L) { { int SWIG_arg = 0; size_t arg1 ; void *result = 0 ;
    SWIG_check_num_args("ImGui::MemAlloc",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::MemAlloc",1,"size_t");
    SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative"); arg1 = (size_t)lua_tonumber(L, 1);
    result = (void *)ImGui::MemAlloc(arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++;  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_MemFree(lua_State* L) { { int SWIG_arg = 0; void *arg1 = (void *) 0 ; SWIG_check_num_args("ImGui::MemFree",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::MemFree",1,"void *"); arg1=(void *)SWIG_MustGetPtr(L,1,0,0,1,"MemFree");
    ImGui::MemFree(arg1); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_UpdatePlatformWindows(lua_State* L) { { int SWIG_arg = 0;
    SWIG_check_num_args("ImGui::UpdatePlatformWindows",0,0) ImGui::UpdatePlatformWindows(); return SWIG_arg; fail: SWIGUNUSED; }
   lua_error(L); return 0; }
static int _wrap_RenderPlatformWindowsDefault(lua_State* L) { { int SWIG_arg = 0; void *arg1 = (void *) NULL ;
    void *arg2 = (void *) NULL ; SWIG_check_num_args("ImGui::RenderPlatformWindowsDefault",0,2)
    if(lua_gettop(L)>=1 && !SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::RenderPlatformWindowsDefault",1,"void *");
    if(lua_gettop(L)>=2 && !SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::RenderPlatformWindowsDefault",2,"void *");
    if(lua_gettop(L)>=1){ arg1=(void *)SWIG_MustGetPtr(L,1,0,0,1,"RenderPlatformWindowsDefault");}  if(lua_gettop(L)>=2){
      arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"RenderPlatformWindowsDefault");}  ImGui::RenderPlatformWindowsDefault(arg1,arg2);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_DestroyPlatformWindows(lua_State* L) { { int SWIG_arg = 0;
    SWIG_check_num_args("ImGui::DestroyPlatformWindows",0,0) ImGui::DestroyPlatformWindows(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_FindViewportByID(lua_State* L) { { int SWIG_arg = 0; ImGuiID arg1 ; ImGuiViewport *result = 0 ;
    SWIG_check_num_args("ImGui::FindViewportByID",1,1)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::FindViewportByID",1,"ImGuiID");
    SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative"); arg1 = (ImGuiID)lua_tonumber(L, 1);
    result = (ImGuiViewport *)ImGui::FindViewportByID(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiViewport,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_FindViewportByPlatformHandle(lua_State* L) { { int SWIG_arg = 0; void *arg1 = (void *) 0 ;
    ImGuiViewport *result = 0 ; SWIG_check_num_args("ImGui::FindViewportByPlatformHandle",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::FindViewportByPlatformHandle",1,"void *");
    arg1=(void *)SWIG_MustGetPtr(L,1,0,0,1,"FindViewportByPlatformHandle");
    result = (ImGuiViewport *)ImGui::FindViewportByPlatformHandle(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiViewport,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiTableSortSpecs_Specs_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiTableSortSpecs *arg1 = (ImGuiTableSortSpecs *) 0 ; ImGuiTableColumnSortSpecs *arg2 = (ImGuiTableColumnSortSpecs *) 0 ;
    SWIG_check_num_args("ImGuiTableSortSpecs::Specs",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTableSortSpecs::Specs",1,"ImGuiTableSortSpecs *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiTableSortSpecs::Specs",2,"ImGuiTableColumnSortSpecs const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTableSortSpecs,0))){
      SWIG_fail_ptr("ImGuiTableSortSpecs_Specs_set",1,SWIGTYPE_p_ImGuiTableSortSpecs); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiTableColumnSortSpecs,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("ImGuiTableSortSpecs_Specs_set",2,SWIGTYPE_p_ImGuiTableColumnSortSpecs); } 
    if (arg1) (arg1)->Specs = (ImGuiTableColumnSortSpecs const *)arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiTableSortSpecs_Specs_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiTableSortSpecs *arg1 = (ImGuiTableSortSpecs *) 0 ; ImGuiTableColumnSortSpecs *result = 0 ;
    SWIG_check_num_args("ImGuiTableSortSpecs::Specs",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTableSortSpecs::Specs",1,"ImGuiTableSortSpecs *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTableSortSpecs,0))){
      SWIG_fail_ptr("ImGuiTableSortSpecs_Specs_get",1,SWIGTYPE_p_ImGuiTableSortSpecs); } 
    result = (ImGuiTableColumnSortSpecs *) ((arg1)->Specs);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiTableColumnSortSpecs,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiTableSortSpecs_SpecsCount_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiTableSortSpecs *arg1 = (ImGuiTableSortSpecs *) 0 ; int arg2 ;
    SWIG_check_num_args("ImGuiTableSortSpecs::SpecsCount",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTableSortSpecs::SpecsCount",1,"ImGuiTableSortSpecs *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiTableSortSpecs::SpecsCount",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTableSortSpecs,0))){
      SWIG_fail_ptr("ImGuiTableSortSpecs_SpecsCount_set",1,SWIGTYPE_p_ImGuiTableSortSpecs); }  arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->SpecsCount = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiTableSortSpecs_SpecsCount_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiTableSortSpecs *arg1 = (ImGuiTableSortSpecs *) 0 ; int result;
    SWIG_check_num_args("ImGuiTableSortSpecs::SpecsCount",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTableSortSpecs::SpecsCount",1,"ImGuiTableSortSpecs *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTableSortSpecs,0))){
      SWIG_fail_ptr("ImGuiTableSortSpecs_SpecsCount_get",1,SWIGTYPE_p_ImGuiTableSortSpecs); } 
    result = (int) ((arg1)->SpecsCount); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }
   lua_error(L); return 0; }
static int _wrap_ImGuiTableSortSpecs_SpecsDirty_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiTableSortSpecs *arg1 = (ImGuiTableSortSpecs *) 0 ; bool arg2 ;
    SWIG_check_num_args("ImGuiTableSortSpecs::SpecsDirty",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTableSortSpecs::SpecsDirty",1,"ImGuiTableSortSpecs *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiTableSortSpecs::SpecsDirty",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTableSortSpecs,0))){
      SWIG_fail_ptr("ImGuiTableSortSpecs_SpecsDirty_set",1,SWIGTYPE_p_ImGuiTableSortSpecs); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->SpecsDirty = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiTableSortSpecs_SpecsDirty_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiTableSortSpecs *arg1 = (ImGuiTableSortSpecs *) 0 ; bool result;
    SWIG_check_num_args("ImGuiTableSortSpecs::SpecsDirty",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTableSortSpecs::SpecsDirty",1,"ImGuiTableSortSpecs *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTableSortSpecs,0))){
      SWIG_fail_ptr("ImGuiTableSortSpecs_SpecsDirty_get",1,SWIGTYPE_p_ImGuiTableSortSpecs); } 
    result = (bool) ((arg1)->SpecsDirty); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_new_ImGuiTableSortSpecs(lua_State* L) { { int SWIG_arg = 0; ImGuiTableSortSpecs *result = 0 ;
    SWIG_check_num_args("ImGuiTableSortSpecs::ImGuiTableSortSpecs",0,0)
    result = (ImGuiTableSortSpecs *)new ImGuiTableSortSpecs();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiTableSortSpecs,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static void swig_delete_ImGuiTableSortSpecs(void *obj) {
ImGuiTableSortSpecs *arg1 = (ImGuiTableSortSpecs *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiTableSortSpecs(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiTableSortSpecs);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiTableSortSpecs_attributes[] = {
    { "Specs", _wrap_ImGuiTableSortSpecs_Specs_get, _wrap_ImGuiTableSortSpecs_Specs_set },
    { "SpecsCount", _wrap_ImGuiTableSortSpecs_SpecsCount_get, _wrap_ImGuiTableSortSpecs_SpecsCount_set },
    { "SpecsDirty", _wrap_ImGuiTableSortSpecs_SpecsDirty_get, _wrap_ImGuiTableSortSpecs_SpecsDirty_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiTableSortSpecs_methods[]= {
    {0,0}
};
static swig_lua_method swig_ImGuiTableSortSpecs_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiTableSortSpecs_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiTableSortSpecs_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiTableSortSpecs_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiTableSortSpecs_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiTableSortSpecs_Sf_SwigStatic = {
    "ImGuiTableSortSpecs",
    swig_ImGuiTableSortSpecs_Sf_SwigStatic_methods,
    swig_ImGuiTableSortSpecs_Sf_SwigStatic_attributes,
    swig_ImGuiTableSortSpecs_Sf_SwigStatic_constants,
    swig_ImGuiTableSortSpecs_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiTableSortSpecs_bases[] = {0};
static const char *swig_ImGuiTableSortSpecs_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiTableSortSpecs = { "ImGuiTableSortSpecs", "ImGuiTableSortSpecs", &SWIGTYPE_p_ImGuiTableSortSpecs,_proxy__wrap_new_ImGuiTableSortSpecs, swig_delete_ImGuiTableSortSpecs, swig_ImGuiTableSortSpecs_methods, swig_ImGuiTableSortSpecs_attributes, &swig_ImGuiTableSortSpecs_Sf_SwigStatic, swig_ImGuiTableSortSpecs_meta, swig_ImGuiTableSortSpecs_bases, swig_ImGuiTableSortSpecs_base_names };

static int _wrap_ImGuiTableColumnSortSpecs_ColumnUserID_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiTableColumnSortSpecs *arg1 = (ImGuiTableColumnSortSpecs *) 0 ; ImGuiID arg2 ;
    SWIG_check_num_args("ImGuiTableColumnSortSpecs::ColumnUserID",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTableColumnSortSpecs::ColumnUserID",1,"ImGuiTableColumnSortSpecs *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiTableColumnSortSpecs::ColumnUserID",2,"ImGuiID");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTableColumnSortSpecs,0))){
      SWIG_fail_ptr("ImGuiTableColumnSortSpecs_ColumnUserID_set",1,SWIGTYPE_p_ImGuiTableColumnSortSpecs); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (ImGuiID)lua_tonumber(L, 2);
    if (arg1) (arg1)->ColumnUserID = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiTableColumnSortSpecs_ColumnUserID_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiTableColumnSortSpecs *arg1 = (ImGuiTableColumnSortSpecs *) 0 ; ImGuiID result;
    SWIG_check_num_args("ImGuiTableColumnSortSpecs::ColumnUserID",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTableColumnSortSpecs::ColumnUserID",1,"ImGuiTableColumnSortSpecs *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTableColumnSortSpecs,0))){
      SWIG_fail_ptr("ImGuiTableColumnSortSpecs_ColumnUserID_get",1,SWIGTYPE_p_ImGuiTableColumnSortSpecs); } 
    result = (ImGuiID) ((arg1)->ColumnUserID); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiTableColumnSortSpecs_ColumnIndex_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiTableColumnSortSpecs *arg1 = (ImGuiTableColumnSortSpecs *) 0 ; ImS16 arg2 ;
    SWIG_check_num_args("ImGuiTableColumnSortSpecs::ColumnIndex",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTableColumnSortSpecs::ColumnIndex",1,"ImGuiTableColumnSortSpecs *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiTableColumnSortSpecs::ColumnIndex",2,"ImS16");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTableColumnSortSpecs,0))){
      SWIG_fail_ptr("ImGuiTableColumnSortSpecs_ColumnIndex_set",1,SWIGTYPE_p_ImGuiTableColumnSortSpecs); } 
    arg2 = (ImS16)lua_tonumber(L, 2); if (arg1) (arg1)->ColumnIndex = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiTableColumnSortSpecs_ColumnIndex_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiTableColumnSortSpecs *arg1 = (ImGuiTableColumnSortSpecs *) 0 ; ImS16 result;
    SWIG_check_num_args("ImGuiTableColumnSortSpecs::ColumnIndex",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTableColumnSortSpecs::ColumnIndex",1,"ImGuiTableColumnSortSpecs *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTableColumnSortSpecs,0))){
      SWIG_fail_ptr("ImGuiTableColumnSortSpecs_ColumnIndex_get",1,SWIGTYPE_p_ImGuiTableColumnSortSpecs); } 
    result = (ImS16) ((arg1)->ColumnIndex); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiTableColumnSortSpecs_SortOrder_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiTableColumnSortSpecs *arg1 = (ImGuiTableColumnSortSpecs *) 0 ; ImS16 arg2 ;
    SWIG_check_num_args("ImGuiTableColumnSortSpecs::SortOrder",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTableColumnSortSpecs::SortOrder",1,"ImGuiTableColumnSortSpecs *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiTableColumnSortSpecs::SortOrder",2,"ImS16");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTableColumnSortSpecs,0))){
      SWIG_fail_ptr("ImGuiTableColumnSortSpecs_SortOrder_set",1,SWIGTYPE_p_ImGuiTableColumnSortSpecs); } 
    arg2 = (ImS16)lua_tonumber(L, 2); if (arg1) (arg1)->SortOrder = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiTableColumnSortSpecs_SortOrder_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiTableColumnSortSpecs *arg1 = (ImGuiTableColumnSortSpecs *) 0 ; ImS16 result;
    SWIG_check_num_args("ImGuiTableColumnSortSpecs::SortOrder",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTableColumnSortSpecs::SortOrder",1,"ImGuiTableColumnSortSpecs *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTableColumnSortSpecs,0))){
      SWIG_fail_ptr("ImGuiTableColumnSortSpecs_SortOrder_get",1,SWIGTYPE_p_ImGuiTableColumnSortSpecs); } 
    result = (ImS16) ((arg1)->SortOrder); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiTableColumnSortSpecs_SortDirection_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiTableColumnSortSpecs *arg1 = (ImGuiTableColumnSortSpecs *) 0 ; ImGuiSortDirection arg2 ;
    SWIG_check_num_args("ImGuiTableColumnSortSpecs::SortDirection",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTableColumnSortSpecs::SortDirection",1,"ImGuiTableColumnSortSpecs *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiTableColumnSortSpecs::SortDirection",2,"ImGuiSortDirection");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTableColumnSortSpecs,0))){
      SWIG_fail_ptr("ImGuiTableColumnSortSpecs_SortDirection_set",1,SWIGTYPE_p_ImGuiTableColumnSortSpecs); } 
    arg2 = (ImGuiSortDirection)(int)lua_tonumber(L, 2); if (arg1) (arg1)->SortDirection = arg2; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiTableColumnSortSpecs_SortDirection_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiTableColumnSortSpecs *arg1 = (ImGuiTableColumnSortSpecs *) 0 ; ImGuiSortDirection result;
    SWIG_check_num_args("ImGuiTableColumnSortSpecs::SortDirection",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTableColumnSortSpecs::SortDirection",1,"ImGuiTableColumnSortSpecs *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTableColumnSortSpecs,0))){
      SWIG_fail_ptr("ImGuiTableColumnSortSpecs_SortDirection_get",1,SWIGTYPE_p_ImGuiTableColumnSortSpecs); } 
    result = (ImGuiSortDirection) ((arg1)->SortDirection); lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_ImGuiTableColumnSortSpecs(lua_State* L) { { int SWIG_arg = 0; ImGuiTableColumnSortSpecs *result = 0 ;
    SWIG_check_num_args("ImGuiTableColumnSortSpecs::ImGuiTableColumnSortSpecs",0,0)
    result = (ImGuiTableColumnSortSpecs *)new ImGuiTableColumnSortSpecs();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiTableColumnSortSpecs,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static void swig_delete_ImGuiTableColumnSortSpecs(void *obj) {
ImGuiTableColumnSortSpecs *arg1 = (ImGuiTableColumnSortSpecs *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiTableColumnSortSpecs(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiTableColumnSortSpecs);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiTableColumnSortSpecs_attributes[] = {
    { "ColumnUserID", _wrap_ImGuiTableColumnSortSpecs_ColumnUserID_get, _wrap_ImGuiTableColumnSortSpecs_ColumnUserID_set },
    { "ColumnIndex", _wrap_ImGuiTableColumnSortSpecs_ColumnIndex_get, _wrap_ImGuiTableColumnSortSpecs_ColumnIndex_set },
    { "SortOrder", _wrap_ImGuiTableColumnSortSpecs_SortOrder_get, _wrap_ImGuiTableColumnSortSpecs_SortOrder_set },
    { "SortDirection", _wrap_ImGuiTableColumnSortSpecs_SortDirection_get, _wrap_ImGuiTableColumnSortSpecs_SortDirection_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiTableColumnSortSpecs_methods[]= {
    {0,0}
};
static swig_lua_method swig_ImGuiTableColumnSortSpecs_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiTableColumnSortSpecs_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiTableColumnSortSpecs_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiTableColumnSortSpecs_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiTableColumnSortSpecs_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiTableColumnSortSpecs_Sf_SwigStatic = {
    "ImGuiTableColumnSortSpecs",
    swig_ImGuiTableColumnSortSpecs_Sf_SwigStatic_methods,
    swig_ImGuiTableColumnSortSpecs_Sf_SwigStatic_attributes,
    swig_ImGuiTableColumnSortSpecs_Sf_SwigStatic_constants,
    swig_ImGuiTableColumnSortSpecs_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiTableColumnSortSpecs_bases[] = {0};
static const char *swig_ImGuiTableColumnSortSpecs_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiTableColumnSortSpecs = { "ImGuiTableColumnSortSpecs", "ImGuiTableColumnSortSpecs", &SWIGTYPE_p_ImGuiTableColumnSortSpecs,_proxy__wrap_new_ImGuiTableColumnSortSpecs, swig_delete_ImGuiTableColumnSortSpecs, swig_ImGuiTableColumnSortSpecs_methods, swig_ImGuiTableColumnSortSpecs_attributes, &swig_ImGuiTableColumnSortSpecs_Sf_SwigStatic, swig_ImGuiTableColumnSortSpecs_meta, swig_ImGuiTableColumnSortSpecs_bases, swig_ImGuiTableColumnSortSpecs_base_names };

static int _wrap_new_ImNewWrapper(lua_State* L) { { int SWIG_arg = 0; ImNewWrapper *result = 0 ;
    SWIG_check_num_args("ImNewWrapper::ImNewWrapper",0,0) result = (ImNewWrapper *)new ImNewWrapper();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImNewWrapper,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static void swig_delete_ImNewWrapper(void *obj) {
ImNewWrapper *arg1 = (ImNewWrapper *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImNewWrapper(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImNewWrapper);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImNewWrapper_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ImNewWrapper_methods[]= {
    {0,0}
};
static swig_lua_method swig_ImNewWrapper_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImNewWrapper_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImNewWrapper_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImNewWrapper_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImNewWrapper_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImNewWrapper_Sf_SwigStatic = {
    "ImNewWrapper",
    swig_ImNewWrapper_Sf_SwigStatic_methods,
    swig_ImNewWrapper_Sf_SwigStatic_attributes,
    swig_ImNewWrapper_Sf_SwigStatic_constants,
    swig_ImNewWrapper_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImNewWrapper_bases[] = {0};
static const char *swig_ImNewWrapper_base_names[] = {0};
static swig_lua_class _wrap_class_ImNewWrapper = { "ImNewWrapper", "ImNewWrapper", &SWIGTYPE_p_ImNewWrapper,_proxy__wrap_new_ImNewWrapper, swig_delete_ImNewWrapper, swig_ImNewWrapper_methods, swig_ImNewWrapper_attributes, &swig_ImNewWrapper_Sf_SwigStatic, swig_ImNewWrapper_meta, swig_ImNewWrapper_bases, swig_ImNewWrapper_base_names };

static int _wrap_ImGuiStyle_Alpha_set(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ; float arg2 ;
    SWIG_check_num_args("ImGuiStyle::Alpha",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::Alpha",1,"ImGuiStyle *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::Alpha",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_Alpha_set",1,SWIGTYPE_p_ImGuiStyle); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->Alpha = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_Alpha_get(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ; float result;
    SWIG_check_num_args("ImGuiStyle::Alpha",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::Alpha",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_Alpha_get",1,SWIGTYPE_p_ImGuiStyle); }  result = (float) ((arg1)->Alpha);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_DisabledAlpha_set(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float arg2 ; SWIG_check_num_args("ImGuiStyle::DisabledAlpha",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::DisabledAlpha",1,"ImGuiStyle *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::DisabledAlpha",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_DisabledAlpha_set",1,SWIGTYPE_p_ImGuiStyle); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->DisabledAlpha = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_DisabledAlpha_get(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float result; SWIG_check_num_args("ImGuiStyle::DisabledAlpha",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::DisabledAlpha",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_DisabledAlpha_get",1,SWIGTYPE_p_ImGuiStyle); }  result = (float) ((arg1)->DisabledAlpha);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_WindowPadding_set(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    ImVec2 *arg2 = (ImVec2 *) 0 ; SWIG_check_num_args("ImGuiStyle::WindowPadding",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::WindowPadding",1,"ImGuiStyle *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiStyle::WindowPadding",2,"ImVec2 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_WindowPadding_set",1,SWIGTYPE_p_ImGuiStyle); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImGuiStyle_WindowPadding_set",2,SWIGTYPE_p_ImVec2); }  if (arg1) (arg1)->WindowPadding = *arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_WindowPadding_get(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    ImVec2 *result = 0 ; SWIG_check_num_args("ImGuiStyle::WindowPadding",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::WindowPadding",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_WindowPadding_get",1,SWIGTYPE_p_ImGuiStyle); }  result = (ImVec2 *)& ((arg1)->WindowPadding);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiStyle_WindowRounding_set(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float arg2 ; SWIG_check_num_args("ImGuiStyle::WindowRounding",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::WindowRounding",1,"ImGuiStyle *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::WindowRounding",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_WindowRounding_set",1,SWIGTYPE_p_ImGuiStyle); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->WindowRounding = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_WindowRounding_get(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float result; SWIG_check_num_args("ImGuiStyle::WindowRounding",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::WindowRounding",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_WindowRounding_get",1,SWIGTYPE_p_ImGuiStyle); }  result = (float) ((arg1)->WindowRounding);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_WindowBorderSize_set(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float arg2 ; SWIG_check_num_args("ImGuiStyle::WindowBorderSize",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::WindowBorderSize",1,"ImGuiStyle *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::WindowBorderSize",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_WindowBorderSize_set",1,SWIGTYPE_p_ImGuiStyle); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->WindowBorderSize = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_WindowBorderSize_get(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float result; SWIG_check_num_args("ImGuiStyle::WindowBorderSize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::WindowBorderSize",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_WindowBorderSize_get",1,SWIGTYPE_p_ImGuiStyle); }  result = (float) ((arg1)->WindowBorderSize);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_WindowMinSize_set(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    ImVec2 *arg2 = (ImVec2 *) 0 ; SWIG_check_num_args("ImGuiStyle::WindowMinSize",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::WindowMinSize",1,"ImGuiStyle *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiStyle::WindowMinSize",2,"ImVec2 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_WindowMinSize_set",1,SWIGTYPE_p_ImGuiStyle); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImGuiStyle_WindowMinSize_set",2,SWIGTYPE_p_ImVec2); }  if (arg1) (arg1)->WindowMinSize = *arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_WindowMinSize_get(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    ImVec2 *result = 0 ; SWIG_check_num_args("ImGuiStyle::WindowMinSize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::WindowMinSize",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_WindowMinSize_get",1,SWIGTYPE_p_ImGuiStyle); }  result = (ImVec2 *)& ((arg1)->WindowMinSize);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiStyle_WindowTitleAlign_set(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    ImVec2 *arg2 = (ImVec2 *) 0 ; SWIG_check_num_args("ImGuiStyle::WindowTitleAlign",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::WindowTitleAlign",1,"ImGuiStyle *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiStyle::WindowTitleAlign",2,"ImVec2 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_WindowTitleAlign_set",1,SWIGTYPE_p_ImGuiStyle); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImGuiStyle_WindowTitleAlign_set",2,SWIGTYPE_p_ImVec2); }  if (arg1) (arg1)->WindowTitleAlign = *arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_WindowTitleAlign_get(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    ImVec2 *result = 0 ; SWIG_check_num_args("ImGuiStyle::WindowTitleAlign",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::WindowTitleAlign",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_WindowTitleAlign_get",1,SWIGTYPE_p_ImGuiStyle); } 
    result = (ImVec2 *)& ((arg1)->WindowTitleAlign); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_WindowMenuButtonPosition_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiStyle *arg1 = (ImGuiStyle *) 0 ; ImGuiDir arg2 ; SWIG_check_num_args("ImGuiStyle::WindowMenuButtonPosition",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::WindowMenuButtonPosition",1,"ImGuiStyle *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::WindowMenuButtonPosition",2,"ImGuiDir");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_WindowMenuButtonPosition_set",1,SWIGTYPE_p_ImGuiStyle); } 
    arg2 = (ImGuiDir)(int)lua_tonumber(L, 2); if (arg1) (arg1)->WindowMenuButtonPosition = arg2; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_WindowMenuButtonPosition_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiStyle *arg1 = (ImGuiStyle *) 0 ; ImGuiDir result; SWIG_check_num_args("ImGuiStyle::WindowMenuButtonPosition",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::WindowMenuButtonPosition",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_WindowMenuButtonPosition_get",1,SWIGTYPE_p_ImGuiStyle); } 
    result = (ImGuiDir) ((arg1)->WindowMenuButtonPosition); lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_ChildRounding_set(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float arg2 ; SWIG_check_num_args("ImGuiStyle::ChildRounding",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::ChildRounding",1,"ImGuiStyle *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::ChildRounding",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_ChildRounding_set",1,SWIGTYPE_p_ImGuiStyle); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->ChildRounding = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_ChildRounding_get(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float result; SWIG_check_num_args("ImGuiStyle::ChildRounding",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::ChildRounding",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_ChildRounding_get",1,SWIGTYPE_p_ImGuiStyle); }  result = (float) ((arg1)->ChildRounding);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_ChildBorderSize_set(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float arg2 ; SWIG_check_num_args("ImGuiStyle::ChildBorderSize",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::ChildBorderSize",1,"ImGuiStyle *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::ChildBorderSize",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_ChildBorderSize_set",1,SWIGTYPE_p_ImGuiStyle); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->ChildBorderSize = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_ChildBorderSize_get(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float result; SWIG_check_num_args("ImGuiStyle::ChildBorderSize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::ChildBorderSize",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_ChildBorderSize_get",1,SWIGTYPE_p_ImGuiStyle); }  result = (float) ((arg1)->ChildBorderSize);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_PopupRounding_set(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float arg2 ; SWIG_check_num_args("ImGuiStyle::PopupRounding",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::PopupRounding",1,"ImGuiStyle *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::PopupRounding",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_PopupRounding_set",1,SWIGTYPE_p_ImGuiStyle); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->PopupRounding = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_PopupRounding_get(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float result; SWIG_check_num_args("ImGuiStyle::PopupRounding",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::PopupRounding",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_PopupRounding_get",1,SWIGTYPE_p_ImGuiStyle); }  result = (float) ((arg1)->PopupRounding);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_PopupBorderSize_set(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float arg2 ; SWIG_check_num_args("ImGuiStyle::PopupBorderSize",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::PopupBorderSize",1,"ImGuiStyle *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::PopupBorderSize",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_PopupBorderSize_set",1,SWIGTYPE_p_ImGuiStyle); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->PopupBorderSize = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_PopupBorderSize_get(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float result; SWIG_check_num_args("ImGuiStyle::PopupBorderSize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::PopupBorderSize",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_PopupBorderSize_get",1,SWIGTYPE_p_ImGuiStyle); }  result = (float) ((arg1)->PopupBorderSize);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_FramePadding_set(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    ImVec2 *arg2 = (ImVec2 *) 0 ; SWIG_check_num_args("ImGuiStyle::FramePadding",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::FramePadding",1,"ImGuiStyle *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiStyle::FramePadding",2,"ImVec2 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_FramePadding_set",1,SWIGTYPE_p_ImGuiStyle); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImGuiStyle_FramePadding_set",2,SWIGTYPE_p_ImVec2); }  if (arg1) (arg1)->FramePadding = *arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_FramePadding_get(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    ImVec2 *result = 0 ; SWIG_check_num_args("ImGuiStyle::FramePadding",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::FramePadding",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_FramePadding_get",1,SWIGTYPE_p_ImGuiStyle); }  result = (ImVec2 *)& ((arg1)->FramePadding);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiStyle_FrameRounding_set(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float arg2 ; SWIG_check_num_args("ImGuiStyle::FrameRounding",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::FrameRounding",1,"ImGuiStyle *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::FrameRounding",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_FrameRounding_set",1,SWIGTYPE_p_ImGuiStyle); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->FrameRounding = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_FrameRounding_get(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float result; SWIG_check_num_args("ImGuiStyle::FrameRounding",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::FrameRounding",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_FrameRounding_get",1,SWIGTYPE_p_ImGuiStyle); }  result = (float) ((arg1)->FrameRounding);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_FrameBorderSize_set(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float arg2 ; SWIG_check_num_args("ImGuiStyle::FrameBorderSize",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::FrameBorderSize",1,"ImGuiStyle *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::FrameBorderSize",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_FrameBorderSize_set",1,SWIGTYPE_p_ImGuiStyle); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->FrameBorderSize = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_FrameBorderSize_get(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float result; SWIG_check_num_args("ImGuiStyle::FrameBorderSize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::FrameBorderSize",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_FrameBorderSize_get",1,SWIGTYPE_p_ImGuiStyle); }  result = (float) ((arg1)->FrameBorderSize);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_ItemSpacing_set(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    ImVec2 *arg2 = (ImVec2 *) 0 ; SWIG_check_num_args("ImGuiStyle::ItemSpacing",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::ItemSpacing",1,"ImGuiStyle *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiStyle::ItemSpacing",2,"ImVec2 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_ItemSpacing_set",1,SWIGTYPE_p_ImGuiStyle); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImGuiStyle_ItemSpacing_set",2,SWIGTYPE_p_ImVec2); }  if (arg1) (arg1)->ItemSpacing = *arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_ItemSpacing_get(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    ImVec2 *result = 0 ; SWIG_check_num_args("ImGuiStyle::ItemSpacing",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::ItemSpacing",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_ItemSpacing_get",1,SWIGTYPE_p_ImGuiStyle); }  result = (ImVec2 *)& ((arg1)->ItemSpacing);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiStyle_ItemInnerSpacing_set(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    ImVec2 *arg2 = (ImVec2 *) 0 ; SWIG_check_num_args("ImGuiStyle::ItemInnerSpacing",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::ItemInnerSpacing",1,"ImGuiStyle *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiStyle::ItemInnerSpacing",2,"ImVec2 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_ItemInnerSpacing_set",1,SWIGTYPE_p_ImGuiStyle); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImGuiStyle_ItemInnerSpacing_set",2,SWIGTYPE_p_ImVec2); }  if (arg1) (arg1)->ItemInnerSpacing = *arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_ItemInnerSpacing_get(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    ImVec2 *result = 0 ; SWIG_check_num_args("ImGuiStyle::ItemInnerSpacing",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::ItemInnerSpacing",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_ItemInnerSpacing_get",1,SWIGTYPE_p_ImGuiStyle); } 
    result = (ImVec2 *)& ((arg1)->ItemInnerSpacing); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_CellPadding_set(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    ImVec2 *arg2 = (ImVec2 *) 0 ; SWIG_check_num_args("ImGuiStyle::CellPadding",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::CellPadding",1,"ImGuiStyle *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiStyle::CellPadding",2,"ImVec2 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_CellPadding_set",1,SWIGTYPE_p_ImGuiStyle); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImGuiStyle_CellPadding_set",2,SWIGTYPE_p_ImVec2); }  if (arg1) (arg1)->CellPadding = *arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_CellPadding_get(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    ImVec2 *result = 0 ; SWIG_check_num_args("ImGuiStyle::CellPadding",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::CellPadding",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_CellPadding_get",1,SWIGTYPE_p_ImGuiStyle); }  result = (ImVec2 *)& ((arg1)->CellPadding);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiStyle_TouchExtraPadding_set(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    ImVec2 *arg2 = (ImVec2 *) 0 ; SWIG_check_num_args("ImGuiStyle::TouchExtraPadding",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::TouchExtraPadding",1,"ImGuiStyle *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiStyle::TouchExtraPadding",2,"ImVec2 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_TouchExtraPadding_set",1,SWIGTYPE_p_ImGuiStyle); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImGuiStyle_TouchExtraPadding_set",2,SWIGTYPE_p_ImVec2); }  if (arg1) (arg1)->TouchExtraPadding = *arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_TouchExtraPadding_get(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    ImVec2 *result = 0 ; SWIG_check_num_args("ImGuiStyle::TouchExtraPadding",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::TouchExtraPadding",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_TouchExtraPadding_get",1,SWIGTYPE_p_ImGuiStyle); } 
    result = (ImVec2 *)& ((arg1)->TouchExtraPadding); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_IndentSpacing_set(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float arg2 ; SWIG_check_num_args("ImGuiStyle::IndentSpacing",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::IndentSpacing",1,"ImGuiStyle *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::IndentSpacing",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_IndentSpacing_set",1,SWIGTYPE_p_ImGuiStyle); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->IndentSpacing = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_IndentSpacing_get(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float result; SWIG_check_num_args("ImGuiStyle::IndentSpacing",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::IndentSpacing",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_IndentSpacing_get",1,SWIGTYPE_p_ImGuiStyle); }  result = (float) ((arg1)->IndentSpacing);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_ColumnsMinSpacing_set(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float arg2 ; SWIG_check_num_args("ImGuiStyle::ColumnsMinSpacing",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::ColumnsMinSpacing",1,"ImGuiStyle *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::ColumnsMinSpacing",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_ColumnsMinSpacing_set",1,SWIGTYPE_p_ImGuiStyle); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->ColumnsMinSpacing = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_ColumnsMinSpacing_get(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float result; SWIG_check_num_args("ImGuiStyle::ColumnsMinSpacing",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::ColumnsMinSpacing",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_ColumnsMinSpacing_get",1,SWIGTYPE_p_ImGuiStyle); } 
    result = (float) ((arg1)->ColumnsMinSpacing); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_ScrollbarSize_set(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float arg2 ; SWIG_check_num_args("ImGuiStyle::ScrollbarSize",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::ScrollbarSize",1,"ImGuiStyle *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::ScrollbarSize",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_ScrollbarSize_set",1,SWIGTYPE_p_ImGuiStyle); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->ScrollbarSize = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_ScrollbarSize_get(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float result; SWIG_check_num_args("ImGuiStyle::ScrollbarSize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::ScrollbarSize",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_ScrollbarSize_get",1,SWIGTYPE_p_ImGuiStyle); }  result = (float) ((arg1)->ScrollbarSize);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_ScrollbarRounding_set(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float arg2 ; SWIG_check_num_args("ImGuiStyle::ScrollbarRounding",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::ScrollbarRounding",1,"ImGuiStyle *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::ScrollbarRounding",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_ScrollbarRounding_set",1,SWIGTYPE_p_ImGuiStyle); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->ScrollbarRounding = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_ScrollbarRounding_get(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float result; SWIG_check_num_args("ImGuiStyle::ScrollbarRounding",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::ScrollbarRounding",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_ScrollbarRounding_get",1,SWIGTYPE_p_ImGuiStyle); } 
    result = (float) ((arg1)->ScrollbarRounding); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_GrabMinSize_set(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float arg2 ; SWIG_check_num_args("ImGuiStyle::GrabMinSize",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::GrabMinSize",1,"ImGuiStyle *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::GrabMinSize",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_GrabMinSize_set",1,SWIGTYPE_p_ImGuiStyle); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->GrabMinSize = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_GrabMinSize_get(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float result; SWIG_check_num_args("ImGuiStyle::GrabMinSize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::GrabMinSize",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_GrabMinSize_get",1,SWIGTYPE_p_ImGuiStyle); }  result = (float) ((arg1)->GrabMinSize);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_GrabRounding_set(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float arg2 ; SWIG_check_num_args("ImGuiStyle::GrabRounding",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::GrabRounding",1,"ImGuiStyle *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::GrabRounding",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_GrabRounding_set",1,SWIGTYPE_p_ImGuiStyle); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->GrabRounding = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_GrabRounding_get(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float result; SWIG_check_num_args("ImGuiStyle::GrabRounding",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::GrabRounding",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_GrabRounding_get",1,SWIGTYPE_p_ImGuiStyle); }  result = (float) ((arg1)->GrabRounding);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_LogSliderDeadzone_set(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float arg2 ; SWIG_check_num_args("ImGuiStyle::LogSliderDeadzone",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::LogSliderDeadzone",1,"ImGuiStyle *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::LogSliderDeadzone",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_LogSliderDeadzone_set",1,SWIGTYPE_p_ImGuiStyle); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->LogSliderDeadzone = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_LogSliderDeadzone_get(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float result; SWIG_check_num_args("ImGuiStyle::LogSliderDeadzone",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::LogSliderDeadzone",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_LogSliderDeadzone_get",1,SWIGTYPE_p_ImGuiStyle); } 
    result = (float) ((arg1)->LogSliderDeadzone); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_TabRounding_set(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float arg2 ; SWIG_check_num_args("ImGuiStyle::TabRounding",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::TabRounding",1,"ImGuiStyle *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::TabRounding",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_TabRounding_set",1,SWIGTYPE_p_ImGuiStyle); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->TabRounding = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_TabRounding_get(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float result; SWIG_check_num_args("ImGuiStyle::TabRounding",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::TabRounding",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_TabRounding_get",1,SWIGTYPE_p_ImGuiStyle); }  result = (float) ((arg1)->TabRounding);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_TabBorderSize_set(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float arg2 ; SWIG_check_num_args("ImGuiStyle::TabBorderSize",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::TabBorderSize",1,"ImGuiStyle *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::TabBorderSize",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_TabBorderSize_set",1,SWIGTYPE_p_ImGuiStyle); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->TabBorderSize = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_TabBorderSize_get(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float result; SWIG_check_num_args("ImGuiStyle::TabBorderSize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::TabBorderSize",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_TabBorderSize_get",1,SWIGTYPE_p_ImGuiStyle); }  result = (float) ((arg1)->TabBorderSize);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_TabMinWidthForCloseButton_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiStyle *arg1 = (ImGuiStyle *) 0 ; float arg2 ; SWIG_check_num_args("ImGuiStyle::TabMinWidthForCloseButton",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::TabMinWidthForCloseButton",1,"ImGuiStyle *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::TabMinWidthForCloseButton",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_TabMinWidthForCloseButton_set",1,SWIGTYPE_p_ImGuiStyle); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->TabMinWidthForCloseButton = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_TabMinWidthForCloseButton_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiStyle *arg1 = (ImGuiStyle *) 0 ; float result; SWIG_check_num_args("ImGuiStyle::TabMinWidthForCloseButton",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::TabMinWidthForCloseButton",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_TabMinWidthForCloseButton_get",1,SWIGTYPE_p_ImGuiStyle); } 
    result = (float) ((arg1)->TabMinWidthForCloseButton); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_TabBarBorderSize_set(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float arg2 ; SWIG_check_num_args("ImGuiStyle::TabBarBorderSize",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::TabBarBorderSize",1,"ImGuiStyle *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::TabBarBorderSize",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_TabBarBorderSize_set",1,SWIGTYPE_p_ImGuiStyle); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->TabBarBorderSize = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_TabBarBorderSize_get(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float result; SWIG_check_num_args("ImGuiStyle::TabBarBorderSize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::TabBarBorderSize",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_TabBarBorderSize_get",1,SWIGTYPE_p_ImGuiStyle); }  result = (float) ((arg1)->TabBarBorderSize);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_TabBarOverlineSize_set(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float arg2 ; SWIG_check_num_args("ImGuiStyle::TabBarOverlineSize",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::TabBarOverlineSize",1,"ImGuiStyle *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::TabBarOverlineSize",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_TabBarOverlineSize_set",1,SWIGTYPE_p_ImGuiStyle); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->TabBarOverlineSize = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_TabBarOverlineSize_get(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float result; SWIG_check_num_args("ImGuiStyle::TabBarOverlineSize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::TabBarOverlineSize",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_TabBarOverlineSize_get",1,SWIGTYPE_p_ImGuiStyle); } 
    result = (float) ((arg1)->TabBarOverlineSize); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_TableAngledHeadersAngle_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiStyle *arg1 = (ImGuiStyle *) 0 ; float arg2 ; SWIG_check_num_args("ImGuiStyle::TableAngledHeadersAngle",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::TableAngledHeadersAngle",1,"ImGuiStyle *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::TableAngledHeadersAngle",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_TableAngledHeadersAngle_set",1,SWIGTYPE_p_ImGuiStyle); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->TableAngledHeadersAngle = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_TableAngledHeadersAngle_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiStyle *arg1 = (ImGuiStyle *) 0 ; float result; SWIG_check_num_args("ImGuiStyle::TableAngledHeadersAngle",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::TableAngledHeadersAngle",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_TableAngledHeadersAngle_get",1,SWIGTYPE_p_ImGuiStyle); } 
    result = (float) ((arg1)->TableAngledHeadersAngle); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_TableAngledHeadersTextAlign_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiStyle *arg1 = (ImGuiStyle *) 0 ; ImVec2 *arg2 = (ImVec2 *) 0 ;
    SWIG_check_num_args("ImGuiStyle::TableAngledHeadersTextAlign",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::TableAngledHeadersTextAlign",1,"ImGuiStyle *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiStyle::TableAngledHeadersTextAlign",2,"ImVec2 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_TableAngledHeadersTextAlign_set",1,SWIGTYPE_p_ImGuiStyle); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImGuiStyle_TableAngledHeadersTextAlign_set",2,SWIGTYPE_p_ImVec2); } 
    if (arg1) (arg1)->TableAngledHeadersTextAlign = *arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_TableAngledHeadersTextAlign_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiStyle *arg1 = (ImGuiStyle *) 0 ; ImVec2 *result = 0 ;
    SWIG_check_num_args("ImGuiStyle::TableAngledHeadersTextAlign",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::TableAngledHeadersTextAlign",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_TableAngledHeadersTextAlign_get",1,SWIGTYPE_p_ImGuiStyle); } 
    result = (ImVec2 *)& ((arg1)->TableAngledHeadersTextAlign); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_ColorButtonPosition_set(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    ImGuiDir arg2 ; SWIG_check_num_args("ImGuiStyle::ColorButtonPosition",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::ColorButtonPosition",1,"ImGuiStyle *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::ColorButtonPosition",2,"ImGuiDir");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_ColorButtonPosition_set",1,SWIGTYPE_p_ImGuiStyle); }  arg2 = (ImGuiDir)(int)lua_tonumber(L, 2);
    if (arg1) (arg1)->ColorButtonPosition = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_ColorButtonPosition_get(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    ImGuiDir result; SWIG_check_num_args("ImGuiStyle::ColorButtonPosition",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::ColorButtonPosition",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_ColorButtonPosition_get",1,SWIGTYPE_p_ImGuiStyle); } 
    result = (ImGuiDir) ((arg1)->ColorButtonPosition); lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_ButtonTextAlign_set(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    ImVec2 *arg2 = (ImVec2 *) 0 ; SWIG_check_num_args("ImGuiStyle::ButtonTextAlign",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::ButtonTextAlign",1,"ImGuiStyle *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiStyle::ButtonTextAlign",2,"ImVec2 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_ButtonTextAlign_set",1,SWIGTYPE_p_ImGuiStyle); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImGuiStyle_ButtonTextAlign_set",2,SWIGTYPE_p_ImVec2); }  if (arg1) (arg1)->ButtonTextAlign = *arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_ButtonTextAlign_get(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    ImVec2 *result = 0 ; SWIG_check_num_args("ImGuiStyle::ButtonTextAlign",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::ButtonTextAlign",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_ButtonTextAlign_get",1,SWIGTYPE_p_ImGuiStyle); } 
    result = (ImVec2 *)& ((arg1)->ButtonTextAlign); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_SelectableTextAlign_set(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    ImVec2 *arg2 = (ImVec2 *) 0 ; SWIG_check_num_args("ImGuiStyle::SelectableTextAlign",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::SelectableTextAlign",1,"ImGuiStyle *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiStyle::SelectableTextAlign",2,"ImVec2 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_SelectableTextAlign_set",1,SWIGTYPE_p_ImGuiStyle); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImGuiStyle_SelectableTextAlign_set",2,SWIGTYPE_p_ImVec2); }  if (arg1) (arg1)->SelectableTextAlign = *arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_SelectableTextAlign_get(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    ImVec2 *result = 0 ; SWIG_check_num_args("ImGuiStyle::SelectableTextAlign",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::SelectableTextAlign",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_SelectableTextAlign_get",1,SWIGTYPE_p_ImGuiStyle); } 
    result = (ImVec2 *)& ((arg1)->SelectableTextAlign); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_SeparatorTextBorderSize_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiStyle *arg1 = (ImGuiStyle *) 0 ; float arg2 ; SWIG_check_num_args("ImGuiStyle::SeparatorTextBorderSize",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::SeparatorTextBorderSize",1,"ImGuiStyle *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::SeparatorTextBorderSize",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_SeparatorTextBorderSize_set",1,SWIGTYPE_p_ImGuiStyle); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->SeparatorTextBorderSize = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_SeparatorTextBorderSize_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiStyle *arg1 = (ImGuiStyle *) 0 ; float result; SWIG_check_num_args("ImGuiStyle::SeparatorTextBorderSize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::SeparatorTextBorderSize",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_SeparatorTextBorderSize_get",1,SWIGTYPE_p_ImGuiStyle); } 
    result = (float) ((arg1)->SeparatorTextBorderSize); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_SeparatorTextAlign_set(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    ImVec2 *arg2 = (ImVec2 *) 0 ; SWIG_check_num_args("ImGuiStyle::SeparatorTextAlign",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::SeparatorTextAlign",1,"ImGuiStyle *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiStyle::SeparatorTextAlign",2,"ImVec2 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_SeparatorTextAlign_set",1,SWIGTYPE_p_ImGuiStyle); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImGuiStyle_SeparatorTextAlign_set",2,SWIGTYPE_p_ImVec2); }  if (arg1) (arg1)->SeparatorTextAlign = *arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_SeparatorTextAlign_get(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    ImVec2 *result = 0 ; SWIG_check_num_args("ImGuiStyle::SeparatorTextAlign",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::SeparatorTextAlign",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_SeparatorTextAlign_get",1,SWIGTYPE_p_ImGuiStyle); } 
    result = (ImVec2 *)& ((arg1)->SeparatorTextAlign); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_SeparatorTextPadding_set(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    ImVec2 *arg2 = (ImVec2 *) 0 ; SWIG_check_num_args("ImGuiStyle::SeparatorTextPadding",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::SeparatorTextPadding",1,"ImGuiStyle *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiStyle::SeparatorTextPadding",2,"ImVec2 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_SeparatorTextPadding_set",1,SWIGTYPE_p_ImGuiStyle); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImGuiStyle_SeparatorTextPadding_set",2,SWIGTYPE_p_ImVec2); } 
    if (arg1) (arg1)->SeparatorTextPadding = *arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_SeparatorTextPadding_get(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    ImVec2 *result = 0 ; SWIG_check_num_args("ImGuiStyle::SeparatorTextPadding",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::SeparatorTextPadding",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_SeparatorTextPadding_get",1,SWIGTYPE_p_ImGuiStyle); } 
    result = (ImVec2 *)& ((arg1)->SeparatorTextPadding); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_DisplayWindowPadding_set(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    ImVec2 *arg2 = (ImVec2 *) 0 ; SWIG_check_num_args("ImGuiStyle::DisplayWindowPadding",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::DisplayWindowPadding",1,"ImGuiStyle *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiStyle::DisplayWindowPadding",2,"ImVec2 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_DisplayWindowPadding_set",1,SWIGTYPE_p_ImGuiStyle); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImGuiStyle_DisplayWindowPadding_set",2,SWIGTYPE_p_ImVec2); } 
    if (arg1) (arg1)->DisplayWindowPadding = *arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_DisplayWindowPadding_get(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    ImVec2 *result = 0 ; SWIG_check_num_args("ImGuiStyle::DisplayWindowPadding",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::DisplayWindowPadding",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_DisplayWindowPadding_get",1,SWIGTYPE_p_ImGuiStyle); } 
    result = (ImVec2 *)& ((arg1)->DisplayWindowPadding); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_DisplaySafeAreaPadding_set(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    ImVec2 *arg2 = (ImVec2 *) 0 ; SWIG_check_num_args("ImGuiStyle::DisplaySafeAreaPadding",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::DisplaySafeAreaPadding",1,"ImGuiStyle *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiStyle::DisplaySafeAreaPadding",2,"ImVec2 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_DisplaySafeAreaPadding_set",1,SWIGTYPE_p_ImGuiStyle); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImGuiStyle_DisplaySafeAreaPadding_set",2,SWIGTYPE_p_ImVec2); } 
    if (arg1) (arg1)->DisplaySafeAreaPadding = *arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_DisplaySafeAreaPadding_get(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    ImVec2 *result = 0 ; SWIG_check_num_args("ImGuiStyle::DisplaySafeAreaPadding",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::DisplaySafeAreaPadding",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_DisplaySafeAreaPadding_get",1,SWIGTYPE_p_ImGuiStyle); } 
    result = (ImVec2 *)& ((arg1)->DisplaySafeAreaPadding); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_DockingSeparatorSize_set(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float arg2 ; SWIG_check_num_args("ImGuiStyle::DockingSeparatorSize",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::DockingSeparatorSize",1,"ImGuiStyle *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::DockingSeparatorSize",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_DockingSeparatorSize_set",1,SWIGTYPE_p_ImGuiStyle); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->DockingSeparatorSize = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_DockingSeparatorSize_get(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float result; SWIG_check_num_args("ImGuiStyle::DockingSeparatorSize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::DockingSeparatorSize",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_DockingSeparatorSize_get",1,SWIGTYPE_p_ImGuiStyle); } 
    result = (float) ((arg1)->DockingSeparatorSize); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_MouseCursorScale_set(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float arg2 ; SWIG_check_num_args("ImGuiStyle::MouseCursorScale",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::MouseCursorScale",1,"ImGuiStyle *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::MouseCursorScale",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_MouseCursorScale_set",1,SWIGTYPE_p_ImGuiStyle); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->MouseCursorScale = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_MouseCursorScale_get(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float result; SWIG_check_num_args("ImGuiStyle::MouseCursorScale",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::MouseCursorScale",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_MouseCursorScale_get",1,SWIGTYPE_p_ImGuiStyle); }  result = (float) ((arg1)->MouseCursorScale);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_AntiAliasedLines_set(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    bool arg2 ; SWIG_check_num_args("ImGuiStyle::AntiAliasedLines",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::AntiAliasedLines",1,"ImGuiStyle *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiStyle::AntiAliasedLines",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_AntiAliasedLines_set",1,SWIGTYPE_p_ImGuiStyle); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->AntiAliasedLines = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_AntiAliasedLines_get(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    bool result; SWIG_check_num_args("ImGuiStyle::AntiAliasedLines",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::AntiAliasedLines",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_AntiAliasedLines_get",1,SWIGTYPE_p_ImGuiStyle); }  result = (bool) ((arg1)->AntiAliasedLines);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_AntiAliasedLinesUseTex_set(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    bool arg2 ; SWIG_check_num_args("ImGuiStyle::AntiAliasedLinesUseTex",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::AntiAliasedLinesUseTex",1,"ImGuiStyle *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiStyle::AntiAliasedLinesUseTex",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_AntiAliasedLinesUseTex_set",1,SWIGTYPE_p_ImGuiStyle); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->AntiAliasedLinesUseTex = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_AntiAliasedLinesUseTex_get(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    bool result; SWIG_check_num_args("ImGuiStyle::AntiAliasedLinesUseTex",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::AntiAliasedLinesUseTex",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_AntiAliasedLinesUseTex_get",1,SWIGTYPE_p_ImGuiStyle); } 
    result = (bool) ((arg1)->AntiAliasedLinesUseTex); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_AntiAliasedFill_set(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    bool arg2 ; SWIG_check_num_args("ImGuiStyle::AntiAliasedFill",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::AntiAliasedFill",1,"ImGuiStyle *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiStyle::AntiAliasedFill",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_AntiAliasedFill_set",1,SWIGTYPE_p_ImGuiStyle); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->AntiAliasedFill = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_AntiAliasedFill_get(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    bool result; SWIG_check_num_args("ImGuiStyle::AntiAliasedFill",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::AntiAliasedFill",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_AntiAliasedFill_get",1,SWIGTYPE_p_ImGuiStyle); }  result = (bool) ((arg1)->AntiAliasedFill);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_CurveTessellationTol_set(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float arg2 ; SWIG_check_num_args("ImGuiStyle::CurveTessellationTol",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::CurveTessellationTol",1,"ImGuiStyle *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::CurveTessellationTol",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_CurveTessellationTol_set",1,SWIGTYPE_p_ImGuiStyle); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->CurveTessellationTol = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_CurveTessellationTol_get(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float result; SWIG_check_num_args("ImGuiStyle::CurveTessellationTol",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::CurveTessellationTol",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_CurveTessellationTol_get",1,SWIGTYPE_p_ImGuiStyle); } 
    result = (float) ((arg1)->CurveTessellationTol); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_CircleTessellationMaxError_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiStyle *arg1 = (ImGuiStyle *) 0 ; float arg2 ; SWIG_check_num_args("ImGuiStyle::CircleTessellationMaxError",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::CircleTessellationMaxError",1,"ImGuiStyle *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::CircleTessellationMaxError",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_CircleTessellationMaxError_set",1,SWIGTYPE_p_ImGuiStyle); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->CircleTessellationMaxError = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_CircleTessellationMaxError_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiStyle *arg1 = (ImGuiStyle *) 0 ; float result; SWIG_check_num_args("ImGuiStyle::CircleTessellationMaxError",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::CircleTessellationMaxError",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_CircleTessellationMaxError_get",1,SWIGTYPE_p_ImGuiStyle); } 
    result = (float) ((arg1)->CircleTessellationMaxError); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_Colors_set(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    ImVec4 *arg2 = (ImVec4 *) (ImVec4 *)0 ; SWIG_check_num_args("ImGuiStyle::Colors",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::Colors",1,"ImGuiStyle *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiStyle::Colors",2,"ImVec4 [ImGuiCol_COUNT]");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_Colors_set",1,SWIGTYPE_p_ImGuiStyle); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec4,0))){
      SWIG_fail_ptr("ImGuiStyle_Colors_set",2,SWIGTYPE_p_ImVec4); }  { size_t ii; ImVec4 *b = (ImVec4 *) arg1->Colors;
      for (ii = 0; ii < (size_t)ImGuiCol_COUNT; ii++) b[ii] = *((ImVec4 *) arg2 + ii); }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_Colors_get(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    ImVec4 *result = 0 ; SWIG_check_num_args("ImGuiStyle::Colors",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::Colors",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_Colors_get",1,SWIGTYPE_p_ImGuiStyle); }  result = (ImVec4 *)(ImVec4 *) ((arg1)->Colors);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec4,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiStyle_HoverStationaryDelay_set(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float arg2 ; SWIG_check_num_args("ImGuiStyle::HoverStationaryDelay",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::HoverStationaryDelay",1,"ImGuiStyle *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::HoverStationaryDelay",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_HoverStationaryDelay_set",1,SWIGTYPE_p_ImGuiStyle); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->HoverStationaryDelay = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_HoverStationaryDelay_get(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float result; SWIG_check_num_args("ImGuiStyle::HoverStationaryDelay",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::HoverStationaryDelay",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_HoverStationaryDelay_get",1,SWIGTYPE_p_ImGuiStyle); } 
    result = (float) ((arg1)->HoverStationaryDelay); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_HoverDelayShort_set(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float arg2 ; SWIG_check_num_args("ImGuiStyle::HoverDelayShort",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::HoverDelayShort",1,"ImGuiStyle *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::HoverDelayShort",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_HoverDelayShort_set",1,SWIGTYPE_p_ImGuiStyle); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->HoverDelayShort = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_HoverDelayShort_get(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float result; SWIG_check_num_args("ImGuiStyle::HoverDelayShort",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::HoverDelayShort",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_HoverDelayShort_get",1,SWIGTYPE_p_ImGuiStyle); }  result = (float) ((arg1)->HoverDelayShort);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_HoverDelayNormal_set(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float arg2 ; SWIG_check_num_args("ImGuiStyle::HoverDelayNormal",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::HoverDelayNormal",1,"ImGuiStyle *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::HoverDelayNormal",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_HoverDelayNormal_set",1,SWIGTYPE_p_ImGuiStyle); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->HoverDelayNormal = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_HoverDelayNormal_get(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
    float result; SWIG_check_num_args("ImGuiStyle::HoverDelayNormal",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::HoverDelayNormal",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_HoverDelayNormal_get",1,SWIGTYPE_p_ImGuiStyle); }  result = (float) ((arg1)->HoverDelayNormal);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_HoverFlagsForTooltipMouse_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiStyle *arg1 = (ImGuiStyle *) 0 ; ImGuiHoveredFlags arg2 ;
    SWIG_check_num_args("ImGuiStyle::HoverFlagsForTooltipMouse",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::HoverFlagsForTooltipMouse",1,"ImGuiStyle *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::HoverFlagsForTooltipMouse",2,"ImGuiHoveredFlags");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_HoverFlagsForTooltipMouse_set",1,SWIGTYPE_p_ImGuiStyle); } 
    arg2 = (ImGuiHoveredFlags)lua_tonumber(L, 2); if (arg1) (arg1)->HoverFlagsForTooltipMouse = arg2; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_HoverFlagsForTooltipMouse_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiStyle *arg1 = (ImGuiStyle *) 0 ; ImGuiHoveredFlags result;
    SWIG_check_num_args("ImGuiStyle::HoverFlagsForTooltipMouse",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::HoverFlagsForTooltipMouse",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_HoverFlagsForTooltipMouse_get",1,SWIGTYPE_p_ImGuiStyle); } 
    result = (ImGuiHoveredFlags) ((arg1)->HoverFlagsForTooltipMouse); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_HoverFlagsForTooltipNav_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiStyle *arg1 = (ImGuiStyle *) 0 ; ImGuiHoveredFlags arg2 ;
    SWIG_check_num_args("ImGuiStyle::HoverFlagsForTooltipNav",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::HoverFlagsForTooltipNav",1,"ImGuiStyle *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::HoverFlagsForTooltipNav",2,"ImGuiHoveredFlags");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_HoverFlagsForTooltipNav_set",1,SWIGTYPE_p_ImGuiStyle); } 
    arg2 = (ImGuiHoveredFlags)lua_tonumber(L, 2); if (arg1) (arg1)->HoverFlagsForTooltipNav = arg2; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStyle_HoverFlagsForTooltipNav_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiStyle *arg1 = (ImGuiStyle *) 0 ; ImGuiHoveredFlags result;
    SWIG_check_num_args("ImGuiStyle::HoverFlagsForTooltipNav",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::HoverFlagsForTooltipNav",1,"ImGuiStyle *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_HoverFlagsForTooltipNav_get",1,SWIGTYPE_p_ImGuiStyle); } 
    result = (ImGuiHoveredFlags) ((arg1)->HoverFlagsForTooltipNav); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_ImGuiStyle(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *result = 0 ;
    SWIG_check_num_args("ImGuiStyle::ImGuiStyle",0,0) result = (ImGuiStyle *)new ImGuiStyle();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiStyle,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiStyle_ScaleAllSizes(lua_State* L) { { int SWIG_arg = 0; ImGuiStyle *arg1 = (ImGuiStyle *) 0 ; float arg2 ;
    SWIG_check_num_args("ImGuiStyle::ScaleAllSizes",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStyle::ScaleAllSizes",1,"ImGuiStyle *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStyle::ScaleAllSizes",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStyle,0))){
      SWIG_fail_ptr("ImGuiStyle_ScaleAllSizes",1,SWIGTYPE_p_ImGuiStyle); }  arg2 = (float)lua_tonumber(L, 2);
    (arg1)->ScaleAllSizes(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static void swig_delete_ImGuiStyle(void *obj) {
ImGuiStyle *arg1 = (ImGuiStyle *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiStyle(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiStyle);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiStyle_attributes[] = {
    { "Alpha", _wrap_ImGuiStyle_Alpha_get, _wrap_ImGuiStyle_Alpha_set },
    { "DisabledAlpha", _wrap_ImGuiStyle_DisabledAlpha_get, _wrap_ImGuiStyle_DisabledAlpha_set },
    { "WindowPadding", _wrap_ImGuiStyle_WindowPadding_get, _wrap_ImGuiStyle_WindowPadding_set },
    { "WindowRounding", _wrap_ImGuiStyle_WindowRounding_get, _wrap_ImGuiStyle_WindowRounding_set },
    { "WindowBorderSize", _wrap_ImGuiStyle_WindowBorderSize_get, _wrap_ImGuiStyle_WindowBorderSize_set },
    { "WindowMinSize", _wrap_ImGuiStyle_WindowMinSize_get, _wrap_ImGuiStyle_WindowMinSize_set },
    { "WindowTitleAlign", _wrap_ImGuiStyle_WindowTitleAlign_get, _wrap_ImGuiStyle_WindowTitleAlign_set },
    { "WindowMenuButtonPosition", _wrap_ImGuiStyle_WindowMenuButtonPosition_get, _wrap_ImGuiStyle_WindowMenuButtonPosition_set },
    { "ChildRounding", _wrap_ImGuiStyle_ChildRounding_get, _wrap_ImGuiStyle_ChildRounding_set },
    { "ChildBorderSize", _wrap_ImGuiStyle_ChildBorderSize_get, _wrap_ImGuiStyle_ChildBorderSize_set },
    { "PopupRounding", _wrap_ImGuiStyle_PopupRounding_get, _wrap_ImGuiStyle_PopupRounding_set },
    { "PopupBorderSize", _wrap_ImGuiStyle_PopupBorderSize_get, _wrap_ImGuiStyle_PopupBorderSize_set },
    { "FramePadding", _wrap_ImGuiStyle_FramePadding_get, _wrap_ImGuiStyle_FramePadding_set },
    { "FrameRounding", _wrap_ImGuiStyle_FrameRounding_get, _wrap_ImGuiStyle_FrameRounding_set },
    { "FrameBorderSize", _wrap_ImGuiStyle_FrameBorderSize_get, _wrap_ImGuiStyle_FrameBorderSize_set },
    { "ItemSpacing", _wrap_ImGuiStyle_ItemSpacing_get, _wrap_ImGuiStyle_ItemSpacing_set },
    { "ItemInnerSpacing", _wrap_ImGuiStyle_ItemInnerSpacing_get, _wrap_ImGuiStyle_ItemInnerSpacing_set },
    { "CellPadding", _wrap_ImGuiStyle_CellPadding_get, _wrap_ImGuiStyle_CellPadding_set },
    { "TouchExtraPadding", _wrap_ImGuiStyle_TouchExtraPadding_get, _wrap_ImGuiStyle_TouchExtraPadding_set },
    { "IndentSpacing", _wrap_ImGuiStyle_IndentSpacing_get, _wrap_ImGuiStyle_IndentSpacing_set },
    { "ColumnsMinSpacing", _wrap_ImGuiStyle_ColumnsMinSpacing_get, _wrap_ImGuiStyle_ColumnsMinSpacing_set },
    { "ScrollbarSize", _wrap_ImGuiStyle_ScrollbarSize_get, _wrap_ImGuiStyle_ScrollbarSize_set },
    { "ScrollbarRounding", _wrap_ImGuiStyle_ScrollbarRounding_get, _wrap_ImGuiStyle_ScrollbarRounding_set },
    { "GrabMinSize", _wrap_ImGuiStyle_GrabMinSize_get, _wrap_ImGuiStyle_GrabMinSize_set },
    { "GrabRounding", _wrap_ImGuiStyle_GrabRounding_get, _wrap_ImGuiStyle_GrabRounding_set },
    { "LogSliderDeadzone", _wrap_ImGuiStyle_LogSliderDeadzone_get, _wrap_ImGuiStyle_LogSliderDeadzone_set },
    { "TabRounding", _wrap_ImGuiStyle_TabRounding_get, _wrap_ImGuiStyle_TabRounding_set },
    { "TabBorderSize", _wrap_ImGuiStyle_TabBorderSize_get, _wrap_ImGuiStyle_TabBorderSize_set },
    { "TabMinWidthForCloseButton", _wrap_ImGuiStyle_TabMinWidthForCloseButton_get, _wrap_ImGuiStyle_TabMinWidthForCloseButton_set },
    { "TabBarBorderSize", _wrap_ImGuiStyle_TabBarBorderSize_get, _wrap_ImGuiStyle_TabBarBorderSize_set },
    { "TabBarOverlineSize", _wrap_ImGuiStyle_TabBarOverlineSize_get, _wrap_ImGuiStyle_TabBarOverlineSize_set },
    { "TableAngledHeadersAngle", _wrap_ImGuiStyle_TableAngledHeadersAngle_get, _wrap_ImGuiStyle_TableAngledHeadersAngle_set },
    { "TableAngledHeadersTextAlign", _wrap_ImGuiStyle_TableAngledHeadersTextAlign_get, _wrap_ImGuiStyle_TableAngledHeadersTextAlign_set },
    { "ColorButtonPosition", _wrap_ImGuiStyle_ColorButtonPosition_get, _wrap_ImGuiStyle_ColorButtonPosition_set },
    { "ButtonTextAlign", _wrap_ImGuiStyle_ButtonTextAlign_get, _wrap_ImGuiStyle_ButtonTextAlign_set },
    { "SelectableTextAlign", _wrap_ImGuiStyle_SelectableTextAlign_get, _wrap_ImGuiStyle_SelectableTextAlign_set },
    { "SeparatorTextBorderSize", _wrap_ImGuiStyle_SeparatorTextBorderSize_get, _wrap_ImGuiStyle_SeparatorTextBorderSize_set },
    { "SeparatorTextAlign", _wrap_ImGuiStyle_SeparatorTextAlign_get, _wrap_ImGuiStyle_SeparatorTextAlign_set },
    { "SeparatorTextPadding", _wrap_ImGuiStyle_SeparatorTextPadding_get, _wrap_ImGuiStyle_SeparatorTextPadding_set },
    { "DisplayWindowPadding", _wrap_ImGuiStyle_DisplayWindowPadding_get, _wrap_ImGuiStyle_DisplayWindowPadding_set },
    { "DisplaySafeAreaPadding", _wrap_ImGuiStyle_DisplaySafeAreaPadding_get, _wrap_ImGuiStyle_DisplaySafeAreaPadding_set },
    { "DockingSeparatorSize", _wrap_ImGuiStyle_DockingSeparatorSize_get, _wrap_ImGuiStyle_DockingSeparatorSize_set },
    { "MouseCursorScale", _wrap_ImGuiStyle_MouseCursorScale_get, _wrap_ImGuiStyle_MouseCursorScale_set },
    { "AntiAliasedLines", _wrap_ImGuiStyle_AntiAliasedLines_get, _wrap_ImGuiStyle_AntiAliasedLines_set },
    { "AntiAliasedLinesUseTex", _wrap_ImGuiStyle_AntiAliasedLinesUseTex_get, _wrap_ImGuiStyle_AntiAliasedLinesUseTex_set },
    { "AntiAliasedFill", _wrap_ImGuiStyle_AntiAliasedFill_get, _wrap_ImGuiStyle_AntiAliasedFill_set },
    { "CurveTessellationTol", _wrap_ImGuiStyle_CurveTessellationTol_get, _wrap_ImGuiStyle_CurveTessellationTol_set },
    { "CircleTessellationMaxError", _wrap_ImGuiStyle_CircleTessellationMaxError_get, _wrap_ImGuiStyle_CircleTessellationMaxError_set },
    { "Colors", _wrap_ImGuiStyle_Colors_get, _wrap_ImGuiStyle_Colors_set },
    { "HoverStationaryDelay", _wrap_ImGuiStyle_HoverStationaryDelay_get, _wrap_ImGuiStyle_HoverStationaryDelay_set },
    { "HoverDelayShort", _wrap_ImGuiStyle_HoverDelayShort_get, _wrap_ImGuiStyle_HoverDelayShort_set },
    { "HoverDelayNormal", _wrap_ImGuiStyle_HoverDelayNormal_get, _wrap_ImGuiStyle_HoverDelayNormal_set },
    { "HoverFlagsForTooltipMouse", _wrap_ImGuiStyle_HoverFlagsForTooltipMouse_get, _wrap_ImGuiStyle_HoverFlagsForTooltipMouse_set },
    { "HoverFlagsForTooltipNav", _wrap_ImGuiStyle_HoverFlagsForTooltipNav_get, _wrap_ImGuiStyle_HoverFlagsForTooltipNav_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiStyle_methods[]= {
    { "ScaleAllSizes", _wrap_ImGuiStyle_ScaleAllSizes},
    {0,0}
};
static swig_lua_method swig_ImGuiStyle_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiStyle_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiStyle_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiStyle_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiStyle_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiStyle_Sf_SwigStatic = {
    "ImGuiStyle",
    swig_ImGuiStyle_Sf_SwigStatic_methods,
    swig_ImGuiStyle_Sf_SwigStatic_attributes,
    swig_ImGuiStyle_Sf_SwigStatic_constants,
    swig_ImGuiStyle_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiStyle_bases[] = {0};
static const char *swig_ImGuiStyle_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiStyle = { "ImGuiStyle", "ImGuiStyle", &SWIGTYPE_p_ImGuiStyle,_proxy__wrap_new_ImGuiStyle, swig_delete_ImGuiStyle, swig_ImGuiStyle_methods, swig_ImGuiStyle_attributes, &swig_ImGuiStyle_Sf_SwigStatic, swig_ImGuiStyle_meta, swig_ImGuiStyle_bases, swig_ImGuiStyle_base_names };

static int _wrap_ImGuiKeyData_Down_set(lua_State* L) { { int SWIG_arg = 0; ImGuiKeyData *arg1 = (ImGuiKeyData *) 0 ; bool arg2 ;
    SWIG_check_num_args("ImGuiKeyData::Down",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiKeyData::Down",1,"ImGuiKeyData *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiKeyData::Down",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiKeyData,0))){
      SWIG_fail_ptr("ImGuiKeyData_Down_set",1,SWIGTYPE_p_ImGuiKeyData); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->Down = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiKeyData_Down_get(lua_State* L) { { int SWIG_arg = 0; ImGuiKeyData *arg1 = (ImGuiKeyData *) 0 ;
    bool result; SWIG_check_num_args("ImGuiKeyData::Down",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiKeyData::Down",1,"ImGuiKeyData *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiKeyData,0))){
      SWIG_fail_ptr("ImGuiKeyData_Down_get",1,SWIGTYPE_p_ImGuiKeyData); }  result = (bool) ((arg1)->Down);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiKeyData_DownDuration_set(lua_State* L) { { int SWIG_arg = 0; ImGuiKeyData *arg1 = (ImGuiKeyData *) 0 ;
    float arg2 ; SWIG_check_num_args("ImGuiKeyData::DownDuration",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiKeyData::DownDuration",1,"ImGuiKeyData *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiKeyData::DownDuration",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiKeyData,0))){
      SWIG_fail_ptr("ImGuiKeyData_DownDuration_set",1,SWIGTYPE_p_ImGuiKeyData); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->DownDuration = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiKeyData_DownDuration_get(lua_State* L) { { int SWIG_arg = 0; ImGuiKeyData *arg1 = (ImGuiKeyData *) 0 ;
    float result; SWIG_check_num_args("ImGuiKeyData::DownDuration",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiKeyData::DownDuration",1,"ImGuiKeyData *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiKeyData,0))){
      SWIG_fail_ptr("ImGuiKeyData_DownDuration_get",1,SWIGTYPE_p_ImGuiKeyData); }  result = (float) ((arg1)->DownDuration);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiKeyData_DownDurationPrev_set(lua_State* L) { { int SWIG_arg = 0; ImGuiKeyData *arg1 = (ImGuiKeyData *) 0 ;
    float arg2 ; SWIG_check_num_args("ImGuiKeyData::DownDurationPrev",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiKeyData::DownDurationPrev",1,"ImGuiKeyData *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiKeyData::DownDurationPrev",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiKeyData,0))){
      SWIG_fail_ptr("ImGuiKeyData_DownDurationPrev_set",1,SWIGTYPE_p_ImGuiKeyData); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->DownDurationPrev = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiKeyData_DownDurationPrev_get(lua_State* L) { { int SWIG_arg = 0; ImGuiKeyData *arg1 = (ImGuiKeyData *) 0 ;
    float result; SWIG_check_num_args("ImGuiKeyData::DownDurationPrev",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiKeyData::DownDurationPrev",1,"ImGuiKeyData *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiKeyData,0))){
      SWIG_fail_ptr("ImGuiKeyData_DownDurationPrev_get",1,SWIGTYPE_p_ImGuiKeyData); } 
    result = (float) ((arg1)->DownDurationPrev); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiKeyData_AnalogValue_set(lua_State* L) { { int SWIG_arg = 0; ImGuiKeyData *arg1 = (ImGuiKeyData *) 0 ;
    float arg2 ; SWIG_check_num_args("ImGuiKeyData::AnalogValue",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiKeyData::AnalogValue",1,"ImGuiKeyData *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiKeyData::AnalogValue",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiKeyData,0))){
      SWIG_fail_ptr("ImGuiKeyData_AnalogValue_set",1,SWIGTYPE_p_ImGuiKeyData); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->AnalogValue = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiKeyData_AnalogValue_get(lua_State* L) { { int SWIG_arg = 0; ImGuiKeyData *arg1 = (ImGuiKeyData *) 0 ;
    float result; SWIG_check_num_args("ImGuiKeyData::AnalogValue",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiKeyData::AnalogValue",1,"ImGuiKeyData *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiKeyData,0))){
      SWIG_fail_ptr("ImGuiKeyData_AnalogValue_get",1,SWIGTYPE_p_ImGuiKeyData); }  result = (float) ((arg1)->AnalogValue);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_ImGuiKeyData(lua_State* L) { { int SWIG_arg = 0; ImGuiKeyData *result = 0 ;
    SWIG_check_num_args("ImGuiKeyData::ImGuiKeyData",0,0) result = (ImGuiKeyData *)new ImGuiKeyData();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiKeyData,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static void swig_delete_ImGuiKeyData(void *obj) {
ImGuiKeyData *arg1 = (ImGuiKeyData *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiKeyData(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiKeyData);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiKeyData_attributes[] = {
    { "Down", _wrap_ImGuiKeyData_Down_get, _wrap_ImGuiKeyData_Down_set },
    { "DownDuration", _wrap_ImGuiKeyData_DownDuration_get, _wrap_ImGuiKeyData_DownDuration_set },
    { "DownDurationPrev", _wrap_ImGuiKeyData_DownDurationPrev_get, _wrap_ImGuiKeyData_DownDurationPrev_set },
    { "AnalogValue", _wrap_ImGuiKeyData_AnalogValue_get, _wrap_ImGuiKeyData_AnalogValue_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiKeyData_methods[]= {
    {0,0}
};
static swig_lua_method swig_ImGuiKeyData_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiKeyData_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiKeyData_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiKeyData_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiKeyData_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiKeyData_Sf_SwigStatic = {
    "ImGuiKeyData",
    swig_ImGuiKeyData_Sf_SwigStatic_methods,
    swig_ImGuiKeyData_Sf_SwigStatic_attributes,
    swig_ImGuiKeyData_Sf_SwigStatic_constants,
    swig_ImGuiKeyData_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiKeyData_bases[] = {0};
static const char *swig_ImGuiKeyData_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiKeyData = { "ImGuiKeyData", "ImGuiKeyData", &SWIGTYPE_p_ImGuiKeyData,_proxy__wrap_new_ImGuiKeyData, swig_delete_ImGuiKeyData, swig_ImGuiKeyData_methods, swig_ImGuiKeyData_attributes, &swig_ImGuiKeyData_Sf_SwigStatic, swig_ImGuiKeyData_meta, swig_ImGuiKeyData_bases, swig_ImGuiKeyData_base_names };

static int _wrap_ImGuiIO_ConfigFlags_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    ImGuiConfigFlags arg2 ; SWIG_check_num_args("ImGuiIO::ConfigFlags",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigFlags",1,"ImGuiIO *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::ConfigFlags",2,"ImGuiConfigFlags");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigFlags_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (ImGuiConfigFlags)lua_tonumber(L, 2);
    if (arg1) (arg1)->ConfigFlags = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigFlags_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    ImGuiConfigFlags result; SWIG_check_num_args("ImGuiIO::ConfigFlags",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigFlags",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigFlags_get",1,SWIGTYPE_p_ImGuiIO); }  result = (ImGuiConfigFlags) ((arg1)->ConfigFlags);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_BackendFlags_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    ImGuiBackendFlags arg2 ; SWIG_check_num_args("ImGuiIO::BackendFlags",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::BackendFlags",1,"ImGuiIO *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::BackendFlags",2,"ImGuiBackendFlags");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_BackendFlags_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (ImGuiBackendFlags)lua_tonumber(L, 2);
    if (arg1) (arg1)->BackendFlags = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_BackendFlags_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    ImGuiBackendFlags result; SWIG_check_num_args("ImGuiIO::BackendFlags",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::BackendFlags",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_BackendFlags_get",1,SWIGTYPE_p_ImGuiIO); }  result = (ImGuiBackendFlags) ((arg1)->BackendFlags);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_DisplaySize_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    ImVec2 *arg2 = (ImVec2 *) 0 ; SWIG_check_num_args("ImGuiIO::DisplaySize",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::DisplaySize",1,"ImGuiIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::DisplaySize",2,"ImVec2 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_DisplaySize_set",1,SWIGTYPE_p_ImGuiIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImGuiIO_DisplaySize_set",2,SWIGTYPE_p_ImVec2); }  if (arg1) (arg1)->DisplaySize = *arg2; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_DisplaySize_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    ImVec2 *result = 0 ; SWIG_check_num_args("ImGuiIO::DisplaySize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::DisplaySize",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_DisplaySize_get",1,SWIGTYPE_p_ImGuiIO); }  result = (ImVec2 *)& ((arg1)->DisplaySize);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiIO_DeltaTime_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; float arg2 ;
    SWIG_check_num_args("ImGuiIO::DeltaTime",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::DeltaTime",1,"ImGuiIO *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::DeltaTime",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_DeltaTime_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->DeltaTime = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_DeltaTime_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; float result;
    SWIG_check_num_args("ImGuiIO::DeltaTime",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::DeltaTime",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_DeltaTime_get",1,SWIGTYPE_p_ImGuiIO); }  result = (float) ((arg1)->DeltaTime);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_IniSavingRate_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; float arg2 ;
    SWIG_check_num_args("ImGuiIO::IniSavingRate",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::IniSavingRate",1,"ImGuiIO *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::IniSavingRate",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_IniSavingRate_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->IniSavingRate = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_IniSavingRate_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; float result;
    SWIG_check_num_args("ImGuiIO::IniSavingRate",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::IniSavingRate",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_IniSavingRate_get",1,SWIGTYPE_p_ImGuiIO); }  result = (float) ((arg1)->IniSavingRate);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_IniFilename_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; char *result = 0 ;
    SWIG_check_num_args("ImGuiIO::IniFilename",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::IniFilename",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_IniFilename_get",1,SWIGTYPE_p_ImGuiIO); }  result = (char *) ((arg1)->IniFilename);
    lua_pushstring(L,(const char *)result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_LogFilename_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; char *result = 0 ;
    SWIG_check_num_args("ImGuiIO::LogFilename",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::LogFilename",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_LogFilename_get",1,SWIGTYPE_p_ImGuiIO); }  result = (char *) ((arg1)->LogFilename);
    lua_pushstring(L,(const char *)result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_UserData_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    void *arg2 = (void *) 0 ; SWIG_check_num_args("ImGuiIO::UserData",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::UserData",1,"ImGuiIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::UserData",2,"void *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_UserData_set",1,SWIGTYPE_p_ImGuiIO); } 
    arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImGuiIO_UserData_set"); if (arg1) (arg1)->UserData = arg2; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_UserData_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; void *result = 0 ;
    SWIG_check_num_args("ImGuiIO::UserData",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::UserData",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_UserData_get",1,SWIGTYPE_p_ImGuiIO); }  result = (void *) ((arg1)->UserData);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_Fonts_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    ImFontAtlas *arg2 = (ImFontAtlas *) 0 ; SWIG_check_num_args("ImGuiIO::Fonts",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::Fonts",1,"ImGuiIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::Fonts",2,"ImFontAtlas *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_Fonts_set",1,SWIGTYPE_p_ImGuiIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImFontAtlas,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("ImGuiIO_Fonts_set",2,SWIGTYPE_p_ImFontAtlas); }  if (arg1) (arg1)->Fonts = arg2; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_Fonts_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; ImFontAtlas *result = 0 ;
    SWIG_check_num_args("ImGuiIO::Fonts",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::Fonts",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_Fonts_get",1,SWIGTYPE_p_ImGuiIO); }  result = (ImFontAtlas *) ((arg1)->Fonts);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFontAtlas,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiIO_FontGlobalScale_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; float arg2 ;
    SWIG_check_num_args("ImGuiIO::FontGlobalScale",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::FontGlobalScale",1,"ImGuiIO *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::FontGlobalScale",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_FontGlobalScale_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->FontGlobalScale = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_FontGlobalScale_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; float result;
    SWIG_check_num_args("ImGuiIO::FontGlobalScale",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::FontGlobalScale",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_FontGlobalScale_get",1,SWIGTYPE_p_ImGuiIO); }  result = (float) ((arg1)->FontGlobalScale);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_FontAllowUserScaling_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool arg2 ; SWIG_check_num_args("ImGuiIO::FontAllowUserScaling",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::FontAllowUserScaling",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::FontAllowUserScaling",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_FontAllowUserScaling_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->FontAllowUserScaling = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_FontAllowUserScaling_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool result; SWIG_check_num_args("ImGuiIO::FontAllowUserScaling",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::FontAllowUserScaling",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_FontAllowUserScaling_get",1,SWIGTYPE_p_ImGuiIO); }  result = (bool) ((arg1)->FontAllowUserScaling);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_FontDefault_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    ImFont *arg2 = (ImFont *) 0 ; SWIG_check_num_args("ImGuiIO::FontDefault",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::FontDefault",1,"ImGuiIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::FontDefault",2,"ImFont *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_FontDefault_set",1,SWIGTYPE_p_ImGuiIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImFont,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("ImGuiIO_FontDefault_set",2,SWIGTYPE_p_ImFont); }  if (arg1) (arg1)->FontDefault = arg2; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_FontDefault_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    ImFont *result = 0 ; SWIG_check_num_args("ImGuiIO::FontDefault",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::FontDefault",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_FontDefault_get",1,SWIGTYPE_p_ImGuiIO); }  result = (ImFont *) ((arg1)->FontDefault);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFont,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiIO_DisplayFramebufferScale_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    ImVec2 *arg2 = (ImVec2 *) 0 ; SWIG_check_num_args("ImGuiIO::DisplayFramebufferScale",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::DisplayFramebufferScale",1,"ImGuiIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::DisplayFramebufferScale",2,"ImVec2 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_DisplayFramebufferScale_set",1,SWIGTYPE_p_ImGuiIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImGuiIO_DisplayFramebufferScale_set",2,SWIGTYPE_p_ImVec2); } 
    if (arg1) (arg1)->DisplayFramebufferScale = *arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_DisplayFramebufferScale_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    ImVec2 *result = 0 ; SWIG_check_num_args("ImGuiIO::DisplayFramebufferScale",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::DisplayFramebufferScale",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_DisplayFramebufferScale_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (ImVec2 *)& ((arg1)->DisplayFramebufferScale); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigNavSwapGamepadButtons_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool arg2 ; SWIG_check_num_args("ImGuiIO::ConfigNavSwapGamepadButtons",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigNavSwapGamepadButtons",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::ConfigNavSwapGamepadButtons",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigNavSwapGamepadButtons_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->ConfigNavSwapGamepadButtons = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigNavSwapGamepadButtons_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool result; SWIG_check_num_args("ImGuiIO::ConfigNavSwapGamepadButtons",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigNavSwapGamepadButtons",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigNavSwapGamepadButtons_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (bool) ((arg1)->ConfigNavSwapGamepadButtons); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigNavMoveSetMousePos_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool arg2 ; SWIG_check_num_args("ImGuiIO::ConfigNavMoveSetMousePos",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigNavMoveSetMousePos",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::ConfigNavMoveSetMousePos",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigNavMoveSetMousePos_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->ConfigNavMoveSetMousePos = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigNavMoveSetMousePos_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool result; SWIG_check_num_args("ImGuiIO::ConfigNavMoveSetMousePos",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigNavMoveSetMousePos",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigNavMoveSetMousePos_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (bool) ((arg1)->ConfigNavMoveSetMousePos); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigNavCaptureKeyboard_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool arg2 ; SWIG_check_num_args("ImGuiIO::ConfigNavCaptureKeyboard",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigNavCaptureKeyboard",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::ConfigNavCaptureKeyboard",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigNavCaptureKeyboard_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->ConfigNavCaptureKeyboard = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigNavCaptureKeyboard_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool result; SWIG_check_num_args("ImGuiIO::ConfigNavCaptureKeyboard",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigNavCaptureKeyboard",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigNavCaptureKeyboard_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (bool) ((arg1)->ConfigNavCaptureKeyboard); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigNavEscapeClearFocusItem_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool arg2 ; SWIG_check_num_args("ImGuiIO::ConfigNavEscapeClearFocusItem",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigNavEscapeClearFocusItem",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::ConfigNavEscapeClearFocusItem",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigNavEscapeClearFocusItem_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->ConfigNavEscapeClearFocusItem = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigNavEscapeClearFocusItem_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool result; SWIG_check_num_args("ImGuiIO::ConfigNavEscapeClearFocusItem",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigNavEscapeClearFocusItem",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigNavEscapeClearFocusItem_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (bool) ((arg1)->ConfigNavEscapeClearFocusItem); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigNavEscapeClearFocusWindow_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool arg2 ; SWIG_check_num_args("ImGuiIO::ConfigNavEscapeClearFocusWindow",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigNavEscapeClearFocusWindow",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::ConfigNavEscapeClearFocusWindow",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigNavEscapeClearFocusWindow_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->ConfigNavEscapeClearFocusWindow = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigNavEscapeClearFocusWindow_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool result; SWIG_check_num_args("ImGuiIO::ConfigNavEscapeClearFocusWindow",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigNavEscapeClearFocusWindow",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigNavEscapeClearFocusWindow_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (bool) ((arg1)->ConfigNavEscapeClearFocusWindow); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigNavCursorVisibleAuto_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool arg2 ; SWIG_check_num_args("ImGuiIO::ConfigNavCursorVisibleAuto",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigNavCursorVisibleAuto",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::ConfigNavCursorVisibleAuto",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigNavCursorVisibleAuto_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->ConfigNavCursorVisibleAuto = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigNavCursorVisibleAuto_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool result; SWIG_check_num_args("ImGuiIO::ConfigNavCursorVisibleAuto",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigNavCursorVisibleAuto",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigNavCursorVisibleAuto_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (bool) ((arg1)->ConfigNavCursorVisibleAuto); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigNavCursorVisibleAlways_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool arg2 ; SWIG_check_num_args("ImGuiIO::ConfigNavCursorVisibleAlways",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigNavCursorVisibleAlways",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::ConfigNavCursorVisibleAlways",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigNavCursorVisibleAlways_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->ConfigNavCursorVisibleAlways = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigNavCursorVisibleAlways_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool result; SWIG_check_num_args("ImGuiIO::ConfigNavCursorVisibleAlways",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigNavCursorVisibleAlways",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigNavCursorVisibleAlways_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (bool) ((arg1)->ConfigNavCursorVisibleAlways); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigDockingNoSplit_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool arg2 ; SWIG_check_num_args("ImGuiIO::ConfigDockingNoSplit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigDockingNoSplit",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::ConfigDockingNoSplit",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigDockingNoSplit_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->ConfigDockingNoSplit = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigDockingNoSplit_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool result; SWIG_check_num_args("ImGuiIO::ConfigDockingNoSplit",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigDockingNoSplit",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigDockingNoSplit_get",1,SWIGTYPE_p_ImGuiIO); }  result = (bool) ((arg1)->ConfigDockingNoSplit);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigDockingWithShift_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool arg2 ; SWIG_check_num_args("ImGuiIO::ConfigDockingWithShift",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigDockingWithShift",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::ConfigDockingWithShift",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigDockingWithShift_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->ConfigDockingWithShift = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigDockingWithShift_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool result; SWIG_check_num_args("ImGuiIO::ConfigDockingWithShift",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigDockingWithShift",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigDockingWithShift_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (bool) ((arg1)->ConfigDockingWithShift); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigDockingAlwaysTabBar_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool arg2 ; SWIG_check_num_args("ImGuiIO::ConfigDockingAlwaysTabBar",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigDockingAlwaysTabBar",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::ConfigDockingAlwaysTabBar",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigDockingAlwaysTabBar_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->ConfigDockingAlwaysTabBar = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigDockingAlwaysTabBar_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool result; SWIG_check_num_args("ImGuiIO::ConfigDockingAlwaysTabBar",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigDockingAlwaysTabBar",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigDockingAlwaysTabBar_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (bool) ((arg1)->ConfigDockingAlwaysTabBar); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigDockingTransparentPayload_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool arg2 ; SWIG_check_num_args("ImGuiIO::ConfigDockingTransparentPayload",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigDockingTransparentPayload",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::ConfigDockingTransparentPayload",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigDockingTransparentPayload_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->ConfigDockingTransparentPayload = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigDockingTransparentPayload_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool result; SWIG_check_num_args("ImGuiIO::ConfigDockingTransparentPayload",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigDockingTransparentPayload",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigDockingTransparentPayload_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (bool) ((arg1)->ConfigDockingTransparentPayload); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigViewportsNoAutoMerge_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool arg2 ; SWIG_check_num_args("ImGuiIO::ConfigViewportsNoAutoMerge",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigViewportsNoAutoMerge",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::ConfigViewportsNoAutoMerge",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigViewportsNoAutoMerge_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->ConfigViewportsNoAutoMerge = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigViewportsNoAutoMerge_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool result; SWIG_check_num_args("ImGuiIO::ConfigViewportsNoAutoMerge",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigViewportsNoAutoMerge",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigViewportsNoAutoMerge_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (bool) ((arg1)->ConfigViewportsNoAutoMerge); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigViewportsNoTaskBarIcon_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool arg2 ; SWIG_check_num_args("ImGuiIO::ConfigViewportsNoTaskBarIcon",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigViewportsNoTaskBarIcon",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::ConfigViewportsNoTaskBarIcon",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigViewportsNoTaskBarIcon_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->ConfigViewportsNoTaskBarIcon = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigViewportsNoTaskBarIcon_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool result; SWIG_check_num_args("ImGuiIO::ConfigViewportsNoTaskBarIcon",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigViewportsNoTaskBarIcon",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigViewportsNoTaskBarIcon_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (bool) ((arg1)->ConfigViewportsNoTaskBarIcon); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigViewportsNoDecoration_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool arg2 ; SWIG_check_num_args("ImGuiIO::ConfigViewportsNoDecoration",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigViewportsNoDecoration",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::ConfigViewportsNoDecoration",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigViewportsNoDecoration_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->ConfigViewportsNoDecoration = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigViewportsNoDecoration_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool result; SWIG_check_num_args("ImGuiIO::ConfigViewportsNoDecoration",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigViewportsNoDecoration",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigViewportsNoDecoration_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (bool) ((arg1)->ConfigViewportsNoDecoration); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigViewportsNoDefaultParent_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool arg2 ; SWIG_check_num_args("ImGuiIO::ConfigViewportsNoDefaultParent",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigViewportsNoDefaultParent",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::ConfigViewportsNoDefaultParent",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigViewportsNoDefaultParent_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->ConfigViewportsNoDefaultParent = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigViewportsNoDefaultParent_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool result; SWIG_check_num_args("ImGuiIO::ConfigViewportsNoDefaultParent",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigViewportsNoDefaultParent",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigViewportsNoDefaultParent_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (bool) ((arg1)->ConfigViewportsNoDefaultParent); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_MouseDrawCursor_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; bool arg2 ;
    SWIG_check_num_args("ImGuiIO::MouseDrawCursor",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDrawCursor",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::MouseDrawCursor",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MouseDrawCursor_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->MouseDrawCursor = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_MouseDrawCursor_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; bool result;
    SWIG_check_num_args("ImGuiIO::MouseDrawCursor",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDrawCursor",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MouseDrawCursor_get",1,SWIGTYPE_p_ImGuiIO); }  result = (bool) ((arg1)->MouseDrawCursor);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigMacOSXBehaviors_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool arg2 ; SWIG_check_num_args("ImGuiIO::ConfigMacOSXBehaviors",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigMacOSXBehaviors",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::ConfigMacOSXBehaviors",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigMacOSXBehaviors_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->ConfigMacOSXBehaviors = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigMacOSXBehaviors_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool result; SWIG_check_num_args("ImGuiIO::ConfigMacOSXBehaviors",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigMacOSXBehaviors",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigMacOSXBehaviors_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (bool) ((arg1)->ConfigMacOSXBehaviors); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigInputTrickleEventQueue_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool arg2 ; SWIG_check_num_args("ImGuiIO::ConfigInputTrickleEventQueue",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigInputTrickleEventQueue",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::ConfigInputTrickleEventQueue",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigInputTrickleEventQueue_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->ConfigInputTrickleEventQueue = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigInputTrickleEventQueue_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool result; SWIG_check_num_args("ImGuiIO::ConfigInputTrickleEventQueue",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigInputTrickleEventQueue",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigInputTrickleEventQueue_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (bool) ((arg1)->ConfigInputTrickleEventQueue); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigInputTextCursorBlink_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool arg2 ; SWIG_check_num_args("ImGuiIO::ConfigInputTextCursorBlink",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigInputTextCursorBlink",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::ConfigInputTextCursorBlink",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigInputTextCursorBlink_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->ConfigInputTextCursorBlink = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigInputTextCursorBlink_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool result; SWIG_check_num_args("ImGuiIO::ConfigInputTextCursorBlink",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigInputTextCursorBlink",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigInputTextCursorBlink_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (bool) ((arg1)->ConfigInputTextCursorBlink); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigInputTextEnterKeepActive_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool arg2 ; SWIG_check_num_args("ImGuiIO::ConfigInputTextEnterKeepActive",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigInputTextEnterKeepActive",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::ConfigInputTextEnterKeepActive",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigInputTextEnterKeepActive_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->ConfigInputTextEnterKeepActive = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigInputTextEnterKeepActive_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool result; SWIG_check_num_args("ImGuiIO::ConfigInputTextEnterKeepActive",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigInputTextEnterKeepActive",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigInputTextEnterKeepActive_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (bool) ((arg1)->ConfigInputTextEnterKeepActive); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigDragClickToInputText_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool arg2 ; SWIG_check_num_args("ImGuiIO::ConfigDragClickToInputText",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigDragClickToInputText",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::ConfigDragClickToInputText",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigDragClickToInputText_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->ConfigDragClickToInputText = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigDragClickToInputText_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool result; SWIG_check_num_args("ImGuiIO::ConfigDragClickToInputText",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigDragClickToInputText",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigDragClickToInputText_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (bool) ((arg1)->ConfigDragClickToInputText); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigWindowsResizeFromEdges_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool arg2 ; SWIG_check_num_args("ImGuiIO::ConfigWindowsResizeFromEdges",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigWindowsResizeFromEdges",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::ConfigWindowsResizeFromEdges",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigWindowsResizeFromEdges_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->ConfigWindowsResizeFromEdges = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigWindowsResizeFromEdges_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool result; SWIG_check_num_args("ImGuiIO::ConfigWindowsResizeFromEdges",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigWindowsResizeFromEdges",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigWindowsResizeFromEdges_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (bool) ((arg1)->ConfigWindowsResizeFromEdges); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigWindowsMoveFromTitleBarOnly_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiIO *arg1 = (ImGuiIO *) 0 ; bool arg2 ; SWIG_check_num_args("ImGuiIO::ConfigWindowsMoveFromTitleBarOnly",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigWindowsMoveFromTitleBarOnly",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::ConfigWindowsMoveFromTitleBarOnly",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigWindowsMoveFromTitleBarOnly_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->ConfigWindowsMoveFromTitleBarOnly = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigWindowsMoveFromTitleBarOnly_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiIO *arg1 = (ImGuiIO *) 0 ; bool result; SWIG_check_num_args("ImGuiIO::ConfigWindowsMoveFromTitleBarOnly",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigWindowsMoveFromTitleBarOnly",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigWindowsMoveFromTitleBarOnly_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (bool) ((arg1)->ConfigWindowsMoveFromTitleBarOnly); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigWindowsCopyContentsWithCtrlC_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiIO *arg1 = (ImGuiIO *) 0 ; bool arg2 ; SWIG_check_num_args("ImGuiIO::ConfigWindowsCopyContentsWithCtrlC",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigWindowsCopyContentsWithCtrlC",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::ConfigWindowsCopyContentsWithCtrlC",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigWindowsCopyContentsWithCtrlC_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->ConfigWindowsCopyContentsWithCtrlC = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigWindowsCopyContentsWithCtrlC_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiIO *arg1 = (ImGuiIO *) 0 ; bool result; SWIG_check_num_args("ImGuiIO::ConfigWindowsCopyContentsWithCtrlC",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigWindowsCopyContentsWithCtrlC",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigWindowsCopyContentsWithCtrlC_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (bool) ((arg1)->ConfigWindowsCopyContentsWithCtrlC); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigScrollbarScrollByPage_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool arg2 ; SWIG_check_num_args("ImGuiIO::ConfigScrollbarScrollByPage",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigScrollbarScrollByPage",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::ConfigScrollbarScrollByPage",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigScrollbarScrollByPage_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->ConfigScrollbarScrollByPage = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigScrollbarScrollByPage_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool result; SWIG_check_num_args("ImGuiIO::ConfigScrollbarScrollByPage",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigScrollbarScrollByPage",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigScrollbarScrollByPage_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (bool) ((arg1)->ConfigScrollbarScrollByPage); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigMemoryCompactTimer_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    float arg2 ; SWIG_check_num_args("ImGuiIO::ConfigMemoryCompactTimer",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigMemoryCompactTimer",1,"ImGuiIO *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::ConfigMemoryCompactTimer",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigMemoryCompactTimer_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->ConfigMemoryCompactTimer = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigMemoryCompactTimer_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    float result; SWIG_check_num_args("ImGuiIO::ConfigMemoryCompactTimer",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigMemoryCompactTimer",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigMemoryCompactTimer_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (float) ((arg1)->ConfigMemoryCompactTimer); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_MouseDoubleClickTime_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    float arg2 ; SWIG_check_num_args("ImGuiIO::MouseDoubleClickTime",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDoubleClickTime",1,"ImGuiIO *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::MouseDoubleClickTime",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MouseDoubleClickTime_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->MouseDoubleClickTime = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_MouseDoubleClickTime_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    float result; SWIG_check_num_args("ImGuiIO::MouseDoubleClickTime",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDoubleClickTime",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MouseDoubleClickTime_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (float) ((arg1)->MouseDoubleClickTime); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_MouseDoubleClickMaxDist_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    float arg2 ; SWIG_check_num_args("ImGuiIO::MouseDoubleClickMaxDist",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDoubleClickMaxDist",1,"ImGuiIO *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::MouseDoubleClickMaxDist",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MouseDoubleClickMaxDist_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->MouseDoubleClickMaxDist = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_MouseDoubleClickMaxDist_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    float result; SWIG_check_num_args("ImGuiIO::MouseDoubleClickMaxDist",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDoubleClickMaxDist",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MouseDoubleClickMaxDist_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (float) ((arg1)->MouseDoubleClickMaxDist); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_MouseDragThreshold_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; float arg2 ;
    SWIG_check_num_args("ImGuiIO::MouseDragThreshold",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDragThreshold",1,"ImGuiIO *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::MouseDragThreshold",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MouseDragThreshold_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->MouseDragThreshold = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_MouseDragThreshold_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    float result; SWIG_check_num_args("ImGuiIO::MouseDragThreshold",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDragThreshold",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MouseDragThreshold_get",1,SWIGTYPE_p_ImGuiIO); }  result = (float) ((arg1)->MouseDragThreshold);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_KeyRepeatDelay_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; float arg2 ;
    SWIG_check_num_args("ImGuiIO::KeyRepeatDelay",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::KeyRepeatDelay",1,"ImGuiIO *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::KeyRepeatDelay",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_KeyRepeatDelay_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->KeyRepeatDelay = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_KeyRepeatDelay_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; float result;
    SWIG_check_num_args("ImGuiIO::KeyRepeatDelay",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::KeyRepeatDelay",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_KeyRepeatDelay_get",1,SWIGTYPE_p_ImGuiIO); }  result = (float) ((arg1)->KeyRepeatDelay);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_KeyRepeatRate_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; float arg2 ;
    SWIG_check_num_args("ImGuiIO::KeyRepeatRate",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::KeyRepeatRate",1,"ImGuiIO *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::KeyRepeatRate",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_KeyRepeatRate_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->KeyRepeatRate = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_KeyRepeatRate_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; float result;
    SWIG_check_num_args("ImGuiIO::KeyRepeatRate",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::KeyRepeatRate",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_KeyRepeatRate_get",1,SWIGTYPE_p_ImGuiIO); }  result = (float) ((arg1)->KeyRepeatRate);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigErrorRecovery_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; bool arg2 ;
    SWIG_check_num_args("ImGuiIO::ConfigErrorRecovery",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigErrorRecovery",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::ConfigErrorRecovery",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigErrorRecovery_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->ConfigErrorRecovery = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigErrorRecovery_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool result; SWIG_check_num_args("ImGuiIO::ConfigErrorRecovery",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigErrorRecovery",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigErrorRecovery_get",1,SWIGTYPE_p_ImGuiIO); }  result = (bool) ((arg1)->ConfigErrorRecovery);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigErrorRecoveryEnableAssert_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool arg2 ; SWIG_check_num_args("ImGuiIO::ConfigErrorRecoveryEnableAssert",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigErrorRecoveryEnableAssert",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::ConfigErrorRecoveryEnableAssert",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigErrorRecoveryEnableAssert_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->ConfigErrorRecoveryEnableAssert = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigErrorRecoveryEnableAssert_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool result; SWIG_check_num_args("ImGuiIO::ConfigErrorRecoveryEnableAssert",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigErrorRecoveryEnableAssert",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigErrorRecoveryEnableAssert_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (bool) ((arg1)->ConfigErrorRecoveryEnableAssert); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigErrorRecoveryEnableDebugLog_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiIO *arg1 = (ImGuiIO *) 0 ; bool arg2 ; SWIG_check_num_args("ImGuiIO::ConfigErrorRecoveryEnableDebugLog",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigErrorRecoveryEnableDebugLog",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::ConfigErrorRecoveryEnableDebugLog",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigErrorRecoveryEnableDebugLog_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->ConfigErrorRecoveryEnableDebugLog = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigErrorRecoveryEnableDebugLog_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiIO *arg1 = (ImGuiIO *) 0 ; bool result; SWIG_check_num_args("ImGuiIO::ConfigErrorRecoveryEnableDebugLog",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigErrorRecoveryEnableDebugLog",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigErrorRecoveryEnableDebugLog_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (bool) ((arg1)->ConfigErrorRecoveryEnableDebugLog); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigErrorRecoveryEnableTooltip_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiIO *arg1 = (ImGuiIO *) 0 ; bool arg2 ; SWIG_check_num_args("ImGuiIO::ConfigErrorRecoveryEnableTooltip",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigErrorRecoveryEnableTooltip",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::ConfigErrorRecoveryEnableTooltip",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigErrorRecoveryEnableTooltip_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->ConfigErrorRecoveryEnableTooltip = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigErrorRecoveryEnableTooltip_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiIO *arg1 = (ImGuiIO *) 0 ; bool result; SWIG_check_num_args("ImGuiIO::ConfigErrorRecoveryEnableTooltip",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigErrorRecoveryEnableTooltip",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigErrorRecoveryEnableTooltip_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (bool) ((arg1)->ConfigErrorRecoveryEnableTooltip); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigDebugIsDebuggerPresent_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool arg2 ; SWIG_check_num_args("ImGuiIO::ConfigDebugIsDebuggerPresent",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigDebugIsDebuggerPresent",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::ConfigDebugIsDebuggerPresent",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigDebugIsDebuggerPresent_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->ConfigDebugIsDebuggerPresent = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigDebugIsDebuggerPresent_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool result; SWIG_check_num_args("ImGuiIO::ConfigDebugIsDebuggerPresent",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigDebugIsDebuggerPresent",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigDebugIsDebuggerPresent_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (bool) ((arg1)->ConfigDebugIsDebuggerPresent); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigDebugHighlightIdConflicts_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool arg2 ; SWIG_check_num_args("ImGuiIO::ConfigDebugHighlightIdConflicts",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigDebugHighlightIdConflicts",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::ConfigDebugHighlightIdConflicts",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigDebugHighlightIdConflicts_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->ConfigDebugHighlightIdConflicts = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigDebugHighlightIdConflicts_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool result; SWIG_check_num_args("ImGuiIO::ConfigDebugHighlightIdConflicts",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigDebugHighlightIdConflicts",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigDebugHighlightIdConflicts_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (bool) ((arg1)->ConfigDebugHighlightIdConflicts); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigDebugBeginReturnValueOnce_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool arg2 ; SWIG_check_num_args("ImGuiIO::ConfigDebugBeginReturnValueOnce",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigDebugBeginReturnValueOnce",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::ConfigDebugBeginReturnValueOnce",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigDebugBeginReturnValueOnce_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->ConfigDebugBeginReturnValueOnce = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigDebugBeginReturnValueOnce_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool result; SWIG_check_num_args("ImGuiIO::ConfigDebugBeginReturnValueOnce",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigDebugBeginReturnValueOnce",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigDebugBeginReturnValueOnce_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (bool) ((arg1)->ConfigDebugBeginReturnValueOnce); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigDebugBeginReturnValueLoop_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool arg2 ; SWIG_check_num_args("ImGuiIO::ConfigDebugBeginReturnValueLoop",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigDebugBeginReturnValueLoop",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::ConfigDebugBeginReturnValueLoop",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigDebugBeginReturnValueLoop_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->ConfigDebugBeginReturnValueLoop = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigDebugBeginReturnValueLoop_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool result; SWIG_check_num_args("ImGuiIO::ConfigDebugBeginReturnValueLoop",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigDebugBeginReturnValueLoop",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigDebugBeginReturnValueLoop_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (bool) ((arg1)->ConfigDebugBeginReturnValueLoop); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigDebugIgnoreFocusLoss_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool arg2 ; SWIG_check_num_args("ImGuiIO::ConfigDebugIgnoreFocusLoss",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigDebugIgnoreFocusLoss",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::ConfigDebugIgnoreFocusLoss",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigDebugIgnoreFocusLoss_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->ConfigDebugIgnoreFocusLoss = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigDebugIgnoreFocusLoss_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool result; SWIG_check_num_args("ImGuiIO::ConfigDebugIgnoreFocusLoss",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigDebugIgnoreFocusLoss",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigDebugIgnoreFocusLoss_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (bool) ((arg1)->ConfigDebugIgnoreFocusLoss); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigDebugIniSettings_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool arg2 ; SWIG_check_num_args("ImGuiIO::ConfigDebugIniSettings",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigDebugIniSettings",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::ConfigDebugIniSettings",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigDebugIniSettings_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->ConfigDebugIniSettings = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ConfigDebugIniSettings_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool result; SWIG_check_num_args("ImGuiIO::ConfigDebugIniSettings",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ConfigDebugIniSettings",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ConfigDebugIniSettings_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (bool) ((arg1)->ConfigDebugIniSettings); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_BackendPlatformName_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    char *result = 0 ; SWIG_check_num_args("ImGuiIO::BackendPlatformName",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::BackendPlatformName",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_BackendPlatformName_get",1,SWIGTYPE_p_ImGuiIO); }  result = (char *) ((arg1)->BackendPlatformName);
    lua_pushstring(L,(const char *)result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_BackendRendererName_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    char *result = 0 ; SWIG_check_num_args("ImGuiIO::BackendRendererName",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::BackendRendererName",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_BackendRendererName_get",1,SWIGTYPE_p_ImGuiIO); }  result = (char *) ((arg1)->BackendRendererName);
    lua_pushstring(L,(const char *)result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_BackendPlatformUserData_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    void *arg2 = (void *) 0 ; SWIG_check_num_args("ImGuiIO::BackendPlatformUserData",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::BackendPlatformUserData",1,"ImGuiIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::BackendPlatformUserData",2,"void *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_BackendPlatformUserData_set",1,SWIGTYPE_p_ImGuiIO); } 
    arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImGuiIO_BackendPlatformUserData_set");
    if (arg1) (arg1)->BackendPlatformUserData = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_BackendPlatformUserData_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    void *result = 0 ; SWIG_check_num_args("ImGuiIO::BackendPlatformUserData",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::BackendPlatformUserData",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_BackendPlatformUserData_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (void *) ((arg1)->BackendPlatformUserData); SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_BackendRendererUserData_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    void *arg2 = (void *) 0 ; SWIG_check_num_args("ImGuiIO::BackendRendererUserData",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::BackendRendererUserData",1,"ImGuiIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::BackendRendererUserData",2,"void *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_BackendRendererUserData_set",1,SWIGTYPE_p_ImGuiIO); } 
    arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImGuiIO_BackendRendererUserData_set");
    if (arg1) (arg1)->BackendRendererUserData = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_BackendRendererUserData_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    void *result = 0 ; SWIG_check_num_args("ImGuiIO::BackendRendererUserData",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::BackendRendererUserData",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_BackendRendererUserData_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (void *) ((arg1)->BackendRendererUserData); SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_BackendLanguageUserData_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    void *arg2 = (void *) 0 ; SWIG_check_num_args("ImGuiIO::BackendLanguageUserData",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::BackendLanguageUserData",1,"ImGuiIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::BackendLanguageUserData",2,"void *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_BackendLanguageUserData_set",1,SWIGTYPE_p_ImGuiIO); } 
    arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImGuiIO_BackendLanguageUserData_set");
    if (arg1) (arg1)->BackendLanguageUserData = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_BackendLanguageUserData_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    void *result = 0 ; SWIG_check_num_args("ImGuiIO::BackendLanguageUserData",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::BackendLanguageUserData",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_BackendLanguageUserData_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (void *) ((arg1)->BackendLanguageUserData); SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_AddKeyEvent(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; ImGuiKey arg2 ;
    bool arg3 ; SWIG_check_num_args("ImGuiIO::AddKeyEvent",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::AddKeyEvent",1,"ImGuiIO *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::AddKeyEvent",2,"ImGuiKey");
    if(!lua_isboolean(L,3)) SWIG_fail_arg("ImGuiIO::AddKeyEvent",3,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_AddKeyEvent",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (ImGuiKey)(int)lua_tonumber(L, 2);
    arg3 = (lua_toboolean(L, 3)!=0); (arg1)->AddKeyEvent(arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiIO_AddKeyAnalogEvent(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; ImGuiKey arg2 ;
    bool arg3 ; float arg4 ; SWIG_check_num_args("ImGuiIO::AddKeyAnalogEvent",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::AddKeyAnalogEvent",1,"ImGuiIO *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::AddKeyAnalogEvent",2,"ImGuiKey");
    if(!lua_isboolean(L,3)) SWIG_fail_arg("ImGuiIO::AddKeyAnalogEvent",3,"bool");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGuiIO::AddKeyAnalogEvent",4,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_AddKeyAnalogEvent",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (ImGuiKey)(int)lua_tonumber(L, 2);
    arg3 = (lua_toboolean(L, 3)!=0); arg4 = (float)lua_tonumber(L, 4); (arg1)->AddKeyAnalogEvent(arg2,arg3,arg4);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_AddMousePosEvent(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; float arg2 ;
    float arg3 ; SWIG_check_num_args("ImGuiIO::AddMousePosEvent",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::AddMousePosEvent",1,"ImGuiIO *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::AddMousePosEvent",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGuiIO::AddMousePosEvent",3,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_AddMousePosEvent",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3); (arg1)->AddMousePosEvent(arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiIO_AddMouseButtonEvent(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; int arg2 ;
    bool arg3 ; SWIG_check_num_args("ImGuiIO::AddMouseButtonEvent",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::AddMouseButtonEvent",1,"ImGuiIO *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::AddMouseButtonEvent",2,"int");
    if(!lua_isboolean(L,3)) SWIG_fail_arg("ImGuiIO::AddMouseButtonEvent",3,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_AddMouseButtonEvent",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (int)lua_tonumber(L, 2);
    arg3 = (lua_toboolean(L, 3)!=0); (arg1)->AddMouseButtonEvent(arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiIO_AddMouseWheelEvent(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; float arg2 ;
    float arg3 ; SWIG_check_num_args("ImGuiIO::AddMouseWheelEvent",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::AddMouseWheelEvent",1,"ImGuiIO *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::AddMouseWheelEvent",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGuiIO::AddMouseWheelEvent",3,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_AddMouseWheelEvent",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3); (arg1)->AddMouseWheelEvent(arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiIO_AddMouseSourceEvent(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    ImGuiMouseSource arg2 ; SWIG_check_num_args("ImGuiIO::AddMouseSourceEvent",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::AddMouseSourceEvent",1,"ImGuiIO *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::AddMouseSourceEvent",2,"ImGuiMouseSource");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_AddMouseSourceEvent",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (ImGuiMouseSource)(int)lua_tonumber(L, 2);
    (arg1)->AddMouseSourceEvent(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_AddMouseViewportEvent(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    ImGuiID arg2 ; SWIG_check_num_args("ImGuiIO::AddMouseViewportEvent",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::AddMouseViewportEvent",1,"ImGuiIO *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::AddMouseViewportEvent",2,"ImGuiID");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_AddMouseViewportEvent",1,SWIGTYPE_p_ImGuiIO); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (ImGuiID)lua_tonumber(L, 2);
    (arg1)->AddMouseViewportEvent(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_AddFocusEvent(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; bool arg2 ;
    SWIG_check_num_args("ImGuiIO::AddFocusEvent",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::AddFocusEvent",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::AddFocusEvent",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_AddFocusEvent",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    (arg1)->AddFocusEvent(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_AddInputCharacter(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    unsigned int arg2 ; SWIG_check_num_args("ImGuiIO::AddInputCharacter",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::AddInputCharacter",1,"ImGuiIO *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::AddInputCharacter",2,"unsigned int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_AddInputCharacter",1,SWIGTYPE_p_ImGuiIO); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (unsigned int)lua_tonumber(L, 2);
    (arg1)->AddInputCharacter(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_AddInputCharacterUTF16(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    ImWchar16 arg2 ; SWIG_check_num_args("ImGuiIO::AddInputCharacterUTF16",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::AddInputCharacterUTF16",1,"ImGuiIO *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::AddInputCharacterUTF16",2,"ImWchar16");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_AddInputCharacterUTF16",1,SWIGTYPE_p_ImGuiIO); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (ImWchar16)lua_tonumber(L, 2);
    (arg1)->AddInputCharacterUTF16(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_AddInputCharactersUTF8(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    char *arg2 = (char *) 0 ; SWIG_check_num_args("ImGuiIO::AddInputCharactersUTF8",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::AddInputCharactersUTF8",1,"ImGuiIO *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGuiIO::AddInputCharactersUTF8",2,"char const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_AddInputCharactersUTF8",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (char *)lua_tostring(L, 2);
    (arg1)->AddInputCharactersUTF8((char const *)arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_SetKeyEventNativeData(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    ImGuiKey arg2 ; int arg3 ; int arg4 ; int arg5 = (int) -1 ; SWIG_check_num_args("ImGuiIO::SetKeyEventNativeData",4,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::SetKeyEventNativeData",1,"ImGuiIO *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::SetKeyEventNativeData",2,"ImGuiKey");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGuiIO::SetKeyEventNativeData",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ImGuiIO::SetKeyEventNativeData",4,"int");
    if(lua_gettop(L)>=5 && !lua_isnumber(L,5)) SWIG_fail_arg("ImGuiIO::SetKeyEventNativeData",5,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_SetKeyEventNativeData",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (ImGuiKey)(int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); if(lua_gettop(L)>=5){ arg5 = (int)lua_tonumber(L, 5);} 
    (arg1)->SetKeyEventNativeData(arg2,arg3,arg4,arg5); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_SetAppAcceptingEvents(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; bool arg2 ;
    SWIG_check_num_args("ImGuiIO::SetAppAcceptingEvents",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::SetAppAcceptingEvents",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::SetAppAcceptingEvents",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_SetAppAcceptingEvents",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    (arg1)->SetAppAcceptingEvents(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ClearEventsQueue(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    SWIG_check_num_args("ImGuiIO::ClearEventsQueue",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ClearEventsQueue",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ClearEventsQueue",1,SWIGTYPE_p_ImGuiIO); }  (arg1)->ClearEventsQueue(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ClearInputKeys(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    SWIG_check_num_args("ImGuiIO::ClearInputKeys",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ClearInputKeys",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ClearInputKeys",1,SWIGTYPE_p_ImGuiIO); }  (arg1)->ClearInputKeys(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ClearInputMouse(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    SWIG_check_num_args("ImGuiIO::ClearInputMouse",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ClearInputMouse",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ClearInputMouse",1,SWIGTYPE_p_ImGuiIO); }  (arg1)->ClearInputMouse(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ClearInputCharacters(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    SWIG_check_num_args("ImGuiIO::ClearInputCharacters",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ClearInputCharacters",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ClearInputCharacters",1,SWIGTYPE_p_ImGuiIO); }  (arg1)->ClearInputCharacters(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_WantCaptureMouse_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; bool arg2 ;
    SWIG_check_num_args("ImGuiIO::WantCaptureMouse",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::WantCaptureMouse",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::WantCaptureMouse",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_WantCaptureMouse_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->WantCaptureMouse = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_WantCaptureMouse_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; bool result;
    SWIG_check_num_args("ImGuiIO::WantCaptureMouse",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::WantCaptureMouse",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_WantCaptureMouse_get",1,SWIGTYPE_p_ImGuiIO); }  result = (bool) ((arg1)->WantCaptureMouse);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_WantCaptureKeyboard_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; bool arg2 ;
    SWIG_check_num_args("ImGuiIO::WantCaptureKeyboard",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::WantCaptureKeyboard",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::WantCaptureKeyboard",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_WantCaptureKeyboard_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->WantCaptureKeyboard = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_WantCaptureKeyboard_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool result; SWIG_check_num_args("ImGuiIO::WantCaptureKeyboard",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::WantCaptureKeyboard",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_WantCaptureKeyboard_get",1,SWIGTYPE_p_ImGuiIO); }  result = (bool) ((arg1)->WantCaptureKeyboard);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_WantTextInput_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; bool arg2 ;
    SWIG_check_num_args("ImGuiIO::WantTextInput",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::WantTextInput",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::WantTextInput",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_WantTextInput_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->WantTextInput = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_WantTextInput_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; bool result;
    SWIG_check_num_args("ImGuiIO::WantTextInput",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::WantTextInput",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_WantTextInput_get",1,SWIGTYPE_p_ImGuiIO); }  result = (bool) ((arg1)->WantTextInput);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_WantSetMousePos_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; bool arg2 ;
    SWIG_check_num_args("ImGuiIO::WantSetMousePos",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::WantSetMousePos",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::WantSetMousePos",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_WantSetMousePos_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->WantSetMousePos = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_WantSetMousePos_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; bool result;
    SWIG_check_num_args("ImGuiIO::WantSetMousePos",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::WantSetMousePos",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_WantSetMousePos_get",1,SWIGTYPE_p_ImGuiIO); }  result = (bool) ((arg1)->WantSetMousePos);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_WantSaveIniSettings_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; bool arg2 ;
    SWIG_check_num_args("ImGuiIO::WantSaveIniSettings",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::WantSaveIniSettings",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::WantSaveIniSettings",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_WantSaveIniSettings_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->WantSaveIniSettings = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_WantSaveIniSettings_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool result; SWIG_check_num_args("ImGuiIO::WantSaveIniSettings",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::WantSaveIniSettings",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_WantSaveIniSettings_get",1,SWIGTYPE_p_ImGuiIO); }  result = (bool) ((arg1)->WantSaveIniSettings);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_NavActive_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; bool arg2 ;
    SWIG_check_num_args("ImGuiIO::NavActive",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::NavActive",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::NavActive",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_NavActive_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->NavActive = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_NavActive_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; bool result;
    SWIG_check_num_args("ImGuiIO::NavActive",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::NavActive",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_NavActive_get",1,SWIGTYPE_p_ImGuiIO); }  result = (bool) ((arg1)->NavActive);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_NavVisible_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; bool arg2 ;
    SWIG_check_num_args("ImGuiIO::NavVisible",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::NavVisible",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::NavVisible",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_NavVisible_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->NavVisible = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_NavVisible_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; bool result;
    SWIG_check_num_args("ImGuiIO::NavVisible",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::NavVisible",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_NavVisible_get",1,SWIGTYPE_p_ImGuiIO); }  result = (bool) ((arg1)->NavVisible);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_Framerate_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; float arg2 ;
    SWIG_check_num_args("ImGuiIO::Framerate",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::Framerate",1,"ImGuiIO *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::Framerate",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_Framerate_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->Framerate = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_Framerate_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; float result;
    SWIG_check_num_args("ImGuiIO::Framerate",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::Framerate",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_Framerate_get",1,SWIGTYPE_p_ImGuiIO); }  result = (float) ((arg1)->Framerate);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_MetricsRenderVertices_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    int arg2 ; SWIG_check_num_args("ImGuiIO::MetricsRenderVertices",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MetricsRenderVertices",1,"ImGuiIO *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::MetricsRenderVertices",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MetricsRenderVertices_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->MetricsRenderVertices = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_MetricsRenderVertices_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    int result; SWIG_check_num_args("ImGuiIO::MetricsRenderVertices",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MetricsRenderVertices",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MetricsRenderVertices_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (int) ((arg1)->MetricsRenderVertices); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_MetricsRenderIndices_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; int arg2 ;
    SWIG_check_num_args("ImGuiIO::MetricsRenderIndices",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MetricsRenderIndices",1,"ImGuiIO *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::MetricsRenderIndices",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MetricsRenderIndices_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->MetricsRenderIndices = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_MetricsRenderIndices_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    int result; SWIG_check_num_args("ImGuiIO::MetricsRenderIndices",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MetricsRenderIndices",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MetricsRenderIndices_get",1,SWIGTYPE_p_ImGuiIO); }  result = (int) ((arg1)->MetricsRenderIndices);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_MetricsRenderWindows_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; int arg2 ;
    SWIG_check_num_args("ImGuiIO::MetricsRenderWindows",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MetricsRenderWindows",1,"ImGuiIO *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::MetricsRenderWindows",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MetricsRenderWindows_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->MetricsRenderWindows = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_MetricsRenderWindows_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    int result; SWIG_check_num_args("ImGuiIO::MetricsRenderWindows",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MetricsRenderWindows",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MetricsRenderWindows_get",1,SWIGTYPE_p_ImGuiIO); }  result = (int) ((arg1)->MetricsRenderWindows);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_MetricsActiveWindows_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; int arg2 ;
    SWIG_check_num_args("ImGuiIO::MetricsActiveWindows",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MetricsActiveWindows",1,"ImGuiIO *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::MetricsActiveWindows",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MetricsActiveWindows_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->MetricsActiveWindows = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_MetricsActiveWindows_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    int result; SWIG_check_num_args("ImGuiIO::MetricsActiveWindows",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MetricsActiveWindows",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MetricsActiveWindows_get",1,SWIGTYPE_p_ImGuiIO); }  result = (int) ((arg1)->MetricsActiveWindows);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_MouseDelta_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    ImVec2 *arg2 = (ImVec2 *) 0 ; SWIG_check_num_args("ImGuiIO::MouseDelta",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDelta",1,"ImGuiIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::MouseDelta",2,"ImVec2 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MouseDelta_set",1,SWIGTYPE_p_ImGuiIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImGuiIO_MouseDelta_set",2,SWIGTYPE_p_ImVec2); }  if (arg1) (arg1)->MouseDelta = *arg2; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_MouseDelta_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; ImVec2 *result = 0 ;
    SWIG_check_num_args("ImGuiIO::MouseDelta",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDelta",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MouseDelta_get",1,SWIGTYPE_p_ImGuiIO); }  result = (ImVec2 *)& ((arg1)->MouseDelta);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiIO_Ctx_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    ImGuiContext *arg2 = (ImGuiContext *) 0 ; SWIG_check_num_args("ImGuiIO::Ctx",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::Ctx",1,"ImGuiIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::Ctx",2,"ImGuiContext *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_Ctx_set",1,SWIGTYPE_p_ImGuiIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiContext,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("ImGuiIO_Ctx_set",2,SWIGTYPE_p_ImGuiContext); }  if (arg1) (arg1)->Ctx = arg2; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_Ctx_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; ImGuiContext *result = 0 ;
    SWIG_check_num_args("ImGuiIO::Ctx",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::Ctx",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_Ctx_get",1,SWIGTYPE_p_ImGuiIO); }  result = (ImGuiContext *) ((arg1)->Ctx);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiContext,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiIO_MousePos_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    ImVec2 *arg2 = (ImVec2 *) 0 ; SWIG_check_num_args("ImGuiIO::MousePos",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MousePos",1,"ImGuiIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::MousePos",2,"ImVec2 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MousePos_set",1,SWIGTYPE_p_ImGuiIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImGuiIO_MousePos_set",2,SWIGTYPE_p_ImVec2); }  if (arg1) (arg1)->MousePos = *arg2; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_MousePos_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; ImVec2 *result = 0 ;
    SWIG_check_num_args("ImGuiIO::MousePos",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MousePos",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MousePos_get",1,SWIGTYPE_p_ImGuiIO); }  result = (ImVec2 *)& ((arg1)->MousePos);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiIO_MouseDown_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool *arg2 = (bool *) (bool *)0 ; SWIG_check_num_args("ImGuiIO::MouseDown",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDown",1,"ImGuiIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::MouseDown",2,"bool [5]");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MouseDown_set",1,SWIGTYPE_p_ImGuiIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
      SWIG_fail_ptr("ImGuiIO_MouseDown_set",2,SWIGTYPE_p_bool); }  { size_t ii; bool *b = (bool *) arg1->MouseDown;
      for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((bool *) arg2 + ii); }  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiIO_MouseDown_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; bool *result = 0 ;
    SWIG_check_num_args("ImGuiIO::MouseDown",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDown",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MouseDown_get",1,SWIGTYPE_p_ImGuiIO); }  result = (bool *)(bool *) ((arg1)->MouseDown);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_bool,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_MouseWheel_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; float arg2 ;
    SWIG_check_num_args("ImGuiIO::MouseWheel",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseWheel",1,"ImGuiIO *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::MouseWheel",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MouseWheel_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->MouseWheel = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_MouseWheel_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; float result;
    SWIG_check_num_args("ImGuiIO::MouseWheel",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseWheel",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MouseWheel_get",1,SWIGTYPE_p_ImGuiIO); }  result = (float) ((arg1)->MouseWheel);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_MouseWheelH_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; float arg2 ;
    SWIG_check_num_args("ImGuiIO::MouseWheelH",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseWheelH",1,"ImGuiIO *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::MouseWheelH",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MouseWheelH_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->MouseWheelH = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_MouseWheelH_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; float result;
    SWIG_check_num_args("ImGuiIO::MouseWheelH",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseWheelH",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MouseWheelH_get",1,SWIGTYPE_p_ImGuiIO); }  result = (float) ((arg1)->MouseWheelH);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_MouseSource_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    ImGuiMouseSource arg2 ; SWIG_check_num_args("ImGuiIO::MouseSource",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseSource",1,"ImGuiIO *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::MouseSource",2,"ImGuiMouseSource");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MouseSource_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (ImGuiMouseSource)(int)lua_tonumber(L, 2);
    if (arg1) (arg1)->MouseSource = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_MouseSource_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    ImGuiMouseSource result; SWIG_check_num_args("ImGuiIO::MouseSource",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseSource",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MouseSource_get",1,SWIGTYPE_p_ImGuiIO); }  result = (ImGuiMouseSource) ((arg1)->MouseSource);
    lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_MouseHoveredViewport_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    ImGuiID arg2 ; SWIG_check_num_args("ImGuiIO::MouseHoveredViewport",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseHoveredViewport",1,"ImGuiIO *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::MouseHoveredViewport",2,"ImGuiID");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MouseHoveredViewport_set",1,SWIGTYPE_p_ImGuiIO); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (ImGuiID)lua_tonumber(L, 2);
    if (arg1) (arg1)->MouseHoveredViewport = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_MouseHoveredViewport_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    ImGuiID result; SWIG_check_num_args("ImGuiIO::MouseHoveredViewport",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseHoveredViewport",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MouseHoveredViewport_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (ImGuiID) ((arg1)->MouseHoveredViewport); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_KeyCtrl_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; bool arg2 ;
    SWIG_check_num_args("ImGuiIO::KeyCtrl",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::KeyCtrl",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::KeyCtrl",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_KeyCtrl_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->KeyCtrl = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_KeyCtrl_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; bool result;
    SWIG_check_num_args("ImGuiIO::KeyCtrl",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::KeyCtrl",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_KeyCtrl_get",1,SWIGTYPE_p_ImGuiIO); }  result = (bool) ((arg1)->KeyCtrl);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_KeyShift_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; bool arg2 ;
    SWIG_check_num_args("ImGuiIO::KeyShift",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::KeyShift",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::KeyShift",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_KeyShift_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->KeyShift = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_KeyShift_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; bool result;
    SWIG_check_num_args("ImGuiIO::KeyShift",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::KeyShift",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_KeyShift_get",1,SWIGTYPE_p_ImGuiIO); }  result = (bool) ((arg1)->KeyShift);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_KeyAlt_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; bool arg2 ;
    SWIG_check_num_args("ImGuiIO::KeyAlt",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::KeyAlt",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::KeyAlt",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_KeyAlt_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->KeyAlt = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_KeyAlt_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; bool result;
    SWIG_check_num_args("ImGuiIO::KeyAlt",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::KeyAlt",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_KeyAlt_get",1,SWIGTYPE_p_ImGuiIO); }  result = (bool) ((arg1)->KeyAlt);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_KeySuper_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; bool arg2 ;
    SWIG_check_num_args("ImGuiIO::KeySuper",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::KeySuper",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::KeySuper",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_KeySuper_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->KeySuper = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_KeySuper_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; bool result;
    SWIG_check_num_args("ImGuiIO::KeySuper",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::KeySuper",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_KeySuper_get",1,SWIGTYPE_p_ImGuiIO); }  result = (bool) ((arg1)->KeySuper);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_KeyMods_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; ImGuiKeyChord arg2 ;
    SWIG_check_num_args("ImGuiIO::KeyMods",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::KeyMods",1,"ImGuiIO *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::KeyMods",2,"ImGuiKeyChord");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_KeyMods_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (ImGuiKeyChord)lua_tonumber(L, 2);
    if (arg1) (arg1)->KeyMods = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_KeyMods_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; ImGuiKeyChord result;
    SWIG_check_num_args("ImGuiIO::KeyMods",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::KeyMods",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_KeyMods_get",1,SWIGTYPE_p_ImGuiIO); }  result = (ImGuiKeyChord) ((arg1)->KeyMods);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_KeysData_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    ImGuiKeyData *arg2 = (ImGuiKeyData *) (ImGuiKeyData *)0 ; SWIG_check_num_args("ImGuiIO::KeysData",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::KeysData",1,"ImGuiIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::KeysData",2,"ImGuiKeyData [ImGuiKey_NamedKey_COUNT]");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_KeysData_set",1,SWIGTYPE_p_ImGuiIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiKeyData,0))){
      SWIG_fail_ptr("ImGuiIO_KeysData_set",2,SWIGTYPE_p_ImGuiKeyData); }  { size_t ii;
      ImGuiKeyData *b = (ImGuiKeyData *) arg1->KeysData;
      for (ii = 0; ii < (size_t)ImGuiKey_NamedKey_COUNT; ii++) b[ii] = *((ImGuiKeyData *) arg2 + ii); }  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_KeysData_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    ImGuiKeyData *result = 0 ; SWIG_check_num_args("ImGuiIO::KeysData",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::KeysData",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_KeysData_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (ImGuiKeyData *)(ImGuiKeyData *) ((arg1)->KeysData);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiKeyData,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiIO_WantCaptureMouseUnlessPopupClose_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiIO *arg1 = (ImGuiIO *) 0 ; bool arg2 ; SWIG_check_num_args("ImGuiIO::WantCaptureMouseUnlessPopupClose",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::WantCaptureMouseUnlessPopupClose",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::WantCaptureMouseUnlessPopupClose",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_WantCaptureMouseUnlessPopupClose_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->WantCaptureMouseUnlessPopupClose = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_WantCaptureMouseUnlessPopupClose_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiIO *arg1 = (ImGuiIO *) 0 ; bool result; SWIG_check_num_args("ImGuiIO::WantCaptureMouseUnlessPopupClose",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::WantCaptureMouseUnlessPopupClose",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_WantCaptureMouseUnlessPopupClose_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (bool) ((arg1)->WantCaptureMouseUnlessPopupClose); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_MousePosPrev_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    ImVec2 *arg2 = (ImVec2 *) 0 ; SWIG_check_num_args("ImGuiIO::MousePosPrev",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MousePosPrev",1,"ImGuiIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::MousePosPrev",2,"ImVec2 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MousePosPrev_set",1,SWIGTYPE_p_ImGuiIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImGuiIO_MousePosPrev_set",2,SWIGTYPE_p_ImVec2); }  if (arg1) (arg1)->MousePosPrev = *arg2; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_MousePosPrev_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    ImVec2 *result = 0 ; SWIG_check_num_args("ImGuiIO::MousePosPrev",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MousePosPrev",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MousePosPrev_get",1,SWIGTYPE_p_ImGuiIO); }  result = (ImVec2 *)& ((arg1)->MousePosPrev);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiIO_MouseClickedPos_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    ImVec2 *arg2 = (ImVec2 *) (ImVec2 *)0 ; SWIG_check_num_args("ImGuiIO::MouseClickedPos",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseClickedPos",1,"ImGuiIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::MouseClickedPos",2,"ImVec2 [5]");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MouseClickedPos_set",1,SWIGTYPE_p_ImGuiIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImGuiIO_MouseClickedPos_set",2,SWIGTYPE_p_ImVec2); }  { size_t ii;
      ImVec2 *b = (ImVec2 *) arg1->MouseClickedPos; for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((ImVec2 *) arg2 + ii); } 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_MouseClickedPos_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    ImVec2 *result = 0 ; SWIG_check_num_args("ImGuiIO::MouseClickedPos",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseClickedPos",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MouseClickedPos_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (ImVec2 *)(ImVec2 *) ((arg1)->MouseClickedPos); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_MouseClickedTime_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    double *arg2 = (double *) (double *)0 ; SWIG_check_num_args("ImGuiIO::MouseClickedTime",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseClickedTime",1,"ImGuiIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::MouseClickedTime",2,"double [5]");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MouseClickedTime_set",1,SWIGTYPE_p_ImGuiIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
      SWIG_fail_ptr("ImGuiIO_MouseClickedTime_set",2,SWIGTYPE_p_double); }  { size_t ii;
      double *b = (double *) arg1->MouseClickedTime; for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((double *) arg2 + ii); } 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_MouseClickedTime_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    double *result = 0 ; SWIG_check_num_args("ImGuiIO::MouseClickedTime",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseClickedTime",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MouseClickedTime_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (double *)(double *) ((arg1)->MouseClickedTime); SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_MouseClicked_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool *arg2 = (bool *) (bool *)0 ; SWIG_check_num_args("ImGuiIO::MouseClicked",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseClicked",1,"ImGuiIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::MouseClicked",2,"bool [5]");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MouseClicked_set",1,SWIGTYPE_p_ImGuiIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
      SWIG_fail_ptr("ImGuiIO_MouseClicked_set",2,SWIGTYPE_p_bool); }  { size_t ii; bool *b = (bool *) arg1->MouseClicked;
      for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((bool *) arg2 + ii); }  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiIO_MouseClicked_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; bool *result = 0 ;
    SWIG_check_num_args("ImGuiIO::MouseClicked",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseClicked",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MouseClicked_get",1,SWIGTYPE_p_ImGuiIO); }  result = (bool *)(bool *) ((arg1)->MouseClicked);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_bool,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_MouseDoubleClicked_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool *arg2 = (bool *) (bool *)0 ; SWIG_check_num_args("ImGuiIO::MouseDoubleClicked",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDoubleClicked",1,"ImGuiIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::MouseDoubleClicked",2,"bool [5]");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MouseDoubleClicked_set",1,SWIGTYPE_p_ImGuiIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
      SWIG_fail_ptr("ImGuiIO_MouseDoubleClicked_set",2,SWIGTYPE_p_bool); }  { size_t ii;
      bool *b = (bool *) arg1->MouseDoubleClicked; for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((bool *) arg2 + ii); } 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_MouseDoubleClicked_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool *result = 0 ; SWIG_check_num_args("ImGuiIO::MouseDoubleClicked",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDoubleClicked",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MouseDoubleClicked_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (bool *)(bool *) ((arg1)->MouseDoubleClicked); SWIG_NewPointerObj(L,result,SWIGTYPE_p_bool,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_MouseClickedCount_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    ImU16 *arg2 = (ImU16 *) (ImU16 *)0 ; SWIG_check_num_args("ImGuiIO::MouseClickedCount",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseClickedCount",1,"ImGuiIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::MouseClickedCount",2,"ImU16 [5]");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MouseClickedCount_set",1,SWIGTYPE_p_ImGuiIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_short,0))){
      SWIG_fail_ptr("ImGuiIO_MouseClickedCount_set",2,SWIGTYPE_p_unsigned_short); }  { size_t ii;
      ImU16 *b = (ImU16 *) arg1->MouseClickedCount; for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((ImU16 *) arg2 + ii); } 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_MouseClickedCount_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    ImU16 *result = 0 ; SWIG_check_num_args("ImGuiIO::MouseClickedCount",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseClickedCount",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MouseClickedCount_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (ImU16 *)(ImU16 *) ((arg1)->MouseClickedCount);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiIO_MouseClickedLastCount_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    ImU16 *arg2 = (ImU16 *) (ImU16 *)0 ; SWIG_check_num_args("ImGuiIO::MouseClickedLastCount",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseClickedLastCount",1,"ImGuiIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::MouseClickedLastCount",2,"ImU16 [5]");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MouseClickedLastCount_set",1,SWIGTYPE_p_ImGuiIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_short,0))){
      SWIG_fail_ptr("ImGuiIO_MouseClickedLastCount_set",2,SWIGTYPE_p_unsigned_short); }  { size_t ii;
      ImU16 *b = (ImU16 *) arg1->MouseClickedLastCount; for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((ImU16 *) arg2 + ii); } 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_MouseClickedLastCount_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    ImU16 *result = 0 ; SWIG_check_num_args("ImGuiIO::MouseClickedLastCount",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseClickedLastCount",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MouseClickedLastCount_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (ImU16 *)(ImU16 *) ((arg1)->MouseClickedLastCount);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiIO_MouseReleased_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool *arg2 = (bool *) (bool *)0 ; SWIG_check_num_args("ImGuiIO::MouseReleased",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseReleased",1,"ImGuiIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::MouseReleased",2,"bool [5]");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MouseReleased_set",1,SWIGTYPE_p_ImGuiIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
      SWIG_fail_ptr("ImGuiIO_MouseReleased_set",2,SWIGTYPE_p_bool); }  { size_t ii; bool *b = (bool *) arg1->MouseReleased;
      for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((bool *) arg2 + ii); }  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiIO_MouseReleased_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool *result = 0 ; SWIG_check_num_args("ImGuiIO::MouseReleased",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseReleased",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MouseReleased_get",1,SWIGTYPE_p_ImGuiIO); }  result = (bool *)(bool *) ((arg1)->MouseReleased);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_bool,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_MouseDownOwned_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool *arg2 = (bool *) (bool *)0 ; SWIG_check_num_args("ImGuiIO::MouseDownOwned",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDownOwned",1,"ImGuiIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::MouseDownOwned",2,"bool [5]");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MouseDownOwned_set",1,SWIGTYPE_p_ImGuiIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
      SWIG_fail_ptr("ImGuiIO_MouseDownOwned_set",2,SWIGTYPE_p_bool); }  { size_t ii; bool *b = (bool *) arg1->MouseDownOwned;
      for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((bool *) arg2 + ii); }  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiIO_MouseDownOwned_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool *result = 0 ; SWIG_check_num_args("ImGuiIO::MouseDownOwned",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDownOwned",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MouseDownOwned_get",1,SWIGTYPE_p_ImGuiIO); }  result = (bool *)(bool *) ((arg1)->MouseDownOwned);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_bool,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_MouseDownOwnedUnlessPopupClose_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool *arg2 = (bool *) (bool *)0 ; SWIG_check_num_args("ImGuiIO::MouseDownOwnedUnlessPopupClose",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDownOwnedUnlessPopupClose",1,"ImGuiIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::MouseDownOwnedUnlessPopupClose",2,"bool [5]");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MouseDownOwnedUnlessPopupClose_set",1,SWIGTYPE_p_ImGuiIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
      SWIG_fail_ptr("ImGuiIO_MouseDownOwnedUnlessPopupClose_set",2,SWIGTYPE_p_bool); }  { size_t ii;
      bool *b = (bool *) arg1->MouseDownOwnedUnlessPopupClose;
      for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((bool *) arg2 + ii); }  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiIO_MouseDownOwnedUnlessPopupClose_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool *result = 0 ; SWIG_check_num_args("ImGuiIO::MouseDownOwnedUnlessPopupClose",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDownOwnedUnlessPopupClose",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MouseDownOwnedUnlessPopupClose_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (bool *)(bool *) ((arg1)->MouseDownOwnedUnlessPopupClose);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_bool,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_MouseWheelRequestAxisSwap_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool arg2 ; SWIG_check_num_args("ImGuiIO::MouseWheelRequestAxisSwap",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseWheelRequestAxisSwap",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::MouseWheelRequestAxisSwap",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MouseWheelRequestAxisSwap_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->MouseWheelRequestAxisSwap = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_MouseWheelRequestAxisSwap_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool result; SWIG_check_num_args("ImGuiIO::MouseWheelRequestAxisSwap",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseWheelRequestAxisSwap",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MouseWheelRequestAxisSwap_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (bool) ((arg1)->MouseWheelRequestAxisSwap); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_MouseCtrlLeftAsRightClick_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool arg2 ; SWIG_check_num_args("ImGuiIO::MouseCtrlLeftAsRightClick",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseCtrlLeftAsRightClick",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::MouseCtrlLeftAsRightClick",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MouseCtrlLeftAsRightClick_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->MouseCtrlLeftAsRightClick = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_MouseCtrlLeftAsRightClick_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    bool result; SWIG_check_num_args("ImGuiIO::MouseCtrlLeftAsRightClick",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseCtrlLeftAsRightClick",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MouseCtrlLeftAsRightClick_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (bool) ((arg1)->MouseCtrlLeftAsRightClick); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_MouseDownDuration_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    float *arg2 = (float *) (float *)0 ; SWIG_check_num_args("ImGuiIO::MouseDownDuration",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDownDuration",1,"ImGuiIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::MouseDownDuration",2,"float [5]");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MouseDownDuration_set",1,SWIGTYPE_p_ImGuiIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("ImGuiIO_MouseDownDuration_set",2,SWIGTYPE_p_float); }  { size_t ii;
      float *b = (float *) arg1->MouseDownDuration; for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((float *) arg2 + ii); } 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_MouseDownDuration_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    float *result = 0 ; SWIG_check_num_args("ImGuiIO::MouseDownDuration",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDownDuration",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MouseDownDuration_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (float *)(float *) ((arg1)->MouseDownDuration); SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_MouseDownDurationPrev_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    float *arg2 = (float *) (float *)0 ; SWIG_check_num_args("ImGuiIO::MouseDownDurationPrev",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDownDurationPrev",1,"ImGuiIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::MouseDownDurationPrev",2,"float [5]");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MouseDownDurationPrev_set",1,SWIGTYPE_p_ImGuiIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("ImGuiIO_MouseDownDurationPrev_set",2,SWIGTYPE_p_float); }  { size_t ii;
      float *b = (float *) arg1->MouseDownDurationPrev; for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((float *) arg2 + ii); } 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_MouseDownDurationPrev_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    float *result = 0 ; SWIG_check_num_args("ImGuiIO::MouseDownDurationPrev",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDownDurationPrev",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MouseDownDurationPrev_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (float *)(float *) ((arg1)->MouseDownDurationPrev); SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_MouseDragMaxDistanceAbs_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    ImVec2 *arg2 = (ImVec2 *) (ImVec2 *)0 ; SWIG_check_num_args("ImGuiIO::MouseDragMaxDistanceAbs",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDragMaxDistanceAbs",1,"ImGuiIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::MouseDragMaxDistanceAbs",2,"ImVec2 [5]");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MouseDragMaxDistanceAbs_set",1,SWIGTYPE_p_ImGuiIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImGuiIO_MouseDragMaxDistanceAbs_set",2,SWIGTYPE_p_ImVec2); }  { size_t ii;
      ImVec2 *b = (ImVec2 *) arg1->MouseDragMaxDistanceAbs; for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((ImVec2 *) arg2 + ii); }
     return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_MouseDragMaxDistanceAbs_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    ImVec2 *result = 0 ; SWIG_check_num_args("ImGuiIO::MouseDragMaxDistanceAbs",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDragMaxDistanceAbs",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MouseDragMaxDistanceAbs_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (ImVec2 *)(ImVec2 *) ((arg1)->MouseDragMaxDistanceAbs);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiIO_MouseDragMaxDistanceSqr_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    float *arg2 = (float *) (float *)0 ; SWIG_check_num_args("ImGuiIO::MouseDragMaxDistanceSqr",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDragMaxDistanceSqr",1,"ImGuiIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::MouseDragMaxDistanceSqr",2,"float [5]");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MouseDragMaxDistanceSqr_set",1,SWIGTYPE_p_ImGuiIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
      SWIG_fail_ptr("ImGuiIO_MouseDragMaxDistanceSqr_set",2,SWIGTYPE_p_float); }  { size_t ii;
      float *b = (float *) arg1->MouseDragMaxDistanceSqr; for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((float *) arg2 + ii); } 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_MouseDragMaxDistanceSqr_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    float *result = 0 ; SWIG_check_num_args("ImGuiIO::MouseDragMaxDistanceSqr",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::MouseDragMaxDistanceSqr",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_MouseDragMaxDistanceSqr_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (float *)(float *) ((arg1)->MouseDragMaxDistanceSqr); SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_PenPressure_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; float arg2 ;
    SWIG_check_num_args("ImGuiIO::PenPressure",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::PenPressure",1,"ImGuiIO *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::PenPressure",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_PenPressure_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->PenPressure = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_PenPressure_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; float result;
    SWIG_check_num_args("ImGuiIO::PenPressure",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::PenPressure",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_PenPressure_get",1,SWIGTYPE_p_ImGuiIO); }  result = (float) ((arg1)->PenPressure);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_AppFocusLost_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; bool arg2 ;
    SWIG_check_num_args("ImGuiIO::AppFocusLost",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::AppFocusLost",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::AppFocusLost",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_AppFocusLost_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->AppFocusLost = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_AppFocusLost_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; bool result;
    SWIG_check_num_args("ImGuiIO::AppFocusLost",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::AppFocusLost",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_AppFocusLost_get",1,SWIGTYPE_p_ImGuiIO); }  result = (bool) ((arg1)->AppFocusLost);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_AppAcceptingEvents_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; bool arg2 ;
    SWIG_check_num_args("ImGuiIO::AppAcceptingEvents",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::AppAcceptingEvents",1,"ImGuiIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiIO::AppAcceptingEvents",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_AppAcceptingEvents_set",1,SWIGTYPE_p_ImGuiIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->AppAcceptingEvents = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_AppAcceptingEvents_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ; bool result;
    SWIG_check_num_args("ImGuiIO::AppAcceptingEvents",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::AppAcceptingEvents",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_AppAcceptingEvents_get",1,SWIGTYPE_p_ImGuiIO); }  result = (bool) ((arg1)->AppAcceptingEvents);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_InputQueueSurrogate_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    ImWchar16 arg2 ; SWIG_check_num_args("ImGuiIO::InputQueueSurrogate",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::InputQueueSurrogate",1,"ImGuiIO *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiIO::InputQueueSurrogate",2,"ImWchar16");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_InputQueueSurrogate_set",1,SWIGTYPE_p_ImGuiIO); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (ImWchar16)lua_tonumber(L, 2);
    if (arg1) (arg1)->InputQueueSurrogate = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_InputQueueSurrogate_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    ImWchar16 result; SWIG_check_num_args("ImGuiIO::InputQueueSurrogate",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::InputQueueSurrogate",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_InputQueueSurrogate_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (ImWchar16) ((arg1)->InputQueueSurrogate); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_InputQueueCharacters_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    ImVector< ImWchar > *arg2 = (ImVector< ImWchar > *) 0 ; SWIG_check_num_args("ImGuiIO::InputQueueCharacters",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::InputQueueCharacters",1,"ImGuiIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::InputQueueCharacters",2,"ImVector< ImWchar > *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_InputQueueCharacters_set",1,SWIGTYPE_p_ImGuiIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_unsigned_short_t,0))){
      SWIG_fail_ptr("ImGuiIO_InputQueueCharacters_set",2,SWIGTYPE_p_ImVectorT_unsigned_short_t); } 
    if (arg1) (arg1)->InputQueueCharacters = *arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_InputQueueCharacters_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    ImVector< ImWchar > *result = 0 ; SWIG_check_num_args("ImGuiIO::InputQueueCharacters",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::InputQueueCharacters",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_InputQueueCharacters_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (ImVector< ImWchar > *)& ((arg1)->InputQueueCharacters);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiIO_GetClipboardTextFn_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    char *(*arg2)(void *) = (char *(*)(void *)) 0 ; SWIG_check_num_args("ImGuiIO::GetClipboardTextFn",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::GetClipboardTextFn",1,"ImGuiIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::GetClipboardTextFn",2,"char const *(*)(void *)");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_GetClipboardTextFn_set",1,SWIGTYPE_p_ImGuiIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_void__p_char,0))){
      SWIG_fail_ptr("ImGuiIO_GetClipboardTextFn_set",2,SWIGTYPE_p_f_p_void__p_char); } 
    if (arg1) (arg1)->GetClipboardTextFn = (char const *(*)(void *))arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiIO_GetClipboardTextFn_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    char *(*result)(void *) = 0 ; SWIG_check_num_args("ImGuiIO::GetClipboardTextFn",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::GetClipboardTextFn",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_GetClipboardTextFn_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (char *(*)(void *)) ((arg1)->GetClipboardTextFn);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_void__p_char,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiIO_SetClipboardTextFn_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    void (*arg2)(void *,char const *) = (void (*)(void *,char const *)) 0 ;
    SWIG_check_num_args("ImGuiIO::SetClipboardTextFn",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::SetClipboardTextFn",1,"ImGuiIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::SetClipboardTextFn",2,"void (*)(void *,char const *)");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_SetClipboardTextFn_set",1,SWIGTYPE_p_ImGuiIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_void_p_q_const__char__void,0))){
      SWIG_fail_ptr("ImGuiIO_SetClipboardTextFn_set",2,SWIGTYPE_p_f_p_void_p_q_const__char__void); } 
    if (arg1) (arg1)->SetClipboardTextFn = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_SetClipboardTextFn_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    void (*result)(void *,char const *) = 0 ; SWIG_check_num_args("ImGuiIO::SetClipboardTextFn",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::SetClipboardTextFn",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_SetClipboardTextFn_get",1,SWIGTYPE_p_ImGuiIO); } 
    result = (void (*)(void *,char const *)) ((arg1)->SetClipboardTextFn);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_void_p_q_const__char__void,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ClipboardUserData_set(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    void *arg2 = (void *) 0 ; SWIG_check_num_args("ImGuiIO::ClipboardUserData",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ClipboardUserData",1,"ImGuiIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiIO::ClipboardUserData",2,"void *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ClipboardUserData_set",1,SWIGTYPE_p_ImGuiIO); } 
    arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImGuiIO_ClipboardUserData_set"); if (arg1) (arg1)->ClipboardUserData = arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiIO_ClipboardUserData_get(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *arg1 = (ImGuiIO *) 0 ;
    void *result = 0 ; SWIG_check_num_args("ImGuiIO::ClipboardUserData",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiIO::ClipboardUserData",1,"ImGuiIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiIO,0))){
      SWIG_fail_ptr("ImGuiIO_ClipboardUserData_get",1,SWIGTYPE_p_ImGuiIO); }  result = (void *) ((arg1)->ClipboardUserData);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_ImGuiIO(lua_State* L) { { int SWIG_arg = 0; ImGuiIO *result = 0 ;
    SWIG_check_num_args("ImGuiIO::ImGuiIO",0,0) result = (ImGuiIO *)new ImGuiIO();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiIO,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static void swig_delete_ImGuiIO(void *obj) {
ImGuiIO *arg1 = (ImGuiIO *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiIO(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiIO);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiIO_attributes[] = {
    { "ConfigFlags", _wrap_ImGuiIO_ConfigFlags_get, _wrap_ImGuiIO_ConfigFlags_set },
    { "BackendFlags", _wrap_ImGuiIO_BackendFlags_get, _wrap_ImGuiIO_BackendFlags_set },
    { "DisplaySize", _wrap_ImGuiIO_DisplaySize_get, _wrap_ImGuiIO_DisplaySize_set },
    { "DeltaTime", _wrap_ImGuiIO_DeltaTime_get, _wrap_ImGuiIO_DeltaTime_set },
    { "IniSavingRate", _wrap_ImGuiIO_IniSavingRate_get, _wrap_ImGuiIO_IniSavingRate_set },
    { "IniFilename", _wrap_ImGuiIO_IniFilename_get, SWIG_Lua_set_immutable },
    { "LogFilename", _wrap_ImGuiIO_LogFilename_get, SWIG_Lua_set_immutable },
    { "UserData", _wrap_ImGuiIO_UserData_get, _wrap_ImGuiIO_UserData_set },
    { "Fonts", _wrap_ImGuiIO_Fonts_get, _wrap_ImGuiIO_Fonts_set },
    { "FontGlobalScale", _wrap_ImGuiIO_FontGlobalScale_get, _wrap_ImGuiIO_FontGlobalScale_set },
    { "FontAllowUserScaling", _wrap_ImGuiIO_FontAllowUserScaling_get, _wrap_ImGuiIO_FontAllowUserScaling_set },
    { "FontDefault", _wrap_ImGuiIO_FontDefault_get, _wrap_ImGuiIO_FontDefault_set },
    { "DisplayFramebufferScale", _wrap_ImGuiIO_DisplayFramebufferScale_get, _wrap_ImGuiIO_DisplayFramebufferScale_set },
    { "ConfigNavSwapGamepadButtons", _wrap_ImGuiIO_ConfigNavSwapGamepadButtons_get, _wrap_ImGuiIO_ConfigNavSwapGamepadButtons_set },
    { "ConfigNavMoveSetMousePos", _wrap_ImGuiIO_ConfigNavMoveSetMousePos_get, _wrap_ImGuiIO_ConfigNavMoveSetMousePos_set },
    { "ConfigNavCaptureKeyboard", _wrap_ImGuiIO_ConfigNavCaptureKeyboard_get, _wrap_ImGuiIO_ConfigNavCaptureKeyboard_set },
    { "ConfigNavEscapeClearFocusItem", _wrap_ImGuiIO_ConfigNavEscapeClearFocusItem_get, _wrap_ImGuiIO_ConfigNavEscapeClearFocusItem_set },
    { "ConfigNavEscapeClearFocusWindow", _wrap_ImGuiIO_ConfigNavEscapeClearFocusWindow_get, _wrap_ImGuiIO_ConfigNavEscapeClearFocusWindow_set },
    { "ConfigNavCursorVisibleAuto", _wrap_ImGuiIO_ConfigNavCursorVisibleAuto_get, _wrap_ImGuiIO_ConfigNavCursorVisibleAuto_set },
    { "ConfigNavCursorVisibleAlways", _wrap_ImGuiIO_ConfigNavCursorVisibleAlways_get, _wrap_ImGuiIO_ConfigNavCursorVisibleAlways_set },
    { "ConfigDockingNoSplit", _wrap_ImGuiIO_ConfigDockingNoSplit_get, _wrap_ImGuiIO_ConfigDockingNoSplit_set },
    { "ConfigDockingWithShift", _wrap_ImGuiIO_ConfigDockingWithShift_get, _wrap_ImGuiIO_ConfigDockingWithShift_set },
    { "ConfigDockingAlwaysTabBar", _wrap_ImGuiIO_ConfigDockingAlwaysTabBar_get, _wrap_ImGuiIO_ConfigDockingAlwaysTabBar_set },
    { "ConfigDockingTransparentPayload", _wrap_ImGuiIO_ConfigDockingTransparentPayload_get, _wrap_ImGuiIO_ConfigDockingTransparentPayload_set },
    { "ConfigViewportsNoAutoMerge", _wrap_ImGuiIO_ConfigViewportsNoAutoMerge_get, _wrap_ImGuiIO_ConfigViewportsNoAutoMerge_set },
    { "ConfigViewportsNoTaskBarIcon", _wrap_ImGuiIO_ConfigViewportsNoTaskBarIcon_get, _wrap_ImGuiIO_ConfigViewportsNoTaskBarIcon_set },
    { "ConfigViewportsNoDecoration", _wrap_ImGuiIO_ConfigViewportsNoDecoration_get, _wrap_ImGuiIO_ConfigViewportsNoDecoration_set },
    { "ConfigViewportsNoDefaultParent", _wrap_ImGuiIO_ConfigViewportsNoDefaultParent_get, _wrap_ImGuiIO_ConfigViewportsNoDefaultParent_set },
    { "MouseDrawCursor", _wrap_ImGuiIO_MouseDrawCursor_get, _wrap_ImGuiIO_MouseDrawCursor_set },
    { "ConfigMacOSXBehaviors", _wrap_ImGuiIO_ConfigMacOSXBehaviors_get, _wrap_ImGuiIO_ConfigMacOSXBehaviors_set },
    { "ConfigInputTrickleEventQueue", _wrap_ImGuiIO_ConfigInputTrickleEventQueue_get, _wrap_ImGuiIO_ConfigInputTrickleEventQueue_set },
    { "ConfigInputTextCursorBlink", _wrap_ImGuiIO_ConfigInputTextCursorBlink_get, _wrap_ImGuiIO_ConfigInputTextCursorBlink_set },
    { "ConfigInputTextEnterKeepActive", _wrap_ImGuiIO_ConfigInputTextEnterKeepActive_get, _wrap_ImGuiIO_ConfigInputTextEnterKeepActive_set },
    { "ConfigDragClickToInputText", _wrap_ImGuiIO_ConfigDragClickToInputText_get, _wrap_ImGuiIO_ConfigDragClickToInputText_set },
    { "ConfigWindowsResizeFromEdges", _wrap_ImGuiIO_ConfigWindowsResizeFromEdges_get, _wrap_ImGuiIO_ConfigWindowsResizeFromEdges_set },
    { "ConfigWindowsMoveFromTitleBarOnly", _wrap_ImGuiIO_ConfigWindowsMoveFromTitleBarOnly_get, _wrap_ImGuiIO_ConfigWindowsMoveFromTitleBarOnly_set },
    { "ConfigWindowsCopyContentsWithCtrlC", _wrap_ImGuiIO_ConfigWindowsCopyContentsWithCtrlC_get, _wrap_ImGuiIO_ConfigWindowsCopyContentsWithCtrlC_set },
    { "ConfigScrollbarScrollByPage", _wrap_ImGuiIO_ConfigScrollbarScrollByPage_get, _wrap_ImGuiIO_ConfigScrollbarScrollByPage_set },
    { "ConfigMemoryCompactTimer", _wrap_ImGuiIO_ConfigMemoryCompactTimer_get, _wrap_ImGuiIO_ConfigMemoryCompactTimer_set },
    { "MouseDoubleClickTime", _wrap_ImGuiIO_MouseDoubleClickTime_get, _wrap_ImGuiIO_MouseDoubleClickTime_set },
    { "MouseDoubleClickMaxDist", _wrap_ImGuiIO_MouseDoubleClickMaxDist_get, _wrap_ImGuiIO_MouseDoubleClickMaxDist_set },
    { "MouseDragThreshold", _wrap_ImGuiIO_MouseDragThreshold_get, _wrap_ImGuiIO_MouseDragThreshold_set },
    { "KeyRepeatDelay", _wrap_ImGuiIO_KeyRepeatDelay_get, _wrap_ImGuiIO_KeyRepeatDelay_set },
    { "KeyRepeatRate", _wrap_ImGuiIO_KeyRepeatRate_get, _wrap_ImGuiIO_KeyRepeatRate_set },
    { "ConfigErrorRecovery", _wrap_ImGuiIO_ConfigErrorRecovery_get, _wrap_ImGuiIO_ConfigErrorRecovery_set },
    { "ConfigErrorRecoveryEnableAssert", _wrap_ImGuiIO_ConfigErrorRecoveryEnableAssert_get, _wrap_ImGuiIO_ConfigErrorRecoveryEnableAssert_set },
    { "ConfigErrorRecoveryEnableDebugLog", _wrap_ImGuiIO_ConfigErrorRecoveryEnableDebugLog_get, _wrap_ImGuiIO_ConfigErrorRecoveryEnableDebugLog_set },
    { "ConfigErrorRecoveryEnableTooltip", _wrap_ImGuiIO_ConfigErrorRecoveryEnableTooltip_get, _wrap_ImGuiIO_ConfigErrorRecoveryEnableTooltip_set },
    { "ConfigDebugIsDebuggerPresent", _wrap_ImGuiIO_ConfigDebugIsDebuggerPresent_get, _wrap_ImGuiIO_ConfigDebugIsDebuggerPresent_set },
    { "ConfigDebugHighlightIdConflicts", _wrap_ImGuiIO_ConfigDebugHighlightIdConflicts_get, _wrap_ImGuiIO_ConfigDebugHighlightIdConflicts_set },
    { "ConfigDebugBeginReturnValueOnce", _wrap_ImGuiIO_ConfigDebugBeginReturnValueOnce_get, _wrap_ImGuiIO_ConfigDebugBeginReturnValueOnce_set },
    { "ConfigDebugBeginReturnValueLoop", _wrap_ImGuiIO_ConfigDebugBeginReturnValueLoop_get, _wrap_ImGuiIO_ConfigDebugBeginReturnValueLoop_set },
    { "ConfigDebugIgnoreFocusLoss", _wrap_ImGuiIO_ConfigDebugIgnoreFocusLoss_get, _wrap_ImGuiIO_ConfigDebugIgnoreFocusLoss_set },
    { "ConfigDebugIniSettings", _wrap_ImGuiIO_ConfigDebugIniSettings_get, _wrap_ImGuiIO_ConfigDebugIniSettings_set },
    { "BackendPlatformName", _wrap_ImGuiIO_BackendPlatformName_get, SWIG_Lua_set_immutable },
    { "BackendRendererName", _wrap_ImGuiIO_BackendRendererName_get, SWIG_Lua_set_immutable },
    { "BackendPlatformUserData", _wrap_ImGuiIO_BackendPlatformUserData_get, _wrap_ImGuiIO_BackendPlatformUserData_set },
    { "BackendRendererUserData", _wrap_ImGuiIO_BackendRendererUserData_get, _wrap_ImGuiIO_BackendRendererUserData_set },
    { "BackendLanguageUserData", _wrap_ImGuiIO_BackendLanguageUserData_get, _wrap_ImGuiIO_BackendLanguageUserData_set },
    { "WantCaptureMouse", _wrap_ImGuiIO_WantCaptureMouse_get, _wrap_ImGuiIO_WantCaptureMouse_set },
    { "WantCaptureKeyboard", _wrap_ImGuiIO_WantCaptureKeyboard_get, _wrap_ImGuiIO_WantCaptureKeyboard_set },
    { "WantTextInput", _wrap_ImGuiIO_WantTextInput_get, _wrap_ImGuiIO_WantTextInput_set },
    { "WantSetMousePos", _wrap_ImGuiIO_WantSetMousePos_get, _wrap_ImGuiIO_WantSetMousePos_set },
    { "WantSaveIniSettings", _wrap_ImGuiIO_WantSaveIniSettings_get, _wrap_ImGuiIO_WantSaveIniSettings_set },
    { "NavActive", _wrap_ImGuiIO_NavActive_get, _wrap_ImGuiIO_NavActive_set },
    { "NavVisible", _wrap_ImGuiIO_NavVisible_get, _wrap_ImGuiIO_NavVisible_set },
    { "Framerate", _wrap_ImGuiIO_Framerate_get, _wrap_ImGuiIO_Framerate_set },
    { "MetricsRenderVertices", _wrap_ImGuiIO_MetricsRenderVertices_get, _wrap_ImGuiIO_MetricsRenderVertices_set },
    { "MetricsRenderIndices", _wrap_ImGuiIO_MetricsRenderIndices_get, _wrap_ImGuiIO_MetricsRenderIndices_set },
    { "MetricsRenderWindows", _wrap_ImGuiIO_MetricsRenderWindows_get, _wrap_ImGuiIO_MetricsRenderWindows_set },
    { "MetricsActiveWindows", _wrap_ImGuiIO_MetricsActiveWindows_get, _wrap_ImGuiIO_MetricsActiveWindows_set },
    { "MouseDelta", _wrap_ImGuiIO_MouseDelta_get, _wrap_ImGuiIO_MouseDelta_set },
    { "Ctx", _wrap_ImGuiIO_Ctx_get, _wrap_ImGuiIO_Ctx_set },
    { "MousePos", _wrap_ImGuiIO_MousePos_get, _wrap_ImGuiIO_MousePos_set },
    { "MouseDown", _wrap_ImGuiIO_MouseDown_get, _wrap_ImGuiIO_MouseDown_set },
    { "MouseWheel", _wrap_ImGuiIO_MouseWheel_get, _wrap_ImGuiIO_MouseWheel_set },
    { "MouseWheelH", _wrap_ImGuiIO_MouseWheelH_get, _wrap_ImGuiIO_MouseWheelH_set },
    { "MouseSource", _wrap_ImGuiIO_MouseSource_get, _wrap_ImGuiIO_MouseSource_set },
    { "MouseHoveredViewport", _wrap_ImGuiIO_MouseHoveredViewport_get, _wrap_ImGuiIO_MouseHoveredViewport_set },
    { "KeyCtrl", _wrap_ImGuiIO_KeyCtrl_get, _wrap_ImGuiIO_KeyCtrl_set },
    { "KeyShift", _wrap_ImGuiIO_KeyShift_get, _wrap_ImGuiIO_KeyShift_set },
    { "KeyAlt", _wrap_ImGuiIO_KeyAlt_get, _wrap_ImGuiIO_KeyAlt_set },
    { "KeySuper", _wrap_ImGuiIO_KeySuper_get, _wrap_ImGuiIO_KeySuper_set },
    { "KeyMods", _wrap_ImGuiIO_KeyMods_get, _wrap_ImGuiIO_KeyMods_set },
    { "KeysData", _wrap_ImGuiIO_KeysData_get, _wrap_ImGuiIO_KeysData_set },
    { "WantCaptureMouseUnlessPopupClose", _wrap_ImGuiIO_WantCaptureMouseUnlessPopupClose_get, _wrap_ImGuiIO_WantCaptureMouseUnlessPopupClose_set },
    { "MousePosPrev", _wrap_ImGuiIO_MousePosPrev_get, _wrap_ImGuiIO_MousePosPrev_set },
    { "MouseClickedPos", _wrap_ImGuiIO_MouseClickedPos_get, _wrap_ImGuiIO_MouseClickedPos_set },
    { "MouseClickedTime", _wrap_ImGuiIO_MouseClickedTime_get, _wrap_ImGuiIO_MouseClickedTime_set },
    { "MouseClicked", _wrap_ImGuiIO_MouseClicked_get, _wrap_ImGuiIO_MouseClicked_set },
    { "MouseDoubleClicked", _wrap_ImGuiIO_MouseDoubleClicked_get, _wrap_ImGuiIO_MouseDoubleClicked_set },
    { "MouseClickedCount", _wrap_ImGuiIO_MouseClickedCount_get, _wrap_ImGuiIO_MouseClickedCount_set },
    { "MouseClickedLastCount", _wrap_ImGuiIO_MouseClickedLastCount_get, _wrap_ImGuiIO_MouseClickedLastCount_set },
    { "MouseReleased", _wrap_ImGuiIO_MouseReleased_get, _wrap_ImGuiIO_MouseReleased_set },
    { "MouseDownOwned", _wrap_ImGuiIO_MouseDownOwned_get, _wrap_ImGuiIO_MouseDownOwned_set },
    { "MouseDownOwnedUnlessPopupClose", _wrap_ImGuiIO_MouseDownOwnedUnlessPopupClose_get, _wrap_ImGuiIO_MouseDownOwnedUnlessPopupClose_set },
    { "MouseWheelRequestAxisSwap", _wrap_ImGuiIO_MouseWheelRequestAxisSwap_get, _wrap_ImGuiIO_MouseWheelRequestAxisSwap_set },
    { "MouseCtrlLeftAsRightClick", _wrap_ImGuiIO_MouseCtrlLeftAsRightClick_get, _wrap_ImGuiIO_MouseCtrlLeftAsRightClick_set },
    { "MouseDownDuration", _wrap_ImGuiIO_MouseDownDuration_get, _wrap_ImGuiIO_MouseDownDuration_set },
    { "MouseDownDurationPrev", _wrap_ImGuiIO_MouseDownDurationPrev_get, _wrap_ImGuiIO_MouseDownDurationPrev_set },
    { "MouseDragMaxDistanceAbs", _wrap_ImGuiIO_MouseDragMaxDistanceAbs_get, _wrap_ImGuiIO_MouseDragMaxDistanceAbs_set },
    { "MouseDragMaxDistanceSqr", _wrap_ImGuiIO_MouseDragMaxDistanceSqr_get, _wrap_ImGuiIO_MouseDragMaxDistanceSqr_set },
    { "PenPressure", _wrap_ImGuiIO_PenPressure_get, _wrap_ImGuiIO_PenPressure_set },
    { "AppFocusLost", _wrap_ImGuiIO_AppFocusLost_get, _wrap_ImGuiIO_AppFocusLost_set },
    { "AppAcceptingEvents", _wrap_ImGuiIO_AppAcceptingEvents_get, _wrap_ImGuiIO_AppAcceptingEvents_set },
    { "InputQueueSurrogate", _wrap_ImGuiIO_InputQueueSurrogate_get, _wrap_ImGuiIO_InputQueueSurrogate_set },
    { "InputQueueCharacters", _wrap_ImGuiIO_InputQueueCharacters_get, _wrap_ImGuiIO_InputQueueCharacters_set },
    { "GetClipboardTextFn", _wrap_ImGuiIO_GetClipboardTextFn_get, _wrap_ImGuiIO_GetClipboardTextFn_set },
    { "SetClipboardTextFn", _wrap_ImGuiIO_SetClipboardTextFn_get, _wrap_ImGuiIO_SetClipboardTextFn_set },
    { "ClipboardUserData", _wrap_ImGuiIO_ClipboardUserData_get, _wrap_ImGuiIO_ClipboardUserData_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiIO_methods[]= {
    { "AddKeyEvent", _wrap_ImGuiIO_AddKeyEvent},
    { "AddKeyAnalogEvent", _wrap_ImGuiIO_AddKeyAnalogEvent},
    { "AddMousePosEvent", _wrap_ImGuiIO_AddMousePosEvent},
    { "AddMouseButtonEvent", _wrap_ImGuiIO_AddMouseButtonEvent},
    { "AddMouseWheelEvent", _wrap_ImGuiIO_AddMouseWheelEvent},
    { "AddMouseSourceEvent", _wrap_ImGuiIO_AddMouseSourceEvent},
    { "AddMouseViewportEvent", _wrap_ImGuiIO_AddMouseViewportEvent},
    { "AddFocusEvent", _wrap_ImGuiIO_AddFocusEvent},
    { "AddInputCharacter", _wrap_ImGuiIO_AddInputCharacter},
    { "AddInputCharacterUTF16", _wrap_ImGuiIO_AddInputCharacterUTF16},
    { "AddInputCharactersUTF8", _wrap_ImGuiIO_AddInputCharactersUTF8},
    { "SetKeyEventNativeData", _wrap_ImGuiIO_SetKeyEventNativeData},
    { "SetAppAcceptingEvents", _wrap_ImGuiIO_SetAppAcceptingEvents},
    { "ClearEventsQueue", _wrap_ImGuiIO_ClearEventsQueue},
    { "ClearInputKeys", _wrap_ImGuiIO_ClearInputKeys},
    { "ClearInputMouse", _wrap_ImGuiIO_ClearInputMouse},
    { "ClearInputCharacters", _wrap_ImGuiIO_ClearInputCharacters},
    {0,0}
};
static swig_lua_method swig_ImGuiIO_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiIO_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiIO_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiIO_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiIO_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiIO_Sf_SwigStatic = {
    "ImGuiIO",
    swig_ImGuiIO_Sf_SwigStatic_methods,
    swig_ImGuiIO_Sf_SwigStatic_attributes,
    swig_ImGuiIO_Sf_SwigStatic_constants,
    swig_ImGuiIO_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiIO_bases[] = {0};
static const char *swig_ImGuiIO_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiIO = { "ImGuiIO", "ImGuiIO", &SWIGTYPE_p_ImGuiIO,_proxy__wrap_new_ImGuiIO, swig_delete_ImGuiIO, swig_ImGuiIO_methods, swig_ImGuiIO_attributes, &swig_ImGuiIO_Sf_SwigStatic, swig_ImGuiIO_meta, swig_ImGuiIO_bases, swig_ImGuiIO_base_names };

static int _wrap_ImGuiInputTextCallbackData_Ctx_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ; ImGuiContext *arg2 = (ImGuiContext *) 0 ;
    SWIG_check_num_args("ImGuiInputTextCallbackData::Ctx",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::Ctx",1,"ImGuiInputTextCallbackData *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiInputTextCallbackData::Ctx",2,"ImGuiContext *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
      SWIG_fail_ptr("ImGuiInputTextCallbackData_Ctx_set",1,SWIGTYPE_p_ImGuiInputTextCallbackData); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiContext,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("ImGuiInputTextCallbackData_Ctx_set",2,SWIGTYPE_p_ImGuiContext); }  if (arg1) (arg1)->Ctx = arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiInputTextCallbackData_Ctx_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ; ImGuiContext *result = 0 ;
    SWIG_check_num_args("ImGuiInputTextCallbackData::Ctx",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::Ctx",1,"ImGuiInputTextCallbackData *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
      SWIG_fail_ptr("ImGuiInputTextCallbackData_Ctx_get",1,SWIGTYPE_p_ImGuiInputTextCallbackData); } 
    result = (ImGuiContext *) ((arg1)->Ctx); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiContext,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiInputTextCallbackData_EventFlag_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ; ImGuiInputTextFlags arg2 ;
    SWIG_check_num_args("ImGuiInputTextCallbackData::EventFlag",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::EventFlag",1,"ImGuiInputTextCallbackData *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiInputTextCallbackData::EventFlag",2,"ImGuiInputTextFlags");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
      SWIG_fail_ptr("ImGuiInputTextCallbackData_EventFlag_set",1,SWIGTYPE_p_ImGuiInputTextCallbackData); } 
    arg2 = (ImGuiInputTextFlags)lua_tonumber(L, 2); if (arg1) (arg1)->EventFlag = arg2; return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiInputTextCallbackData_EventFlag_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ; ImGuiInputTextFlags result;
    SWIG_check_num_args("ImGuiInputTextCallbackData::EventFlag",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::EventFlag",1,"ImGuiInputTextCallbackData *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
      SWIG_fail_ptr("ImGuiInputTextCallbackData_EventFlag_get",1,SWIGTYPE_p_ImGuiInputTextCallbackData); } 
    result = (ImGuiInputTextFlags) ((arg1)->EventFlag); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiInputTextCallbackData_Flags_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ; ImGuiInputTextFlags arg2 ;
    SWIG_check_num_args("ImGuiInputTextCallbackData::Flags",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::Flags",1,"ImGuiInputTextCallbackData *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiInputTextCallbackData::Flags",2,"ImGuiInputTextFlags");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
      SWIG_fail_ptr("ImGuiInputTextCallbackData_Flags_set",1,SWIGTYPE_p_ImGuiInputTextCallbackData); } 
    arg2 = (ImGuiInputTextFlags)lua_tonumber(L, 2); if (arg1) (arg1)->Flags = arg2; return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiInputTextCallbackData_Flags_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ; ImGuiInputTextFlags result;
    SWIG_check_num_args("ImGuiInputTextCallbackData::Flags",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::Flags",1,"ImGuiInputTextCallbackData *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
      SWIG_fail_ptr("ImGuiInputTextCallbackData_Flags_get",1,SWIGTYPE_p_ImGuiInputTextCallbackData); } 
    result = (ImGuiInputTextFlags) ((arg1)->Flags); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiInputTextCallbackData_UserData_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ; void *arg2 = (void *) 0 ;
    SWIG_check_num_args("ImGuiInputTextCallbackData::UserData",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::UserData",1,"ImGuiInputTextCallbackData *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiInputTextCallbackData::UserData",2,"void *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
      SWIG_fail_ptr("ImGuiInputTextCallbackData_UserData_set",1,SWIGTYPE_p_ImGuiInputTextCallbackData); } 
    arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImGuiInputTextCallbackData_UserData_set"); if (arg1) (arg1)->UserData = arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiInputTextCallbackData_UserData_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ; void *result = 0 ;
    SWIG_check_num_args("ImGuiInputTextCallbackData::UserData",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::UserData",1,"ImGuiInputTextCallbackData *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
      SWIG_fail_ptr("ImGuiInputTextCallbackData_UserData_get",1,SWIGTYPE_p_ImGuiInputTextCallbackData); } 
    result = (void *) ((arg1)->UserData); SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++;  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiInputTextCallbackData_EventChar_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ; ImWchar arg2 ;
    SWIG_check_num_args("ImGuiInputTextCallbackData::EventChar",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::EventChar",1,"ImGuiInputTextCallbackData *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiInputTextCallbackData::EventChar",2,"ImWchar");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
      SWIG_fail_ptr("ImGuiInputTextCallbackData_EventChar_set",1,SWIGTYPE_p_ImGuiInputTextCallbackData); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (ImWchar)lua_tonumber(L, 2);
    if (arg1) (arg1)->EventChar = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiInputTextCallbackData_EventChar_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ; ImWchar result;
    SWIG_check_num_args("ImGuiInputTextCallbackData::EventChar",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::EventChar",1,"ImGuiInputTextCallbackData *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
      SWIG_fail_ptr("ImGuiInputTextCallbackData_EventChar_get",1,SWIGTYPE_p_ImGuiInputTextCallbackData); } 
    result = (ImWchar) ((arg1)->EventChar); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiInputTextCallbackData_EventKey_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ; ImGuiKey arg2 ;
    SWIG_check_num_args("ImGuiInputTextCallbackData::EventKey",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::EventKey",1,"ImGuiInputTextCallbackData *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiInputTextCallbackData::EventKey",2,"ImGuiKey");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
      SWIG_fail_ptr("ImGuiInputTextCallbackData_EventKey_set",1,SWIGTYPE_p_ImGuiInputTextCallbackData); } 
    arg2 = (ImGuiKey)(int)lua_tonumber(L, 2); if (arg1) (arg1)->EventKey = arg2; return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiInputTextCallbackData_EventKey_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ; ImGuiKey result;
    SWIG_check_num_args("ImGuiInputTextCallbackData::EventKey",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::EventKey",1,"ImGuiInputTextCallbackData *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
      SWIG_fail_ptr("ImGuiInputTextCallbackData_EventKey_get",1,SWIGTYPE_p_ImGuiInputTextCallbackData); } 
    result = (ImGuiKey) ((arg1)->EventKey); lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiInputTextCallbackData_Buf_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ; char *arg2 = (char *) 0 ;
    SWIG_check_num_args("ImGuiInputTextCallbackData::Buf",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::Buf",1,"ImGuiInputTextCallbackData *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGuiInputTextCallbackData::Buf",2,"char *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
      SWIG_fail_ptr("ImGuiInputTextCallbackData_Buf_set",1,SWIGTYPE_p_ImGuiInputTextCallbackData); } 
    arg2 = (char *)lua_tostring(L, 2); { delete [] arg1->Buf; if (arg2) {
        arg1->Buf = (char *) (new char[strlen((const char *)arg2)+1]); strcpy((char *)arg1->Buf, (const char *)arg2); }  else {
        arg1->Buf = 0; }  }  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiInputTextCallbackData_Buf_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ; char *result = 0 ;
    SWIG_check_num_args("ImGuiInputTextCallbackData::Buf",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::Buf",1,"ImGuiInputTextCallbackData *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
      SWIG_fail_ptr("ImGuiInputTextCallbackData_Buf_get",1,SWIGTYPE_p_ImGuiInputTextCallbackData); } 
    result = (char *) ((arg1)->Buf); lua_pushstring(L,(const char *)result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiInputTextCallbackData_BufTextLen_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ; int arg2 ;
    SWIG_check_num_args("ImGuiInputTextCallbackData::BufTextLen",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::BufTextLen",1,"ImGuiInputTextCallbackData *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiInputTextCallbackData::BufTextLen",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
      SWIG_fail_ptr("ImGuiInputTextCallbackData_BufTextLen_set",1,SWIGTYPE_p_ImGuiInputTextCallbackData); } 
    arg2 = (int)lua_tonumber(L, 2); if (arg1) (arg1)->BufTextLen = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiInputTextCallbackData_BufTextLen_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ; int result;
    SWIG_check_num_args("ImGuiInputTextCallbackData::BufTextLen",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::BufTextLen",1,"ImGuiInputTextCallbackData *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
      SWIG_fail_ptr("ImGuiInputTextCallbackData_BufTextLen_get",1,SWIGTYPE_p_ImGuiInputTextCallbackData); } 
    result = (int) ((arg1)->BufTextLen); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }
   lua_error(L); return 0; }
static int _wrap_ImGuiInputTextCallbackData_BufSize_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ; int arg2 ;
    SWIG_check_num_args("ImGuiInputTextCallbackData::BufSize",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::BufSize",1,"ImGuiInputTextCallbackData *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiInputTextCallbackData::BufSize",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
      SWIG_fail_ptr("ImGuiInputTextCallbackData_BufSize_set",1,SWIGTYPE_p_ImGuiInputTextCallbackData); } 
    arg2 = (int)lua_tonumber(L, 2); if (arg1) (arg1)->BufSize = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiInputTextCallbackData_BufSize_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ; int result;
    SWIG_check_num_args("ImGuiInputTextCallbackData::BufSize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::BufSize",1,"ImGuiInputTextCallbackData *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
      SWIG_fail_ptr("ImGuiInputTextCallbackData_BufSize_get",1,SWIGTYPE_p_ImGuiInputTextCallbackData); } 
    result = (int) ((arg1)->BufSize); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiInputTextCallbackData_BufDirty_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ; bool arg2 ;
    SWIG_check_num_args("ImGuiInputTextCallbackData::BufDirty",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::BufDirty",1,"ImGuiInputTextCallbackData *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiInputTextCallbackData::BufDirty",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
      SWIG_fail_ptr("ImGuiInputTextCallbackData_BufDirty_set",1,SWIGTYPE_p_ImGuiInputTextCallbackData); } 
    arg2 = (lua_toboolean(L, 2)!=0); if (arg1) (arg1)->BufDirty = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiInputTextCallbackData_BufDirty_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ; bool result;
    SWIG_check_num_args("ImGuiInputTextCallbackData::BufDirty",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::BufDirty",1,"ImGuiInputTextCallbackData *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
      SWIG_fail_ptr("ImGuiInputTextCallbackData_BufDirty_get",1,SWIGTYPE_p_ImGuiInputTextCallbackData); } 
    result = (bool) ((arg1)->BufDirty); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiInputTextCallbackData_CursorPos_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ; int arg2 ;
    SWIG_check_num_args("ImGuiInputTextCallbackData::CursorPos",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::CursorPos",1,"ImGuiInputTextCallbackData *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiInputTextCallbackData::CursorPos",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
      SWIG_fail_ptr("ImGuiInputTextCallbackData_CursorPos_set",1,SWIGTYPE_p_ImGuiInputTextCallbackData); } 
    arg2 = (int)lua_tonumber(L, 2); if (arg1) (arg1)->CursorPos = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiInputTextCallbackData_CursorPos_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ; int result;
    SWIG_check_num_args("ImGuiInputTextCallbackData::CursorPos",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::CursorPos",1,"ImGuiInputTextCallbackData *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
      SWIG_fail_ptr("ImGuiInputTextCallbackData_CursorPos_get",1,SWIGTYPE_p_ImGuiInputTextCallbackData); } 
    result = (int) ((arg1)->CursorPos); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }
   lua_error(L); return 0; }
static int _wrap_ImGuiInputTextCallbackData_SelectionStart_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ; int arg2 ;
    SWIG_check_num_args("ImGuiInputTextCallbackData::SelectionStart",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::SelectionStart",1,"ImGuiInputTextCallbackData *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiInputTextCallbackData::SelectionStart",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
      SWIG_fail_ptr("ImGuiInputTextCallbackData_SelectionStart_set",1,SWIGTYPE_p_ImGuiInputTextCallbackData); } 
    arg2 = (int)lua_tonumber(L, 2); if (arg1) (arg1)->SelectionStart = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiInputTextCallbackData_SelectionStart_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ; int result;
    SWIG_check_num_args("ImGuiInputTextCallbackData::SelectionStart",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::SelectionStart",1,"ImGuiInputTextCallbackData *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
      SWIG_fail_ptr("ImGuiInputTextCallbackData_SelectionStart_get",1,SWIGTYPE_p_ImGuiInputTextCallbackData); } 
    result = (int) ((arg1)->SelectionStart); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiInputTextCallbackData_SelectionEnd_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ; int arg2 ;
    SWIG_check_num_args("ImGuiInputTextCallbackData::SelectionEnd",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::SelectionEnd",1,"ImGuiInputTextCallbackData *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiInputTextCallbackData::SelectionEnd",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
      SWIG_fail_ptr("ImGuiInputTextCallbackData_SelectionEnd_set",1,SWIGTYPE_p_ImGuiInputTextCallbackData); } 
    arg2 = (int)lua_tonumber(L, 2); if (arg1) (arg1)->SelectionEnd = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiInputTextCallbackData_SelectionEnd_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ; int result;
    SWIG_check_num_args("ImGuiInputTextCallbackData::SelectionEnd",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::SelectionEnd",1,"ImGuiInputTextCallbackData *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
      SWIG_fail_ptr("ImGuiInputTextCallbackData_SelectionEnd_get",1,SWIGTYPE_p_ImGuiInputTextCallbackData); } 
    result = (int) ((arg1)->SelectionEnd); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_ImGuiInputTextCallbackData(lua_State* L) { { int SWIG_arg = 0; ImGuiInputTextCallbackData *result = 0 ;
    SWIG_check_num_args("ImGuiInputTextCallbackData::ImGuiInputTextCallbackData",0,0)
    result = (ImGuiInputTextCallbackData *)new ImGuiInputTextCallbackData();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiInputTextCallbackData,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiInputTextCallbackData_DeleteChars(lua_State* L) { { int SWIG_arg = 0;
    ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ; int arg2 ; int arg3 ;
    SWIG_check_num_args("ImGuiInputTextCallbackData::DeleteChars",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::DeleteChars",1,"ImGuiInputTextCallbackData *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiInputTextCallbackData::DeleteChars",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGuiInputTextCallbackData::DeleteChars",3,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
      SWIG_fail_ptr("ImGuiInputTextCallbackData_DeleteChars",1,SWIGTYPE_p_ImGuiInputTextCallbackData); } 
    arg2 = (int)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); (arg1)->DeleteChars(arg2,arg3); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiInputTextCallbackData_InsertChars(lua_State* L) { { int SWIG_arg = 0;
    ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ; int arg2 ; char *arg3 = (char *) 0 ;
    char *arg4 = (char *) NULL ; SWIG_check_num_args("ImGuiInputTextCallbackData::InsertChars",3,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::InsertChars",1,"ImGuiInputTextCallbackData *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiInputTextCallbackData::InsertChars",2,"int");
    if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGuiInputTextCallbackData::InsertChars",3,"char const *");
    if(lua_gettop(L)>=4 && !SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("ImGuiInputTextCallbackData::InsertChars",4,"char const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
      SWIG_fail_ptr("ImGuiInputTextCallbackData_InsertChars",1,SWIGTYPE_p_ImGuiInputTextCallbackData); } 
    arg2 = (int)lua_tonumber(L, 2); arg3 = (char *)lua_tostring(L, 3); if(lua_gettop(L)>=4){ arg4 = (char *)lua_tostring(L, 4);}
     (arg1)->InsertChars(arg2,(char const *)arg3,(char const *)arg4); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiInputTextCallbackData_SelectAll(lua_State* L) { { int SWIG_arg = 0;
    ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
    SWIG_check_num_args("ImGuiInputTextCallbackData::SelectAll",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::SelectAll",1,"ImGuiInputTextCallbackData *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
      SWIG_fail_ptr("ImGuiInputTextCallbackData_SelectAll",1,SWIGTYPE_p_ImGuiInputTextCallbackData); }  (arg1)->SelectAll();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiInputTextCallbackData_ClearSelection(lua_State* L) { { int SWIG_arg = 0;
    ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
    SWIG_check_num_args("ImGuiInputTextCallbackData::ClearSelection",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::ClearSelection",1,"ImGuiInputTextCallbackData *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
      SWIG_fail_ptr("ImGuiInputTextCallbackData_ClearSelection",1,SWIGTYPE_p_ImGuiInputTextCallbackData); } 
    (arg1)->ClearSelection(); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiInputTextCallbackData_HasSelection(lua_State* L) { { int SWIG_arg = 0;
    ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ; bool result;
    SWIG_check_num_args("ImGuiInputTextCallbackData::HasSelection",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiInputTextCallbackData::HasSelection",1,"ImGuiInputTextCallbackData const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiInputTextCallbackData,0))){
      SWIG_fail_ptr("ImGuiInputTextCallbackData_HasSelection",1,SWIGTYPE_p_ImGuiInputTextCallbackData); } 
    result = (bool)((ImGuiInputTextCallbackData const *)arg1)->HasSelection(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static void swig_delete_ImGuiInputTextCallbackData(void *obj) {
ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiInputTextCallbackData(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiInputTextCallbackData);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiInputTextCallbackData_attributes[] = {
    { "Ctx", _wrap_ImGuiInputTextCallbackData_Ctx_get, _wrap_ImGuiInputTextCallbackData_Ctx_set },
    { "EventFlag", _wrap_ImGuiInputTextCallbackData_EventFlag_get, _wrap_ImGuiInputTextCallbackData_EventFlag_set },
    { "Flags", _wrap_ImGuiInputTextCallbackData_Flags_get, _wrap_ImGuiInputTextCallbackData_Flags_set },
    { "UserData", _wrap_ImGuiInputTextCallbackData_UserData_get, _wrap_ImGuiInputTextCallbackData_UserData_set },
    { "EventChar", _wrap_ImGuiInputTextCallbackData_EventChar_get, _wrap_ImGuiInputTextCallbackData_EventChar_set },
    { "EventKey", _wrap_ImGuiInputTextCallbackData_EventKey_get, _wrap_ImGuiInputTextCallbackData_EventKey_set },
    { "Buf", _wrap_ImGuiInputTextCallbackData_Buf_get, _wrap_ImGuiInputTextCallbackData_Buf_set },
    { "BufTextLen", _wrap_ImGuiInputTextCallbackData_BufTextLen_get, _wrap_ImGuiInputTextCallbackData_BufTextLen_set },
    { "BufSize", _wrap_ImGuiInputTextCallbackData_BufSize_get, _wrap_ImGuiInputTextCallbackData_BufSize_set },
    { "BufDirty", _wrap_ImGuiInputTextCallbackData_BufDirty_get, _wrap_ImGuiInputTextCallbackData_BufDirty_set },
    { "CursorPos", _wrap_ImGuiInputTextCallbackData_CursorPos_get, _wrap_ImGuiInputTextCallbackData_CursorPos_set },
    { "SelectionStart", _wrap_ImGuiInputTextCallbackData_SelectionStart_get, _wrap_ImGuiInputTextCallbackData_SelectionStart_set },
    { "SelectionEnd", _wrap_ImGuiInputTextCallbackData_SelectionEnd_get, _wrap_ImGuiInputTextCallbackData_SelectionEnd_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiInputTextCallbackData_methods[]= {
    { "DeleteChars", _wrap_ImGuiInputTextCallbackData_DeleteChars},
    { "InsertChars", _wrap_ImGuiInputTextCallbackData_InsertChars},
    { "SelectAll", _wrap_ImGuiInputTextCallbackData_SelectAll},
    { "ClearSelection", _wrap_ImGuiInputTextCallbackData_ClearSelection},
    { "HasSelection", _wrap_ImGuiInputTextCallbackData_HasSelection},
    {0,0}
};
static swig_lua_method swig_ImGuiInputTextCallbackData_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiInputTextCallbackData_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiInputTextCallbackData_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiInputTextCallbackData_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiInputTextCallbackData_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiInputTextCallbackData_Sf_SwigStatic = {
    "ImGuiInputTextCallbackData",
    swig_ImGuiInputTextCallbackData_Sf_SwigStatic_methods,
    swig_ImGuiInputTextCallbackData_Sf_SwigStatic_attributes,
    swig_ImGuiInputTextCallbackData_Sf_SwigStatic_constants,
    swig_ImGuiInputTextCallbackData_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiInputTextCallbackData_bases[] = {0};
static const char *swig_ImGuiInputTextCallbackData_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiInputTextCallbackData = { "ImGuiInputTextCallbackData", "ImGuiInputTextCallbackData", &SWIGTYPE_p_ImGuiInputTextCallbackData,_proxy__wrap_new_ImGuiInputTextCallbackData, swig_delete_ImGuiInputTextCallbackData, swig_ImGuiInputTextCallbackData_methods, swig_ImGuiInputTextCallbackData_attributes, &swig_ImGuiInputTextCallbackData_Sf_SwigStatic, swig_ImGuiInputTextCallbackData_meta, swig_ImGuiInputTextCallbackData_bases, swig_ImGuiInputTextCallbackData_base_names };

static int _wrap_ImGuiSizeCallbackData_UserData_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiSizeCallbackData *arg1 = (ImGuiSizeCallbackData *) 0 ; void *arg2 = (void *) 0 ;
    SWIG_check_num_args("ImGuiSizeCallbackData::UserData",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSizeCallbackData::UserData",1,"ImGuiSizeCallbackData *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiSizeCallbackData::UserData",2,"void *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSizeCallbackData,0))){
      SWIG_fail_ptr("ImGuiSizeCallbackData_UserData_set",1,SWIGTYPE_p_ImGuiSizeCallbackData); } 
    arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImGuiSizeCallbackData_UserData_set"); if (arg1) (arg1)->UserData = arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiSizeCallbackData_UserData_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiSizeCallbackData *arg1 = (ImGuiSizeCallbackData *) 0 ; void *result = 0 ;
    SWIG_check_num_args("ImGuiSizeCallbackData::UserData",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSizeCallbackData::UserData",1,"ImGuiSizeCallbackData *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSizeCallbackData,0))){
      SWIG_fail_ptr("ImGuiSizeCallbackData_UserData_get",1,SWIGTYPE_p_ImGuiSizeCallbackData); } 
    result = (void *) ((arg1)->UserData); SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++;  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiSizeCallbackData_Pos_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiSizeCallbackData *arg1 = (ImGuiSizeCallbackData *) 0 ; ImVec2 *arg2 = (ImVec2 *) 0 ;
    SWIG_check_num_args("ImGuiSizeCallbackData::Pos",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSizeCallbackData::Pos",1,"ImGuiSizeCallbackData *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiSizeCallbackData::Pos",2,"ImVec2 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSizeCallbackData,0))){
      SWIG_fail_ptr("ImGuiSizeCallbackData_Pos_set",1,SWIGTYPE_p_ImGuiSizeCallbackData); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImGuiSizeCallbackData_Pos_set",2,SWIGTYPE_p_ImVec2); }  if (arg1) (arg1)->Pos = *arg2; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiSizeCallbackData_Pos_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiSizeCallbackData *arg1 = (ImGuiSizeCallbackData *) 0 ; ImVec2 *result = 0 ;
    SWIG_check_num_args("ImGuiSizeCallbackData::Pos",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSizeCallbackData::Pos",1,"ImGuiSizeCallbackData *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSizeCallbackData,0))){
      SWIG_fail_ptr("ImGuiSizeCallbackData_Pos_get",1,SWIGTYPE_p_ImGuiSizeCallbackData); }  result = (ImVec2 *)& ((arg1)->Pos);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiSizeCallbackData_CurrentSize_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiSizeCallbackData *arg1 = (ImGuiSizeCallbackData *) 0 ; ImVec2 *arg2 = (ImVec2 *) 0 ;
    SWIG_check_num_args("ImGuiSizeCallbackData::CurrentSize",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSizeCallbackData::CurrentSize",1,"ImGuiSizeCallbackData *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiSizeCallbackData::CurrentSize",2,"ImVec2 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSizeCallbackData,0))){
      SWIG_fail_ptr("ImGuiSizeCallbackData_CurrentSize_set",1,SWIGTYPE_p_ImGuiSizeCallbackData); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImGuiSizeCallbackData_CurrentSize_set",2,SWIGTYPE_p_ImVec2); }  if (arg1) (arg1)->CurrentSize = *arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiSizeCallbackData_CurrentSize_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiSizeCallbackData *arg1 = (ImGuiSizeCallbackData *) 0 ; ImVec2 *result = 0 ;
    SWIG_check_num_args("ImGuiSizeCallbackData::CurrentSize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSizeCallbackData::CurrentSize",1,"ImGuiSizeCallbackData *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSizeCallbackData,0))){
      SWIG_fail_ptr("ImGuiSizeCallbackData_CurrentSize_get",1,SWIGTYPE_p_ImGuiSizeCallbackData); } 
    result = (ImVec2 *)& ((arg1)->CurrentSize); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++;  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiSizeCallbackData_DesiredSize_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiSizeCallbackData *arg1 = (ImGuiSizeCallbackData *) 0 ; ImVec2 *arg2 = (ImVec2 *) 0 ;
    SWIG_check_num_args("ImGuiSizeCallbackData::DesiredSize",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSizeCallbackData::DesiredSize",1,"ImGuiSizeCallbackData *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiSizeCallbackData::DesiredSize",2,"ImVec2 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSizeCallbackData,0))){
      SWIG_fail_ptr("ImGuiSizeCallbackData_DesiredSize_set",1,SWIGTYPE_p_ImGuiSizeCallbackData); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImGuiSizeCallbackData_DesiredSize_set",2,SWIGTYPE_p_ImVec2); }  if (arg1) (arg1)->DesiredSize = *arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiSizeCallbackData_DesiredSize_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiSizeCallbackData *arg1 = (ImGuiSizeCallbackData *) 0 ; ImVec2 *result = 0 ;
    SWIG_check_num_args("ImGuiSizeCallbackData::DesiredSize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSizeCallbackData::DesiredSize",1,"ImGuiSizeCallbackData *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSizeCallbackData,0))){
      SWIG_fail_ptr("ImGuiSizeCallbackData_DesiredSize_get",1,SWIGTYPE_p_ImGuiSizeCallbackData); } 
    result = (ImVec2 *)& ((arg1)->DesiredSize); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++;  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_ImGuiSizeCallbackData(lua_State* L) { { int SWIG_arg = 0; ImGuiSizeCallbackData *result = 0 ;
    SWIG_check_num_args("ImGuiSizeCallbackData::ImGuiSizeCallbackData",0,0)
    result = (ImGuiSizeCallbackData *)new ImGuiSizeCallbackData();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiSizeCallbackData,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static void swig_delete_ImGuiSizeCallbackData(void *obj) {
ImGuiSizeCallbackData *arg1 = (ImGuiSizeCallbackData *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiSizeCallbackData(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiSizeCallbackData);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiSizeCallbackData_attributes[] = {
    { "UserData", _wrap_ImGuiSizeCallbackData_UserData_get, _wrap_ImGuiSizeCallbackData_UserData_set },
    { "Pos", _wrap_ImGuiSizeCallbackData_Pos_get, _wrap_ImGuiSizeCallbackData_Pos_set },
    { "CurrentSize", _wrap_ImGuiSizeCallbackData_CurrentSize_get, _wrap_ImGuiSizeCallbackData_CurrentSize_set },
    { "DesiredSize", _wrap_ImGuiSizeCallbackData_DesiredSize_get, _wrap_ImGuiSizeCallbackData_DesiredSize_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiSizeCallbackData_methods[]= {
    {0,0}
};
static swig_lua_method swig_ImGuiSizeCallbackData_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiSizeCallbackData_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiSizeCallbackData_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiSizeCallbackData_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiSizeCallbackData_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiSizeCallbackData_Sf_SwigStatic = {
    "ImGuiSizeCallbackData",
    swig_ImGuiSizeCallbackData_Sf_SwigStatic_methods,
    swig_ImGuiSizeCallbackData_Sf_SwigStatic_attributes,
    swig_ImGuiSizeCallbackData_Sf_SwigStatic_constants,
    swig_ImGuiSizeCallbackData_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiSizeCallbackData_bases[] = {0};
static const char *swig_ImGuiSizeCallbackData_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiSizeCallbackData = { "ImGuiSizeCallbackData", "ImGuiSizeCallbackData", &SWIGTYPE_p_ImGuiSizeCallbackData,_proxy__wrap_new_ImGuiSizeCallbackData, swig_delete_ImGuiSizeCallbackData, swig_ImGuiSizeCallbackData_methods, swig_ImGuiSizeCallbackData_attributes, &swig_ImGuiSizeCallbackData_Sf_SwigStatic, swig_ImGuiSizeCallbackData_meta, swig_ImGuiSizeCallbackData_bases, swig_ImGuiSizeCallbackData_base_names };

static int _wrap_ImGuiWindowClass_ClassId_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ; ImGuiID arg2 ; SWIG_check_num_args("ImGuiWindowClass::ClassId",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowClass::ClassId",1,"ImGuiWindowClass *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindowClass::ClassId",2,"ImGuiID");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowClass,0))){
      SWIG_fail_ptr("ImGuiWindowClass_ClassId_set",1,SWIGTYPE_p_ImGuiWindowClass); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (ImGuiID)lua_tonumber(L, 2);
    if (arg1) (arg1)->ClassId = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiWindowClass_ClassId_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ; ImGuiID result; SWIG_check_num_args("ImGuiWindowClass::ClassId",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowClass::ClassId",1,"ImGuiWindowClass *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowClass,0))){
      SWIG_fail_ptr("ImGuiWindowClass_ClassId_get",1,SWIGTYPE_p_ImGuiWindowClass); }  result = (ImGuiID) ((arg1)->ClassId);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiWindowClass_ParentViewportId_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ; ImGuiID arg2 ;
    SWIG_check_num_args("ImGuiWindowClass::ParentViewportId",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowClass::ParentViewportId",1,"ImGuiWindowClass *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindowClass::ParentViewportId",2,"ImGuiID");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowClass,0))){
      SWIG_fail_ptr("ImGuiWindowClass_ParentViewportId_set",1,SWIGTYPE_p_ImGuiWindowClass); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (ImGuiID)lua_tonumber(L, 2);
    if (arg1) (arg1)->ParentViewportId = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiWindowClass_ParentViewportId_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ; ImGuiID result;
    SWIG_check_num_args("ImGuiWindowClass::ParentViewportId",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowClass::ParentViewportId",1,"ImGuiWindowClass *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowClass,0))){
      SWIG_fail_ptr("ImGuiWindowClass_ParentViewportId_get",1,SWIGTYPE_p_ImGuiWindowClass); } 
    result = (ImGuiID) ((arg1)->ParentViewportId); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiWindowClass_FocusRouteParentWindowId_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ; ImGuiID arg2 ;
    SWIG_check_num_args("ImGuiWindowClass::FocusRouteParentWindowId",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowClass::FocusRouteParentWindowId",1,"ImGuiWindowClass *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindowClass::FocusRouteParentWindowId",2,"ImGuiID");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowClass,0))){
      SWIG_fail_ptr("ImGuiWindowClass_FocusRouteParentWindowId_set",1,SWIGTYPE_p_ImGuiWindowClass); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (ImGuiID)lua_tonumber(L, 2);
    if (arg1) (arg1)->FocusRouteParentWindowId = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiWindowClass_FocusRouteParentWindowId_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ; ImGuiID result;
    SWIG_check_num_args("ImGuiWindowClass::FocusRouteParentWindowId",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowClass::FocusRouteParentWindowId",1,"ImGuiWindowClass *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowClass,0))){
      SWIG_fail_ptr("ImGuiWindowClass_FocusRouteParentWindowId_get",1,SWIGTYPE_p_ImGuiWindowClass); } 
    result = (ImGuiID) ((arg1)->FocusRouteParentWindowId); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiWindowClass_ViewportFlagsOverrideSet_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ; ImGuiViewportFlags arg2 ;
    SWIG_check_num_args("ImGuiWindowClass::ViewportFlagsOverrideSet",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowClass::ViewportFlagsOverrideSet",1,"ImGuiWindowClass *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindowClass::ViewportFlagsOverrideSet",2,"ImGuiViewportFlags");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowClass,0))){
      SWIG_fail_ptr("ImGuiWindowClass_ViewportFlagsOverrideSet_set",1,SWIGTYPE_p_ImGuiWindowClass); } 
    arg2 = (ImGuiViewportFlags)lua_tonumber(L, 2); if (arg1) (arg1)->ViewportFlagsOverrideSet = arg2; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiWindowClass_ViewportFlagsOverrideSet_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ; ImGuiViewportFlags result;
    SWIG_check_num_args("ImGuiWindowClass::ViewportFlagsOverrideSet",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowClass::ViewportFlagsOverrideSet",1,"ImGuiWindowClass *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowClass,0))){
      SWIG_fail_ptr("ImGuiWindowClass_ViewportFlagsOverrideSet_get",1,SWIGTYPE_p_ImGuiWindowClass); } 
    result = (ImGuiViewportFlags) ((arg1)->ViewportFlagsOverrideSet); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiWindowClass_ViewportFlagsOverrideClear_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ; ImGuiViewportFlags arg2 ;
    SWIG_check_num_args("ImGuiWindowClass::ViewportFlagsOverrideClear",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowClass::ViewportFlagsOverrideClear",1,"ImGuiWindowClass *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindowClass::ViewportFlagsOverrideClear",2,"ImGuiViewportFlags");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowClass,0))){
      SWIG_fail_ptr("ImGuiWindowClass_ViewportFlagsOverrideClear_set",1,SWIGTYPE_p_ImGuiWindowClass); } 
    arg2 = (ImGuiViewportFlags)lua_tonumber(L, 2); if (arg1) (arg1)->ViewportFlagsOverrideClear = arg2; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiWindowClass_ViewportFlagsOverrideClear_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ; ImGuiViewportFlags result;
    SWIG_check_num_args("ImGuiWindowClass::ViewportFlagsOverrideClear",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowClass::ViewportFlagsOverrideClear",1,"ImGuiWindowClass *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowClass,0))){
      SWIG_fail_ptr("ImGuiWindowClass_ViewportFlagsOverrideClear_get",1,SWIGTYPE_p_ImGuiWindowClass); } 
    result = (ImGuiViewportFlags) ((arg1)->ViewportFlagsOverrideClear); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiWindowClass_TabItemFlagsOverrideSet_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ; ImGuiTabItemFlags arg2 ;
    SWIG_check_num_args("ImGuiWindowClass::TabItemFlagsOverrideSet",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowClass::TabItemFlagsOverrideSet",1,"ImGuiWindowClass *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindowClass::TabItemFlagsOverrideSet",2,"ImGuiTabItemFlags");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowClass,0))){
      SWIG_fail_ptr("ImGuiWindowClass_TabItemFlagsOverrideSet_set",1,SWIGTYPE_p_ImGuiWindowClass); } 
    arg2 = (ImGuiTabItemFlags)lua_tonumber(L, 2); if (arg1) (arg1)->TabItemFlagsOverrideSet = arg2; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiWindowClass_TabItemFlagsOverrideSet_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ; ImGuiTabItemFlags result;
    SWIG_check_num_args("ImGuiWindowClass::TabItemFlagsOverrideSet",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowClass::TabItemFlagsOverrideSet",1,"ImGuiWindowClass *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowClass,0))){
      SWIG_fail_ptr("ImGuiWindowClass_TabItemFlagsOverrideSet_get",1,SWIGTYPE_p_ImGuiWindowClass); } 
    result = (ImGuiTabItemFlags) ((arg1)->TabItemFlagsOverrideSet); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiWindowClass_DockNodeFlagsOverrideSet_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ; ImGuiDockNodeFlags arg2 ;
    SWIG_check_num_args("ImGuiWindowClass::DockNodeFlagsOverrideSet",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowClass::DockNodeFlagsOverrideSet",1,"ImGuiWindowClass *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiWindowClass::DockNodeFlagsOverrideSet",2,"ImGuiDockNodeFlags");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowClass,0))){
      SWIG_fail_ptr("ImGuiWindowClass_DockNodeFlagsOverrideSet_set",1,SWIGTYPE_p_ImGuiWindowClass); } 
    arg2 = (ImGuiDockNodeFlags)lua_tonumber(L, 2); if (arg1) (arg1)->DockNodeFlagsOverrideSet = arg2; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiWindowClass_DockNodeFlagsOverrideSet_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ; ImGuiDockNodeFlags result;
    SWIG_check_num_args("ImGuiWindowClass::DockNodeFlagsOverrideSet",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowClass::DockNodeFlagsOverrideSet",1,"ImGuiWindowClass *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowClass,0))){
      SWIG_fail_ptr("ImGuiWindowClass_DockNodeFlagsOverrideSet_get",1,SWIGTYPE_p_ImGuiWindowClass); } 
    result = (ImGuiDockNodeFlags) ((arg1)->DockNodeFlagsOverrideSet); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiWindowClass_DockingAlwaysTabBar_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ; bool arg2 ;
    SWIG_check_num_args("ImGuiWindowClass::DockingAlwaysTabBar",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowClass::DockingAlwaysTabBar",1,"ImGuiWindowClass *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiWindowClass::DockingAlwaysTabBar",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowClass,0))){
      SWIG_fail_ptr("ImGuiWindowClass_DockingAlwaysTabBar_set",1,SWIGTYPE_p_ImGuiWindowClass); } 
    arg2 = (lua_toboolean(L, 2)!=0); if (arg1) (arg1)->DockingAlwaysTabBar = arg2; return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiWindowClass_DockingAlwaysTabBar_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ; bool result;
    SWIG_check_num_args("ImGuiWindowClass::DockingAlwaysTabBar",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowClass::DockingAlwaysTabBar",1,"ImGuiWindowClass *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowClass,0))){
      SWIG_fail_ptr("ImGuiWindowClass_DockingAlwaysTabBar_get",1,SWIGTYPE_p_ImGuiWindowClass); } 
    result = (bool) ((arg1)->DockingAlwaysTabBar); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiWindowClass_DockingAllowUnclassed_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ; bool arg2 ;
    SWIG_check_num_args("ImGuiWindowClass::DockingAllowUnclassed",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowClass::DockingAllowUnclassed",1,"ImGuiWindowClass *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiWindowClass::DockingAllowUnclassed",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowClass,0))){
      SWIG_fail_ptr("ImGuiWindowClass_DockingAllowUnclassed_set",1,SWIGTYPE_p_ImGuiWindowClass); } 
    arg2 = (lua_toboolean(L, 2)!=0); if (arg1) (arg1)->DockingAllowUnclassed = arg2; return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiWindowClass_DockingAllowUnclassed_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ; bool result;
    SWIG_check_num_args("ImGuiWindowClass::DockingAllowUnclassed",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiWindowClass::DockingAllowUnclassed",1,"ImGuiWindowClass *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiWindowClass,0))){
      SWIG_fail_ptr("ImGuiWindowClass_DockingAllowUnclassed_get",1,SWIGTYPE_p_ImGuiWindowClass); } 
    result = (bool) ((arg1)->DockingAllowUnclassed); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_ImGuiWindowClass(lua_State* L) { { int SWIG_arg = 0; ImGuiWindowClass *result = 0 ;
    SWIG_check_num_args("ImGuiWindowClass::ImGuiWindowClass",0,0) result = (ImGuiWindowClass *)new ImGuiWindowClass();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiWindowClass,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static void swig_delete_ImGuiWindowClass(void *obj) {
ImGuiWindowClass *arg1 = (ImGuiWindowClass *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiWindowClass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiWindowClass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiWindowClass_attributes[] = {
    { "ClassId", _wrap_ImGuiWindowClass_ClassId_get, _wrap_ImGuiWindowClass_ClassId_set },
    { "ParentViewportId", _wrap_ImGuiWindowClass_ParentViewportId_get, _wrap_ImGuiWindowClass_ParentViewportId_set },
    { "FocusRouteParentWindowId", _wrap_ImGuiWindowClass_FocusRouteParentWindowId_get, _wrap_ImGuiWindowClass_FocusRouteParentWindowId_set },
    { "ViewportFlagsOverrideSet", _wrap_ImGuiWindowClass_ViewportFlagsOverrideSet_get, _wrap_ImGuiWindowClass_ViewportFlagsOverrideSet_set },
    { "ViewportFlagsOverrideClear", _wrap_ImGuiWindowClass_ViewportFlagsOverrideClear_get, _wrap_ImGuiWindowClass_ViewportFlagsOverrideClear_set },
    { "TabItemFlagsOverrideSet", _wrap_ImGuiWindowClass_TabItemFlagsOverrideSet_get, _wrap_ImGuiWindowClass_TabItemFlagsOverrideSet_set },
    { "DockNodeFlagsOverrideSet", _wrap_ImGuiWindowClass_DockNodeFlagsOverrideSet_get, _wrap_ImGuiWindowClass_DockNodeFlagsOverrideSet_set },
    { "DockingAlwaysTabBar", _wrap_ImGuiWindowClass_DockingAlwaysTabBar_get, _wrap_ImGuiWindowClass_DockingAlwaysTabBar_set },
    { "DockingAllowUnclassed", _wrap_ImGuiWindowClass_DockingAllowUnclassed_get, _wrap_ImGuiWindowClass_DockingAllowUnclassed_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiWindowClass_methods[]= {
    {0,0}
};
static swig_lua_method swig_ImGuiWindowClass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiWindowClass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiWindowClass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiWindowClass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiWindowClass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiWindowClass_Sf_SwigStatic = {
    "ImGuiWindowClass",
    swig_ImGuiWindowClass_Sf_SwigStatic_methods,
    swig_ImGuiWindowClass_Sf_SwigStatic_attributes,
    swig_ImGuiWindowClass_Sf_SwigStatic_constants,
    swig_ImGuiWindowClass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiWindowClass_bases[] = {0};
static const char *swig_ImGuiWindowClass_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiWindowClass = { "ImGuiWindowClass", "ImGuiWindowClass", &SWIGTYPE_p_ImGuiWindowClass,_proxy__wrap_new_ImGuiWindowClass, swig_delete_ImGuiWindowClass, swig_ImGuiWindowClass_methods, swig_ImGuiWindowClass_attributes, &swig_ImGuiWindowClass_Sf_SwigStatic, swig_ImGuiWindowClass_meta, swig_ImGuiWindowClass_bases, swig_ImGuiWindowClass_base_names };

static int _wrap_ImGuiPayload_Data_set(lua_State* L) { { int SWIG_arg = 0; ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
    void *arg2 = (void *) 0 ; SWIG_check_num_args("ImGuiPayload::Data",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPayload::Data",1,"ImGuiPayload *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPayload::Data",2,"void *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPayload,0))){
      SWIG_fail_ptr("ImGuiPayload_Data_set",1,SWIGTYPE_p_ImGuiPayload); } 
    arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImGuiPayload_Data_set"); if (arg1) (arg1)->Data = arg2; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPayload_Data_get(lua_State* L) { { int SWIG_arg = 0; ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
    void *result = 0 ; SWIG_check_num_args("ImGuiPayload::Data",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPayload::Data",1,"ImGuiPayload *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPayload,0))){
      SWIG_fail_ptr("ImGuiPayload_Data_get",1,SWIGTYPE_p_ImGuiPayload); }  result = (void *) ((arg1)->Data);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPayload_DataSize_set(lua_State* L) { { int SWIG_arg = 0; ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
    int arg2 ; SWIG_check_num_args("ImGuiPayload::DataSize",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPayload::DataSize",1,"ImGuiPayload *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiPayload::DataSize",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPayload,0))){
      SWIG_fail_ptr("ImGuiPayload_DataSize_set",1,SWIGTYPE_p_ImGuiPayload); }  arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->DataSize = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPayload_DataSize_get(lua_State* L) { { int SWIG_arg = 0; ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
    int result; SWIG_check_num_args("ImGuiPayload::DataSize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPayload::DataSize",1,"ImGuiPayload *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPayload,0))){
      SWIG_fail_ptr("ImGuiPayload_DataSize_get",1,SWIGTYPE_p_ImGuiPayload); }  result = (int) ((arg1)->DataSize);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPayload_SourceId_set(lua_State* L) { { int SWIG_arg = 0; ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
    ImGuiID arg2 ; SWIG_check_num_args("ImGuiPayload::SourceId",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPayload::SourceId",1,"ImGuiPayload *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiPayload::SourceId",2,"ImGuiID");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPayload,0))){
      SWIG_fail_ptr("ImGuiPayload_SourceId_set",1,SWIGTYPE_p_ImGuiPayload); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (ImGuiID)lua_tonumber(L, 2);
    if (arg1) (arg1)->SourceId = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPayload_SourceId_get(lua_State* L) { { int SWIG_arg = 0; ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
    ImGuiID result; SWIG_check_num_args("ImGuiPayload::SourceId",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPayload::SourceId",1,"ImGuiPayload *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPayload,0))){
      SWIG_fail_ptr("ImGuiPayload_SourceId_get",1,SWIGTYPE_p_ImGuiPayload); }  result = (ImGuiID) ((arg1)->SourceId);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPayload_SourceParentId_set(lua_State* L) { { int SWIG_arg = 0; ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
    ImGuiID arg2 ; SWIG_check_num_args("ImGuiPayload::SourceParentId",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPayload::SourceParentId",1,"ImGuiPayload *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiPayload::SourceParentId",2,"ImGuiID");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPayload,0))){
      SWIG_fail_ptr("ImGuiPayload_SourceParentId_set",1,SWIGTYPE_p_ImGuiPayload); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (ImGuiID)lua_tonumber(L, 2);
    if (arg1) (arg1)->SourceParentId = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPayload_SourceParentId_get(lua_State* L) { { int SWIG_arg = 0; ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
    ImGuiID result; SWIG_check_num_args("ImGuiPayload::SourceParentId",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPayload::SourceParentId",1,"ImGuiPayload *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPayload,0))){
      SWIG_fail_ptr("ImGuiPayload_SourceParentId_get",1,SWIGTYPE_p_ImGuiPayload); } 
    result = (ImGuiID) ((arg1)->SourceParentId); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPayload_DataFrameCount_set(lua_State* L) { { int SWIG_arg = 0; ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
    int arg2 ; SWIG_check_num_args("ImGuiPayload::DataFrameCount",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPayload::DataFrameCount",1,"ImGuiPayload *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiPayload::DataFrameCount",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPayload,0))){
      SWIG_fail_ptr("ImGuiPayload_DataFrameCount_set",1,SWIGTYPE_p_ImGuiPayload); }  arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->DataFrameCount = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPayload_DataFrameCount_get(lua_State* L) { { int SWIG_arg = 0; ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
    int result; SWIG_check_num_args("ImGuiPayload::DataFrameCount",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPayload::DataFrameCount",1,"ImGuiPayload *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPayload,0))){
      SWIG_fail_ptr("ImGuiPayload_DataFrameCount_get",1,SWIGTYPE_p_ImGuiPayload); }  result = (int) ((arg1)->DataFrameCount);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPayload_DataType_set(lua_State* L) { { int SWIG_arg = 0; ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
    char *arg2 = (char *) (char *)0 ; SWIG_check_num_args("ImGuiPayload::DataType",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPayload::DataType",1,"ImGuiPayload *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGuiPayload::DataType",2,"char [32+1]");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPayload,0))){
      SWIG_fail_ptr("ImGuiPayload_DataType_set",1,SWIGTYPE_p_ImGuiPayload); }  arg2 = (char *)lua_tostring(L, 2); { if(arg2) {
        strncpy((char*)arg1->DataType, (const char *)arg2, 32+1-1); arg1->DataType[32+1-1] = 0; }  else {
        arg1->DataType[0] = 0; }  }  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPayload_DataType_get(lua_State* L) { { int SWIG_arg = 0; ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
    char *result = 0 ; SWIG_check_num_args("ImGuiPayload::DataType",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPayload::DataType",1,"ImGuiPayload *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPayload,0))){
      SWIG_fail_ptr("ImGuiPayload_DataType_get",1,SWIGTYPE_p_ImGuiPayload); }  result = (char *)(char *) ((arg1)->DataType);
    lua_pushstring(L,(const char *)result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPayload_Preview_set(lua_State* L) { { int SWIG_arg = 0; ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
    bool arg2 ; SWIG_check_num_args("ImGuiPayload::Preview",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPayload::Preview",1,"ImGuiPayload *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiPayload::Preview",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPayload,0))){
      SWIG_fail_ptr("ImGuiPayload_Preview_set",1,SWIGTYPE_p_ImGuiPayload); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->Preview = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPayload_Preview_get(lua_State* L) { { int SWIG_arg = 0; ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
    bool result; SWIG_check_num_args("ImGuiPayload::Preview",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPayload::Preview",1,"ImGuiPayload *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPayload,0))){
      SWIG_fail_ptr("ImGuiPayload_Preview_get",1,SWIGTYPE_p_ImGuiPayload); }  result = (bool) ((arg1)->Preview);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPayload_Delivery_set(lua_State* L) { { int SWIG_arg = 0; ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
    bool arg2 ; SWIG_check_num_args("ImGuiPayload::Delivery",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPayload::Delivery",1,"ImGuiPayload *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiPayload::Delivery",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPayload,0))){
      SWIG_fail_ptr("ImGuiPayload_Delivery_set",1,SWIGTYPE_p_ImGuiPayload); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->Delivery = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPayload_Delivery_get(lua_State* L) { { int SWIG_arg = 0; ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
    bool result; SWIG_check_num_args("ImGuiPayload::Delivery",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPayload::Delivery",1,"ImGuiPayload *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPayload,0))){
      SWIG_fail_ptr("ImGuiPayload_Delivery_get",1,SWIGTYPE_p_ImGuiPayload); }  result = (bool) ((arg1)->Delivery);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_ImGuiPayload(lua_State* L) { { int SWIG_arg = 0; ImGuiPayload *result = 0 ;
    SWIG_check_num_args("ImGuiPayload::ImGuiPayload",0,0) result = (ImGuiPayload *)new ImGuiPayload();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiPayload,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiPayload_Clear(lua_State* L) { { int SWIG_arg = 0; ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
    SWIG_check_num_args("ImGuiPayload::Clear",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPayload::Clear",1,"ImGuiPayload *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPayload,0))){
      SWIG_fail_ptr("ImGuiPayload_Clear",1,SWIGTYPE_p_ImGuiPayload); }  (arg1)->Clear(); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiPayload_IsDataType(lua_State* L) { { int SWIG_arg = 0; ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
    char *arg2 = (char *) 0 ; bool result; SWIG_check_num_args("ImGuiPayload::IsDataType",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPayload::IsDataType",1,"ImGuiPayload const *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGuiPayload::IsDataType",2,"char const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPayload,0))){
      SWIG_fail_ptr("ImGuiPayload_IsDataType",1,SWIGTYPE_p_ImGuiPayload); }  arg2 = (char *)lua_tostring(L, 2);
    result = (bool)((ImGuiPayload const *)arg1)->IsDataType((char const *)arg2);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPayload_IsPreview(lua_State* L) { { int SWIG_arg = 0; ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
    bool result; SWIG_check_num_args("ImGuiPayload::IsPreview",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPayload::IsPreview",1,"ImGuiPayload const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPayload,0))){
      SWIG_fail_ptr("ImGuiPayload_IsPreview",1,SWIGTYPE_p_ImGuiPayload); } 
    result = (bool)((ImGuiPayload const *)arg1)->IsPreview(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPayload_IsDelivery(lua_State* L) { { int SWIG_arg = 0; ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
    bool result; SWIG_check_num_args("ImGuiPayload::IsDelivery",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPayload::IsDelivery",1,"ImGuiPayload const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPayload,0))){
      SWIG_fail_ptr("ImGuiPayload_IsDelivery",1,SWIGTYPE_p_ImGuiPayload); } 
    result = (bool)((ImGuiPayload const *)arg1)->IsDelivery(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static void swig_delete_ImGuiPayload(void *obj) {
ImGuiPayload *arg1 = (ImGuiPayload *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiPayload(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiPayload);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiPayload_attributes[] = {
    { "Data", _wrap_ImGuiPayload_Data_get, _wrap_ImGuiPayload_Data_set },
    { "DataSize", _wrap_ImGuiPayload_DataSize_get, _wrap_ImGuiPayload_DataSize_set },
    { "SourceId", _wrap_ImGuiPayload_SourceId_get, _wrap_ImGuiPayload_SourceId_set },
    { "SourceParentId", _wrap_ImGuiPayload_SourceParentId_get, _wrap_ImGuiPayload_SourceParentId_set },
    { "DataFrameCount", _wrap_ImGuiPayload_DataFrameCount_get, _wrap_ImGuiPayload_DataFrameCount_set },
    { "DataType", _wrap_ImGuiPayload_DataType_get, _wrap_ImGuiPayload_DataType_set },
    { "Preview", _wrap_ImGuiPayload_Preview_get, _wrap_ImGuiPayload_Preview_set },
    { "Delivery", _wrap_ImGuiPayload_Delivery_get, _wrap_ImGuiPayload_Delivery_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiPayload_methods[]= {
    { "Clear", _wrap_ImGuiPayload_Clear},
    { "IsDataType", _wrap_ImGuiPayload_IsDataType},
    { "IsPreview", _wrap_ImGuiPayload_IsPreview},
    { "IsDelivery", _wrap_ImGuiPayload_IsDelivery},
    {0,0}
};
static swig_lua_method swig_ImGuiPayload_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiPayload_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiPayload_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiPayload_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiPayload_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiPayload_Sf_SwigStatic = {
    "ImGuiPayload",
    swig_ImGuiPayload_Sf_SwigStatic_methods,
    swig_ImGuiPayload_Sf_SwigStatic_attributes,
    swig_ImGuiPayload_Sf_SwigStatic_constants,
    swig_ImGuiPayload_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiPayload_bases[] = {0};
static const char *swig_ImGuiPayload_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiPayload = { "ImGuiPayload", "ImGuiPayload", &SWIGTYPE_p_ImGuiPayload,_proxy__wrap_new_ImGuiPayload, swig_delete_ImGuiPayload, swig_ImGuiPayload_methods, swig_ImGuiPayload_attributes, &swig_ImGuiPayload_Sf_SwigStatic, swig_ImGuiPayload_meta, swig_ImGuiPayload_bases, swig_ImGuiPayload_base_names };

static int _wrap_new_ImGuiOnceUponAFrame(lua_State* L) { { int SWIG_arg = 0; ImGuiOnceUponAFrame *result = 0 ;
    SWIG_check_num_args("ImGuiOnceUponAFrame::ImGuiOnceUponAFrame",0,0)
    result = (ImGuiOnceUponAFrame *)new ImGuiOnceUponAFrame();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiOnceUponAFrame,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiOnceUponAFrame_RefFrame_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiOnceUponAFrame *arg1 = (ImGuiOnceUponAFrame *) 0 ; int arg2 ; SWIG_check_num_args("ImGuiOnceUponAFrame::RefFrame",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiOnceUponAFrame::RefFrame",1,"ImGuiOnceUponAFrame *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiOnceUponAFrame::RefFrame",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiOnceUponAFrame,0))){
      SWIG_fail_ptr("ImGuiOnceUponAFrame_RefFrame_set",1,SWIGTYPE_p_ImGuiOnceUponAFrame); }  arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->RefFrame = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiOnceUponAFrame_RefFrame_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiOnceUponAFrame *arg1 = (ImGuiOnceUponAFrame *) 0 ; int result; SWIG_check_num_args("ImGuiOnceUponAFrame::RefFrame",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiOnceUponAFrame::RefFrame",1,"ImGuiOnceUponAFrame *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiOnceUponAFrame,0))){
      SWIG_fail_ptr("ImGuiOnceUponAFrame_RefFrame_get",1,SWIGTYPE_p_ImGuiOnceUponAFrame); }  result = (int) ((arg1)->RefFrame);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiOnceUponAFrame_tobool(lua_State* L) { { int SWIG_arg = 0;
    ImGuiOnceUponAFrame *arg1 = (ImGuiOnceUponAFrame *) 0 ; bool result;
    SWIG_check_num_args("ImGuiOnceUponAFrame::operator bool",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiOnceUponAFrame::operator bool",1,"ImGuiOnceUponAFrame const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiOnceUponAFrame,0))){
      SWIG_fail_ptr("ImGuiOnceUponAFrame_tobool",1,SWIGTYPE_p_ImGuiOnceUponAFrame); } 
    result = (bool)((ImGuiOnceUponAFrame const *)arg1)->operator bool(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static void swig_delete_ImGuiOnceUponAFrame(void *obj) {
ImGuiOnceUponAFrame *arg1 = (ImGuiOnceUponAFrame *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiOnceUponAFrame(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiOnceUponAFrame);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiOnceUponAFrame_attributes[] = {
    { "RefFrame", _wrap_ImGuiOnceUponAFrame_RefFrame_get, _wrap_ImGuiOnceUponAFrame_RefFrame_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiOnceUponAFrame_methods[]= {
    { "tobool", _wrap_ImGuiOnceUponAFrame_tobool},
    {0,0}
};
static swig_lua_method swig_ImGuiOnceUponAFrame_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiOnceUponAFrame_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiOnceUponAFrame_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiOnceUponAFrame_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiOnceUponAFrame_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiOnceUponAFrame_Sf_SwigStatic = {
    "ImGuiOnceUponAFrame",
    swig_ImGuiOnceUponAFrame_Sf_SwigStatic_methods,
    swig_ImGuiOnceUponAFrame_Sf_SwigStatic_attributes,
    swig_ImGuiOnceUponAFrame_Sf_SwigStatic_constants,
    swig_ImGuiOnceUponAFrame_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiOnceUponAFrame_bases[] = {0};
static const char *swig_ImGuiOnceUponAFrame_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiOnceUponAFrame = { "ImGuiOnceUponAFrame", "ImGuiOnceUponAFrame", &SWIGTYPE_p_ImGuiOnceUponAFrame,_proxy__wrap_new_ImGuiOnceUponAFrame, swig_delete_ImGuiOnceUponAFrame, swig_ImGuiOnceUponAFrame_methods, swig_ImGuiOnceUponAFrame_attributes, &swig_ImGuiOnceUponAFrame_Sf_SwigStatic, swig_ImGuiOnceUponAFrame_meta, swig_ImGuiOnceUponAFrame_bases, swig_ImGuiOnceUponAFrame_base_names };

static int _wrap_new_ImGuiTextFilter(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) "" ;
    ImGuiTextFilter *result = 0 ; SWIG_check_num_args("ImGuiTextFilter::ImGuiTextFilter",0,1)
    if(lua_gettop(L)>=1 && !SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGuiTextFilter::ImGuiTextFilter",1,"char const *");
    if(lua_gettop(L)>=1){ arg1 = (char *)lua_tostring(L, 1);} 
    result = (ImGuiTextFilter *)new ImGuiTextFilter((char const *)arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiTextFilter,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiTextFilter_Draw(lua_State* L) { { int SWIG_arg = 0; ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
    char *arg2 = (char *) "Filter (inc,-exc)" ; float arg3 = (float) 0.0 ; bool result;
    SWIG_check_num_args("ImGuiTextFilter::Draw",1,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTextFilter::Draw",1,"ImGuiTextFilter *");
    if(lua_gettop(L)>=2 && !SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGuiTextFilter::Draw",2,"char const *");
    if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("ImGuiTextFilter::Draw",3,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTextFilter,0))){
      SWIG_fail_ptr("ImGuiTextFilter_Draw",1,SWIGTYPE_p_ImGuiTextFilter); }  if(lua_gettop(L)>=2){
      arg2 = (char *)lua_tostring(L, 2);}  if(lua_gettop(L)>=3){ arg3 = (float)lua_tonumber(L, 3);} 
    result = (bool)(arg1)->Draw((char const *)arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiTextFilter_PassFilter(lua_State* L) { { int SWIG_arg = 0; ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
    char *arg2 = (char *) 0 ; char *arg3 = (char *) NULL ; bool result; SWIG_check_num_args("ImGuiTextFilter::PassFilter",2,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTextFilter::PassFilter",1,"ImGuiTextFilter const *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGuiTextFilter::PassFilter",2,"char const *");
    if(lua_gettop(L)>=3 && !SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGuiTextFilter::PassFilter",3,"char const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTextFilter,0))){
      SWIG_fail_ptr("ImGuiTextFilter_PassFilter",1,SWIGTYPE_p_ImGuiTextFilter); }  arg2 = (char *)lua_tostring(L, 2);
    if(lua_gettop(L)>=3){ arg3 = (char *)lua_tostring(L, 3);} 
    result = (bool)((ImGuiTextFilter const *)arg1)->PassFilter((char const *)arg2,(char const *)arg3);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiTextFilter_Build(lua_State* L) { { int SWIG_arg = 0; ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
    SWIG_check_num_args("ImGuiTextFilter::Build",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTextFilter::Build",1,"ImGuiTextFilter *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTextFilter,0))){
      SWIG_fail_ptr("ImGuiTextFilter_Build",1,SWIGTYPE_p_ImGuiTextFilter); }  (arg1)->Build(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiTextFilter_Clear(lua_State* L) { { int SWIG_arg = 0; ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
    SWIG_check_num_args("ImGuiTextFilter::Clear",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTextFilter::Clear",1,"ImGuiTextFilter *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTextFilter,0))){
      SWIG_fail_ptr("ImGuiTextFilter_Clear",1,SWIGTYPE_p_ImGuiTextFilter); }  (arg1)->Clear(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiTextFilter_IsActive(lua_State* L) { { int SWIG_arg = 0; ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
    bool result; SWIG_check_num_args("ImGuiTextFilter::IsActive",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTextFilter::IsActive",1,"ImGuiTextFilter const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTextFilter,0))){
      SWIG_fail_ptr("ImGuiTextFilter_IsActive",1,SWIGTYPE_p_ImGuiTextFilter); } 
    result = (bool)((ImGuiTextFilter const *)arg1)->IsActive(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiTextFilter_InputBuf_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ; char *arg2 = (char *) (char *)0 ;
    SWIG_check_num_args("ImGuiTextFilter::InputBuf",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTextFilter::InputBuf",1,"ImGuiTextFilter *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGuiTextFilter::InputBuf",2,"char [256]");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTextFilter,0))){
      SWIG_fail_ptr("ImGuiTextFilter_InputBuf_set",1,SWIGTYPE_p_ImGuiTextFilter); }  arg2 = (char *)lua_tostring(L, 2); {
      if(arg2) { strncpy((char*)arg1->InputBuf, (const char *)arg2, 256-1); arg1->InputBuf[256-1] = 0; }  else {
        arg1->InputBuf[0] = 0; }  }  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiTextFilter_InputBuf_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ; char *result = 0 ; SWIG_check_num_args("ImGuiTextFilter::InputBuf",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTextFilter::InputBuf",1,"ImGuiTextFilter *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTextFilter,0))){
      SWIG_fail_ptr("ImGuiTextFilter_InputBuf_get",1,SWIGTYPE_p_ImGuiTextFilter); } 
    result = (char *)(char *) ((arg1)->InputBuf); lua_pushstring(L,(const char *)result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiTextFilter_Filters_set(lua_State* L) { { int SWIG_arg = 0; ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
    ImVector< ImGuiTextFilter::ImGuiTextRange > *arg2 = (ImVector< ImGuiTextFilter::ImGuiTextRange > *) 0 ;
    SWIG_check_num_args("ImGuiTextFilter::Filters",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTextFilter::Filters",1,"ImGuiTextFilter *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiTextFilter::Filters",2,"ImVector< ImGuiTextFilter::ImGuiTextRange > *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTextFilter,0))){
      SWIG_fail_ptr("ImGuiTextFilter_Filters_set",1,SWIGTYPE_p_ImGuiTextFilter); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImGuiTextFilter__ImGuiTextRange_t,0))){
      SWIG_fail_ptr("ImGuiTextFilter_Filters_set",2,SWIGTYPE_p_ImVectorT_ImGuiTextFilter__ImGuiTextRange_t); } 
    if (arg1) (arg1)->Filters = *arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiTextFilter_Filters_get(lua_State* L) { { int SWIG_arg = 0; ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
    ImVector< ImGuiTextFilter::ImGuiTextRange > *result = 0 ; SWIG_check_num_args("ImGuiTextFilter::Filters",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTextFilter::Filters",1,"ImGuiTextFilter *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTextFilter,0))){
      SWIG_fail_ptr("ImGuiTextFilter_Filters_get",1,SWIGTYPE_p_ImGuiTextFilter); } 
    result = (ImVector< ImGuiTextFilter::ImGuiTextRange > *)& ((arg1)->Filters);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImGuiTextFilter__ImGuiTextRange_t,0); SWIG_arg++;  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiTextFilter_CountGrep_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ; int arg2 ; SWIG_check_num_args("ImGuiTextFilter::CountGrep",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTextFilter::CountGrep",1,"ImGuiTextFilter *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiTextFilter::CountGrep",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTextFilter,0))){
      SWIG_fail_ptr("ImGuiTextFilter_CountGrep_set",1,SWIGTYPE_p_ImGuiTextFilter); }  arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->CountGrep = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiTextFilter_CountGrep_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ; int result; SWIG_check_num_args("ImGuiTextFilter::CountGrep",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTextFilter::CountGrep",1,"ImGuiTextFilter *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTextFilter,0))){
      SWIG_fail_ptr("ImGuiTextFilter_CountGrep_get",1,SWIGTYPE_p_ImGuiTextFilter); }  result = (int) ((arg1)->CountGrep);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static void swig_delete_ImGuiTextFilter(void *obj) {
ImGuiTextFilter *arg1 = (ImGuiTextFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiTextFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiTextFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiTextFilter_attributes[] = {
    { "InputBuf", _wrap_ImGuiTextFilter_InputBuf_get, _wrap_ImGuiTextFilter_InputBuf_set },
    { "Filters", _wrap_ImGuiTextFilter_Filters_get, _wrap_ImGuiTextFilter_Filters_set },
    { "CountGrep", _wrap_ImGuiTextFilter_CountGrep_get, _wrap_ImGuiTextFilter_CountGrep_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiTextFilter_methods[]= {
    { "Draw", _wrap_ImGuiTextFilter_Draw},
    { "PassFilter", _wrap_ImGuiTextFilter_PassFilter},
    { "Build", _wrap_ImGuiTextFilter_Build},
    { "Clear", _wrap_ImGuiTextFilter_Clear},
    { "IsActive", _wrap_ImGuiTextFilter_IsActive},
    {0,0}
};
static swig_lua_method swig_ImGuiTextFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiTextFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiTextFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiTextFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiTextFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiTextFilter_Sf_SwigStatic = {
    "ImGuiTextFilter",
    swig_ImGuiTextFilter_Sf_SwigStatic_methods,
    swig_ImGuiTextFilter_Sf_SwigStatic_attributes,
    swig_ImGuiTextFilter_Sf_SwigStatic_constants,
    swig_ImGuiTextFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiTextFilter_bases[] = {0};
static const char *swig_ImGuiTextFilter_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiTextFilter = { "ImGuiTextFilter", "ImGuiTextFilter", &SWIGTYPE_p_ImGuiTextFilter,_proxy__wrap_new_ImGuiTextFilter, swig_delete_ImGuiTextFilter, swig_ImGuiTextFilter_methods, swig_ImGuiTextFilter_attributes, &swig_ImGuiTextFilter_Sf_SwigStatic, swig_ImGuiTextFilter_meta, swig_ImGuiTextFilter_bases, swig_ImGuiTextFilter_base_names };

static int _wrap_ImGuiTextBuffer_Buf_set(lua_State* L) { { int SWIG_arg = 0; ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
    ImVector< char > *arg2 = (ImVector< char > *) 0 ; SWIG_check_num_args("ImGuiTextBuffer::Buf",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTextBuffer::Buf",1,"ImGuiTextBuffer *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiTextBuffer::Buf",2,"ImVector< char > *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTextBuffer,0))){
      SWIG_fail_ptr("ImGuiTextBuffer_Buf_set",1,SWIGTYPE_p_ImGuiTextBuffer); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_char_t,0))){
      SWIG_fail_ptr("ImGuiTextBuffer_Buf_set",2,SWIGTYPE_p_ImVectorT_char_t); }  if (arg1) (arg1)->Buf = *arg2; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiTextBuffer_Buf_get(lua_State* L) { { int SWIG_arg = 0; ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
    ImVector< char > *result = 0 ; SWIG_check_num_args("ImGuiTextBuffer::Buf",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTextBuffer::Buf",1,"ImGuiTextBuffer *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTextBuffer,0))){
      SWIG_fail_ptr("ImGuiTextBuffer_Buf_get",1,SWIGTYPE_p_ImGuiTextBuffer); }  result = (ImVector< char > *)& ((arg1)->Buf);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_char_t,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiTextBuffer_EmptyString_set(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) (char *)0 ;
    SWIG_check_num_args("ImGuiTextBuffer::EmptyString",1,1)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGuiTextBuffer::EmptyString",1,"char [1]");
    arg1 = (char *)lua_tostring(L, 1); { if(arg1) { strncpy((char*)ImGuiTextBuffer::EmptyString, (const char *)arg1, 1-1);
        ImGuiTextBuffer::EmptyString[1-1] = 0; }  else { ImGuiTextBuffer::EmptyString[0] = 0; }  }  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiTextBuffer_EmptyString_get(lua_State* L) { { int SWIG_arg = 0; char *result = 0 ;
    SWIG_check_num_args("ImGuiTextBuffer::EmptyString",0,0) result = (char *)(char *)ImGuiTextBuffer::EmptyString;
    lua_pushstring(L,(const char *)result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_ImGuiTextBuffer(lua_State* L) { { int SWIG_arg = 0; ImGuiTextBuffer *result = 0 ;
    SWIG_check_num_args("ImGuiTextBuffer::ImGuiTextBuffer",0,0) result = (ImGuiTextBuffer *)new ImGuiTextBuffer();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiTextBuffer,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiTextBuffer_begin(lua_State* L) { { int SWIG_arg = 0; ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
    char *result = 0 ; SWIG_check_num_args("ImGuiTextBuffer::begin",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTextBuffer::begin",1,"ImGuiTextBuffer const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTextBuffer,0))){
      SWIG_fail_ptr("ImGuiTextBuffer_begin",1,SWIGTYPE_p_ImGuiTextBuffer); } 
    result = (char *)((ImGuiTextBuffer const *)arg1)->begin(); lua_pushstring(L,(const char *)result); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiTextBuffer_c_end(lua_State* L) { { int SWIG_arg = 0; ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
    char *result = 0 ; SWIG_check_num_args("ImGuiTextBuffer::end",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTextBuffer::end",1,"ImGuiTextBuffer const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTextBuffer,0))){
      SWIG_fail_ptr("ImGuiTextBuffer_c_end",1,SWIGTYPE_p_ImGuiTextBuffer); } 
    result = (char *)((ImGuiTextBuffer const *)arg1)->end(); lua_pushstring(L,(const char *)result); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiTextBuffer_size(lua_State* L) { { int SWIG_arg = 0; ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
    int result; SWIG_check_num_args("ImGuiTextBuffer::size",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTextBuffer::size",1,"ImGuiTextBuffer const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTextBuffer,0))){
      SWIG_fail_ptr("ImGuiTextBuffer_size",1,SWIGTYPE_p_ImGuiTextBuffer); } 
    result = (int)((ImGuiTextBuffer const *)arg1)->size(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiTextBuffer_empty(lua_State* L) { { int SWIG_arg = 0; ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
    bool result; SWIG_check_num_args("ImGuiTextBuffer::empty",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTextBuffer::empty",1,"ImGuiTextBuffer const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTextBuffer,0))){
      SWIG_fail_ptr("ImGuiTextBuffer_empty",1,SWIGTYPE_p_ImGuiTextBuffer); } 
    result = (bool)((ImGuiTextBuffer const *)arg1)->empty(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiTextBuffer_clear(lua_State* L) { { int SWIG_arg = 0; ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
    SWIG_check_num_args("ImGuiTextBuffer::clear",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTextBuffer::clear",1,"ImGuiTextBuffer *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTextBuffer,0))){
      SWIG_fail_ptr("ImGuiTextBuffer_clear",1,SWIGTYPE_p_ImGuiTextBuffer); }  (arg1)->clear(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiTextBuffer_reserve(lua_State* L) { { int SWIG_arg = 0; ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
    int arg2 ; SWIG_check_num_args("ImGuiTextBuffer::reserve",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTextBuffer::reserve",1,"ImGuiTextBuffer *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiTextBuffer::reserve",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTextBuffer,0))){
      SWIG_fail_ptr("ImGuiTextBuffer_reserve",1,SWIGTYPE_p_ImGuiTextBuffer); }  arg2 = (int)lua_tonumber(L, 2);
    (arg1)->reserve(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiTextBuffer_c_str(lua_State* L) { { int SWIG_arg = 0; ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
    char *result = 0 ; SWIG_check_num_args("ImGuiTextBuffer::c_str",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTextBuffer::c_str",1,"ImGuiTextBuffer const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTextBuffer,0))){
      SWIG_fail_ptr("ImGuiTextBuffer_c_str",1,SWIGTYPE_p_ImGuiTextBuffer); } 
    result = (char *)((ImGuiTextBuffer const *)arg1)->c_str(); lua_pushstring(L,(const char *)result); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiTextBuffer_append(lua_State* L) { { int SWIG_arg = 0; ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
    char *arg2 = (char *) 0 ; char *arg3 = (char *) NULL ; SWIG_check_num_args("ImGuiTextBuffer::append",2,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTextBuffer::append",1,"ImGuiTextBuffer *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGuiTextBuffer::append",2,"char const *");
    if(lua_gettop(L)>=3 && !SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImGuiTextBuffer::append",3,"char const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTextBuffer,0))){
      SWIG_fail_ptr("ImGuiTextBuffer_append",1,SWIGTYPE_p_ImGuiTextBuffer); }  arg2 = (char *)lua_tostring(L, 2);
    if(lua_gettop(L)>=3){ arg3 = (char *)lua_tostring(L, 3);}  (arg1)->append((char const *)arg2,(char const *)arg3);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiTextBuffer_appendf(lua_State* L) { { int SWIG_arg = 0; ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
    char *arg2 = (char *) 0 ; void *arg3 = 0 ; SWIG_check_num_args("ImGuiTextBuffer::appendf",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTextBuffer::appendf",1,"ImGuiTextBuffer *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGuiTextBuffer::appendf",2,"char const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTextBuffer,0))){
      SWIG_fail_ptr("ImGuiTextBuffer_appendf",1,SWIGTYPE_p_ImGuiTextBuffer); }  arg2 = (char *)lua_tostring(L, 2);
    (arg1)->appendf((char const *)arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiTextBuffer_appendfv(lua_State* L) { { int SWIG_arg = 0; ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
    char *arg2 = (char *) 0 ; va_list arg3 ; va_list *argp3 ; SWIG_check_num_args("ImGuiTextBuffer::appendfv",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiTextBuffer::appendfv",1,"ImGuiTextBuffer *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImGuiTextBuffer::appendfv",2,"char const *");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImGuiTextBuffer::appendfv",3,"va_list");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiTextBuffer,0))){
      SWIG_fail_ptr("ImGuiTextBuffer_appendfv",1,SWIGTYPE_p_ImGuiTextBuffer); }  arg2 = (char *)lua_tostring(L, 2);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_va_list,0))){
      SWIG_fail_ptr("ImGuiTextBuffer_appendfv",3,SWIGTYPE_p_va_list); }  arg3 = *argp3;
    (arg1)->appendfv((char const *)arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static void swig_delete_ImGuiTextBuffer(void *obj) {
ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiTextBuffer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiTextBuffer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiTextBuffer_attributes[] = {
    { "Buf", _wrap_ImGuiTextBuffer_Buf_get, _wrap_ImGuiTextBuffer_Buf_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiTextBuffer_methods[]= {
    { "begin", _wrap_ImGuiTextBuffer_begin},
    { "c_end", _wrap_ImGuiTextBuffer_c_end},
    { "size", _wrap_ImGuiTextBuffer_size},
    { "empty", _wrap_ImGuiTextBuffer_empty},
    { "clear", _wrap_ImGuiTextBuffer_clear},
    { "reserve", _wrap_ImGuiTextBuffer_reserve},
    { "c_str", _wrap_ImGuiTextBuffer_c_str},
    { "append", _wrap_ImGuiTextBuffer_append},
    { "appendf", _wrap_ImGuiTextBuffer_appendf},
    { "appendfv", _wrap_ImGuiTextBuffer_appendfv},
    {0,0}
};
static swig_lua_method swig_ImGuiTextBuffer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiTextBuffer_Sf_SwigStatic_attributes[] = {
    { "EmptyString", _wrap_ImGuiTextBuffer_EmptyString_get, _wrap_ImGuiTextBuffer_EmptyString_set },
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiTextBuffer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiTextBuffer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiTextBuffer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiTextBuffer_Sf_SwigStatic = {
    "ImGuiTextBuffer",
    swig_ImGuiTextBuffer_Sf_SwigStatic_methods,
    swig_ImGuiTextBuffer_Sf_SwigStatic_attributes,
    swig_ImGuiTextBuffer_Sf_SwigStatic_constants,
    swig_ImGuiTextBuffer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiTextBuffer_bases[] = {0};
static const char *swig_ImGuiTextBuffer_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiTextBuffer = { "ImGuiTextBuffer", "ImGuiTextBuffer", &SWIGTYPE_p_ImGuiTextBuffer,_proxy__wrap_new_ImGuiTextBuffer, swig_delete_ImGuiTextBuffer, swig_ImGuiTextBuffer_methods, swig_ImGuiTextBuffer_attributes, &swig_ImGuiTextBuffer_Sf_SwigStatic, swig_ImGuiTextBuffer_meta, swig_ImGuiTextBuffer_bases, swig_ImGuiTextBuffer_base_names };

static int _wrap_ImGuiStoragePair_key_set(lua_State* L) { { int SWIG_arg = 0; ImGuiStoragePair *arg1 = (ImGuiStoragePair *) 0 ;
    ImGuiID arg2 ; SWIG_check_num_args("ImGuiStoragePair::key",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStoragePair::key",1,"ImGuiStoragePair *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStoragePair::key",2,"ImGuiID");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStoragePair,0))){
      SWIG_fail_ptr("ImGuiStoragePair_key_set",1,SWIGTYPE_p_ImGuiStoragePair); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (ImGuiID)lua_tonumber(L, 2);
    if (arg1) (arg1)->key = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStoragePair_key_get(lua_State* L) { { int SWIG_arg = 0; ImGuiStoragePair *arg1 = (ImGuiStoragePair *) 0 ;
    ImGuiID result; SWIG_check_num_args("ImGuiStoragePair::key",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStoragePair::key",1,"ImGuiStoragePair *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStoragePair,0))){
      SWIG_fail_ptr("ImGuiStoragePair_key_get",1,SWIGTYPE_p_ImGuiStoragePair); }  result = (ImGuiID) ((arg1)->key);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStoragePair_val_i_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiStoragePair *arg1 = (ImGuiStoragePair *) 0 ; int arg2 ; SWIG_check_num_args("ImGuiStoragePair::val_i",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStoragePair::val_i",1,"ImGuiStoragePair *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStoragePair::val_i",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStoragePair,0))){
      SWIG_fail_ptr("ImGuiStoragePair_val_i_set",1,SWIGTYPE_p_ImGuiStoragePair); }  arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->val_i = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStoragePair_val_i_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiStoragePair *arg1 = (ImGuiStoragePair *) 0 ; int result; SWIG_check_num_args("ImGuiStoragePair::val_i",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStoragePair::val_i",1,"ImGuiStoragePair *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStoragePair,0))){
      SWIG_fail_ptr("ImGuiStoragePair_val_i_get",1,SWIGTYPE_p_ImGuiStoragePair); }  result = (int) ((arg1)->val_i);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStoragePair_val_f_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiStoragePair *arg1 = (ImGuiStoragePair *) 0 ; float arg2 ; SWIG_check_num_args("ImGuiStoragePair::val_f",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStoragePair::val_f",1,"ImGuiStoragePair *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStoragePair::val_f",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStoragePair,0))){
      SWIG_fail_ptr("ImGuiStoragePair_val_f_set",1,SWIGTYPE_p_ImGuiStoragePair); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->val_f = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStoragePair_val_f_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiStoragePair *arg1 = (ImGuiStoragePair *) 0 ; float result; SWIG_check_num_args("ImGuiStoragePair::val_f",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStoragePair::val_f",1,"ImGuiStoragePair *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStoragePair,0))){
      SWIG_fail_ptr("ImGuiStoragePair_val_f_get",1,SWIGTYPE_p_ImGuiStoragePair); }  result = (float) ((arg1)->val_f);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStoragePair_val_p_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiStoragePair *arg1 = (ImGuiStoragePair *) 0 ; void *arg2 = (void *) 0 ;
    SWIG_check_num_args("ImGuiStoragePair::val_p",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStoragePair::val_p",1,"ImGuiStoragePair *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiStoragePair::val_p",2,"void *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStoragePair,0))){
      SWIG_fail_ptr("ImGuiStoragePair_val_p_set",1,SWIGTYPE_p_ImGuiStoragePair); } 
    arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImGuiStoragePair_val_p_set"); if (arg1) (arg1)->val_p = arg2; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStoragePair_val_p_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiStoragePair *arg1 = (ImGuiStoragePair *) 0 ; void *result = 0 ; SWIG_check_num_args("ImGuiStoragePair::val_p",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStoragePair::val_p",1,"ImGuiStoragePair *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStoragePair,0))){
      SWIG_fail_ptr("ImGuiStoragePair_val_p_get",1,SWIGTYPE_p_ImGuiStoragePair); }  result = (void *) ((arg1)->val_p);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_ImGuiStoragePair__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ImGuiID arg1 ; int arg2 ;
    ImGuiStoragePair *result = 0 ; SWIG_check_num_args("ImGuiStoragePair::ImGuiStoragePair",2,2)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGuiStoragePair::ImGuiStoragePair",1,"ImGuiID");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStoragePair::ImGuiStoragePair",2,"int");
    SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative"); arg1 = (ImGuiID)lua_tonumber(L, 1);
    arg2 = (int)lua_tonumber(L, 2); result = (ImGuiStoragePair *)new ImGuiStoragePair(arg1,arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiStoragePair,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_new_ImGuiStoragePair__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ImGuiID arg1 ; void *arg2 = (void *) 0 ;
    ImGuiStoragePair *result = 0 ; SWIG_check_num_args("ImGuiStoragePair::ImGuiStoragePair",2,2)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGuiStoragePair::ImGuiStoragePair",1,"ImGuiID");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiStoragePair::ImGuiStoragePair",2,"void *");
    SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative"); arg1 = (ImGuiID)lua_tonumber(L, 1);
    arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"new_ImGuiStoragePair");
    result = (ImGuiStoragePair *)new ImGuiStoragePair(arg1,arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiStoragePair,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_new_ImGuiStoragePair(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) {
    int _v = 0; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) { _v = 0; }  else { _v = 1; }  } 
      if (_v) { return _wrap_new_ImGuiStoragePair__SWIG_1(L);}  }  }  if (argc == 2) { int _v = 0; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_new_ImGuiStoragePair__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ImGuiStoragePair'\n"
  "  Possible C/C++ prototypes are:\n" "    ImGuiStoragePair::ImGuiStoragePair(ImGuiID,int)\n"
  "    ImGuiStoragePair::ImGuiStoragePair(ImGuiID,void *)\n"); lua_error(L);return 0; }
static void swig_delete_ImGuiStoragePair(void *obj) {
ImGuiStoragePair *arg1 = (ImGuiStoragePair *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiStoragePair(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiStoragePair);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiStoragePair_attributes[] = {
    { "key", _wrap_ImGuiStoragePair_key_get, _wrap_ImGuiStoragePair_key_set },
    { "val_i", _wrap_ImGuiStoragePair_val_i_get, _wrap_ImGuiStoragePair_val_i_set },
    { "val_f", _wrap_ImGuiStoragePair_val_f_get, _wrap_ImGuiStoragePair_val_f_set },
    { "val_p", _wrap_ImGuiStoragePair_val_p_get, _wrap_ImGuiStoragePair_val_p_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiStoragePair_methods[]= {
    {0,0}
};
static swig_lua_method swig_ImGuiStoragePair_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiStoragePair_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiStoragePair_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiStoragePair_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiStoragePair_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiStoragePair_Sf_SwigStatic = {
    "ImGuiStoragePair",
    swig_ImGuiStoragePair_Sf_SwigStatic_methods,
    swig_ImGuiStoragePair_Sf_SwigStatic_attributes,
    swig_ImGuiStoragePair_Sf_SwigStatic_constants,
    swig_ImGuiStoragePair_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiStoragePair_bases[] = {0};
static const char *swig_ImGuiStoragePair_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiStoragePair = { "ImGuiStoragePair", "ImGuiStoragePair", &SWIGTYPE_p_ImGuiStoragePair,_proxy__wrap_new_ImGuiStoragePair, swig_delete_ImGuiStoragePair, swig_ImGuiStoragePair_methods, swig_ImGuiStoragePair_attributes, &swig_ImGuiStoragePair_Sf_SwigStatic, swig_ImGuiStoragePair_meta, swig_ImGuiStoragePair_bases, swig_ImGuiStoragePair_base_names };

static int _wrap_ImGuiStorage_Data_set(lua_State* L) { { int SWIG_arg = 0; ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
    ImVector< ImGuiStoragePair > *arg2 = (ImVector< ImGuiStoragePair > *) 0 ; SWIG_check_num_args("ImGuiStorage::Data",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStorage::Data",1,"ImGuiStorage *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiStorage::Data",2,"ImVector< ImGuiStoragePair > *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStorage,0))){
      SWIG_fail_ptr("ImGuiStorage_Data_set",1,SWIGTYPE_p_ImGuiStorage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImGuiStoragePair_t,0))){
      SWIG_fail_ptr("ImGuiStorage_Data_set",2,SWIGTYPE_p_ImVectorT_ImGuiStoragePair_t); }  if (arg1) (arg1)->Data = *arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStorage_Data_get(lua_State* L) { { int SWIG_arg = 0; ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
    ImVector< ImGuiStoragePair > *result = 0 ; SWIG_check_num_args("ImGuiStorage::Data",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStorage::Data",1,"ImGuiStorage *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStorage,0))){
      SWIG_fail_ptr("ImGuiStorage_Data_get",1,SWIGTYPE_p_ImGuiStorage); } 
    result = (ImVector< ImGuiStoragePair > *)& ((arg1)->Data);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImGuiStoragePair_t,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiStorage_Clear(lua_State* L) { { int SWIG_arg = 0; ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
    SWIG_check_num_args("ImGuiStorage::Clear",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStorage::Clear",1,"ImGuiStorage *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStorage,0))){
      SWIG_fail_ptr("ImGuiStorage_Clear",1,SWIGTYPE_p_ImGuiStorage); }  (arg1)->Clear(); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiStorage_GetInt(lua_State* L) { { int SWIG_arg = 0; ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
    ImGuiID arg2 ; int arg3 = (int) 0 ; int result; SWIG_check_num_args("ImGuiStorage::GetInt",2,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStorage::GetInt",1,"ImGuiStorage const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStorage::GetInt",2,"ImGuiID");
    if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("ImGuiStorage::GetInt",3,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStorage,0))){
      SWIG_fail_ptr("ImGuiStorage_GetInt",1,SWIGTYPE_p_ImGuiStorage); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (ImGuiID)lua_tonumber(L, 2);
    if(lua_gettop(L)>=3){ arg3 = (int)lua_tonumber(L, 3);}  result = (int)((ImGuiStorage const *)arg1)->GetInt(arg2,arg3);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStorage_SetInt(lua_State* L) { { int SWIG_arg = 0; ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
    ImGuiID arg2 ; int arg3 ; SWIG_check_num_args("ImGuiStorage::SetInt",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStorage::SetInt",1,"ImGuiStorage *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStorage::SetInt",2,"ImGuiID");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGuiStorage::SetInt",3,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStorage,0))){
      SWIG_fail_ptr("ImGuiStorage_SetInt",1,SWIGTYPE_p_ImGuiStorage); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (ImGuiID)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3); (arg1)->SetInt(arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStorage_GetBool(lua_State* L) { { int SWIG_arg = 0; ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
    ImGuiID arg2 ; bool arg3 = (bool) false ; bool result; SWIG_check_num_args("ImGuiStorage::GetBool",2,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStorage::GetBool",1,"ImGuiStorage const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStorage::GetBool",2,"ImGuiID");
    if(lua_gettop(L)>=3 && !lua_isboolean(L,3)) SWIG_fail_arg("ImGuiStorage::GetBool",3,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStorage,0))){
      SWIG_fail_ptr("ImGuiStorage_GetBool",1,SWIGTYPE_p_ImGuiStorage); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (ImGuiID)lua_tonumber(L, 2);
    if(lua_gettop(L)>=3){ arg3 = (lua_toboolean(L, 3)!=0);}  result = (bool)((ImGuiStorage const *)arg1)->GetBool(arg2,arg3);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStorage_SetBool(lua_State* L) { { int SWIG_arg = 0; ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
    ImGuiID arg2 ; bool arg3 ; SWIG_check_num_args("ImGuiStorage::SetBool",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStorage::SetBool",1,"ImGuiStorage *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStorage::SetBool",2,"ImGuiID");
    if(!lua_isboolean(L,3)) SWIG_fail_arg("ImGuiStorage::SetBool",3,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStorage,0))){
      SWIG_fail_ptr("ImGuiStorage_SetBool",1,SWIGTYPE_p_ImGuiStorage); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (ImGuiID)lua_tonumber(L, 2);
    arg3 = (lua_toboolean(L, 3)!=0); (arg1)->SetBool(arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStorage_GetFloat(lua_State* L) { { int SWIG_arg = 0; ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
    ImGuiID arg2 ; float arg3 = (float) 0.0 ; float result; SWIG_check_num_args("ImGuiStorage::GetFloat",2,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStorage::GetFloat",1,"ImGuiStorage const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStorage::GetFloat",2,"ImGuiID");
    if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("ImGuiStorage::GetFloat",3,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStorage,0))){
      SWIG_fail_ptr("ImGuiStorage_GetFloat",1,SWIGTYPE_p_ImGuiStorage); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (ImGuiID)lua_tonumber(L, 2);
    if(lua_gettop(L)>=3){ arg3 = (float)lua_tonumber(L, 3);}  result = (float)((ImGuiStorage const *)arg1)->GetFloat(arg2,arg3);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStorage_SetFloat(lua_State* L) { { int SWIG_arg = 0; ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
    ImGuiID arg2 ; float arg3 ; SWIG_check_num_args("ImGuiStorage::SetFloat",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStorage::SetFloat",1,"ImGuiStorage *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStorage::SetFloat",2,"ImGuiID");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGuiStorage::SetFloat",3,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStorage,0))){
      SWIG_fail_ptr("ImGuiStorage_SetFloat",1,SWIGTYPE_p_ImGuiStorage); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (ImGuiID)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3); (arg1)->SetFloat(arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiStorage_GetVoidPtr(lua_State* L) { { int SWIG_arg = 0; ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
    ImGuiID arg2 ; void *result = 0 ; SWIG_check_num_args("ImGuiStorage::GetVoidPtr",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStorage::GetVoidPtr",1,"ImGuiStorage const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStorage::GetVoidPtr",2,"ImGuiID");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStorage,0))){
      SWIG_fail_ptr("ImGuiStorage_GetVoidPtr",1,SWIGTYPE_p_ImGuiStorage); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (ImGuiID)lua_tonumber(L, 2);
    result = (void *)((ImGuiStorage const *)arg1)->GetVoidPtr(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStorage_SetVoidPtr(lua_State* L) { { int SWIG_arg = 0; ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
    ImGuiID arg2 ; void *arg3 = (void *) 0 ; SWIG_check_num_args("ImGuiStorage::SetVoidPtr",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStorage::SetVoidPtr",1,"ImGuiStorage *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStorage::SetVoidPtr",2,"ImGuiID");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGuiStorage::SetVoidPtr",3,"void *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStorage,0))){
      SWIG_fail_ptr("ImGuiStorage_SetVoidPtr",1,SWIGTYPE_p_ImGuiStorage); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (ImGuiID)lua_tonumber(L, 2);
    arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"ImGuiStorage_SetVoidPtr"); (arg1)->SetVoidPtr(arg2,arg3); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStorage_GetIntRef(lua_State* L) { { int SWIG_arg = 0; ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
    ImGuiID arg2 ; int arg3 = (int) 0 ; int *result = 0 ; SWIG_check_num_args("ImGuiStorage::GetIntRef",2,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStorage::GetIntRef",1,"ImGuiStorage *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStorage::GetIntRef",2,"ImGuiID");
    if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("ImGuiStorage::GetIntRef",3,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStorage,0))){
      SWIG_fail_ptr("ImGuiStorage_GetIntRef",1,SWIGTYPE_p_ImGuiStorage); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (ImGuiID)lua_tonumber(L, 2);
    if(lua_gettop(L)>=3){ arg3 = (int)lua_tonumber(L, 3);}  result = (int *)(arg1)->GetIntRef(arg2,arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStorage_GetBoolRef(lua_State* L) { { int SWIG_arg = 0; ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
    ImGuiID arg2 ; bool arg3 = (bool) false ; bool *result = 0 ; SWIG_check_num_args("ImGuiStorage::GetBoolRef",2,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStorage::GetBoolRef",1,"ImGuiStorage *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStorage::GetBoolRef",2,"ImGuiID");
    if(lua_gettop(L)>=3 && !lua_isboolean(L,3)) SWIG_fail_arg("ImGuiStorage::GetBoolRef",3,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStorage,0))){
      SWIG_fail_ptr("ImGuiStorage_GetBoolRef",1,SWIGTYPE_p_ImGuiStorage); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (ImGuiID)lua_tonumber(L, 2);
    if(lua_gettop(L)>=3){ arg3 = (lua_toboolean(L, 3)!=0);}  result = (bool *)(arg1)->GetBoolRef(arg2,arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_bool,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStorage_GetFloatRef(lua_State* L) { { int SWIG_arg = 0; ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
    ImGuiID arg2 ; float arg3 = (float) 0.0 ; float *result = 0 ; SWIG_check_num_args("ImGuiStorage::GetFloatRef",2,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStorage::GetFloatRef",1,"ImGuiStorage *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStorage::GetFloatRef",2,"ImGuiID");
    if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("ImGuiStorage::GetFloatRef",3,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStorage,0))){
      SWIG_fail_ptr("ImGuiStorage_GetFloatRef",1,SWIGTYPE_p_ImGuiStorage); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (ImGuiID)lua_tonumber(L, 2);
    if(lua_gettop(L)>=3){ arg3 = (float)lua_tonumber(L, 3);}  result = (float *)(arg1)->GetFloatRef(arg2,arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStorage_GetVoidPtrRef(lua_State* L) { { int SWIG_arg = 0; ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
    ImGuiID arg2 ; void *arg3 = (void *) NULL ; void **result = 0 ; SWIG_check_num_args("ImGuiStorage::GetVoidPtrRef",2,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStorage::GetVoidPtrRef",1,"ImGuiStorage *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStorage::GetVoidPtrRef",2,"ImGuiID");
    if(lua_gettop(L)>=3 && !SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGuiStorage::GetVoidPtrRef",3,"void *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStorage,0))){
      SWIG_fail_ptr("ImGuiStorage_GetVoidPtrRef",1,SWIGTYPE_p_ImGuiStorage); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (ImGuiID)lua_tonumber(L, 2);
    if(lua_gettop(L)>=3){ arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"ImGuiStorage_GetVoidPtrRef");} 
    result = (void **)(arg1)->GetVoidPtrRef(arg2,arg3); SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_void,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStorage_BuildSortByKey(lua_State* L) { { int SWIG_arg = 0; ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
    SWIG_check_num_args("ImGuiStorage::BuildSortByKey",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStorage::BuildSortByKey",1,"ImGuiStorage *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStorage,0))){
      SWIG_fail_ptr("ImGuiStorage_BuildSortByKey",1,SWIGTYPE_p_ImGuiStorage); }  (arg1)->BuildSortByKey(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiStorage_SetAllInt(lua_State* L) { { int SWIG_arg = 0; ImGuiStorage *arg1 = (ImGuiStorage *) 0 ; int arg2 ;
    SWIG_check_num_args("ImGuiStorage::SetAllInt",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiStorage::SetAllInt",1,"ImGuiStorage *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiStorage::SetAllInt",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiStorage,0))){
      SWIG_fail_ptr("ImGuiStorage_SetAllInt",1,SWIGTYPE_p_ImGuiStorage); }  arg2 = (int)lua_tonumber(L, 2);
    (arg1)->SetAllInt(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_ImGuiStorage(lua_State* L) { { int SWIG_arg = 0; ImGuiStorage *result = 0 ;
    SWIG_check_num_args("ImGuiStorage::ImGuiStorage",0,0) result = (ImGuiStorage *)new ImGuiStorage();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiStorage,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static void swig_delete_ImGuiStorage(void *obj) {
ImGuiStorage *arg1 = (ImGuiStorage *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiStorage(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiStorage);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiStorage_attributes[] = {
    { "Data", _wrap_ImGuiStorage_Data_get, _wrap_ImGuiStorage_Data_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiStorage_methods[]= {
    { "Clear", _wrap_ImGuiStorage_Clear},
    { "GetInt", _wrap_ImGuiStorage_GetInt},
    { "SetInt", _wrap_ImGuiStorage_SetInt},
    { "GetBool", _wrap_ImGuiStorage_GetBool},
    { "SetBool", _wrap_ImGuiStorage_SetBool},
    { "GetFloat", _wrap_ImGuiStorage_GetFloat},
    { "SetFloat", _wrap_ImGuiStorage_SetFloat},
    { "GetVoidPtr", _wrap_ImGuiStorage_GetVoidPtr},
    { "SetVoidPtr", _wrap_ImGuiStorage_SetVoidPtr},
    { "GetIntRef", _wrap_ImGuiStorage_GetIntRef},
    { "GetBoolRef", _wrap_ImGuiStorage_GetBoolRef},
    { "GetFloatRef", _wrap_ImGuiStorage_GetFloatRef},
    { "GetVoidPtrRef", _wrap_ImGuiStorage_GetVoidPtrRef},
    { "BuildSortByKey", _wrap_ImGuiStorage_BuildSortByKey},
    { "SetAllInt", _wrap_ImGuiStorage_SetAllInt},
    {0,0}
};
static swig_lua_method swig_ImGuiStorage_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiStorage_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiStorage_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiStorage_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiStorage_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiStorage_Sf_SwigStatic = {
    "ImGuiStorage",
    swig_ImGuiStorage_Sf_SwigStatic_methods,
    swig_ImGuiStorage_Sf_SwigStatic_attributes,
    swig_ImGuiStorage_Sf_SwigStatic_constants,
    swig_ImGuiStorage_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiStorage_bases[] = {0};
static const char *swig_ImGuiStorage_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiStorage = { "ImGuiStorage", "ImGuiStorage", &SWIGTYPE_p_ImGuiStorage,_proxy__wrap_new_ImGuiStorage, swig_delete_ImGuiStorage, swig_ImGuiStorage_methods, swig_ImGuiStorage_attributes, &swig_ImGuiStorage_Sf_SwigStatic, swig_ImGuiStorage_meta, swig_ImGuiStorage_bases, swig_ImGuiStorage_base_names };

static int _wrap_ImGuiListClipper_Ctx_set(lua_State* L) { { int SWIG_arg = 0; ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
    ImGuiContext *arg2 = (ImGuiContext *) 0 ; SWIG_check_num_args("ImGuiListClipper::Ctx",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiListClipper::Ctx",1,"ImGuiListClipper *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiListClipper::Ctx",2,"ImGuiContext *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiListClipper,0))){
      SWIG_fail_ptr("ImGuiListClipper_Ctx_set",1,SWIGTYPE_p_ImGuiListClipper); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiContext,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("ImGuiListClipper_Ctx_set",2,SWIGTYPE_p_ImGuiContext); }  if (arg1) (arg1)->Ctx = arg2; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiListClipper_Ctx_get(lua_State* L) { { int SWIG_arg = 0; ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
    ImGuiContext *result = 0 ; SWIG_check_num_args("ImGuiListClipper::Ctx",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiListClipper::Ctx",1,"ImGuiListClipper *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiListClipper,0))){
      SWIG_fail_ptr("ImGuiListClipper_Ctx_get",1,SWIGTYPE_p_ImGuiListClipper); }  result = (ImGuiContext *) ((arg1)->Ctx);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiContext,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiListClipper_DisplayStart_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ; int arg2 ; SWIG_check_num_args("ImGuiListClipper::DisplayStart",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiListClipper::DisplayStart",1,"ImGuiListClipper *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiListClipper::DisplayStart",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiListClipper,0))){
      SWIG_fail_ptr("ImGuiListClipper_DisplayStart_set",1,SWIGTYPE_p_ImGuiListClipper); }  arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->DisplayStart = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiListClipper_DisplayStart_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ; int result; SWIG_check_num_args("ImGuiListClipper::DisplayStart",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiListClipper::DisplayStart",1,"ImGuiListClipper *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiListClipper,0))){
      SWIG_fail_ptr("ImGuiListClipper_DisplayStart_get",1,SWIGTYPE_p_ImGuiListClipper); } 
    result = (int) ((arg1)->DisplayStart); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiListClipper_DisplayEnd_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ; int arg2 ; SWIG_check_num_args("ImGuiListClipper::DisplayEnd",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiListClipper::DisplayEnd",1,"ImGuiListClipper *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiListClipper::DisplayEnd",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiListClipper,0))){
      SWIG_fail_ptr("ImGuiListClipper_DisplayEnd_set",1,SWIGTYPE_p_ImGuiListClipper); }  arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->DisplayEnd = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiListClipper_DisplayEnd_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ; int result; SWIG_check_num_args("ImGuiListClipper::DisplayEnd",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiListClipper::DisplayEnd",1,"ImGuiListClipper *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiListClipper,0))){
      SWIG_fail_ptr("ImGuiListClipper_DisplayEnd_get",1,SWIGTYPE_p_ImGuiListClipper); }  result = (int) ((arg1)->DisplayEnd);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiListClipper_ItemsCount_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ; int arg2 ; SWIG_check_num_args("ImGuiListClipper::ItemsCount",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiListClipper::ItemsCount",1,"ImGuiListClipper *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiListClipper::ItemsCount",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiListClipper,0))){
      SWIG_fail_ptr("ImGuiListClipper_ItemsCount_set",1,SWIGTYPE_p_ImGuiListClipper); }  arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->ItemsCount = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiListClipper_ItemsCount_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ; int result; SWIG_check_num_args("ImGuiListClipper::ItemsCount",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiListClipper::ItemsCount",1,"ImGuiListClipper *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiListClipper,0))){
      SWIG_fail_ptr("ImGuiListClipper_ItemsCount_get",1,SWIGTYPE_p_ImGuiListClipper); }  result = (int) ((arg1)->ItemsCount);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiListClipper_ItemsHeight_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ; float arg2 ; SWIG_check_num_args("ImGuiListClipper::ItemsHeight",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiListClipper::ItemsHeight",1,"ImGuiListClipper *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiListClipper::ItemsHeight",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiListClipper,0))){
      SWIG_fail_ptr("ImGuiListClipper_ItemsHeight_set",1,SWIGTYPE_p_ImGuiListClipper); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->ItemsHeight = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiListClipper_ItemsHeight_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ; float result; SWIG_check_num_args("ImGuiListClipper::ItemsHeight",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiListClipper::ItemsHeight",1,"ImGuiListClipper *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiListClipper,0))){
      SWIG_fail_ptr("ImGuiListClipper_ItemsHeight_get",1,SWIGTYPE_p_ImGuiListClipper); } 
    result = (float) ((arg1)->ItemsHeight); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiListClipper_StartPosY_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ; float arg2 ; SWIG_check_num_args("ImGuiListClipper::StartPosY",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiListClipper::StartPosY",1,"ImGuiListClipper *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiListClipper::StartPosY",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiListClipper,0))){
      SWIG_fail_ptr("ImGuiListClipper_StartPosY_set",1,SWIGTYPE_p_ImGuiListClipper); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->StartPosY = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiListClipper_StartPosY_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ; float result; SWIG_check_num_args("ImGuiListClipper::StartPosY",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiListClipper::StartPosY",1,"ImGuiListClipper *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiListClipper,0))){
      SWIG_fail_ptr("ImGuiListClipper_StartPosY_get",1,SWIGTYPE_p_ImGuiListClipper); }  result = (float) ((arg1)->StartPosY);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiListClipper_StartSeekOffsetY_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ; double arg2 ;
    SWIG_check_num_args("ImGuiListClipper::StartSeekOffsetY",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiListClipper::StartSeekOffsetY",1,"ImGuiListClipper *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiListClipper::StartSeekOffsetY",2,"double");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiListClipper,0))){
      SWIG_fail_ptr("ImGuiListClipper_StartSeekOffsetY_set",1,SWIGTYPE_p_ImGuiListClipper); } 
    arg2 = (double)lua_tonumber(L, 2); if (arg1) (arg1)->StartSeekOffsetY = arg2; return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiListClipper_StartSeekOffsetY_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ; double result;
    SWIG_check_num_args("ImGuiListClipper::StartSeekOffsetY",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiListClipper::StartSeekOffsetY",1,"ImGuiListClipper *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiListClipper,0))){
      SWIG_fail_ptr("ImGuiListClipper_StartSeekOffsetY_get",1,SWIGTYPE_p_ImGuiListClipper); } 
    result = (double) ((arg1)->StartSeekOffsetY); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiListClipper_TempData_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ; void *arg2 = (void *) 0 ;
    SWIG_check_num_args("ImGuiListClipper::TempData",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiListClipper::TempData",1,"ImGuiListClipper *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiListClipper::TempData",2,"void *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiListClipper,0))){
      SWIG_fail_ptr("ImGuiListClipper_TempData_set",1,SWIGTYPE_p_ImGuiListClipper); } 
    arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImGuiListClipper_TempData_set"); if (arg1) (arg1)->TempData = arg2; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiListClipper_TempData_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ; void *result = 0 ; SWIG_check_num_args("ImGuiListClipper::TempData",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiListClipper::TempData",1,"ImGuiListClipper *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiListClipper,0))){
      SWIG_fail_ptr("ImGuiListClipper_TempData_get",1,SWIGTYPE_p_ImGuiListClipper); }  result = (void *) ((arg1)->TempData);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_ImGuiListClipper(lua_State* L) { { int SWIG_arg = 0; ImGuiListClipper *result = 0 ;
    SWIG_check_num_args("ImGuiListClipper::ImGuiListClipper",0,0) result = (ImGuiListClipper *)new ImGuiListClipper();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiListClipper,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiListClipper_Begin__SWIG_0(lua_State* L) { { int SWIG_arg = 0;
    ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ; int arg2 ; float arg3 ; SWIG_check_num_args("ImGuiListClipper::Begin",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiListClipper::Begin",1,"ImGuiListClipper *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiListClipper::Begin",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGuiListClipper::Begin",3,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiListClipper,0))){
      SWIG_fail_ptr("ImGuiListClipper_Begin",1,SWIGTYPE_p_ImGuiListClipper); }  arg2 = (int)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3); (arg1)->Begin(arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiListClipper_Begin__SWIG_1(lua_State* L) { { int SWIG_arg = 0;
    ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ; int arg2 ; SWIG_check_num_args("ImGuiListClipper::Begin",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiListClipper::Begin",1,"ImGuiListClipper *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiListClipper::Begin",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiListClipper,0))){
      SWIG_fail_ptr("ImGuiListClipper_Begin",1,SWIGTYPE_p_ImGuiListClipper); }  arg2 = (int)lua_tonumber(L, 2);
    (arg1)->Begin(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiListClipper_Begin(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiListClipper, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ImGuiListClipper_Begin__SWIG_1(L);}  }  }  if (argc == 3) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImGuiListClipper, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ImGuiListClipper_Begin__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImGuiListClipper_Begin'\n"
  "  Possible C/C++ prototypes are:\n" "    ImGuiListClipper::Begin(int,float)\n" "    ImGuiListClipper::Begin(int)\n");
  lua_error(L);return 0; }
static int _wrap_ImGuiListClipper_End(lua_State* L) { { int SWIG_arg = 0; ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
    SWIG_check_num_args("ImGuiListClipper::End",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiListClipper::End",1,"ImGuiListClipper *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiListClipper,0))){
      SWIG_fail_ptr("ImGuiListClipper_End",1,SWIGTYPE_p_ImGuiListClipper); }  (arg1)->End(); return SWIG_arg; fail: SWIGUNUSED; }
   lua_error(L); return 0; }
static int _wrap_ImGuiListClipper_Step(lua_State* L) { { int SWIG_arg = 0; ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
    bool result; SWIG_check_num_args("ImGuiListClipper::Step",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiListClipper::Step",1,"ImGuiListClipper *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiListClipper,0))){
      SWIG_fail_ptr("ImGuiListClipper_Step",1,SWIGTYPE_p_ImGuiListClipper); }  result = (bool)(arg1)->Step();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiListClipper_IncludeItemByIndex(lua_State* L) { { int SWIG_arg = 0;
    ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ; int arg2 ; SWIG_check_num_args("ImGuiListClipper::IncludeItemByIndex",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiListClipper::IncludeItemByIndex",1,"ImGuiListClipper *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiListClipper::IncludeItemByIndex",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiListClipper,0))){
      SWIG_fail_ptr("ImGuiListClipper_IncludeItemByIndex",1,SWIGTYPE_p_ImGuiListClipper); }  arg2 = (int)lua_tonumber(L, 2);
    (arg1)->IncludeItemByIndex(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiListClipper_IncludeItemsByIndex(lua_State* L) { { int SWIG_arg = 0;
    ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ; int arg2 ; int arg3 ;
    SWIG_check_num_args("ImGuiListClipper::IncludeItemsByIndex",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiListClipper::IncludeItemsByIndex",1,"ImGuiListClipper *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiListClipper::IncludeItemsByIndex",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGuiListClipper::IncludeItemsByIndex",3,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiListClipper,0))){
      SWIG_fail_ptr("ImGuiListClipper_IncludeItemsByIndex",1,SWIGTYPE_p_ImGuiListClipper); }  arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3); (arg1)->IncludeItemsByIndex(arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiListClipper_SeekCursorForItem(lua_State* L) { { int SWIG_arg = 0;
    ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ; int arg2 ; SWIG_check_num_args("ImGuiListClipper::SeekCursorForItem",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiListClipper::SeekCursorForItem",1,"ImGuiListClipper *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiListClipper::SeekCursorForItem",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiListClipper,0))){
      SWIG_fail_ptr("ImGuiListClipper_SeekCursorForItem",1,SWIGTYPE_p_ImGuiListClipper); }  arg2 = (int)lua_tonumber(L, 2);
    (arg1)->SeekCursorForItem(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiListClipper_IncludeRangeByIndices(lua_State* L) { { int SWIG_arg = 0;
    ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ; int arg2 ; int arg3 ;
    SWIG_check_num_args("ImGuiListClipper::IncludeRangeByIndices",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiListClipper::IncludeRangeByIndices",1,"ImGuiListClipper *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiListClipper::IncludeRangeByIndices",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGuiListClipper::IncludeRangeByIndices",3,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiListClipper,0))){
      SWIG_fail_ptr("ImGuiListClipper_IncludeRangeByIndices",1,SWIGTYPE_p_ImGuiListClipper); }  arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3); (arg1)->IncludeRangeByIndices(arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiListClipper_ForceDisplayRangeByIndices(lua_State* L) { { int SWIG_arg = 0;
    ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ; int arg2 ; int arg3 ;
    SWIG_check_num_args("ImGuiListClipper::ForceDisplayRangeByIndices",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiListClipper::ForceDisplayRangeByIndices",1,"ImGuiListClipper *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiListClipper::ForceDisplayRangeByIndices",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImGuiListClipper::ForceDisplayRangeByIndices",3,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiListClipper,0))){
      SWIG_fail_ptr("ImGuiListClipper_ForceDisplayRangeByIndices",1,SWIGTYPE_p_ImGuiListClipper); } 
    arg2 = (int)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); (arg1)->ForceDisplayRangeByIndices(arg2,arg3);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static void swig_delete_ImGuiListClipper(void *obj) {
ImGuiListClipper *arg1 = (ImGuiListClipper *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiListClipper(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiListClipper);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiListClipper_attributes[] = {
    { "Ctx", _wrap_ImGuiListClipper_Ctx_get, _wrap_ImGuiListClipper_Ctx_set },
    { "DisplayStart", _wrap_ImGuiListClipper_DisplayStart_get, _wrap_ImGuiListClipper_DisplayStart_set },
    { "DisplayEnd", _wrap_ImGuiListClipper_DisplayEnd_get, _wrap_ImGuiListClipper_DisplayEnd_set },
    { "ItemsCount", _wrap_ImGuiListClipper_ItemsCount_get, _wrap_ImGuiListClipper_ItemsCount_set },
    { "ItemsHeight", _wrap_ImGuiListClipper_ItemsHeight_get, _wrap_ImGuiListClipper_ItemsHeight_set },
    { "StartPosY", _wrap_ImGuiListClipper_StartPosY_get, _wrap_ImGuiListClipper_StartPosY_set },
    { "StartSeekOffsetY", _wrap_ImGuiListClipper_StartSeekOffsetY_get, _wrap_ImGuiListClipper_StartSeekOffsetY_set },
    { "TempData", _wrap_ImGuiListClipper_TempData_get, _wrap_ImGuiListClipper_TempData_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiListClipper_methods[]= {
    { "Begin", _wrap_ImGuiListClipper_Begin},
    { "End", _wrap_ImGuiListClipper_End},
    { "Step", _wrap_ImGuiListClipper_Step},
    { "IncludeItemByIndex", _wrap_ImGuiListClipper_IncludeItemByIndex},
    { "IncludeItemsByIndex", _wrap_ImGuiListClipper_IncludeItemsByIndex},
    { "SeekCursorForItem", _wrap_ImGuiListClipper_SeekCursorForItem},
    { "IncludeRangeByIndices", _wrap_ImGuiListClipper_IncludeRangeByIndices},
    { "ForceDisplayRangeByIndices", _wrap_ImGuiListClipper_ForceDisplayRangeByIndices},
    {0,0}
};
static swig_lua_method swig_ImGuiListClipper_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiListClipper_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiListClipper_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiListClipper_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiListClipper_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiListClipper_Sf_SwigStatic = {
    "ImGuiListClipper",
    swig_ImGuiListClipper_Sf_SwigStatic_methods,
    swig_ImGuiListClipper_Sf_SwigStatic_attributes,
    swig_ImGuiListClipper_Sf_SwigStatic_constants,
    swig_ImGuiListClipper_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiListClipper_bases[] = {0};
static const char *swig_ImGuiListClipper_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiListClipper = { "ImGuiListClipper", "ImGuiListClipper", &SWIGTYPE_p_ImGuiListClipper,_proxy__wrap_new_ImGuiListClipper, swig_delete_ImGuiListClipper, swig_ImGuiListClipper_methods, swig_ImGuiListClipper_attributes, &swig_ImGuiListClipper_Sf_SwigStatic, swig_ImGuiListClipper_meta, swig_ImGuiListClipper_bases, swig_ImGuiListClipper_base_names };

static int _wrap_ImColor_Value_set(lua_State* L) { { int SWIG_arg = 0; ImColor *arg1 = (ImColor *) 0 ;
    ImVec4 *arg2 = (ImVec4 *) 0 ; SWIG_check_num_args("ImColor::Value",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImColor::Value",1,"ImColor *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImColor::Value",2,"ImVec4 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImColor,0))){
      SWIG_fail_ptr("ImColor_Value_set",1,SWIGTYPE_p_ImColor); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec4,0))){
      SWIG_fail_ptr("ImColor_Value_set",2,SWIGTYPE_p_ImVec4); }  if (arg1) (arg1)->Value = *arg2; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImColor_Value_get(lua_State* L) { { int SWIG_arg = 0; ImColor *arg1 = (ImColor *) 0 ; ImVec4 *result = 0 ;
    SWIG_check_num_args("ImColor::Value",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImColor::Value",1,"ImColor *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImColor,0))){
      SWIG_fail_ptr("ImColor_Value_get",1,SWIGTYPE_p_ImColor); }  result = (ImVec4 *)& ((arg1)->Value);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec4,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_new_ImColor__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ImColor *result = 0 ;
    SWIG_check_num_args("ImColor::ImColor",0,0) result = (ImColor *)new ImColor();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImColor,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_new_ImColor__SWIG_1(lua_State* L) { { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
    float arg4 = (float) 1.0 ; ImColor *result = 0 ; SWIG_check_num_args("ImColor::ImColor",3,4)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImColor::ImColor",1,"float");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImColor::ImColor",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImColor::ImColor",3,"float");
    if(lua_gettop(L)>=4 && !lua_isnumber(L,4)) SWIG_fail_arg("ImColor::ImColor",4,"float"); arg1 = (float)lua_tonumber(L, 1);
    arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); if(lua_gettop(L)>=4){ arg4 = (float)lua_tonumber(L, 4);}
     result = (ImColor *)new ImColor(arg1,arg2,arg3,arg4); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImColor,1); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_ImColor__SWIG_2(lua_State* L) { { int SWIG_arg = 0; ImVec4 *arg1 = 0 ; ImColor *result = 0 ;
    SWIG_check_num_args("ImColor::ImColor",1,1) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ImColor::ImColor",1,"ImVec4 const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImVec4,0))){ SWIG_fail_ptr("new_ImColor",1,SWIGTYPE_p_ImVec4); }
     result = (ImColor *)new ImColor((ImVec4 const &)*arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImColor,1); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_ImColor__SWIG_3(lua_State* L) { { int SWIG_arg = 0; ImU32 arg1 ; ImColor *result = 0 ;
    SWIG_check_num_args("ImColor::ImColor",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ImColor::ImColor",1,"ImU32");
    SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative"); arg1 = (ImU32)lua_tonumber(L, 1);
    result = (ImColor *)new ImColor(arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImColor,1); SWIG_arg++;  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_ImColor(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_ImColor__SWIG_0(L);}  if (argc == 1) { int _v = 0; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImVec4, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_ImColor__SWIG_2(L);}  }  if (argc == 1) { int _v = 0; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_new_ImColor__SWIG_3(L);}  }  if ((argc >= 3) && (argc <= 4)) {
    int _v = 0; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { if (argc <= 3) { return _wrap_new_ImColor__SWIG_1(L);}  {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_new_ImColor__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ImColor'\n" "  Possible C/C++ prototypes are:\n"
  "    ImColor::ImColor()\n" "    ImColor::ImColor(float,float,float,float)\n" "    ImColor::ImColor(ImVec4 const &)\n"
  "    ImColor::ImColor(ImU32)\n"); lua_error(L);return 0; }
static int _wrap_ImColor_toImU32(lua_State* L) { { int SWIG_arg = 0; ImColor *arg1 = (ImColor *) 0 ; ImU32 result;
    SWIG_check_num_args("ImColor::operator ImU32",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImColor::operator ImU32",1,"ImColor const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImColor,0))){
      SWIG_fail_ptr("ImColor_toImU32",1,SWIGTYPE_p_ImColor); }  result = (ImU32)((ImColor const *)arg1)->operator ImU32();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImColor_toImVec4(lua_State* L) { { int SWIG_arg = 0; ImColor *arg1 = (ImColor *) 0 ; ImVec4 result;
    SWIG_check_num_args("ImColor::operator ImVec4",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImColor::operator ImVec4",1,"ImColor const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImColor,0))){
      SWIG_fail_ptr("ImColor_toImVec4",1,SWIGTYPE_p_ImColor); }  result = ((ImColor const *)arg1)->operator ImVec4(); {
      ImVec4 * resultptr = new ImVec4(result); SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec4,1); SWIG_arg++; } 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImColor_SetHSV(lua_State* L) { { int SWIG_arg = 0; ImColor *arg1 = (ImColor *) 0 ; float arg2 ; float arg3 ;
    float arg4 ; float arg5 = (float) 1.0 ; SWIG_check_num_args("ImColor::SetHSV",4,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImColor::SetHSV",1,"ImColor *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImColor::SetHSV",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImColor::SetHSV",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ImColor::SetHSV",4,"float");
    if(lua_gettop(L)>=5 && !lua_isnumber(L,5)) SWIG_fail_arg("ImColor::SetHSV",5,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImColor,0))){
      SWIG_fail_ptr("ImColor_SetHSV",1,SWIGTYPE_p_ImColor); }  arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); if(lua_gettop(L)>=5){ arg5 = (float)lua_tonumber(L, 5);}
     (arg1)->SetHSV(arg2,arg3,arg4,arg5); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImColor_HSV(lua_State* L) { { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
    float arg4 = (float) 1.0 ; ImColor result; SWIG_check_num_args("ImColor::HSV",3,4)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImColor::HSV",1,"float");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImColor::HSV",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImColor::HSV",3,"float");
    if(lua_gettop(L)>=4 && !lua_isnumber(L,4)) SWIG_fail_arg("ImColor::HSV",4,"float"); arg1 = (float)lua_tonumber(L, 1);
    arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); if(lua_gettop(L)>=4){ arg4 = (float)lua_tonumber(L, 4);}
     result = ImColor::HSV(arg1,arg2,arg3,arg4); { ImColor * resultptr = new ImColor(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImColor,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static void swig_delete_ImColor(void *obj) {
ImColor *arg1 = (ImColor *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImColor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImColor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImColor_attributes[] = {
    { "Value", _wrap_ImColor_Value_get, _wrap_ImColor_Value_set },
    {0,0,0}
};
static swig_lua_method swig_ImColor_methods[]= {
    { "toImU32", _wrap_ImColor_toImU32},
    { "toImVec4", _wrap_ImColor_toImVec4},
    { "SetHSV", _wrap_ImColor_SetHSV},
    {0,0}
};
static swig_lua_method swig_ImColor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImColor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImColor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImColor_Sf_SwigStatic_methods[]= {
    { "HSV", _wrap_ImColor_HSV},
    {0,0}
};
static swig_lua_class* swig_ImColor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImColor_Sf_SwigStatic = {
    "ImColor",
    swig_ImColor_Sf_SwigStatic_methods,
    swig_ImColor_Sf_SwigStatic_attributes,
    swig_ImColor_Sf_SwigStatic_constants,
    swig_ImColor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImColor_bases[] = {0};
static const char *swig_ImColor_base_names[] = {0};
static swig_lua_class _wrap_class_ImColor = { "ImColor", "ImColor", &SWIGTYPE_p_ImColor,_proxy__wrap_new_ImColor, swig_delete_ImColor, swig_ImColor_methods, swig_ImColor_attributes, &swig_ImColor_Sf_SwigStatic, swig_ImColor_meta, swig_ImColor_bases, swig_ImColor_base_names };

static int _wrap_ImGuiMultiSelectIO_Requests_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiMultiSelectIO *arg1 = (ImGuiMultiSelectIO *) 0 ;
    ImVector< ImGuiSelectionRequest > *arg2 = (ImVector< ImGuiSelectionRequest > *) 0 ;
    SWIG_check_num_args("ImGuiMultiSelectIO::Requests",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiMultiSelectIO::Requests",1,"ImGuiMultiSelectIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiMultiSelectIO::Requests",2,"ImVector< ImGuiSelectionRequest > *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiMultiSelectIO,0))){
      SWIG_fail_ptr("ImGuiMultiSelectIO_Requests_set",1,SWIGTYPE_p_ImGuiMultiSelectIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImGuiSelectionRequest_t,0))){
      SWIG_fail_ptr("ImGuiMultiSelectIO_Requests_set",2,SWIGTYPE_p_ImVectorT_ImGuiSelectionRequest_t); } 
    if (arg1) (arg1)->Requests = *arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiMultiSelectIO_Requests_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiMultiSelectIO *arg1 = (ImGuiMultiSelectIO *) 0 ; ImVector< ImGuiSelectionRequest > *result = 0 ;
    SWIG_check_num_args("ImGuiMultiSelectIO::Requests",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiMultiSelectIO::Requests",1,"ImGuiMultiSelectIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiMultiSelectIO,0))){
      SWIG_fail_ptr("ImGuiMultiSelectIO_Requests_get",1,SWIGTYPE_p_ImGuiMultiSelectIO); } 
    result = (ImVector< ImGuiSelectionRequest > *)& ((arg1)->Requests);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImGuiSelectionRequest_t,0); SWIG_arg++;  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiMultiSelectIO_RangeSrcItem_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiMultiSelectIO *arg1 = (ImGuiMultiSelectIO *) 0 ; ImGuiSelectionUserData arg2 ;
    SWIG_check_num_args("ImGuiMultiSelectIO::RangeSrcItem",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiMultiSelectIO::RangeSrcItem",1,"ImGuiMultiSelectIO *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiMultiSelectIO::RangeSrcItem",2,"ImGuiSelectionUserData");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiMultiSelectIO,0))){
      SWIG_fail_ptr("ImGuiMultiSelectIO_RangeSrcItem_set",1,SWIGTYPE_p_ImGuiMultiSelectIO); } 
    arg2 = (ImGuiSelectionUserData)lua_tonumber(L, 2); if (arg1) (arg1)->RangeSrcItem = arg2; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiMultiSelectIO_RangeSrcItem_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiMultiSelectIO *arg1 = (ImGuiMultiSelectIO *) 0 ; ImGuiSelectionUserData result;
    SWIG_check_num_args("ImGuiMultiSelectIO::RangeSrcItem",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiMultiSelectIO::RangeSrcItem",1,"ImGuiMultiSelectIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiMultiSelectIO,0))){
      SWIG_fail_ptr("ImGuiMultiSelectIO_RangeSrcItem_get",1,SWIGTYPE_p_ImGuiMultiSelectIO); } 
    result = (ImGuiSelectionUserData) ((arg1)->RangeSrcItem); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiMultiSelectIO_NavIdItem_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiMultiSelectIO *arg1 = (ImGuiMultiSelectIO *) 0 ; ImGuiSelectionUserData arg2 ;
    SWIG_check_num_args("ImGuiMultiSelectIO::NavIdItem",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiMultiSelectIO::NavIdItem",1,"ImGuiMultiSelectIO *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiMultiSelectIO::NavIdItem",2,"ImGuiSelectionUserData");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiMultiSelectIO,0))){
      SWIG_fail_ptr("ImGuiMultiSelectIO_NavIdItem_set",1,SWIGTYPE_p_ImGuiMultiSelectIO); } 
    arg2 = (ImGuiSelectionUserData)lua_tonumber(L, 2); if (arg1) (arg1)->NavIdItem = arg2; return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiMultiSelectIO_NavIdItem_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiMultiSelectIO *arg1 = (ImGuiMultiSelectIO *) 0 ; ImGuiSelectionUserData result;
    SWIG_check_num_args("ImGuiMultiSelectIO::NavIdItem",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiMultiSelectIO::NavIdItem",1,"ImGuiMultiSelectIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiMultiSelectIO,0))){
      SWIG_fail_ptr("ImGuiMultiSelectIO_NavIdItem_get",1,SWIGTYPE_p_ImGuiMultiSelectIO); } 
    result = (ImGuiSelectionUserData) ((arg1)->NavIdItem); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiMultiSelectIO_NavIdSelected_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiMultiSelectIO *arg1 = (ImGuiMultiSelectIO *) 0 ; bool arg2 ;
    SWIG_check_num_args("ImGuiMultiSelectIO::NavIdSelected",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiMultiSelectIO::NavIdSelected",1,"ImGuiMultiSelectIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiMultiSelectIO::NavIdSelected",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiMultiSelectIO,0))){
      SWIG_fail_ptr("ImGuiMultiSelectIO_NavIdSelected_set",1,SWIGTYPE_p_ImGuiMultiSelectIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->NavIdSelected = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiMultiSelectIO_NavIdSelected_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiMultiSelectIO *arg1 = (ImGuiMultiSelectIO *) 0 ; bool result;
    SWIG_check_num_args("ImGuiMultiSelectIO::NavIdSelected",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiMultiSelectIO::NavIdSelected",1,"ImGuiMultiSelectIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiMultiSelectIO,0))){
      SWIG_fail_ptr("ImGuiMultiSelectIO_NavIdSelected_get",1,SWIGTYPE_p_ImGuiMultiSelectIO); } 
    result = (bool) ((arg1)->NavIdSelected); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiMultiSelectIO_RangeSrcReset_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiMultiSelectIO *arg1 = (ImGuiMultiSelectIO *) 0 ; bool arg2 ;
    SWIG_check_num_args("ImGuiMultiSelectIO::RangeSrcReset",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiMultiSelectIO::RangeSrcReset",1,"ImGuiMultiSelectIO *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiMultiSelectIO::RangeSrcReset",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiMultiSelectIO,0))){
      SWIG_fail_ptr("ImGuiMultiSelectIO_RangeSrcReset_set",1,SWIGTYPE_p_ImGuiMultiSelectIO); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->RangeSrcReset = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiMultiSelectIO_RangeSrcReset_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiMultiSelectIO *arg1 = (ImGuiMultiSelectIO *) 0 ; bool result;
    SWIG_check_num_args("ImGuiMultiSelectIO::RangeSrcReset",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiMultiSelectIO::RangeSrcReset",1,"ImGuiMultiSelectIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiMultiSelectIO,0))){
      SWIG_fail_ptr("ImGuiMultiSelectIO_RangeSrcReset_get",1,SWIGTYPE_p_ImGuiMultiSelectIO); } 
    result = (bool) ((arg1)->RangeSrcReset); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiMultiSelectIO_ItemsCount_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiMultiSelectIO *arg1 = (ImGuiMultiSelectIO *) 0 ; int arg2 ; SWIG_check_num_args("ImGuiMultiSelectIO::ItemsCount",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiMultiSelectIO::ItemsCount",1,"ImGuiMultiSelectIO *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiMultiSelectIO::ItemsCount",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiMultiSelectIO,0))){
      SWIG_fail_ptr("ImGuiMultiSelectIO_ItemsCount_set",1,SWIGTYPE_p_ImGuiMultiSelectIO); }  arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->ItemsCount = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiMultiSelectIO_ItemsCount_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiMultiSelectIO *arg1 = (ImGuiMultiSelectIO *) 0 ; int result; SWIG_check_num_args("ImGuiMultiSelectIO::ItemsCount",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiMultiSelectIO::ItemsCount",1,"ImGuiMultiSelectIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiMultiSelectIO,0))){
      SWIG_fail_ptr("ImGuiMultiSelectIO_ItemsCount_get",1,SWIGTYPE_p_ImGuiMultiSelectIO); } 
    result = (int) ((arg1)->ItemsCount); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }
   lua_error(L); return 0; }
static int _wrap_new_ImGuiMultiSelectIO(lua_State* L) { { int SWIG_arg = 0; ImGuiMultiSelectIO *result = 0 ;
    SWIG_check_num_args("ImGuiMultiSelectIO::ImGuiMultiSelectIO",0,0) result = (ImGuiMultiSelectIO *)new ImGuiMultiSelectIO();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiMultiSelectIO,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static void swig_delete_ImGuiMultiSelectIO(void *obj) {
ImGuiMultiSelectIO *arg1 = (ImGuiMultiSelectIO *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiMultiSelectIO(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiMultiSelectIO);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiMultiSelectIO_attributes[] = {
    { "Requests", _wrap_ImGuiMultiSelectIO_Requests_get, _wrap_ImGuiMultiSelectIO_Requests_set },
    { "RangeSrcItem", _wrap_ImGuiMultiSelectIO_RangeSrcItem_get, _wrap_ImGuiMultiSelectIO_RangeSrcItem_set },
    { "NavIdItem", _wrap_ImGuiMultiSelectIO_NavIdItem_get, _wrap_ImGuiMultiSelectIO_NavIdItem_set },
    { "NavIdSelected", _wrap_ImGuiMultiSelectIO_NavIdSelected_get, _wrap_ImGuiMultiSelectIO_NavIdSelected_set },
    { "RangeSrcReset", _wrap_ImGuiMultiSelectIO_RangeSrcReset_get, _wrap_ImGuiMultiSelectIO_RangeSrcReset_set },
    { "ItemsCount", _wrap_ImGuiMultiSelectIO_ItemsCount_get, _wrap_ImGuiMultiSelectIO_ItemsCount_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiMultiSelectIO_methods[]= {
    {0,0}
};
static swig_lua_method swig_ImGuiMultiSelectIO_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiMultiSelectIO_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiMultiSelectIO_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiMultiSelectIO_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiMultiSelectIO_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiMultiSelectIO_Sf_SwigStatic = {
    "ImGuiMultiSelectIO",
    swig_ImGuiMultiSelectIO_Sf_SwigStatic_methods,
    swig_ImGuiMultiSelectIO_Sf_SwigStatic_attributes,
    swig_ImGuiMultiSelectIO_Sf_SwigStatic_constants,
    swig_ImGuiMultiSelectIO_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiMultiSelectIO_bases[] = {0};
static const char *swig_ImGuiMultiSelectIO_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiMultiSelectIO = { "ImGuiMultiSelectIO", "ImGuiMultiSelectIO", &SWIGTYPE_p_ImGuiMultiSelectIO,_proxy__wrap_new_ImGuiMultiSelectIO, swig_delete_ImGuiMultiSelectIO, swig_ImGuiMultiSelectIO_methods, swig_ImGuiMultiSelectIO_attributes, &swig_ImGuiMultiSelectIO_Sf_SwigStatic, swig_ImGuiMultiSelectIO_meta, swig_ImGuiMultiSelectIO_bases, swig_ImGuiMultiSelectIO_base_names };

static int _wrap_ImGuiSelectionRequest_Type_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiSelectionRequest *arg1 = (ImGuiSelectionRequest *) 0 ; ImGuiSelectionRequestType arg2 ;
    SWIG_check_num_args("ImGuiSelectionRequest::Type",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSelectionRequest::Type",1,"ImGuiSelectionRequest *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiSelectionRequest::Type",2,"ImGuiSelectionRequestType");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSelectionRequest,0))){
      SWIG_fail_ptr("ImGuiSelectionRequest_Type_set",1,SWIGTYPE_p_ImGuiSelectionRequest); } 
    arg2 = (ImGuiSelectionRequestType)(int)lua_tonumber(L, 2); if (arg1) (arg1)->Type = arg2; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiSelectionRequest_Type_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiSelectionRequest *arg1 = (ImGuiSelectionRequest *) 0 ; ImGuiSelectionRequestType result;
    SWIG_check_num_args("ImGuiSelectionRequest::Type",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSelectionRequest::Type",1,"ImGuiSelectionRequest *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSelectionRequest,0))){
      SWIG_fail_ptr("ImGuiSelectionRequest_Type_get",1,SWIGTYPE_p_ImGuiSelectionRequest); } 
    result = (ImGuiSelectionRequestType) ((arg1)->Type); lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiSelectionRequest_Selected_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiSelectionRequest *arg1 = (ImGuiSelectionRequest *) 0 ; bool arg2 ;
    SWIG_check_num_args("ImGuiSelectionRequest::Selected",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSelectionRequest::Selected",1,"ImGuiSelectionRequest *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiSelectionRequest::Selected",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSelectionRequest,0))){
      SWIG_fail_ptr("ImGuiSelectionRequest_Selected_set",1,SWIGTYPE_p_ImGuiSelectionRequest); } 
    arg2 = (lua_toboolean(L, 2)!=0); if (arg1) (arg1)->Selected = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiSelectionRequest_Selected_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiSelectionRequest *arg1 = (ImGuiSelectionRequest *) 0 ; bool result;
    SWIG_check_num_args("ImGuiSelectionRequest::Selected",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSelectionRequest::Selected",1,"ImGuiSelectionRequest *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSelectionRequest,0))){
      SWIG_fail_ptr("ImGuiSelectionRequest_Selected_get",1,SWIGTYPE_p_ImGuiSelectionRequest); } 
    result = (bool) ((arg1)->Selected); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiSelectionRequest_RangeDirection_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiSelectionRequest *arg1 = (ImGuiSelectionRequest *) 0 ; ImS8 arg2 ;
    SWIG_check_num_args("ImGuiSelectionRequest::RangeDirection",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSelectionRequest::RangeDirection",1,"ImGuiSelectionRequest *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiSelectionRequest::RangeDirection",2,"ImS8");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSelectionRequest,0))){
      SWIG_fail_ptr("ImGuiSelectionRequest_RangeDirection_set",1,SWIGTYPE_p_ImGuiSelectionRequest); } 
    arg2 = (ImS8)lua_tonumber(L, 2); if (arg1) (arg1)->RangeDirection = arg2; return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiSelectionRequest_RangeDirection_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiSelectionRequest *arg1 = (ImGuiSelectionRequest *) 0 ; ImS8 result;
    SWIG_check_num_args("ImGuiSelectionRequest::RangeDirection",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSelectionRequest::RangeDirection",1,"ImGuiSelectionRequest *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSelectionRequest,0))){
      SWIG_fail_ptr("ImGuiSelectionRequest_RangeDirection_get",1,SWIGTYPE_p_ImGuiSelectionRequest); } 
    result = (ImS8) ((arg1)->RangeDirection); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiSelectionRequest_RangeFirstItem_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiSelectionRequest *arg1 = (ImGuiSelectionRequest *) 0 ; ImGuiSelectionUserData arg2 ;
    SWIG_check_num_args("ImGuiSelectionRequest::RangeFirstItem",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSelectionRequest::RangeFirstItem",1,"ImGuiSelectionRequest *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiSelectionRequest::RangeFirstItem",2,"ImGuiSelectionUserData");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSelectionRequest,0))){
      SWIG_fail_ptr("ImGuiSelectionRequest_RangeFirstItem_set",1,SWIGTYPE_p_ImGuiSelectionRequest); } 
    arg2 = (ImGuiSelectionUserData)lua_tonumber(L, 2); if (arg1) (arg1)->RangeFirstItem = arg2; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiSelectionRequest_RangeFirstItem_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiSelectionRequest *arg1 = (ImGuiSelectionRequest *) 0 ; ImGuiSelectionUserData result;
    SWIG_check_num_args("ImGuiSelectionRequest::RangeFirstItem",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSelectionRequest::RangeFirstItem",1,"ImGuiSelectionRequest *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSelectionRequest,0))){
      SWIG_fail_ptr("ImGuiSelectionRequest_RangeFirstItem_get",1,SWIGTYPE_p_ImGuiSelectionRequest); } 
    result = (ImGuiSelectionUserData) ((arg1)->RangeFirstItem); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiSelectionRequest_RangeLastItem_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiSelectionRequest *arg1 = (ImGuiSelectionRequest *) 0 ; ImGuiSelectionUserData arg2 ;
    SWIG_check_num_args("ImGuiSelectionRequest::RangeLastItem",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSelectionRequest::RangeLastItem",1,"ImGuiSelectionRequest *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiSelectionRequest::RangeLastItem",2,"ImGuiSelectionUserData");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSelectionRequest,0))){
      SWIG_fail_ptr("ImGuiSelectionRequest_RangeLastItem_set",1,SWIGTYPE_p_ImGuiSelectionRequest); } 
    arg2 = (ImGuiSelectionUserData)lua_tonumber(L, 2); if (arg1) (arg1)->RangeLastItem = arg2; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiSelectionRequest_RangeLastItem_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiSelectionRequest *arg1 = (ImGuiSelectionRequest *) 0 ; ImGuiSelectionUserData result;
    SWIG_check_num_args("ImGuiSelectionRequest::RangeLastItem",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSelectionRequest::RangeLastItem",1,"ImGuiSelectionRequest *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSelectionRequest,0))){
      SWIG_fail_ptr("ImGuiSelectionRequest_RangeLastItem_get",1,SWIGTYPE_p_ImGuiSelectionRequest); } 
    result = (ImGuiSelectionUserData) ((arg1)->RangeLastItem); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_ImGuiSelectionRequest(lua_State* L) { { int SWIG_arg = 0; ImGuiSelectionRequest *result = 0 ;
    SWIG_check_num_args("ImGuiSelectionRequest::ImGuiSelectionRequest",0,0)
    result = (ImGuiSelectionRequest *)new ImGuiSelectionRequest();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiSelectionRequest,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static void swig_delete_ImGuiSelectionRequest(void *obj) {
ImGuiSelectionRequest *arg1 = (ImGuiSelectionRequest *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiSelectionRequest(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiSelectionRequest);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiSelectionRequest_attributes[] = {
    { "Type", _wrap_ImGuiSelectionRequest_Type_get, _wrap_ImGuiSelectionRequest_Type_set },
    { "Selected", _wrap_ImGuiSelectionRequest_Selected_get, _wrap_ImGuiSelectionRequest_Selected_set },
    { "RangeDirection", _wrap_ImGuiSelectionRequest_RangeDirection_get, _wrap_ImGuiSelectionRequest_RangeDirection_set },
    { "RangeFirstItem", _wrap_ImGuiSelectionRequest_RangeFirstItem_get, _wrap_ImGuiSelectionRequest_RangeFirstItem_set },
    { "RangeLastItem", _wrap_ImGuiSelectionRequest_RangeLastItem_get, _wrap_ImGuiSelectionRequest_RangeLastItem_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiSelectionRequest_methods[]= {
    {0,0}
};
static swig_lua_method swig_ImGuiSelectionRequest_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiSelectionRequest_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiSelectionRequest_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiSelectionRequest_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiSelectionRequest_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiSelectionRequest_Sf_SwigStatic = {
    "ImGuiSelectionRequest",
    swig_ImGuiSelectionRequest_Sf_SwigStatic_methods,
    swig_ImGuiSelectionRequest_Sf_SwigStatic_attributes,
    swig_ImGuiSelectionRequest_Sf_SwigStatic_constants,
    swig_ImGuiSelectionRequest_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiSelectionRequest_bases[] = {0};
static const char *swig_ImGuiSelectionRequest_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiSelectionRequest = { "ImGuiSelectionRequest", "ImGuiSelectionRequest", &SWIGTYPE_p_ImGuiSelectionRequest,_proxy__wrap_new_ImGuiSelectionRequest, swig_delete_ImGuiSelectionRequest, swig_ImGuiSelectionRequest_methods, swig_ImGuiSelectionRequest_attributes, &swig_ImGuiSelectionRequest_Sf_SwigStatic, swig_ImGuiSelectionRequest_meta, swig_ImGuiSelectionRequest_bases, swig_ImGuiSelectionRequest_base_names };

static int _wrap_ImGuiSelectionBasicStorage_Size_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiSelectionBasicStorage *arg1 = (ImGuiSelectionBasicStorage *) 0 ; int arg2 ;
    SWIG_check_num_args("ImGuiSelectionBasicStorage::Size",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSelectionBasicStorage::Size",1,"ImGuiSelectionBasicStorage *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiSelectionBasicStorage::Size",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSelectionBasicStorage,0))){
      SWIG_fail_ptr("ImGuiSelectionBasicStorage_Size_set",1,SWIGTYPE_p_ImGuiSelectionBasicStorage); } 
    arg2 = (int)lua_tonumber(L, 2); if (arg1) (arg1)->Size = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiSelectionBasicStorage_Size_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiSelectionBasicStorage *arg1 = (ImGuiSelectionBasicStorage *) 0 ; int result;
    SWIG_check_num_args("ImGuiSelectionBasicStorage::Size",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSelectionBasicStorage::Size",1,"ImGuiSelectionBasicStorage *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSelectionBasicStorage,0))){
      SWIG_fail_ptr("ImGuiSelectionBasicStorage_Size_get",1,SWIGTYPE_p_ImGuiSelectionBasicStorage); } 
    result = (int) ((arg1)->Size); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiSelectionBasicStorage_PreserveOrder_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiSelectionBasicStorage *arg1 = (ImGuiSelectionBasicStorage *) 0 ; bool arg2 ;
    SWIG_check_num_args("ImGuiSelectionBasicStorage::PreserveOrder",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSelectionBasicStorage::PreserveOrder",1,"ImGuiSelectionBasicStorage *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiSelectionBasicStorage::PreserveOrder",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSelectionBasicStorage,0))){
      SWIG_fail_ptr("ImGuiSelectionBasicStorage_PreserveOrder_set",1,SWIGTYPE_p_ImGuiSelectionBasicStorage); } 
    arg2 = (lua_toboolean(L, 2)!=0); if (arg1) (arg1)->PreserveOrder = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiSelectionBasicStorage_PreserveOrder_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiSelectionBasicStorage *arg1 = (ImGuiSelectionBasicStorage *) 0 ; bool result;
    SWIG_check_num_args("ImGuiSelectionBasicStorage::PreserveOrder",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSelectionBasicStorage::PreserveOrder",1,"ImGuiSelectionBasicStorage *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSelectionBasicStorage,0))){
      SWIG_fail_ptr("ImGuiSelectionBasicStorage_PreserveOrder_get",1,SWIGTYPE_p_ImGuiSelectionBasicStorage); } 
    result = (bool) ((arg1)->PreserveOrder); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiSelectionBasicStorage_UserData_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiSelectionBasicStorage *arg1 = (ImGuiSelectionBasicStorage *) 0 ; void *arg2 = (void *) 0 ;
    SWIG_check_num_args("ImGuiSelectionBasicStorage::UserData",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSelectionBasicStorage::UserData",1,"ImGuiSelectionBasicStorage *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiSelectionBasicStorage::UserData",2,"void *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSelectionBasicStorage,0))){
      SWIG_fail_ptr("ImGuiSelectionBasicStorage_UserData_set",1,SWIGTYPE_p_ImGuiSelectionBasicStorage); } 
    arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImGuiSelectionBasicStorage_UserData_set"); if (arg1) (arg1)->UserData = arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiSelectionBasicStorage_UserData_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiSelectionBasicStorage *arg1 = (ImGuiSelectionBasicStorage *) 0 ; void *result = 0 ;
    SWIG_check_num_args("ImGuiSelectionBasicStorage::UserData",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSelectionBasicStorage::UserData",1,"ImGuiSelectionBasicStorage *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSelectionBasicStorage,0))){
      SWIG_fail_ptr("ImGuiSelectionBasicStorage_UserData_get",1,SWIGTYPE_p_ImGuiSelectionBasicStorage); } 
    result = (void *) ((arg1)->UserData); SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++;  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiSelectionBasicStorage_AdapterIndexToStorageId_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiSelectionBasicStorage *arg1 = (ImGuiSelectionBasicStorage *) 0 ;
    ImGuiID (*arg2)(ImGuiSelectionBasicStorage *,int) = (ImGuiID (*)(ImGuiSelectionBasicStorage *,int)) 0 ;
    SWIG_check_num_args("ImGuiSelectionBasicStorage::AdapterIndexToStorageId",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSelectionBasicStorage::AdapterIndexToStorageId",1,"ImGuiSelectionBasicStorage *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiSelectionBasicStorage::AdapterIndexToStorageId",2,"ImGuiID (*)(ImGuiSelectionBasicStorage *,int)");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSelectionBasicStorage,0))){
      SWIG_fail_ptr("ImGuiSelectionBasicStorage_AdapterIndexToStorageId_set",1,SWIGTYPE_p_ImGuiSelectionBasicStorage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiSelectionBasicStorage_int__unsigned_int,0))){
      SWIG_fail_ptr("ImGuiSelectionBasicStorage_AdapterIndexToStorageId_set",2,SWIGTYPE_p_f_p_ImGuiSelectionBasicStorage_int__unsigned_int); }
     if (arg1) (arg1)->AdapterIndexToStorageId = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiSelectionBasicStorage_AdapterIndexToStorageId_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiSelectionBasicStorage *arg1 = (ImGuiSelectionBasicStorage *) 0 ;
    ImGuiID (*result)(ImGuiSelectionBasicStorage *,int) = 0 ;
    SWIG_check_num_args("ImGuiSelectionBasicStorage::AdapterIndexToStorageId",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSelectionBasicStorage::AdapterIndexToStorageId",1,"ImGuiSelectionBasicStorage *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSelectionBasicStorage,0))){
      SWIG_fail_ptr("ImGuiSelectionBasicStorage_AdapterIndexToStorageId_get",1,SWIGTYPE_p_ImGuiSelectionBasicStorage); } 
    result = (ImGuiID (*)(ImGuiSelectionBasicStorage *,int)) ((arg1)->AdapterIndexToStorageId);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiSelectionBasicStorage_int__unsigned_int,0); SWIG_arg++;  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiSelectionBasicStorage__SelectionOrder_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiSelectionBasicStorage *arg1 = (ImGuiSelectionBasicStorage *) 0 ; int arg2 ;
    SWIG_check_num_args("ImGuiSelectionBasicStorage::_SelectionOrder",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSelectionBasicStorage::_SelectionOrder",1,"ImGuiSelectionBasicStorage *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiSelectionBasicStorage::_SelectionOrder",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSelectionBasicStorage,0))){
      SWIG_fail_ptr("ImGuiSelectionBasicStorage__SelectionOrder_set",1,SWIGTYPE_p_ImGuiSelectionBasicStorage); } 
    arg2 = (int)lua_tonumber(L, 2); if (arg1) (arg1)->_SelectionOrder = arg2; return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiSelectionBasicStorage__SelectionOrder_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiSelectionBasicStorage *arg1 = (ImGuiSelectionBasicStorage *) 0 ; int result;
    SWIG_check_num_args("ImGuiSelectionBasicStorage::_SelectionOrder",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSelectionBasicStorage::_SelectionOrder",1,"ImGuiSelectionBasicStorage *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSelectionBasicStorage,0))){
      SWIG_fail_ptr("ImGuiSelectionBasicStorage__SelectionOrder_get",1,SWIGTYPE_p_ImGuiSelectionBasicStorage); } 
    result = (int) ((arg1)->_SelectionOrder); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiSelectionBasicStorage__Storage_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiSelectionBasicStorage *arg1 = (ImGuiSelectionBasicStorage *) 0 ; ImGuiStorage *arg2 = (ImGuiStorage *) 0 ;
    SWIG_check_num_args("ImGuiSelectionBasicStorage::_Storage",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSelectionBasicStorage::_Storage",1,"ImGuiSelectionBasicStorage *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiSelectionBasicStorage::_Storage",2,"ImGuiStorage *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSelectionBasicStorage,0))){
      SWIG_fail_ptr("ImGuiSelectionBasicStorage__Storage_set",1,SWIGTYPE_p_ImGuiSelectionBasicStorage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiStorage,0))){
      SWIG_fail_ptr("ImGuiSelectionBasicStorage__Storage_set",2,SWIGTYPE_p_ImGuiStorage); }  if (arg1) (arg1)->_Storage = *arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiSelectionBasicStorage__Storage_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiSelectionBasicStorage *arg1 = (ImGuiSelectionBasicStorage *) 0 ; ImGuiStorage *result = 0 ;
    SWIG_check_num_args("ImGuiSelectionBasicStorage::_Storage",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSelectionBasicStorage::_Storage",1,"ImGuiSelectionBasicStorage *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSelectionBasicStorage,0))){
      SWIG_fail_ptr("ImGuiSelectionBasicStorage__Storage_get",1,SWIGTYPE_p_ImGuiSelectionBasicStorage); } 
    result = (ImGuiStorage *)& ((arg1)->_Storage); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiStorage,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_ImGuiSelectionBasicStorage(lua_State* L) { { int SWIG_arg = 0; ImGuiSelectionBasicStorage *result = 0 ;
    SWIG_check_num_args("ImGuiSelectionBasicStorage::ImGuiSelectionBasicStorage",0,0)
    result = (ImGuiSelectionBasicStorage *)new ImGuiSelectionBasicStorage();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiSelectionBasicStorage,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiSelectionBasicStorage_ApplyRequests(lua_State* L) { { int SWIG_arg = 0;
    ImGuiSelectionBasicStorage *arg1 = (ImGuiSelectionBasicStorage *) 0 ; ImGuiMultiSelectIO *arg2 = (ImGuiMultiSelectIO *) 0 ;
    SWIG_check_num_args("ImGuiSelectionBasicStorage::ApplyRequests",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSelectionBasicStorage::ApplyRequests",1,"ImGuiSelectionBasicStorage *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiSelectionBasicStorage::ApplyRequests",2,"ImGuiMultiSelectIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSelectionBasicStorage,0))){
      SWIG_fail_ptr("ImGuiSelectionBasicStorage_ApplyRequests",1,SWIGTYPE_p_ImGuiSelectionBasicStorage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiMultiSelectIO,0))){
      SWIG_fail_ptr("ImGuiSelectionBasicStorage_ApplyRequests",2,SWIGTYPE_p_ImGuiMultiSelectIO); }  (arg1)->ApplyRequests(arg2);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiSelectionBasicStorage_Contains(lua_State* L) { { int SWIG_arg = 0;
    ImGuiSelectionBasicStorage *arg1 = (ImGuiSelectionBasicStorage *) 0 ; ImGuiID arg2 ; bool result;
    SWIG_check_num_args("ImGuiSelectionBasicStorage::Contains",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSelectionBasicStorage::Contains",1,"ImGuiSelectionBasicStorage const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiSelectionBasicStorage::Contains",2,"ImGuiID");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSelectionBasicStorage,0))){
      SWIG_fail_ptr("ImGuiSelectionBasicStorage_Contains",1,SWIGTYPE_p_ImGuiSelectionBasicStorage); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (ImGuiID)lua_tonumber(L, 2);
    result = (bool)((ImGuiSelectionBasicStorage const *)arg1)->Contains(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiSelectionBasicStorage_Clear(lua_State* L) { { int SWIG_arg = 0;
    ImGuiSelectionBasicStorage *arg1 = (ImGuiSelectionBasicStorage *) 0 ;
    SWIG_check_num_args("ImGuiSelectionBasicStorage::Clear",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSelectionBasicStorage::Clear",1,"ImGuiSelectionBasicStorage *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSelectionBasicStorage,0))){
      SWIG_fail_ptr("ImGuiSelectionBasicStorage_Clear",1,SWIGTYPE_p_ImGuiSelectionBasicStorage); }  (arg1)->Clear();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiSelectionBasicStorage_Swap(lua_State* L) { { int SWIG_arg = 0;
    ImGuiSelectionBasicStorage *arg1 = (ImGuiSelectionBasicStorage *) 0 ; ImGuiSelectionBasicStorage *arg2 = 0 ;
    SWIG_check_num_args("ImGuiSelectionBasicStorage::Swap",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSelectionBasicStorage::Swap",1,"ImGuiSelectionBasicStorage *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGuiSelectionBasicStorage::Swap",2,"ImGuiSelectionBasicStorage &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSelectionBasicStorage,0))){
      SWIG_fail_ptr("ImGuiSelectionBasicStorage_Swap",1,SWIGTYPE_p_ImGuiSelectionBasicStorage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiSelectionBasicStorage,0))){
      SWIG_fail_ptr("ImGuiSelectionBasicStorage_Swap",2,SWIGTYPE_p_ImGuiSelectionBasicStorage); }  (arg1)->Swap(*arg2);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiSelectionBasicStorage_SetItemSelected(lua_State* L) { { int SWIG_arg = 0;
    ImGuiSelectionBasicStorage *arg1 = (ImGuiSelectionBasicStorage *) 0 ; ImGuiID arg2 ; bool arg3 ;
    SWIG_check_num_args("ImGuiSelectionBasicStorage::SetItemSelected",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSelectionBasicStorage::SetItemSelected",1,"ImGuiSelectionBasicStorage *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiSelectionBasicStorage::SetItemSelected",2,"ImGuiID");
    if(!lua_isboolean(L,3)) SWIG_fail_arg("ImGuiSelectionBasicStorage::SetItemSelected",3,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSelectionBasicStorage,0))){
      SWIG_fail_ptr("ImGuiSelectionBasicStorage_SetItemSelected",1,SWIGTYPE_p_ImGuiSelectionBasicStorage); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (ImGuiID)lua_tonumber(L, 2);
    arg3 = (lua_toboolean(L, 3)!=0); (arg1)->SetItemSelected(arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiSelectionBasicStorage_GetNextSelectedItem(lua_State* L) { { int SWIG_arg = 0;
    ImGuiSelectionBasicStorage *arg1 = (ImGuiSelectionBasicStorage *) 0 ; void **arg2 = (void **) 0 ;
    ImGuiID *arg3 = (ImGuiID *) 0 ; bool result; SWIG_check_num_args("ImGuiSelectionBasicStorage::GetNextSelectedItem",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSelectionBasicStorage::GetNextSelectedItem",1,"ImGuiSelectionBasicStorage *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiSelectionBasicStorage::GetNextSelectedItem",2,"void **");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGuiSelectionBasicStorage::GetNextSelectedItem",3,"ImGuiID *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSelectionBasicStorage,0))){
      SWIG_fail_ptr("ImGuiSelectionBasicStorage_GetNextSelectedItem",1,SWIGTYPE_p_ImGuiSelectionBasicStorage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_void,0))){
      SWIG_fail_ptr("ImGuiSelectionBasicStorage_GetNextSelectedItem",2,SWIGTYPE_p_p_void); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_unsigned_int,0))){
      SWIG_fail_ptr("ImGuiSelectionBasicStorage_GetNextSelectedItem",3,SWIGTYPE_p_unsigned_int); } 
    result = (bool)(arg1)->GetNextSelectedItem(arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiSelectionBasicStorage_GetStorageIdFromIndex(lua_State* L) { { int SWIG_arg = 0;
    ImGuiSelectionBasicStorage *arg1 = (ImGuiSelectionBasicStorage *) 0 ; int arg2 ; ImGuiID result;
    SWIG_check_num_args("ImGuiSelectionBasicStorage::GetStorageIdFromIndex",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSelectionBasicStorage::GetStorageIdFromIndex",1,"ImGuiSelectionBasicStorage *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiSelectionBasicStorage::GetStorageIdFromIndex",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSelectionBasicStorage,0))){
      SWIG_fail_ptr("ImGuiSelectionBasicStorage_GetStorageIdFromIndex",1,SWIGTYPE_p_ImGuiSelectionBasicStorage); } 
    arg2 = (int)lua_tonumber(L, 2); result = (ImGuiID)(arg1)->GetStorageIdFromIndex(arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static void swig_delete_ImGuiSelectionBasicStorage(void *obj) {
ImGuiSelectionBasicStorage *arg1 = (ImGuiSelectionBasicStorage *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiSelectionBasicStorage(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiSelectionBasicStorage);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiSelectionBasicStorage_attributes[] = {
    { "Size", _wrap_ImGuiSelectionBasicStorage_Size_get, _wrap_ImGuiSelectionBasicStorage_Size_set },
    { "PreserveOrder", _wrap_ImGuiSelectionBasicStorage_PreserveOrder_get, _wrap_ImGuiSelectionBasicStorage_PreserveOrder_set },
    { "UserData", _wrap_ImGuiSelectionBasicStorage_UserData_get, _wrap_ImGuiSelectionBasicStorage_UserData_set },
    { "AdapterIndexToStorageId", _wrap_ImGuiSelectionBasicStorage_AdapterIndexToStorageId_get, _wrap_ImGuiSelectionBasicStorage_AdapterIndexToStorageId_set },
    { "_SelectionOrder", _wrap_ImGuiSelectionBasicStorage__SelectionOrder_get, _wrap_ImGuiSelectionBasicStorage__SelectionOrder_set },
    { "_Storage", _wrap_ImGuiSelectionBasicStorage__Storage_get, _wrap_ImGuiSelectionBasicStorage__Storage_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiSelectionBasicStorage_methods[]= {
    { "ApplyRequests", _wrap_ImGuiSelectionBasicStorage_ApplyRequests},
    { "Contains", _wrap_ImGuiSelectionBasicStorage_Contains},
    { "Clear", _wrap_ImGuiSelectionBasicStorage_Clear},
    { "Swap", _wrap_ImGuiSelectionBasicStorage_Swap},
    { "SetItemSelected", _wrap_ImGuiSelectionBasicStorage_SetItemSelected},
    { "GetNextSelectedItem", _wrap_ImGuiSelectionBasicStorage_GetNextSelectedItem},
    { "GetStorageIdFromIndex", _wrap_ImGuiSelectionBasicStorage_GetStorageIdFromIndex},
    {0,0}
};
static swig_lua_method swig_ImGuiSelectionBasicStorage_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiSelectionBasicStorage_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiSelectionBasicStorage_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiSelectionBasicStorage_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiSelectionBasicStorage_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiSelectionBasicStorage_Sf_SwigStatic = {
    "ImGuiSelectionBasicStorage",
    swig_ImGuiSelectionBasicStorage_Sf_SwigStatic_methods,
    swig_ImGuiSelectionBasicStorage_Sf_SwigStatic_attributes,
    swig_ImGuiSelectionBasicStorage_Sf_SwigStatic_constants,
    swig_ImGuiSelectionBasicStorage_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiSelectionBasicStorage_bases[] = {0};
static const char *swig_ImGuiSelectionBasicStorage_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiSelectionBasicStorage = { "ImGuiSelectionBasicStorage", "ImGuiSelectionBasicStorage", &SWIGTYPE_p_ImGuiSelectionBasicStorage,_proxy__wrap_new_ImGuiSelectionBasicStorage, swig_delete_ImGuiSelectionBasicStorage, swig_ImGuiSelectionBasicStorage_methods, swig_ImGuiSelectionBasicStorage_attributes, &swig_ImGuiSelectionBasicStorage_Sf_SwigStatic, swig_ImGuiSelectionBasicStorage_meta, swig_ImGuiSelectionBasicStorage_bases, swig_ImGuiSelectionBasicStorage_base_names };

static int _wrap_ImGuiSelectionExternalStorage_UserData_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiSelectionExternalStorage *arg1 = (ImGuiSelectionExternalStorage *) 0 ; void *arg2 = (void *) 0 ;
    SWIG_check_num_args("ImGuiSelectionExternalStorage::UserData",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSelectionExternalStorage::UserData",1,"ImGuiSelectionExternalStorage *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiSelectionExternalStorage::UserData",2,"void *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSelectionExternalStorage,0))){
      SWIG_fail_ptr("ImGuiSelectionExternalStorage_UserData_set",1,SWIGTYPE_p_ImGuiSelectionExternalStorage); } 
    arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImGuiSelectionExternalStorage_UserData_set"); if (arg1) (arg1)->UserData = arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiSelectionExternalStorage_UserData_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiSelectionExternalStorage *arg1 = (ImGuiSelectionExternalStorage *) 0 ; void *result = 0 ;
    SWIG_check_num_args("ImGuiSelectionExternalStorage::UserData",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSelectionExternalStorage::UserData",1,"ImGuiSelectionExternalStorage *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSelectionExternalStorage,0))){
      SWIG_fail_ptr("ImGuiSelectionExternalStorage_UserData_get",1,SWIGTYPE_p_ImGuiSelectionExternalStorage); } 
    result = (void *) ((arg1)->UserData); SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++;  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiSelectionExternalStorage_AdapterSetItemSelected_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiSelectionExternalStorage *arg1 = (ImGuiSelectionExternalStorage *) 0 ;
    void (*arg2)(ImGuiSelectionExternalStorage *,int,bool) = (void (*)(ImGuiSelectionExternalStorage *,int,bool)) 0 ;
    SWIG_check_num_args("ImGuiSelectionExternalStorage::AdapterSetItemSelected",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSelectionExternalStorage::AdapterSetItemSelected",1,"ImGuiSelectionExternalStorage *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiSelectionExternalStorage::AdapterSetItemSelected",2,"void (*)(ImGuiSelectionExternalStorage *,int,bool)");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSelectionExternalStorage,0))){
      SWIG_fail_ptr("ImGuiSelectionExternalStorage_AdapterSetItemSelected_set",1,SWIGTYPE_p_ImGuiSelectionExternalStorage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiSelectionExternalStorage_int_bool__void,0))){
      SWIG_fail_ptr("ImGuiSelectionExternalStorage_AdapterSetItemSelected_set",2,SWIGTYPE_p_f_p_ImGuiSelectionExternalStorage_int_bool__void); }
     if (arg1) (arg1)->AdapterSetItemSelected = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiSelectionExternalStorage_AdapterSetItemSelected_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiSelectionExternalStorage *arg1 = (ImGuiSelectionExternalStorage *) 0 ;
    void (*result)(ImGuiSelectionExternalStorage *,int,bool) = 0 ;
    SWIG_check_num_args("ImGuiSelectionExternalStorage::AdapterSetItemSelected",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSelectionExternalStorage::AdapterSetItemSelected",1,"ImGuiSelectionExternalStorage *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSelectionExternalStorage,0))){
      SWIG_fail_ptr("ImGuiSelectionExternalStorage_AdapterSetItemSelected_get",1,SWIGTYPE_p_ImGuiSelectionExternalStorage); } 
    result = (void (*)(ImGuiSelectionExternalStorage *,int,bool)) ((arg1)->AdapterSetItemSelected);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiSelectionExternalStorage_int_bool__void,0); SWIG_arg++;  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_ImGuiSelectionExternalStorage(lua_State* L) { { int SWIG_arg = 0;
    ImGuiSelectionExternalStorage *result = 0 ;
    SWIG_check_num_args("ImGuiSelectionExternalStorage::ImGuiSelectionExternalStorage",0,0)
    result = (ImGuiSelectionExternalStorage *)new ImGuiSelectionExternalStorage();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiSelectionExternalStorage,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiSelectionExternalStorage_ApplyRequests(lua_State* L) { { int SWIG_arg = 0;
    ImGuiSelectionExternalStorage *arg1 = (ImGuiSelectionExternalStorage *) 0 ;
    ImGuiMultiSelectIO *arg2 = (ImGuiMultiSelectIO *) 0 ;
    SWIG_check_num_args("ImGuiSelectionExternalStorage::ApplyRequests",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiSelectionExternalStorage::ApplyRequests",1,"ImGuiSelectionExternalStorage *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiSelectionExternalStorage::ApplyRequests",2,"ImGuiMultiSelectIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiSelectionExternalStorage,0))){
      SWIG_fail_ptr("ImGuiSelectionExternalStorage_ApplyRequests",1,SWIGTYPE_p_ImGuiSelectionExternalStorage); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiMultiSelectIO,0))){
      SWIG_fail_ptr("ImGuiSelectionExternalStorage_ApplyRequests",2,SWIGTYPE_p_ImGuiMultiSelectIO); } 
    (arg1)->ApplyRequests(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static void swig_delete_ImGuiSelectionExternalStorage(void *obj) {
ImGuiSelectionExternalStorage *arg1 = (ImGuiSelectionExternalStorage *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiSelectionExternalStorage(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiSelectionExternalStorage);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiSelectionExternalStorage_attributes[] = {
    { "UserData", _wrap_ImGuiSelectionExternalStorage_UserData_get, _wrap_ImGuiSelectionExternalStorage_UserData_set },
    { "AdapterSetItemSelected", _wrap_ImGuiSelectionExternalStorage_AdapterSetItemSelected_get, _wrap_ImGuiSelectionExternalStorage_AdapterSetItemSelected_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiSelectionExternalStorage_methods[]= {
    { "ApplyRequests", _wrap_ImGuiSelectionExternalStorage_ApplyRequests},
    {0,0}
};
static swig_lua_method swig_ImGuiSelectionExternalStorage_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiSelectionExternalStorage_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiSelectionExternalStorage_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiSelectionExternalStorage_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiSelectionExternalStorage_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiSelectionExternalStorage_Sf_SwigStatic = {
    "ImGuiSelectionExternalStorage",
    swig_ImGuiSelectionExternalStorage_Sf_SwigStatic_methods,
    swig_ImGuiSelectionExternalStorage_Sf_SwigStatic_attributes,
    swig_ImGuiSelectionExternalStorage_Sf_SwigStatic_constants,
    swig_ImGuiSelectionExternalStorage_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiSelectionExternalStorage_bases[] = {0};
static const char *swig_ImGuiSelectionExternalStorage_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiSelectionExternalStorage = { "ImGuiSelectionExternalStorage", "ImGuiSelectionExternalStorage", &SWIGTYPE_p_ImGuiSelectionExternalStorage,_proxy__wrap_new_ImGuiSelectionExternalStorage, swig_delete_ImGuiSelectionExternalStorage, swig_ImGuiSelectionExternalStorage_methods, swig_ImGuiSelectionExternalStorage_attributes, &swig_ImGuiSelectionExternalStorage_Sf_SwigStatic, swig_ImGuiSelectionExternalStorage_meta, swig_ImGuiSelectionExternalStorage_bases, swig_ImGuiSelectionExternalStorage_base_names };

static int _wrap_ImDrawCmd_ClipRect_set(lua_State* L) { { int SWIG_arg = 0; ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
    ImVec4 *arg2 = (ImVec4 *) 0 ; SWIG_check_num_args("ImDrawCmd::ClipRect",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawCmd::ClipRect",1,"ImDrawCmd *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawCmd::ClipRect",2,"ImVec4 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawCmd,0))){
      SWIG_fail_ptr("ImDrawCmd_ClipRect_set",1,SWIGTYPE_p_ImDrawCmd); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec4,0))){
      SWIG_fail_ptr("ImDrawCmd_ClipRect_set",2,SWIGTYPE_p_ImVec4); }  if (arg1) (arg1)->ClipRect = *arg2; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawCmd_ClipRect_get(lua_State* L) { { int SWIG_arg = 0; ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
    ImVec4 *result = 0 ; SWIG_check_num_args("ImDrawCmd::ClipRect",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawCmd::ClipRect",1,"ImDrawCmd *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawCmd,0))){
      SWIG_fail_ptr("ImDrawCmd_ClipRect_get",1,SWIGTYPE_p_ImDrawCmd); }  result = (ImVec4 *)& ((arg1)->ClipRect);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec4,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImDrawCmd_TextureId_set(lua_State* L) { { int SWIG_arg = 0; ImDrawCmd *arg1 = (ImDrawCmd *) 0 ; int arg2 ;
    SWIG_check_num_args("ImDrawCmd::TextureId",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawCmd::TextureId",1,"ImDrawCmd *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawCmd::TextureId",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawCmd,0))){
      SWIG_fail_ptr("ImDrawCmd_TextureId_set",1,SWIGTYPE_p_ImDrawCmd); }  arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->TextureId = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawCmd_TextureId_get(lua_State* L) { { int SWIG_arg = 0; ImDrawCmd *arg1 = (ImDrawCmd *) 0 ; int result;
    SWIG_check_num_args("ImDrawCmd::TextureId",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawCmd::TextureId",1,"ImDrawCmd *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawCmd,0))){
      SWIG_fail_ptr("ImDrawCmd_TextureId_get",1,SWIGTYPE_p_ImDrawCmd); }  result = (int) ((arg1)->TextureId);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawCmd_VtxOffset_set(lua_State* L) { { int SWIG_arg = 0; ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
    unsigned int arg2 ; SWIG_check_num_args("ImDrawCmd::VtxOffset",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawCmd::VtxOffset",1,"ImDrawCmd *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawCmd::VtxOffset",2,"unsigned int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawCmd,0))){
      SWIG_fail_ptr("ImDrawCmd_VtxOffset_set",1,SWIGTYPE_p_ImDrawCmd); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (unsigned int)lua_tonumber(L, 2);
    if (arg1) (arg1)->VtxOffset = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawCmd_VtxOffset_get(lua_State* L) { { int SWIG_arg = 0; ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
    unsigned int result; SWIG_check_num_args("ImDrawCmd::VtxOffset",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawCmd::VtxOffset",1,"ImDrawCmd *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawCmd,0))){
      SWIG_fail_ptr("ImDrawCmd_VtxOffset_get",1,SWIGTYPE_p_ImDrawCmd); }  result = (unsigned int) ((arg1)->VtxOffset);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawCmd_IdxOffset_set(lua_State* L) { { int SWIG_arg = 0; ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
    unsigned int arg2 ; SWIG_check_num_args("ImDrawCmd::IdxOffset",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawCmd::IdxOffset",1,"ImDrawCmd *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawCmd::IdxOffset",2,"unsigned int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawCmd,0))){
      SWIG_fail_ptr("ImDrawCmd_IdxOffset_set",1,SWIGTYPE_p_ImDrawCmd); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (unsigned int)lua_tonumber(L, 2);
    if (arg1) (arg1)->IdxOffset = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawCmd_IdxOffset_get(lua_State* L) { { int SWIG_arg = 0; ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
    unsigned int result; SWIG_check_num_args("ImDrawCmd::IdxOffset",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawCmd::IdxOffset",1,"ImDrawCmd *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawCmd,0))){
      SWIG_fail_ptr("ImDrawCmd_IdxOffset_get",1,SWIGTYPE_p_ImDrawCmd); }  result = (unsigned int) ((arg1)->IdxOffset);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawCmd_ElemCount_set(lua_State* L) { { int SWIG_arg = 0; ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
    unsigned int arg2 ; SWIG_check_num_args("ImDrawCmd::ElemCount",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawCmd::ElemCount",1,"ImDrawCmd *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawCmd::ElemCount",2,"unsigned int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawCmd,0))){
      SWIG_fail_ptr("ImDrawCmd_ElemCount_set",1,SWIGTYPE_p_ImDrawCmd); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (unsigned int)lua_tonumber(L, 2);
    if (arg1) (arg1)->ElemCount = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawCmd_ElemCount_get(lua_State* L) { { int SWIG_arg = 0; ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
    unsigned int result; SWIG_check_num_args("ImDrawCmd::ElemCount",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawCmd::ElemCount",1,"ImDrawCmd *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawCmd,0))){
      SWIG_fail_ptr("ImDrawCmd_ElemCount_get",1,SWIGTYPE_p_ImDrawCmd); }  result = (unsigned int) ((arg1)->ElemCount);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawCmd_UserCallback_set(lua_State* L) { { int SWIG_arg = 0; ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
    ImDrawCallback arg2 = (ImDrawCallback) 0 ; SWIG_check_num_args("ImDrawCmd::UserCallback",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawCmd::UserCallback",1,"ImDrawCmd *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawCmd::UserCallback",2,"ImDrawCallback");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawCmd,0))){
      SWIG_fail_ptr("ImDrawCmd_UserCallback_set",1,SWIGTYPE_p_ImDrawCmd); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_q_const__ImDrawList_p_q_const__ImDrawCmd__void,0))){
      SWIG_fail_ptr("ImDrawCmd_UserCallback_set",2,SWIGTYPE_p_f_p_q_const__ImDrawList_p_q_const__ImDrawCmd__void); } 
    if (arg1) (arg1)->UserCallback = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawCmd_UserCallback_get(lua_State* L) { { int SWIG_arg = 0; ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
    ImDrawCallback result; SWIG_check_num_args("ImDrawCmd::UserCallback",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawCmd::UserCallback",1,"ImDrawCmd *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawCmd,0))){
      SWIG_fail_ptr("ImDrawCmd_UserCallback_get",1,SWIGTYPE_p_ImDrawCmd); }  result = (ImDrawCallback) ((arg1)->UserCallback);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_q_const__ImDrawList_p_q_const__ImDrawCmd__void,0); SWIG_arg++;  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawCmd_UserCallbackData_set(lua_State* L) { { int SWIG_arg = 0; ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
    void *arg2 = (void *) 0 ; SWIG_check_num_args("ImDrawCmd::UserCallbackData",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawCmd::UserCallbackData",1,"ImDrawCmd *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawCmd::UserCallbackData",2,"void *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawCmd,0))){
      SWIG_fail_ptr("ImDrawCmd_UserCallbackData_set",1,SWIGTYPE_p_ImDrawCmd); } 
    arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImDrawCmd_UserCallbackData_set"); if (arg1) (arg1)->UserCallbackData = arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawCmd_UserCallbackData_get(lua_State* L) { { int SWIG_arg = 0; ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
    void *result = 0 ; SWIG_check_num_args("ImDrawCmd::UserCallbackData",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawCmd::UserCallbackData",1,"ImDrawCmd *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawCmd,0))){
      SWIG_fail_ptr("ImDrawCmd_UserCallbackData_get",1,SWIGTYPE_p_ImDrawCmd); }  result = (void *) ((arg1)->UserCallbackData);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawCmd_UserCallbackDataSize_set(lua_State* L) { { int SWIG_arg = 0; ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
    int arg2 ; SWIG_check_num_args("ImDrawCmd::UserCallbackDataSize",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawCmd::UserCallbackDataSize",1,"ImDrawCmd *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawCmd::UserCallbackDataSize",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawCmd,0))){
      SWIG_fail_ptr("ImDrawCmd_UserCallbackDataSize_set",1,SWIGTYPE_p_ImDrawCmd); }  arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->UserCallbackDataSize = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawCmd_UserCallbackDataSize_get(lua_State* L) { { int SWIG_arg = 0; ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
    int result; SWIG_check_num_args("ImDrawCmd::UserCallbackDataSize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawCmd::UserCallbackDataSize",1,"ImDrawCmd *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawCmd,0))){
      SWIG_fail_ptr("ImDrawCmd_UserCallbackDataSize_get",1,SWIGTYPE_p_ImDrawCmd); } 
    result = (int) ((arg1)->UserCallbackDataSize); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawCmd_UserCallbackDataOffset_set(lua_State* L) { { int SWIG_arg = 0; ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
    int arg2 ; SWIG_check_num_args("ImDrawCmd::UserCallbackDataOffset",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawCmd::UserCallbackDataOffset",1,"ImDrawCmd *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawCmd::UserCallbackDataOffset",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawCmd,0))){
      SWIG_fail_ptr("ImDrawCmd_UserCallbackDataOffset_set",1,SWIGTYPE_p_ImDrawCmd); }  arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->UserCallbackDataOffset = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawCmd_UserCallbackDataOffset_get(lua_State* L) { { int SWIG_arg = 0; ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
    int result; SWIG_check_num_args("ImDrawCmd::UserCallbackDataOffset",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawCmd::UserCallbackDataOffset",1,"ImDrawCmd *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawCmd,0))){
      SWIG_fail_ptr("ImDrawCmd_UserCallbackDataOffset_get",1,SWIGTYPE_p_ImDrawCmd); } 
    result = (int) ((arg1)->UserCallbackDataOffset); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_ImDrawCmd(lua_State* L) { { int SWIG_arg = 0; ImDrawCmd *result = 0 ;
    SWIG_check_num_args("ImDrawCmd::ImDrawCmd",0,0) result = (ImDrawCmd *)new ImDrawCmd();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImDrawCmd,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImDrawCmd_GetTexID(lua_State* L) { { int SWIG_arg = 0; ImDrawCmd *arg1 = (ImDrawCmd *) 0 ; int result;
    SWIG_check_num_args("ImDrawCmd::GetTexID",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawCmd::GetTexID",1,"ImDrawCmd const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawCmd,0))){
      SWIG_fail_ptr("ImDrawCmd_GetTexID",1,SWIGTYPE_p_ImDrawCmd); }  result = (int)((ImDrawCmd const *)arg1)->GetTexID();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static void swig_delete_ImDrawCmd(void *obj) {
ImDrawCmd *arg1 = (ImDrawCmd *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImDrawCmd(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImDrawCmd);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImDrawCmd_attributes[] = {
    { "ClipRect", _wrap_ImDrawCmd_ClipRect_get, _wrap_ImDrawCmd_ClipRect_set },
    { "TextureId", _wrap_ImDrawCmd_TextureId_get, _wrap_ImDrawCmd_TextureId_set },
    { "VtxOffset", _wrap_ImDrawCmd_VtxOffset_get, _wrap_ImDrawCmd_VtxOffset_set },
    { "IdxOffset", _wrap_ImDrawCmd_IdxOffset_get, _wrap_ImDrawCmd_IdxOffset_set },
    { "ElemCount", _wrap_ImDrawCmd_ElemCount_get, _wrap_ImDrawCmd_ElemCount_set },
    { "UserCallback", _wrap_ImDrawCmd_UserCallback_get, _wrap_ImDrawCmd_UserCallback_set },
    { "UserCallbackData", _wrap_ImDrawCmd_UserCallbackData_get, _wrap_ImDrawCmd_UserCallbackData_set },
    { "UserCallbackDataSize", _wrap_ImDrawCmd_UserCallbackDataSize_get, _wrap_ImDrawCmd_UserCallbackDataSize_set },
    { "UserCallbackDataOffset", _wrap_ImDrawCmd_UserCallbackDataOffset_get, _wrap_ImDrawCmd_UserCallbackDataOffset_set },
    {0,0,0}
};
static swig_lua_method swig_ImDrawCmd_methods[]= {
    { "GetTexID", _wrap_ImDrawCmd_GetTexID},
    {0,0}
};
static swig_lua_method swig_ImDrawCmd_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImDrawCmd_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImDrawCmd_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImDrawCmd_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImDrawCmd_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImDrawCmd_Sf_SwigStatic = {
    "ImDrawCmd",
    swig_ImDrawCmd_Sf_SwigStatic_methods,
    swig_ImDrawCmd_Sf_SwigStatic_attributes,
    swig_ImDrawCmd_Sf_SwigStatic_constants,
    swig_ImDrawCmd_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImDrawCmd_bases[] = {0};
static const char *swig_ImDrawCmd_base_names[] = {0};
static swig_lua_class _wrap_class_ImDrawCmd = { "ImDrawCmd", "ImDrawCmd", &SWIGTYPE_p_ImDrawCmd,_proxy__wrap_new_ImDrawCmd, swig_delete_ImDrawCmd, swig_ImDrawCmd_methods, swig_ImDrawCmd_attributes, &swig_ImDrawCmd_Sf_SwigStatic, swig_ImDrawCmd_meta, swig_ImDrawCmd_bases, swig_ImDrawCmd_base_names };

static int _wrap_ImDrawVert_pos_set(lua_State* L) { { int SWIG_arg = 0; ImDrawVert *arg1 = (ImDrawVert *) 0 ;
    ImVec2 *arg2 = (ImVec2 *) 0 ; SWIG_check_num_args("ImDrawVert::pos",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawVert::pos",1,"ImDrawVert *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawVert::pos",2,"ImVec2 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawVert,0))){
      SWIG_fail_ptr("ImDrawVert_pos_set",1,SWIGTYPE_p_ImDrawVert); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawVert_pos_set",2,SWIGTYPE_p_ImVec2); }  if (arg1) (arg1)->pos = *arg2; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawVert_pos_get(lua_State* L) { { int SWIG_arg = 0; ImDrawVert *arg1 = (ImDrawVert *) 0 ;
    ImVec2 *result = 0 ; SWIG_check_num_args("ImDrawVert::pos",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawVert::pos",1,"ImDrawVert *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawVert,0))){
      SWIG_fail_ptr("ImDrawVert_pos_get",1,SWIGTYPE_p_ImDrawVert); }  result = (ImVec2 *)& ((arg1)->pos);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImDrawVert_uv_set(lua_State* L) { { int SWIG_arg = 0; ImDrawVert *arg1 = (ImDrawVert *) 0 ;
    ImVec2 *arg2 = (ImVec2 *) 0 ; SWIG_check_num_args("ImDrawVert::uv",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawVert::uv",1,"ImDrawVert *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawVert::uv",2,"ImVec2 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawVert,0))){
      SWIG_fail_ptr("ImDrawVert_uv_set",1,SWIGTYPE_p_ImDrawVert); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawVert_uv_set",2,SWIGTYPE_p_ImVec2); }  if (arg1) (arg1)->uv = *arg2; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawVert_uv_get(lua_State* L) { { int SWIG_arg = 0; ImDrawVert *arg1 = (ImDrawVert *) 0 ;
    ImVec2 *result = 0 ; SWIG_check_num_args("ImDrawVert::uv",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawVert::uv",1,"ImDrawVert *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawVert,0))){
      SWIG_fail_ptr("ImDrawVert_uv_get",1,SWIGTYPE_p_ImDrawVert); }  result = (ImVec2 *)& ((arg1)->uv);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImDrawVert_col_set(lua_State* L) { { int SWIG_arg = 0; ImDrawVert *arg1 = (ImDrawVert *) 0 ; ImU32 arg2 ;
    SWIG_check_num_args("ImDrawVert::col",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawVert::col",1,"ImDrawVert *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawVert::col",2,"ImU32");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawVert,0))){
      SWIG_fail_ptr("ImDrawVert_col_set",1,SWIGTYPE_p_ImDrawVert); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (ImU32)lua_tonumber(L, 2);
    if (arg1) (arg1)->col = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawVert_col_get(lua_State* L) { { int SWIG_arg = 0; ImDrawVert *arg1 = (ImDrawVert *) 0 ; ImU32 result;
    SWIG_check_num_args("ImDrawVert::col",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawVert::col",1,"ImDrawVert *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawVert,0))){
      SWIG_fail_ptr("ImDrawVert_col_get",1,SWIGTYPE_p_ImDrawVert); }  result = (ImU32) ((arg1)->col);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_ImDrawVert(lua_State* L) { { int SWIG_arg = 0; ImDrawVert *result = 0 ;
    SWIG_check_num_args("ImDrawVert::ImDrawVert",0,0) result = (ImDrawVert *)new ImDrawVert();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImDrawVert,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static void swig_delete_ImDrawVert(void *obj) {
ImDrawVert *arg1 = (ImDrawVert *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImDrawVert(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImDrawVert);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImDrawVert_attributes[] = {
    { "pos", _wrap_ImDrawVert_pos_get, _wrap_ImDrawVert_pos_set },
    { "uv", _wrap_ImDrawVert_uv_get, _wrap_ImDrawVert_uv_set },
    { "col", _wrap_ImDrawVert_col_get, _wrap_ImDrawVert_col_set },
    {0,0,0}
};
static swig_lua_method swig_ImDrawVert_methods[]= {
    {0,0}
};
static swig_lua_method swig_ImDrawVert_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImDrawVert_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImDrawVert_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImDrawVert_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImDrawVert_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImDrawVert_Sf_SwigStatic = {
    "ImDrawVert",
    swig_ImDrawVert_Sf_SwigStatic_methods,
    swig_ImDrawVert_Sf_SwigStatic_attributes,
    swig_ImDrawVert_Sf_SwigStatic_constants,
    swig_ImDrawVert_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImDrawVert_bases[] = {0};
static const char *swig_ImDrawVert_base_names[] = {0};
static swig_lua_class _wrap_class_ImDrawVert = { "ImDrawVert", "ImDrawVert", &SWIGTYPE_p_ImDrawVert,_proxy__wrap_new_ImDrawVert, swig_delete_ImDrawVert, swig_ImDrawVert_methods, swig_ImDrawVert_attributes, &swig_ImDrawVert_Sf_SwigStatic, swig_ImDrawVert_meta, swig_ImDrawVert_bases, swig_ImDrawVert_base_names };

static int _wrap_ImDrawCmdHeader_ClipRect_set(lua_State* L) { { int SWIG_arg = 0;
    ImDrawCmdHeader *arg1 = (ImDrawCmdHeader *) 0 ; ImVec4 *arg2 = (ImVec4 *) 0 ;
    SWIG_check_num_args("ImDrawCmdHeader::ClipRect",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawCmdHeader::ClipRect",1,"ImDrawCmdHeader *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawCmdHeader::ClipRect",2,"ImVec4 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawCmdHeader,0))){
      SWIG_fail_ptr("ImDrawCmdHeader_ClipRect_set",1,SWIGTYPE_p_ImDrawCmdHeader); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec4,0))){
      SWIG_fail_ptr("ImDrawCmdHeader_ClipRect_set",2,SWIGTYPE_p_ImVec4); }  if (arg1) (arg1)->ClipRect = *arg2; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawCmdHeader_ClipRect_get(lua_State* L) { { int SWIG_arg = 0;
    ImDrawCmdHeader *arg1 = (ImDrawCmdHeader *) 0 ; ImVec4 *result = 0 ; SWIG_check_num_args("ImDrawCmdHeader::ClipRect",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawCmdHeader::ClipRect",1,"ImDrawCmdHeader *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawCmdHeader,0))){
      SWIG_fail_ptr("ImDrawCmdHeader_ClipRect_get",1,SWIGTYPE_p_ImDrawCmdHeader); }  result = (ImVec4 *)& ((arg1)->ClipRect);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec4,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImDrawCmdHeader_TextureId_set(lua_State* L) { { int SWIG_arg = 0;
    ImDrawCmdHeader *arg1 = (ImDrawCmdHeader *) 0 ; int arg2 ; SWIG_check_num_args("ImDrawCmdHeader::TextureId",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawCmdHeader::TextureId",1,"ImDrawCmdHeader *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawCmdHeader::TextureId",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawCmdHeader,0))){
      SWIG_fail_ptr("ImDrawCmdHeader_TextureId_set",1,SWIGTYPE_p_ImDrawCmdHeader); }  arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->TextureId = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawCmdHeader_TextureId_get(lua_State* L) { { int SWIG_arg = 0;
    ImDrawCmdHeader *arg1 = (ImDrawCmdHeader *) 0 ; int result; SWIG_check_num_args("ImDrawCmdHeader::TextureId",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawCmdHeader::TextureId",1,"ImDrawCmdHeader *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawCmdHeader,0))){
      SWIG_fail_ptr("ImDrawCmdHeader_TextureId_get",1,SWIGTYPE_p_ImDrawCmdHeader); }  result = (int) ((arg1)->TextureId);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawCmdHeader_VtxOffset_set(lua_State* L) { { int SWIG_arg = 0;
    ImDrawCmdHeader *arg1 = (ImDrawCmdHeader *) 0 ; unsigned int arg2 ; SWIG_check_num_args("ImDrawCmdHeader::VtxOffset",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawCmdHeader::VtxOffset",1,"ImDrawCmdHeader *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawCmdHeader::VtxOffset",2,"unsigned int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawCmdHeader,0))){
      SWIG_fail_ptr("ImDrawCmdHeader_VtxOffset_set",1,SWIGTYPE_p_ImDrawCmdHeader); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (unsigned int)lua_tonumber(L, 2);
    if (arg1) (arg1)->VtxOffset = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawCmdHeader_VtxOffset_get(lua_State* L) { { int SWIG_arg = 0;
    ImDrawCmdHeader *arg1 = (ImDrawCmdHeader *) 0 ; unsigned int result; SWIG_check_num_args("ImDrawCmdHeader::VtxOffset",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawCmdHeader::VtxOffset",1,"ImDrawCmdHeader *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawCmdHeader,0))){
      SWIG_fail_ptr("ImDrawCmdHeader_VtxOffset_get",1,SWIGTYPE_p_ImDrawCmdHeader); } 
    result = (unsigned int) ((arg1)->VtxOffset); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_ImDrawCmdHeader(lua_State* L) { { int SWIG_arg = 0; ImDrawCmdHeader *result = 0 ;
    SWIG_check_num_args("ImDrawCmdHeader::ImDrawCmdHeader",0,0) result = (ImDrawCmdHeader *)new ImDrawCmdHeader();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImDrawCmdHeader,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static void swig_delete_ImDrawCmdHeader(void *obj) {
ImDrawCmdHeader *arg1 = (ImDrawCmdHeader *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImDrawCmdHeader(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImDrawCmdHeader);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImDrawCmdHeader_attributes[] = {
    { "ClipRect", _wrap_ImDrawCmdHeader_ClipRect_get, _wrap_ImDrawCmdHeader_ClipRect_set },
    { "TextureId", _wrap_ImDrawCmdHeader_TextureId_get, _wrap_ImDrawCmdHeader_TextureId_set },
    { "VtxOffset", _wrap_ImDrawCmdHeader_VtxOffset_get, _wrap_ImDrawCmdHeader_VtxOffset_set },
    {0,0,0}
};
static swig_lua_method swig_ImDrawCmdHeader_methods[]= {
    {0,0}
};
static swig_lua_method swig_ImDrawCmdHeader_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImDrawCmdHeader_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImDrawCmdHeader_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImDrawCmdHeader_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImDrawCmdHeader_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImDrawCmdHeader_Sf_SwigStatic = {
    "ImDrawCmdHeader",
    swig_ImDrawCmdHeader_Sf_SwigStatic_methods,
    swig_ImDrawCmdHeader_Sf_SwigStatic_attributes,
    swig_ImDrawCmdHeader_Sf_SwigStatic_constants,
    swig_ImDrawCmdHeader_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImDrawCmdHeader_bases[] = {0};
static const char *swig_ImDrawCmdHeader_base_names[] = {0};
static swig_lua_class _wrap_class_ImDrawCmdHeader = { "ImDrawCmdHeader", "ImDrawCmdHeader", &SWIGTYPE_p_ImDrawCmdHeader,_proxy__wrap_new_ImDrawCmdHeader, swig_delete_ImDrawCmdHeader, swig_ImDrawCmdHeader_methods, swig_ImDrawCmdHeader_attributes, &swig_ImDrawCmdHeader_Sf_SwigStatic, swig_ImDrawCmdHeader_meta, swig_ImDrawCmdHeader_bases, swig_ImDrawCmdHeader_base_names };

static int _wrap_ImDrawChannel__CmdBuffer_set(lua_State* L) { { int SWIG_arg = 0; ImDrawChannel *arg1 = (ImDrawChannel *) 0 ;
    ImVector< ImDrawCmd > *arg2 = (ImVector< ImDrawCmd > *) 0 ; SWIG_check_num_args("ImDrawChannel::_CmdBuffer",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawChannel::_CmdBuffer",1,"ImDrawChannel *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawChannel::_CmdBuffer",2,"ImVector< ImDrawCmd > *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawChannel,0))){
      SWIG_fail_ptr("ImDrawChannel__CmdBuffer_set",1,SWIGTYPE_p_ImDrawChannel); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImDrawCmd_t,0))){
      SWIG_fail_ptr("ImDrawChannel__CmdBuffer_set",2,SWIGTYPE_p_ImVectorT_ImDrawCmd_t); }  if (arg1) (arg1)->_CmdBuffer = *arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawChannel__CmdBuffer_get(lua_State* L) { { int SWIG_arg = 0; ImDrawChannel *arg1 = (ImDrawChannel *) 0 ;
    ImVector< ImDrawCmd > *result = 0 ; SWIG_check_num_args("ImDrawChannel::_CmdBuffer",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawChannel::_CmdBuffer",1,"ImDrawChannel *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawChannel,0))){
      SWIG_fail_ptr("ImDrawChannel__CmdBuffer_get",1,SWIGTYPE_p_ImDrawChannel); } 
    result = (ImVector< ImDrawCmd > *)& ((arg1)->_CmdBuffer);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImDrawCmd_t,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImDrawChannel__IdxBuffer_set(lua_State* L) { { int SWIG_arg = 0; ImDrawChannel *arg1 = (ImDrawChannel *) 0 ;
    ImVector< ofIndexType > *arg2 = (ImVector< ofIndexType > *) 0 ; SWIG_check_num_args("ImDrawChannel::_IdxBuffer",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawChannel::_IdxBuffer",1,"ImDrawChannel *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawChannel::_IdxBuffer",2,"ImVector< ofIndexType > *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawChannel,0))){
      SWIG_fail_ptr("ImDrawChannel__IdxBuffer_set",1,SWIGTYPE_p_ImDrawChannel); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ofIndexType_t,0))){
      SWIG_fail_ptr("ImDrawChannel__IdxBuffer_set",2,SWIGTYPE_p_ImVectorT_ofIndexType_t); } 
    if (arg1) (arg1)->_IdxBuffer = *arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawChannel__IdxBuffer_get(lua_State* L) { { int SWIG_arg = 0; ImDrawChannel *arg1 = (ImDrawChannel *) 0 ;
    ImVector< ofIndexType > *result = 0 ; SWIG_check_num_args("ImDrawChannel::_IdxBuffer",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawChannel::_IdxBuffer",1,"ImDrawChannel *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawChannel,0))){
      SWIG_fail_ptr("ImDrawChannel__IdxBuffer_get",1,SWIGTYPE_p_ImDrawChannel); } 
    result = (ImVector< ofIndexType > *)& ((arg1)->_IdxBuffer);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ofIndexType_t,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_new_ImDrawChannel(lua_State* L) { { int SWIG_arg = 0; ImDrawChannel *result = 0 ;
    SWIG_check_num_args("ImDrawChannel::ImDrawChannel",0,0) result = (ImDrawChannel *)new ImDrawChannel();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImDrawChannel,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static void swig_delete_ImDrawChannel(void *obj) {
ImDrawChannel *arg1 = (ImDrawChannel *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImDrawChannel(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImDrawChannel);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImDrawChannel_attributes[] = {
    { "_CmdBuffer", _wrap_ImDrawChannel__CmdBuffer_get, _wrap_ImDrawChannel__CmdBuffer_set },
    { "_IdxBuffer", _wrap_ImDrawChannel__IdxBuffer_get, _wrap_ImDrawChannel__IdxBuffer_set },
    {0,0,0}
};
static swig_lua_method swig_ImDrawChannel_methods[]= {
    {0,0}
};
static swig_lua_method swig_ImDrawChannel_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImDrawChannel_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImDrawChannel_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImDrawChannel_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImDrawChannel_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImDrawChannel_Sf_SwigStatic = {
    "ImDrawChannel",
    swig_ImDrawChannel_Sf_SwigStatic_methods,
    swig_ImDrawChannel_Sf_SwigStatic_attributes,
    swig_ImDrawChannel_Sf_SwigStatic_constants,
    swig_ImDrawChannel_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImDrawChannel_bases[] = {0};
static const char *swig_ImDrawChannel_base_names[] = {0};
static swig_lua_class _wrap_class_ImDrawChannel = { "ImDrawChannel", "ImDrawChannel", &SWIGTYPE_p_ImDrawChannel,_proxy__wrap_new_ImDrawChannel, swig_delete_ImDrawChannel, swig_ImDrawChannel_methods, swig_ImDrawChannel_attributes, &swig_ImDrawChannel_Sf_SwigStatic, swig_ImDrawChannel_meta, swig_ImDrawChannel_bases, swig_ImDrawChannel_base_names };

static int _wrap_ImDrawListSplitter__Current_set(lua_State* L) { { int SWIG_arg = 0;
    ImDrawListSplitter *arg1 = (ImDrawListSplitter *) 0 ; int arg2 ; SWIG_check_num_args("ImDrawListSplitter::_Current",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawListSplitter::_Current",1,"ImDrawListSplitter *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawListSplitter::_Current",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawListSplitter,0))){
      SWIG_fail_ptr("ImDrawListSplitter__Current_set",1,SWIGTYPE_p_ImDrawListSplitter); }  arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->_Current = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawListSplitter__Current_get(lua_State* L) { { int SWIG_arg = 0;
    ImDrawListSplitter *arg1 = (ImDrawListSplitter *) 0 ; int result; SWIG_check_num_args("ImDrawListSplitter::_Current",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawListSplitter::_Current",1,"ImDrawListSplitter *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawListSplitter,0))){
      SWIG_fail_ptr("ImDrawListSplitter__Current_get",1,SWIGTYPE_p_ImDrawListSplitter); }  result = (int) ((arg1)->_Current);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawListSplitter__Count_set(lua_State* L) { { int SWIG_arg = 0;
    ImDrawListSplitter *arg1 = (ImDrawListSplitter *) 0 ; int arg2 ; SWIG_check_num_args("ImDrawListSplitter::_Count",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawListSplitter::_Count",1,"ImDrawListSplitter *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawListSplitter::_Count",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawListSplitter,0))){
      SWIG_fail_ptr("ImDrawListSplitter__Count_set",1,SWIGTYPE_p_ImDrawListSplitter); }  arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->_Count = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawListSplitter__Count_get(lua_State* L) { { int SWIG_arg = 0;
    ImDrawListSplitter *arg1 = (ImDrawListSplitter *) 0 ; int result; SWIG_check_num_args("ImDrawListSplitter::_Count",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawListSplitter::_Count",1,"ImDrawListSplitter *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawListSplitter,0))){
      SWIG_fail_ptr("ImDrawListSplitter__Count_get",1,SWIGTYPE_p_ImDrawListSplitter); }  result = (int) ((arg1)->_Count);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawListSplitter__Channels_set(lua_State* L) { { int SWIG_arg = 0;
    ImDrawListSplitter *arg1 = (ImDrawListSplitter *) 0 ; ImVector< ImDrawChannel > *arg2 = (ImVector< ImDrawChannel > *) 0 ;
    SWIG_check_num_args("ImDrawListSplitter::_Channels",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawListSplitter::_Channels",1,"ImDrawListSplitter *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawListSplitter::_Channels",2,"ImVector< ImDrawChannel > *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawListSplitter,0))){
      SWIG_fail_ptr("ImDrawListSplitter__Channels_set",1,SWIGTYPE_p_ImDrawListSplitter); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImDrawChannel_t,0))){
      SWIG_fail_ptr("ImDrawListSplitter__Channels_set",2,SWIGTYPE_p_ImVectorT_ImDrawChannel_t); } 
    if (arg1) (arg1)->_Channels = *arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawListSplitter__Channels_get(lua_State* L) { { int SWIG_arg = 0;
    ImDrawListSplitter *arg1 = (ImDrawListSplitter *) 0 ; ImVector< ImDrawChannel > *result = 0 ;
    SWIG_check_num_args("ImDrawListSplitter::_Channels",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawListSplitter::_Channels",1,"ImDrawListSplitter *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawListSplitter,0))){
      SWIG_fail_ptr("ImDrawListSplitter__Channels_get",1,SWIGTYPE_p_ImDrawListSplitter); } 
    result = (ImVector< ImDrawChannel > *)& ((arg1)->_Channels);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImDrawChannel_t,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_new_ImDrawListSplitter(lua_State* L) { { int SWIG_arg = 0; ImDrawListSplitter *result = 0 ;
    SWIG_check_num_args("ImDrawListSplitter::ImDrawListSplitter",0,0) result = (ImDrawListSplitter *)new ImDrawListSplitter();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImDrawListSplitter,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImDrawListSplitter_Clear(lua_State* L) { { int SWIG_arg = 0;
    ImDrawListSplitter *arg1 = (ImDrawListSplitter *) 0 ; SWIG_check_num_args("ImDrawListSplitter::Clear",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawListSplitter::Clear",1,"ImDrawListSplitter *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawListSplitter,0))){
      SWIG_fail_ptr("ImDrawListSplitter_Clear",1,SWIGTYPE_p_ImDrawListSplitter); }  (arg1)->Clear(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawListSplitter_ClearFreeMemory(lua_State* L) { { int SWIG_arg = 0;
    ImDrawListSplitter *arg1 = (ImDrawListSplitter *) 0 ; SWIG_check_num_args("ImDrawListSplitter::ClearFreeMemory",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawListSplitter::ClearFreeMemory",1,"ImDrawListSplitter *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawListSplitter,0))){
      SWIG_fail_ptr("ImDrawListSplitter_ClearFreeMemory",1,SWIGTYPE_p_ImDrawListSplitter); }  (arg1)->ClearFreeMemory();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawListSplitter_Split(lua_State* L) { { int SWIG_arg = 0;
    ImDrawListSplitter *arg1 = (ImDrawListSplitter *) 0 ; ImDrawList *arg2 = (ImDrawList *) 0 ; int arg3 ;
    SWIG_check_num_args("ImDrawListSplitter::Split",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawListSplitter::Split",1,"ImDrawListSplitter *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawListSplitter::Split",2,"ImDrawList *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImDrawListSplitter::Split",3,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawListSplitter,0))){
      SWIG_fail_ptr("ImDrawListSplitter_Split",1,SWIGTYPE_p_ImDrawListSplitter); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawListSplitter_Split",2,SWIGTYPE_p_ImDrawList); }  arg3 = (int)lua_tonumber(L, 3);
    (arg1)->Split(arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawListSplitter_Merge(lua_State* L) { { int SWIG_arg = 0;
    ImDrawListSplitter *arg1 = (ImDrawListSplitter *) 0 ; ImDrawList *arg2 = (ImDrawList *) 0 ;
    SWIG_check_num_args("ImDrawListSplitter::Merge",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawListSplitter::Merge",1,"ImDrawListSplitter *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawListSplitter::Merge",2,"ImDrawList *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawListSplitter,0))){
      SWIG_fail_ptr("ImDrawListSplitter_Merge",1,SWIGTYPE_p_ImDrawListSplitter); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawListSplitter_Merge",2,SWIGTYPE_p_ImDrawList); }  (arg1)->Merge(arg2); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawListSplitter_SetCurrentChannel(lua_State* L) { { int SWIG_arg = 0;
    ImDrawListSplitter *arg1 = (ImDrawListSplitter *) 0 ; ImDrawList *arg2 = (ImDrawList *) 0 ; int arg3 ;
    SWIG_check_num_args("ImDrawListSplitter::SetCurrentChannel",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawListSplitter::SetCurrentChannel",1,"ImDrawListSplitter *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawListSplitter::SetCurrentChannel",2,"ImDrawList *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImDrawListSplitter::SetCurrentChannel",3,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawListSplitter,0))){
      SWIG_fail_ptr("ImDrawListSplitter_SetCurrentChannel",1,SWIGTYPE_p_ImDrawListSplitter); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawListSplitter_SetCurrentChannel",2,SWIGTYPE_p_ImDrawList); }  arg3 = (int)lua_tonumber(L, 3);
    (arg1)->SetCurrentChannel(arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static void swig_delete_ImDrawListSplitter(void *obj) {
ImDrawListSplitter *arg1 = (ImDrawListSplitter *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImDrawListSplitter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImDrawListSplitter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImDrawListSplitter_attributes[] = {
    { "_Current", _wrap_ImDrawListSplitter__Current_get, _wrap_ImDrawListSplitter__Current_set },
    { "_Count", _wrap_ImDrawListSplitter__Count_get, _wrap_ImDrawListSplitter__Count_set },
    { "_Channels", _wrap_ImDrawListSplitter__Channels_get, _wrap_ImDrawListSplitter__Channels_set },
    {0,0,0}
};
static swig_lua_method swig_ImDrawListSplitter_methods[]= {
    { "Clear", _wrap_ImDrawListSplitter_Clear},
    { "ClearFreeMemory", _wrap_ImDrawListSplitter_ClearFreeMemory},
    { "Split", _wrap_ImDrawListSplitter_Split},
    { "Merge", _wrap_ImDrawListSplitter_Merge},
    { "SetCurrentChannel", _wrap_ImDrawListSplitter_SetCurrentChannel},
    {0,0}
};
static swig_lua_method swig_ImDrawListSplitter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImDrawListSplitter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImDrawListSplitter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImDrawListSplitter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImDrawListSplitter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImDrawListSplitter_Sf_SwigStatic = {
    "ImDrawListSplitter",
    swig_ImDrawListSplitter_Sf_SwigStatic_methods,
    swig_ImDrawListSplitter_Sf_SwigStatic_attributes,
    swig_ImDrawListSplitter_Sf_SwigStatic_constants,
    swig_ImDrawListSplitter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImDrawListSplitter_bases[] = {0};
static const char *swig_ImDrawListSplitter_base_names[] = {0};
static swig_lua_class _wrap_class_ImDrawListSplitter = { "ImDrawListSplitter", "ImDrawListSplitter", &SWIGTYPE_p_ImDrawListSplitter,_proxy__wrap_new_ImDrawListSplitter, swig_delete_ImDrawListSplitter, swig_ImDrawListSplitter_methods, swig_ImDrawListSplitter_attributes, &swig_ImDrawListSplitter_Sf_SwigStatic, swig_ImDrawListSplitter_meta, swig_ImDrawListSplitter_bases, swig_ImDrawListSplitter_base_names };

static int _wrap_ImDrawList_CmdBuffer_set(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImVector< ImDrawCmd > *arg2 = (ImVector< ImDrawCmd > *) 0 ; SWIG_check_num_args("ImDrawList::CmdBuffer",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::CmdBuffer",1,"ImDrawList *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawList::CmdBuffer",2,"ImVector< ImDrawCmd > *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_CmdBuffer_set",1,SWIGTYPE_p_ImDrawList); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImDrawCmd_t,0))){
      SWIG_fail_ptr("ImDrawList_CmdBuffer_set",2,SWIGTYPE_p_ImVectorT_ImDrawCmd_t); }  if (arg1) (arg1)->CmdBuffer = *arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList_CmdBuffer_get(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImVector< ImDrawCmd > *result = 0 ; SWIG_check_num_args("ImDrawList::CmdBuffer",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::CmdBuffer",1,"ImDrawList *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_CmdBuffer_get",1,SWIGTYPE_p_ImDrawList); } 
    result = (ImVector< ImDrawCmd > *)& ((arg1)->CmdBuffer);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImDrawCmd_t,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImDrawList_IdxBuffer_set(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImVector< ofIndexType > *arg2 = (ImVector< ofIndexType > *) 0 ; SWIG_check_num_args("ImDrawList::IdxBuffer",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::IdxBuffer",1,"ImDrawList *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawList::IdxBuffer",2,"ImVector< ofIndexType > *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_IdxBuffer_set",1,SWIGTYPE_p_ImDrawList); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ofIndexType_t,0))){
      SWIG_fail_ptr("ImDrawList_IdxBuffer_set",2,SWIGTYPE_p_ImVectorT_ofIndexType_t); }  if (arg1) (arg1)->IdxBuffer = *arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList_IdxBuffer_get(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImVector< ofIndexType > *result = 0 ; SWIG_check_num_args("ImDrawList::IdxBuffer",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::IdxBuffer",1,"ImDrawList *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_IdxBuffer_get",1,SWIGTYPE_p_ImDrawList); } 
    result = (ImVector< ofIndexType > *)& ((arg1)->IdxBuffer);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ofIndexType_t,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImDrawList_VtxBuffer_set(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImVector< ImDrawVert > *arg2 = (ImVector< ImDrawVert > *) 0 ; SWIG_check_num_args("ImDrawList::VtxBuffer",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::VtxBuffer",1,"ImDrawList *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawList::VtxBuffer",2,"ImVector< ImDrawVert > *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_VtxBuffer_set",1,SWIGTYPE_p_ImDrawList); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImDrawVert_t,0))){
      SWIG_fail_ptr("ImDrawList_VtxBuffer_set",2,SWIGTYPE_p_ImVectorT_ImDrawVert_t); }  if (arg1) (arg1)->VtxBuffer = *arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList_VtxBuffer_get(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImVector< ImDrawVert > *result = 0 ; SWIG_check_num_args("ImDrawList::VtxBuffer",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::VtxBuffer",1,"ImDrawList *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_VtxBuffer_get",1,SWIGTYPE_p_ImDrawList); } 
    result = (ImVector< ImDrawVert > *)& ((arg1)->VtxBuffer);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImDrawVert_t,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImDrawList_Flags_set(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImDrawListFlags arg2 ; SWIG_check_num_args("ImDrawList::Flags",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::Flags",1,"ImDrawList *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawList::Flags",2,"ImDrawListFlags");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_Flags_set",1,SWIGTYPE_p_ImDrawList); }  arg2 = (ImDrawListFlags)lua_tonumber(L, 2);
    if (arg1) (arg1)->Flags = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList_Flags_get(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImDrawListFlags result; SWIG_check_num_args("ImDrawList::Flags",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::Flags",1,"ImDrawList *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_Flags_get",1,SWIGTYPE_p_ImDrawList); }  result = (ImDrawListFlags) ((arg1)->Flags);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList__VtxCurrentIdx_set(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    unsigned int arg2 ; SWIG_check_num_args("ImDrawList::_VtxCurrentIdx",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_VtxCurrentIdx",1,"ImDrawList *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawList::_VtxCurrentIdx",2,"unsigned int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList__VtxCurrentIdx_set",1,SWIGTYPE_p_ImDrawList); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (unsigned int)lua_tonumber(L, 2);
    if (arg1) (arg1)->_VtxCurrentIdx = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList__VtxCurrentIdx_get(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    unsigned int result; SWIG_check_num_args("ImDrawList::_VtxCurrentIdx",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_VtxCurrentIdx",1,"ImDrawList *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList__VtxCurrentIdx_get",1,SWIGTYPE_p_ImDrawList); } 
    result = (unsigned int) ((arg1)->_VtxCurrentIdx); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList__Data_set(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImDrawListSharedData *arg2 = (ImDrawListSharedData *) 0 ; SWIG_check_num_args("ImDrawList::_Data",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_Data",1,"ImDrawList *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawList::_Data",2,"ImDrawListSharedData *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList__Data_set",1,SWIGTYPE_p_ImDrawList); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImDrawListSharedData,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("ImDrawList__Data_set",2,SWIGTYPE_p_ImDrawListSharedData); }  if (arg1) (arg1)->_Data = arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList__Data_get(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImDrawListSharedData *result = 0 ; SWIG_check_num_args("ImDrawList::_Data",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_Data",1,"ImDrawList *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList__Data_get",1,SWIGTYPE_p_ImDrawList); }  result = (ImDrawListSharedData *) ((arg1)->_Data);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImDrawListSharedData,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImDrawList__VtxWritePtr_set(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImDrawVert *arg2 = (ImDrawVert *) 0 ; SWIG_check_num_args("ImDrawList::_VtxWritePtr",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_VtxWritePtr",1,"ImDrawList *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawList::_VtxWritePtr",2,"ImDrawVert *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList__VtxWritePtr_set",1,SWIGTYPE_p_ImDrawList); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImDrawVert,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("ImDrawList__VtxWritePtr_set",2,SWIGTYPE_p_ImDrawVert); }  if (arg1) (arg1)->_VtxWritePtr = arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList__VtxWritePtr_get(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImDrawVert *result = 0 ; SWIG_check_num_args("ImDrawList::_VtxWritePtr",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_VtxWritePtr",1,"ImDrawList *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList__VtxWritePtr_get",1,SWIGTYPE_p_ImDrawList); }  result = (ImDrawVert *) ((arg1)->_VtxWritePtr);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImDrawVert,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImDrawList__IdxWritePtr_set(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ofIndexType *arg2 = (ofIndexType *) 0 ; SWIG_check_num_args("ImDrawList::_IdxWritePtr",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_IdxWritePtr",1,"ImDrawList *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawList::_IdxWritePtr",2,"ofIndexType *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList__IdxWritePtr_set",1,SWIGTYPE_p_ImDrawList); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofIndexType,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("ImDrawList__IdxWritePtr_set",2,SWIGTYPE_p_ofIndexType); }  if (arg1) (arg1)->_IdxWritePtr = arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList__IdxWritePtr_get(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ofIndexType *result = 0 ; SWIG_check_num_args("ImDrawList::_IdxWritePtr",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_IdxWritePtr",1,"ImDrawList *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList__IdxWritePtr_get",1,SWIGTYPE_p_ImDrawList); }  result = (ofIndexType *) ((arg1)->_IdxWritePtr);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofIndexType,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImDrawList__Path_set(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImVector< ImVec2 > *arg2 = (ImVector< ImVec2 > *) 0 ; SWIG_check_num_args("ImDrawList::_Path",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_Path",1,"ImDrawList *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawList::_Path",2,"ImVector< ImVec2 > *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList__Path_set",1,SWIGTYPE_p_ImDrawList); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImVec2_t,0))){
      SWIG_fail_ptr("ImDrawList__Path_set",2,SWIGTYPE_p_ImVectorT_ImVec2_t); }  if (arg1) (arg1)->_Path = *arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList__Path_get(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImVector< ImVec2 > *result = 0 ; SWIG_check_num_args("ImDrawList::_Path",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_Path",1,"ImDrawList *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList__Path_get",1,SWIGTYPE_p_ImDrawList); }  result = (ImVector< ImVec2 > *)& ((arg1)->_Path);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImVec2_t,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImDrawList__CmdHeader_set(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImDrawCmdHeader *arg2 = (ImDrawCmdHeader *) 0 ; SWIG_check_num_args("ImDrawList::_CmdHeader",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_CmdHeader",1,"ImDrawList *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawList::_CmdHeader",2,"ImDrawCmdHeader *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList__CmdHeader_set",1,SWIGTYPE_p_ImDrawList); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImDrawCmdHeader,0))){
      SWIG_fail_ptr("ImDrawList__CmdHeader_set",2,SWIGTYPE_p_ImDrawCmdHeader); }  if (arg1) (arg1)->_CmdHeader = *arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList__CmdHeader_get(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImDrawCmdHeader *result = 0 ; SWIG_check_num_args("ImDrawList::_CmdHeader",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_CmdHeader",1,"ImDrawList *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList__CmdHeader_get",1,SWIGTYPE_p_ImDrawList); }  result = (ImDrawCmdHeader *)& ((arg1)->_CmdHeader);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImDrawCmdHeader,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImDrawList__Splitter_set(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImDrawListSplitter *arg2 = (ImDrawListSplitter *) 0 ; SWIG_check_num_args("ImDrawList::_Splitter",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_Splitter",1,"ImDrawList *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawList::_Splitter",2,"ImDrawListSplitter *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList__Splitter_set",1,SWIGTYPE_p_ImDrawList); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImDrawListSplitter,0))){
      SWIG_fail_ptr("ImDrawList__Splitter_set",2,SWIGTYPE_p_ImDrawListSplitter); }  if (arg1) (arg1)->_Splitter = *arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList__Splitter_get(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImDrawListSplitter *result = 0 ; SWIG_check_num_args("ImDrawList::_Splitter",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_Splitter",1,"ImDrawList *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList__Splitter_get",1,SWIGTYPE_p_ImDrawList); } 
    result = (ImDrawListSplitter *)& ((arg1)->_Splitter);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImDrawListSplitter,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImDrawList__ClipRectStack_set(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImVector< ImVec4 > *arg2 = (ImVector< ImVec4 > *) 0 ; SWIG_check_num_args("ImDrawList::_ClipRectStack",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_ClipRectStack",1,"ImDrawList *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawList::_ClipRectStack",2,"ImVector< ImVec4 > *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList__ClipRectStack_set",1,SWIGTYPE_p_ImDrawList); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImVec4_t,0))){
      SWIG_fail_ptr("ImDrawList__ClipRectStack_set",2,SWIGTYPE_p_ImVectorT_ImVec4_t); } 
    if (arg1) (arg1)->_ClipRectStack = *arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList__ClipRectStack_get(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImVector< ImVec4 > *result = 0 ; SWIG_check_num_args("ImDrawList::_ClipRectStack",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_ClipRectStack",1,"ImDrawList *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList__ClipRectStack_get",1,SWIGTYPE_p_ImDrawList); } 
    result = (ImVector< ImVec4 > *)& ((arg1)->_ClipRectStack);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImVec4_t,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImDrawList__TextureIdStack_set(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImVector< int > *arg2 = (ImVector< int > *) 0 ; SWIG_check_num_args("ImDrawList::_TextureIdStack",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_TextureIdStack",1,"ImDrawList *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawList::_TextureIdStack",2,"ImVector< int > *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList__TextureIdStack_set",1,SWIGTYPE_p_ImDrawList); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_int_t,0))){
      SWIG_fail_ptr("ImDrawList__TextureIdStack_set",2,SWIGTYPE_p_ImVectorT_int_t); } 
    if (arg1) (arg1)->_TextureIdStack = *arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList__TextureIdStack_get(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImVector< int > *result = 0 ; SWIG_check_num_args("ImDrawList::_TextureIdStack",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_TextureIdStack",1,"ImDrawList *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList__TextureIdStack_get",1,SWIGTYPE_p_ImDrawList); } 
    result = (ImVector< int > *)& ((arg1)->_TextureIdStack);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_int_t,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImDrawList__CallbacksDataBuf_set(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImVector< ImU8 > *arg2 = (ImVector< ImU8 > *) 0 ; SWIG_check_num_args("ImDrawList::_CallbacksDataBuf",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_CallbacksDataBuf",1,"ImDrawList *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawList::_CallbacksDataBuf",2,"ImVector< ImU8 > *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList__CallbacksDataBuf_set",1,SWIGTYPE_p_ImDrawList); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_unsigned_char_t,0))){
      SWIG_fail_ptr("ImDrawList__CallbacksDataBuf_set",2,SWIGTYPE_p_ImVectorT_unsigned_char_t); } 
    if (arg1) (arg1)->_CallbacksDataBuf = *arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList__CallbacksDataBuf_get(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImVector< ImU8 > *result = 0 ; SWIG_check_num_args("ImDrawList::_CallbacksDataBuf",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_CallbacksDataBuf",1,"ImDrawList *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList__CallbacksDataBuf_get",1,SWIGTYPE_p_ImDrawList); } 
    result = (ImVector< ImU8 > *)& ((arg1)->_CallbacksDataBuf);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImDrawList__FringeScale_set(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    float arg2 ; SWIG_check_num_args("ImDrawList::_FringeScale",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_FringeScale",1,"ImDrawList *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawList::_FringeScale",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList__FringeScale_set",1,SWIGTYPE_p_ImDrawList); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->_FringeScale = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList__FringeScale_get(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    float result; SWIG_check_num_args("ImDrawList::_FringeScale",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_FringeScale",1,"ImDrawList *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList__FringeScale_get",1,SWIGTYPE_p_ImDrawList); }  result = (float) ((arg1)->_FringeScale);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList__OwnerName_get(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    char *result = 0 ; SWIG_check_num_args("ImDrawList::_OwnerName",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_OwnerName",1,"ImDrawList *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList__OwnerName_get",1,SWIGTYPE_p_ImDrawList); }  result = (char *) ((arg1)->_OwnerName);
    lua_pushstring(L,(const char *)result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_ImDrawList(lua_State* L) { { int SWIG_arg = 0; ImDrawListSharedData *arg1 = (ImDrawListSharedData *) 0 ;
    ImDrawList *result = 0 ; SWIG_check_num_args("ImDrawList::ImDrawList",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::ImDrawList",1,"ImDrawListSharedData *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawListSharedData,0))){
      SWIG_fail_ptr("new_ImDrawList",1,SWIGTYPE_p_ImDrawListSharedData); }  result = (ImDrawList *)new ImDrawList(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImDrawList,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImDrawList_PushClipRect(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImVec2 *arg2 = 0 ; ImVec2 *arg3 = 0 ; bool arg4 = (bool) false ; SWIG_check_num_args("ImDrawList::PushClipRect",3,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PushClipRect",1,"ImDrawList *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::PushClipRect",2,"ImVec2 const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::PushClipRect",3,"ImVec2 const &");
    if(lua_gettop(L)>=4 && !lua_isboolean(L,4)) SWIG_fail_arg("ImDrawList::PushClipRect",4,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_PushClipRect",1,SWIGTYPE_p_ImDrawList); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_PushClipRect",2,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_PushClipRect",3,SWIGTYPE_p_ImVec2); }  if(lua_gettop(L)>=4){ arg4 = (lua_toboolean(L, 4)!=0);} 
    (arg1)->PushClipRect((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImDrawList_PushClipRectFullScreen(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    SWIG_check_num_args("ImDrawList::PushClipRectFullScreen",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PushClipRectFullScreen",1,"ImDrawList *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_PushClipRectFullScreen",1,SWIGTYPE_p_ImDrawList); }  (arg1)->PushClipRectFullScreen();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList_PopClipRect(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    SWIG_check_num_args("ImDrawList::PopClipRect",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PopClipRect",1,"ImDrawList *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_PopClipRect",1,SWIGTYPE_p_ImDrawList); }  (arg1)->PopClipRect(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList_PushTextureID(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ; int arg2 ;
    SWIG_check_num_args("ImDrawList::PushTextureID",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PushTextureID",1,"ImDrawList *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawList::PushTextureID",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_PushTextureID",1,SWIGTYPE_p_ImDrawList); }  arg2 = (int)lua_tonumber(L, 2);
    (arg1)->PushTextureID(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList_PopTextureID(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    SWIG_check_num_args("ImDrawList::PopTextureID",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PopTextureID",1,"ImDrawList *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_PopTextureID",1,SWIGTYPE_p_ImDrawList); }  (arg1)->PopTextureID(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList_GetClipRectMin(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImVec2 result; SWIG_check_num_args("ImDrawList::GetClipRectMin",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::GetClipRectMin",1,"ImDrawList const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_GetClipRectMin",1,SWIGTYPE_p_ImDrawList); } 
    result = ((ImDrawList const *)arg1)->GetClipRectMin(); { ImVec2 * resultptr = new ImVec2(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImDrawList_GetClipRectMax(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImVec2 result; SWIG_check_num_args("ImDrawList::GetClipRectMax",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::GetClipRectMax",1,"ImDrawList const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_GetClipRectMax",1,SWIGTYPE_p_ImDrawList); } 
    result = ((ImDrawList const *)arg1)->GetClipRectMax(); { ImVec2 * resultptr = new ImVec2(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImDrawList_AddLine(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ; ImVec2 *arg2 = 0 ;
    ImVec2 *arg3 = 0 ; ImU32 arg4 ; float arg5 = (float) 1.0 ; SWIG_check_num_args("ImDrawList::AddLine",4,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddLine",1,"ImDrawList *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::AddLine",2,"ImVec2 const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::AddLine",3,"ImVec2 const &");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::AddLine",4,"ImU32");
    if(lua_gettop(L)>=5 && !lua_isnumber(L,5)) SWIG_fail_arg("ImDrawList::AddLine",5,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_AddLine",1,SWIGTYPE_p_ImDrawList); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddLine",2,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddLine",3,SWIGTYPE_p_ImVec2); } 
    SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative"); arg4 = (ImU32)lua_tonumber(L, 4);
    if(lua_gettop(L)>=5){ arg5 = (float)lua_tonumber(L, 5);} 
    (arg1)->AddLine((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4,arg5); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImDrawList_AddRect(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ; ImVec2 *arg2 = 0 ;
    ImVec2 *arg3 = 0 ; ImU32 arg4 ; float arg5 = (float) 0.0 ; ImDrawFlags arg6 = (ImDrawFlags) 0 ; float arg7 = (float) 1.0 ;
    SWIG_check_num_args("ImDrawList::AddRect",4,7)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddRect",1,"ImDrawList *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::AddRect",2,"ImVec2 const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::AddRect",3,"ImVec2 const &");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::AddRect",4,"ImU32");
    if(lua_gettop(L)>=5 && !lua_isnumber(L,5)) SWIG_fail_arg("ImDrawList::AddRect",5,"float");
    if(lua_gettop(L)>=6 && !lua_isnumber(L,6)) SWIG_fail_arg("ImDrawList::AddRect",6,"ImDrawFlags");
    if(lua_gettop(L)>=7 && !lua_isnumber(L,7)) SWIG_fail_arg("ImDrawList::AddRect",7,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_AddRect",1,SWIGTYPE_p_ImDrawList); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddRect",2,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddRect",3,SWIGTYPE_p_ImVec2); } 
    SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative"); arg4 = (ImU32)lua_tonumber(L, 4);
    if(lua_gettop(L)>=5){ arg5 = (float)lua_tonumber(L, 5);}  if(lua_gettop(L)>=6){ arg6 = (ImDrawFlags)lua_tonumber(L, 6);} 
    if(lua_gettop(L)>=7){ arg7 = (float)lua_tonumber(L, 7);} 
    (arg1)->AddRect((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4,arg5,arg6,arg7); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImDrawList_AddRectFilled(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImVec2 *arg2 = 0 ; ImVec2 *arg3 = 0 ; ImU32 arg4 ; float arg5 = (float) 0.0 ; ImDrawFlags arg6 = (ImDrawFlags) 0 ;
    SWIG_check_num_args("ImDrawList::AddRectFilled",4,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddRectFilled",1,"ImDrawList *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::AddRectFilled",2,"ImVec2 const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::AddRectFilled",3,"ImVec2 const &");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::AddRectFilled",4,"ImU32");
    if(lua_gettop(L)>=5 && !lua_isnumber(L,5)) SWIG_fail_arg("ImDrawList::AddRectFilled",5,"float");
    if(lua_gettop(L)>=6 && !lua_isnumber(L,6)) SWIG_fail_arg("ImDrawList::AddRectFilled",6,"ImDrawFlags");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_AddRectFilled",1,SWIGTYPE_p_ImDrawList); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddRectFilled",2,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddRectFilled",3,SWIGTYPE_p_ImVec2); } 
    SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative"); arg4 = (ImU32)lua_tonumber(L, 4);
    if(lua_gettop(L)>=5){ arg5 = (float)lua_tonumber(L, 5);}  if(lua_gettop(L)>=6){ arg6 = (ImDrawFlags)lua_tonumber(L, 6);} 
    (arg1)->AddRectFilled((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4,arg5,arg6); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImDrawList_AddRectFilledMultiColor(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImVec2 *arg2 = 0 ; ImVec2 *arg3 = 0 ; ImU32 arg4 ; ImU32 arg5 ; ImU32 arg6 ; ImU32 arg7 ;
    SWIG_check_num_args("ImDrawList::AddRectFilledMultiColor",7,7)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddRectFilledMultiColor",1,"ImDrawList *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::AddRectFilledMultiColor",2,"ImVec2 const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::AddRectFilledMultiColor",3,"ImVec2 const &");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::AddRectFilledMultiColor",4,"ImU32");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ImDrawList::AddRectFilledMultiColor",5,"ImU32");
    if(!lua_isnumber(L,6)) SWIG_fail_arg("ImDrawList::AddRectFilledMultiColor",6,"ImU32");
    if(!lua_isnumber(L,7)) SWIG_fail_arg("ImDrawList::AddRectFilledMultiColor",7,"ImU32");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_AddRectFilledMultiColor",1,SWIGTYPE_p_ImDrawList); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddRectFilledMultiColor",2,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddRectFilledMultiColor",3,SWIGTYPE_p_ImVec2); } 
    SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative"); arg4 = (ImU32)lua_tonumber(L, 4);
    SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative"); arg5 = (ImU32)lua_tonumber(L, 5);
    SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative"); arg6 = (ImU32)lua_tonumber(L, 6);
    SWIG_contract_assert((lua_tonumber(L,7)>=0),"number must not be negative"); arg7 = (ImU32)lua_tonumber(L, 7);
    (arg1)->AddRectFilledMultiColor((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4,arg5,arg6,arg7); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList_AddQuad(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ; ImVec2 *arg2 = 0 ;
    ImVec2 *arg3 = 0 ; ImVec2 *arg4 = 0 ; ImVec2 *arg5 = 0 ; ImU32 arg6 ; float arg7 = (float) 1.0 ;
    SWIG_check_num_args("ImDrawList::AddQuad",6,7)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddQuad",1,"ImDrawList *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::AddQuad",2,"ImVec2 const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::AddQuad",3,"ImVec2 const &");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImDrawList::AddQuad",4,"ImVec2 const &");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ImDrawList::AddQuad",5,"ImVec2 const &");
    if(!lua_isnumber(L,6)) SWIG_fail_arg("ImDrawList::AddQuad",6,"ImU32");
    if(lua_gettop(L)>=7 && !lua_isnumber(L,7)) SWIG_fail_arg("ImDrawList::AddQuad",7,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_AddQuad",1,SWIGTYPE_p_ImDrawList); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddQuad",2,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddQuad",3,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddQuad",4,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddQuad",5,SWIGTYPE_p_ImVec2); } 
    SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative"); arg6 = (ImU32)lua_tonumber(L, 6);
    if(lua_gettop(L)>=7){ arg7 = (float)lua_tonumber(L, 7);} 
    (arg1)->AddQuad((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,arg6,arg7);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList_AddQuadFilled(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImVec2 *arg2 = 0 ; ImVec2 *arg3 = 0 ; ImVec2 *arg4 = 0 ; ImVec2 *arg5 = 0 ; ImU32 arg6 ;
    SWIG_check_num_args("ImDrawList::AddQuadFilled",6,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddQuadFilled",1,"ImDrawList *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::AddQuadFilled",2,"ImVec2 const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::AddQuadFilled",3,"ImVec2 const &");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImDrawList::AddQuadFilled",4,"ImVec2 const &");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ImDrawList::AddQuadFilled",5,"ImVec2 const &");
    if(!lua_isnumber(L,6)) SWIG_fail_arg("ImDrawList::AddQuadFilled",6,"ImU32");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_AddQuadFilled",1,SWIGTYPE_p_ImDrawList); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddQuadFilled",2,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddQuadFilled",3,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddQuadFilled",4,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddQuadFilled",5,SWIGTYPE_p_ImVec2); } 
    SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative"); arg6 = (ImU32)lua_tonumber(L, 6);
    (arg1)->AddQuadFilled((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,arg6);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList_AddTriangle(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImVec2 *arg2 = 0 ; ImVec2 *arg3 = 0 ; ImVec2 *arg4 = 0 ; ImU32 arg5 ; float arg6 = (float) 1.0 ;
    SWIG_check_num_args("ImDrawList::AddTriangle",5,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddTriangle",1,"ImDrawList *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::AddTriangle",2,"ImVec2 const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::AddTriangle",3,"ImVec2 const &");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImDrawList::AddTriangle",4,"ImVec2 const &");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ImDrawList::AddTriangle",5,"ImU32");
    if(lua_gettop(L)>=6 && !lua_isnumber(L,6)) SWIG_fail_arg("ImDrawList::AddTriangle",6,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_AddTriangle",1,SWIGTYPE_p_ImDrawList); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddTriangle",2,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddTriangle",3,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddTriangle",4,SWIGTYPE_p_ImVec2); } 
    SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative"); arg5 = (ImU32)lua_tonumber(L, 5);
    if(lua_gettop(L)>=6){ arg6 = (float)lua_tonumber(L, 6);} 
    (arg1)->AddTriangle((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,arg5,arg6); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList_AddTriangleFilled(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImVec2 *arg2 = 0 ; ImVec2 *arg3 = 0 ; ImVec2 *arg4 = 0 ; ImU32 arg5 ;
    SWIG_check_num_args("ImDrawList::AddTriangleFilled",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddTriangleFilled",1,"ImDrawList *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::AddTriangleFilled",2,"ImVec2 const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::AddTriangleFilled",3,"ImVec2 const &");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImDrawList::AddTriangleFilled",4,"ImVec2 const &");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ImDrawList::AddTriangleFilled",5,"ImU32");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_AddTriangleFilled",1,SWIGTYPE_p_ImDrawList); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddTriangleFilled",2,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddTriangleFilled",3,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddTriangleFilled",4,SWIGTYPE_p_ImVec2); } 
    SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative"); arg5 = (ImU32)lua_tonumber(L, 5);
    (arg1)->AddTriangleFilled((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,arg5); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList_AddCircle(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImVec2 *arg2 = 0 ; float arg3 ; ImU32 arg4 ; int arg5 = (int) 0 ; float arg6 = (float) 1.0 ;
    SWIG_check_num_args("ImDrawList::AddCircle",4,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddCircle",1,"ImDrawList *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::AddCircle",2,"ImVec2 const &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImDrawList::AddCircle",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::AddCircle",4,"ImU32");
    if(lua_gettop(L)>=5 && !lua_isnumber(L,5)) SWIG_fail_arg("ImDrawList::AddCircle",5,"int");
    if(lua_gettop(L)>=6 && !lua_isnumber(L,6)) SWIG_fail_arg("ImDrawList::AddCircle",6,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_AddCircle",1,SWIGTYPE_p_ImDrawList); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddCircle",2,SWIGTYPE_p_ImVec2); }  arg3 = (float)lua_tonumber(L, 3);
    SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative"); arg4 = (ImU32)lua_tonumber(L, 4);
    if(lua_gettop(L)>=5){ arg5 = (int)lua_tonumber(L, 5);}  if(lua_gettop(L)>=6){ arg6 = (float)lua_tonumber(L, 6);} 
    (arg1)->AddCircle((ImVec2 const &)*arg2,arg3,arg4,arg5,arg6); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList_AddCircleFilled(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImVec2 *arg2 = 0 ; float arg3 ; ImU32 arg4 ; int arg5 = (int) 0 ; SWIG_check_num_args("ImDrawList::AddCircleFilled",4,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddCircleFilled",1,"ImDrawList *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::AddCircleFilled",2,"ImVec2 const &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImDrawList::AddCircleFilled",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::AddCircleFilled",4,"ImU32");
    if(lua_gettop(L)>=5 && !lua_isnumber(L,5)) SWIG_fail_arg("ImDrawList::AddCircleFilled",5,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_AddCircleFilled",1,SWIGTYPE_p_ImDrawList); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddCircleFilled",2,SWIGTYPE_p_ImVec2); }  arg3 = (float)lua_tonumber(L, 3);
    SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative"); arg4 = (ImU32)lua_tonumber(L, 4);
    if(lua_gettop(L)>=5){ arg5 = (int)lua_tonumber(L, 5);}  (arg1)->AddCircleFilled((ImVec2 const &)*arg2,arg3,arg4,arg5);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList_AddNgon(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ; ImVec2 *arg2 = 0 ;
    float arg3 ; ImU32 arg4 ; int arg5 ; float arg6 = (float) 1.0 ; SWIG_check_num_args("ImDrawList::AddNgon",5,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddNgon",1,"ImDrawList *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::AddNgon",2,"ImVec2 const &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImDrawList::AddNgon",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::AddNgon",4,"ImU32");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ImDrawList::AddNgon",5,"int");
    if(lua_gettop(L)>=6 && !lua_isnumber(L,6)) SWIG_fail_arg("ImDrawList::AddNgon",6,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_AddNgon",1,SWIGTYPE_p_ImDrawList); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddNgon",2,SWIGTYPE_p_ImVec2); }  arg3 = (float)lua_tonumber(L, 3);
    SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative"); arg4 = (ImU32)lua_tonumber(L, 4);
    arg5 = (int)lua_tonumber(L, 5); if(lua_gettop(L)>=6){ arg6 = (float)lua_tonumber(L, 6);} 
    (arg1)->AddNgon((ImVec2 const &)*arg2,arg3,arg4,arg5,arg6); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList_AddNgonFilled(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImVec2 *arg2 = 0 ; float arg3 ; ImU32 arg4 ; int arg5 ; SWIG_check_num_args("ImDrawList::AddNgonFilled",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddNgonFilled",1,"ImDrawList *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::AddNgonFilled",2,"ImVec2 const &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImDrawList::AddNgonFilled",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::AddNgonFilled",4,"ImU32");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ImDrawList::AddNgonFilled",5,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_AddNgonFilled",1,SWIGTYPE_p_ImDrawList); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddNgonFilled",2,SWIGTYPE_p_ImVec2); }  arg3 = (float)lua_tonumber(L, 3);
    SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative"); arg4 = (ImU32)lua_tonumber(L, 4);
    arg5 = (int)lua_tonumber(L, 5); (arg1)->AddNgonFilled((ImVec2 const &)*arg2,arg3,arg4,arg5); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList_AddEllipse(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImVec2 *arg2 = 0 ; ImVec2 *arg3 = 0 ; ImU32 arg4 ; float arg5 = (float) 0.0 ; int arg6 = (int) 0 ;
    float arg7 = (float) 1.0 ; SWIG_check_num_args("ImDrawList::AddEllipse",4,7)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddEllipse",1,"ImDrawList *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::AddEllipse",2,"ImVec2 const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::AddEllipse",3,"ImVec2 const &");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::AddEllipse",4,"ImU32");
    if(lua_gettop(L)>=5 && !lua_isnumber(L,5)) SWIG_fail_arg("ImDrawList::AddEllipse",5,"float");
    if(lua_gettop(L)>=6 && !lua_isnumber(L,6)) SWIG_fail_arg("ImDrawList::AddEllipse",6,"int");
    if(lua_gettop(L)>=7 && !lua_isnumber(L,7)) SWIG_fail_arg("ImDrawList::AddEllipse",7,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_AddEllipse",1,SWIGTYPE_p_ImDrawList); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddEllipse",2,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddEllipse",3,SWIGTYPE_p_ImVec2); } 
    SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative"); arg4 = (ImU32)lua_tonumber(L, 4);
    if(lua_gettop(L)>=5){ arg5 = (float)lua_tonumber(L, 5);}  if(lua_gettop(L)>=6){ arg6 = (int)lua_tonumber(L, 6);} 
    if(lua_gettop(L)>=7){ arg7 = (float)lua_tonumber(L, 7);} 
    (arg1)->AddEllipse((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4,arg5,arg6,arg7); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImDrawList_AddEllipseFilled(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImVec2 *arg2 = 0 ; ImVec2 *arg3 = 0 ; ImU32 arg4 ; float arg5 = (float) 0.0 ; int arg6 = (int) 0 ;
    SWIG_check_num_args("ImDrawList::AddEllipseFilled",4,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddEllipseFilled",1,"ImDrawList *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::AddEllipseFilled",2,"ImVec2 const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::AddEllipseFilled",3,"ImVec2 const &");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::AddEllipseFilled",4,"ImU32");
    if(lua_gettop(L)>=5 && !lua_isnumber(L,5)) SWIG_fail_arg("ImDrawList::AddEllipseFilled",5,"float");
    if(lua_gettop(L)>=6 && !lua_isnumber(L,6)) SWIG_fail_arg("ImDrawList::AddEllipseFilled",6,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_AddEllipseFilled",1,SWIGTYPE_p_ImDrawList); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddEllipseFilled",2,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddEllipseFilled",3,SWIGTYPE_p_ImVec2); } 
    SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative"); arg4 = (ImU32)lua_tonumber(L, 4);
    if(lua_gettop(L)>=5){ arg5 = (float)lua_tonumber(L, 5);}  if(lua_gettop(L)>=6){ arg6 = (int)lua_tonumber(L, 6);} 
    (arg1)->AddEllipseFilled((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4,arg5,arg6); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImDrawList_AddText__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImVec2 *arg2 = 0 ; ImU32 arg3 ; char *arg4 = (char *) 0 ; char *arg5 = (char *) NULL ;
    SWIG_check_num_args("ImDrawList::AddText",4,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddText",1,"ImDrawList *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::AddText",2,"ImVec2 const &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImDrawList::AddText",3,"ImU32");
    if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("ImDrawList::AddText",4,"char const *");
    if(lua_gettop(L)>=5 && !SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImDrawList::AddText",5,"char const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_AddText",1,SWIGTYPE_p_ImDrawList); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddText",2,SWIGTYPE_p_ImVec2); } 
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative"); arg3 = (ImU32)lua_tonumber(L, 3);
    arg4 = (char *)lua_tostring(L, 4); if(lua_gettop(L)>=5){ arg5 = (char *)lua_tostring(L, 5);} 
    (arg1)->AddText((ImVec2 const &)*arg2,arg3,(char const *)arg4,(char const *)arg5); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImDrawList_AddText__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImFont *arg2 = (ImFont *) 0 ; float arg3 ; ImVec2 *arg4 = 0 ; ImU32 arg5 ; char *arg6 = (char *) 0 ;
    char *arg7 = (char *) NULL ; float arg8 = (float) 0.0 ; ImVec4 *arg9 = (ImVec4 *) NULL ;
    SWIG_check_num_args("ImDrawList::AddText",6,9)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddText",1,"ImDrawList *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawList::AddText",2,"ImFont *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImDrawList::AddText",3,"float");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImDrawList::AddText",4,"ImVec2 const &");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ImDrawList::AddText",5,"ImU32");
    if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImDrawList::AddText",6,"char const *");
    if(lua_gettop(L)>=7 && !SWIG_lua_isnilstring(L,7)) SWIG_fail_arg("ImDrawList::AddText",7,"char const *");
    if(lua_gettop(L)>=8 && !lua_isnumber(L,8)) SWIG_fail_arg("ImDrawList::AddText",8,"float");
    if(lua_gettop(L)>=9 && !SWIG_isptrtype(L,9)) SWIG_fail_arg("ImDrawList::AddText",9,"ImVec4 const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_AddText",1,SWIGTYPE_p_ImDrawList); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImDrawList_AddText",2,SWIGTYPE_p_ImFont); }  arg3 = (float)lua_tonumber(L, 3);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddText",4,SWIGTYPE_p_ImVec2); } 
    SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative"); arg5 = (ImU32)lua_tonumber(L, 5);
    arg6 = (char *)lua_tostring(L, 6); if(lua_gettop(L)>=7){ arg7 = (char *)lua_tostring(L, 7);}  if(lua_gettop(L)>=8){
      arg8 = (float)lua_tonumber(L, 8);}  if(lua_gettop(L)>=9){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_ImVec4,0))){
        SWIG_fail_ptr("ImDrawList_AddText",9,SWIGTYPE_p_ImVec4); }  } 
    (arg1)->AddText(arg2,arg3,(ImVec2 const &)*arg4,arg5,(char const *)arg6,(char const *)arg7,arg8,(ImVec4 const *)arg9);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList_AddText(lua_State* L) { int argc; int argv[10]={ 1,2,3,4,5,6,7,8,9,10} ; argc = lua_gettop(L);
  if ((argc >= 4) && (argc <= 5)) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = SWIG_lua_isnilstring(L,argv[3]); }  if (_v) { if (argc <= 4) { return _wrap_ImDrawList_AddText__SWIG_0(L);}  {
              _v = SWIG_lua_isnilstring(L,argv[4]); }  if (_v) { return _wrap_ImDrawList_AddText__SWIG_0(L);}  }  }  }  }  } 
  if ((argc >= 6) && (argc <= 9)) { int _v = 0; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ImDrawList, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ImFont, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ImVec2, SWIG_POINTER_NO_NULL)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = SWIG_lua_isnilstring(L,argv[5]); }  if (_v) { if (argc <= 6) { return _wrap_ImDrawList_AddText__SWIG_1(L);}
                 { _v = SWIG_lua_isnilstring(L,argv[6]); }  if (_v) { if (argc <= 7) {
                    return _wrap_ImDrawList_AddText__SWIG_1(L);}  { _v = lua_isnumber(L,argv[7]); }  if (_v) { if (argc <= 8) {
                      return _wrap_ImDrawList_AddText__SWIG_1(L);}  { void *ptr;
                      if (SWIG_isptrtype(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_p_ImVec4, 0)) {
                        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ImDrawList_AddText__SWIG_1(L);}  }  }  }  }  }  }
         }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImDrawList_AddText'\n"
  "  Possible C/C++ prototypes are:\n" "    ImDrawList::AddText(ImVec2 const &,ImU32,char const *,char const *)\n"
  "    ImDrawList::AddText(ImFont *,float,ImVec2 const &,ImU32,char const *,char const *,float,ImVec4 const *)\n");
  lua_error(L);return 0; }
static int _wrap_ImDrawList_AddBezierCubic(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImVec2 *arg2 = 0 ; ImVec2 *arg3 = 0 ; ImVec2 *arg4 = 0 ; ImVec2 *arg5 = 0 ; ImU32 arg6 ; float arg7 ; int arg8 = (int) 0 ;
    SWIG_check_num_args("ImDrawList::AddBezierCubic",7,8)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddBezierCubic",1,"ImDrawList *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::AddBezierCubic",2,"ImVec2 const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::AddBezierCubic",3,"ImVec2 const &");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImDrawList::AddBezierCubic",4,"ImVec2 const &");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ImDrawList::AddBezierCubic",5,"ImVec2 const &");
    if(!lua_isnumber(L,6)) SWIG_fail_arg("ImDrawList::AddBezierCubic",6,"ImU32");
    if(!lua_isnumber(L,7)) SWIG_fail_arg("ImDrawList::AddBezierCubic",7,"float");
    if(lua_gettop(L)>=8 && !lua_isnumber(L,8)) SWIG_fail_arg("ImDrawList::AddBezierCubic",8,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_AddBezierCubic",1,SWIGTYPE_p_ImDrawList); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddBezierCubic",2,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddBezierCubic",3,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddBezierCubic",4,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddBezierCubic",5,SWIGTYPE_p_ImVec2); } 
    SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative"); arg6 = (ImU32)lua_tonumber(L, 6);
    arg7 = (float)lua_tonumber(L, 7); if(lua_gettop(L)>=8){ arg8 = (int)lua_tonumber(L, 8);} 
    (arg1)->AddBezierCubic((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,arg6,arg7,arg8);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList_AddBezierQuadratic(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImVec2 *arg2 = 0 ; ImVec2 *arg3 = 0 ; ImVec2 *arg4 = 0 ; ImU32 arg5 ; float arg6 ; int arg7 = (int) 0 ;
    SWIG_check_num_args("ImDrawList::AddBezierQuadratic",6,7)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddBezierQuadratic",1,"ImDrawList *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::AddBezierQuadratic",2,"ImVec2 const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::AddBezierQuadratic",3,"ImVec2 const &");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImDrawList::AddBezierQuadratic",4,"ImVec2 const &");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ImDrawList::AddBezierQuadratic",5,"ImU32");
    if(!lua_isnumber(L,6)) SWIG_fail_arg("ImDrawList::AddBezierQuadratic",6,"float");
    if(lua_gettop(L)>=7 && !lua_isnumber(L,7)) SWIG_fail_arg("ImDrawList::AddBezierQuadratic",7,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_AddBezierQuadratic",1,SWIGTYPE_p_ImDrawList); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddBezierQuadratic",2,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddBezierQuadratic",3,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddBezierQuadratic",4,SWIGTYPE_p_ImVec2); } 
    SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative"); arg5 = (ImU32)lua_tonumber(L, 5);
    arg6 = (float)lua_tonumber(L, 6); if(lua_gettop(L)>=7){ arg7 = (int)lua_tonumber(L, 7);} 
    (arg1)->AddBezierQuadratic((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,arg5,arg6,arg7);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList_AddPolyline(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImVec2 *arg2 = (ImVec2 *) 0 ; int arg3 ; ImU32 arg4 ; ImDrawFlags arg5 ; float arg6 ;
    SWIG_check_num_args("ImDrawList::AddPolyline",6,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddPolyline",1,"ImDrawList *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawList::AddPolyline",2,"ImVec2 const *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImDrawList::AddPolyline",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::AddPolyline",4,"ImU32");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ImDrawList::AddPolyline",5,"ImDrawFlags");
    if(!lua_isnumber(L,6)) SWIG_fail_arg("ImDrawList::AddPolyline",6,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_AddPolyline",1,SWIGTYPE_p_ImDrawList); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddPolyline",2,SWIGTYPE_p_ImVec2); }  arg3 = (int)lua_tonumber(L, 3);
    SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative"); arg4 = (ImU32)lua_tonumber(L, 4);
    arg5 = (ImDrawFlags)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6);
    (arg1)->AddPolyline((ImVec2 const *)arg2,arg3,arg4,arg5,arg6); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImDrawList_AddConvexPolyFilled(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImVec2 *arg2 = (ImVec2 *) 0 ; int arg3 ; ImU32 arg4 ; SWIG_check_num_args("ImDrawList::AddConvexPolyFilled",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddConvexPolyFilled",1,"ImDrawList *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawList::AddConvexPolyFilled",2,"ImVec2 const *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImDrawList::AddConvexPolyFilled",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::AddConvexPolyFilled",4,"ImU32");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_AddConvexPolyFilled",1,SWIGTYPE_p_ImDrawList); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddConvexPolyFilled",2,SWIGTYPE_p_ImVec2); }  arg3 = (int)lua_tonumber(L, 3);
    SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative"); arg4 = (ImU32)lua_tonumber(L, 4);
    (arg1)->AddConvexPolyFilled((ImVec2 const *)arg2,arg3,arg4); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList_AddConcavePolyFilled(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImVec2 *arg2 = (ImVec2 *) 0 ; int arg3 ; ImU32 arg4 ; SWIG_check_num_args("ImDrawList::AddConcavePolyFilled",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddConcavePolyFilled",1,"ImDrawList *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawList::AddConcavePolyFilled",2,"ImVec2 const *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImDrawList::AddConcavePolyFilled",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::AddConcavePolyFilled",4,"ImU32");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_AddConcavePolyFilled",1,SWIGTYPE_p_ImDrawList); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddConcavePolyFilled",2,SWIGTYPE_p_ImVec2); }  arg3 = (int)lua_tonumber(L, 3);
    SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative"); arg4 = (ImU32)lua_tonumber(L, 4);
    (arg1)->AddConcavePolyFilled((ImVec2 const *)arg2,arg3,arg4); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList_AddImage(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ; int arg2 ;
    ImVec2 *arg3 = 0 ; ImVec2 *arg4 = 0 ; ImVec2 const &arg5_defvalue = ImVec2(0, 0) ;
    ImVec2 *arg5 = (ImVec2 *) &arg5_defvalue ; ImVec2 const &arg6_defvalue = ImVec2(1, 1) ;
    ImVec2 *arg6 = (ImVec2 *) &arg6_defvalue ;
    ImU32 arg7 = (ImU32) (((ImU32) (255) << 24)|((ImU32) (255) << 16)|((ImU32) (255) << 8)|((ImU32) (255) << 0)) ;
    SWIG_check_num_args("ImDrawList::AddImage",4,7)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddImage",1,"ImDrawList *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawList::AddImage",2,"int");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::AddImage",3,"ImVec2 const &");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImDrawList::AddImage",4,"ImVec2 const &");
    if(lua_gettop(L)>=5 && !lua_isuserdata(L,5)) SWIG_fail_arg("ImDrawList::AddImage",5,"ImVec2 const &");
    if(lua_gettop(L)>=6 && !lua_isuserdata(L,6)) SWIG_fail_arg("ImDrawList::AddImage",6,"ImVec2 const &");
    if(lua_gettop(L)>=7 && !lua_isnumber(L,7)) SWIG_fail_arg("ImDrawList::AddImage",7,"ImU32");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_AddImage",1,SWIGTYPE_p_ImDrawList); }  arg2 = (int)lua_tonumber(L, 2);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddImage",3,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddImage",4,SWIGTYPE_p_ImVec2); }  if(lua_gettop(L)>=5){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImVec2,0))){
        SWIG_fail_ptr("ImDrawList_AddImage",5,SWIGTYPE_p_ImVec2); }  }  if(lua_gettop(L)>=6){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ImVec2,0))){
        SWIG_fail_ptr("ImDrawList_AddImage",6,SWIGTYPE_p_ImVec2); }  }  if(lua_gettop(L)>=7){
      SWIG_contract_assert((lua_tonumber(L,7)>=0),"number must not be negative"); arg7 = (ImU32)lua_tonumber(L, 7);} 
    (arg1)->AddImage(arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec2 const &)*arg6,arg7);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList_AddImageQuad(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ; int arg2 ;
    ImVec2 *arg3 = 0 ; ImVec2 *arg4 = 0 ; ImVec2 *arg5 = 0 ; ImVec2 *arg6 = 0 ; ImVec2 const &arg7_defvalue = ImVec2(0, 0) ;
    ImVec2 *arg7 = (ImVec2 *) &arg7_defvalue ; ImVec2 const &arg8_defvalue = ImVec2(1, 0) ;
    ImVec2 *arg8 = (ImVec2 *) &arg8_defvalue ; ImVec2 const &arg9_defvalue = ImVec2(1, 1) ;
    ImVec2 *arg9 = (ImVec2 *) &arg9_defvalue ; ImVec2 const &arg10_defvalue = ImVec2(0, 1) ;
    ImVec2 *arg10 = (ImVec2 *) &arg10_defvalue ;
    ImU32 arg11 = (ImU32) (((ImU32) (255) << 24)|((ImU32) (255) << 16)|((ImU32) (255) << 8)|((ImU32) (255) << 0)) ;
    SWIG_check_num_args("ImDrawList::AddImageQuad",6,11)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddImageQuad",1,"ImDrawList *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawList::AddImageQuad",2,"int");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::AddImageQuad",3,"ImVec2 const &");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImDrawList::AddImageQuad",4,"ImVec2 const &");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ImDrawList::AddImageQuad",5,"ImVec2 const &");
    if(!lua_isuserdata(L,6)) SWIG_fail_arg("ImDrawList::AddImageQuad",6,"ImVec2 const &");
    if(lua_gettop(L)>=7 && !lua_isuserdata(L,7)) SWIG_fail_arg("ImDrawList::AddImageQuad",7,"ImVec2 const &");
    if(lua_gettop(L)>=8 && !lua_isuserdata(L,8)) SWIG_fail_arg("ImDrawList::AddImageQuad",8,"ImVec2 const &");
    if(lua_gettop(L)>=9 && !lua_isuserdata(L,9)) SWIG_fail_arg("ImDrawList::AddImageQuad",9,"ImVec2 const &");
    if(lua_gettop(L)>=10 && !lua_isuserdata(L,10)) SWIG_fail_arg("ImDrawList::AddImageQuad",10,"ImVec2 const &");
    if(lua_gettop(L)>=11 && !lua_isnumber(L,11)) SWIG_fail_arg("ImDrawList::AddImageQuad",11,"ImU32");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_AddImageQuad",1,SWIGTYPE_p_ImDrawList); }  arg2 = (int)lua_tonumber(L, 2);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddImageQuad",3,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddImageQuad",4,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddImageQuad",5,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddImageQuad",6,SWIGTYPE_p_ImVec2); }  if(lua_gettop(L)>=7){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_ImVec2,0))){
        SWIG_fail_ptr("ImDrawList_AddImageQuad",7,SWIGTYPE_p_ImVec2); }  }  if(lua_gettop(L)>=8){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_ImVec2,0))){
        SWIG_fail_ptr("ImDrawList_AddImageQuad",8,SWIGTYPE_p_ImVec2); }  }  if(lua_gettop(L)>=9){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_ImVec2,0))){
        SWIG_fail_ptr("ImDrawList_AddImageQuad",9,SWIGTYPE_p_ImVec2); }  }  if(lua_gettop(L)>=10){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_ImVec2,0))){
        SWIG_fail_ptr("ImDrawList_AddImageQuad",10,SWIGTYPE_p_ImVec2); }  }  if(lua_gettop(L)>=11){
      SWIG_contract_assert((lua_tonumber(L,11)>=0),"number must not be negative"); arg11 = (ImU32)lua_tonumber(L, 11);} 
    (arg1)->AddImageQuad(arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec2 const &)*arg6,(ImVec2 const &)*arg7,(ImVec2 const &)*arg8,(ImVec2 const &)*arg9,(ImVec2 const &)*arg10,arg11);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList_AddImageRounded(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ; int arg2 ;
    ImVec2 *arg3 = 0 ; ImVec2 *arg4 = 0 ; ImVec2 *arg5 = 0 ; ImVec2 *arg6 = 0 ; ImU32 arg7 ; float arg8 ;
    ImDrawFlags arg9 = (ImDrawFlags) 0 ; SWIG_check_num_args("ImDrawList::AddImageRounded",8,9)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddImageRounded",1,"ImDrawList *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawList::AddImageRounded",2,"int");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::AddImageRounded",3,"ImVec2 const &");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImDrawList::AddImageRounded",4,"ImVec2 const &");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ImDrawList::AddImageRounded",5,"ImVec2 const &");
    if(!lua_isuserdata(L,6)) SWIG_fail_arg("ImDrawList::AddImageRounded",6,"ImVec2 const &");
    if(!lua_isnumber(L,7)) SWIG_fail_arg("ImDrawList::AddImageRounded",7,"ImU32");
    if(!lua_isnumber(L,8)) SWIG_fail_arg("ImDrawList::AddImageRounded",8,"float");
    if(lua_gettop(L)>=9 && !lua_isnumber(L,9)) SWIG_fail_arg("ImDrawList::AddImageRounded",9,"ImDrawFlags");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_AddImageRounded",1,SWIGTYPE_p_ImDrawList); }  arg2 = (int)lua_tonumber(L, 2);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddImageRounded",3,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddImageRounded",4,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddImageRounded",5,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_AddImageRounded",6,SWIGTYPE_p_ImVec2); } 
    SWIG_contract_assert((lua_tonumber(L,7)>=0),"number must not be negative"); arg7 = (ImU32)lua_tonumber(L, 7);
    arg8 = (float)lua_tonumber(L, 8); if(lua_gettop(L)>=9){ arg9 = (ImDrawFlags)lua_tonumber(L, 9);} 
    (arg1)->AddImageRounded(arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec2 const &)*arg6,arg7,arg8,arg9);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList_PathClear(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    SWIG_check_num_args("ImDrawList::PathClear",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PathClear",1,"ImDrawList *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_PathClear",1,SWIGTYPE_p_ImDrawList); }  (arg1)->PathClear(); return SWIG_arg; fail: SWIGUNUSED; }
   lua_error(L); return 0; }
static int _wrap_ImDrawList_PathLineTo(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImVec2 *arg2 = 0 ; SWIG_check_num_args("ImDrawList::PathLineTo",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PathLineTo",1,"ImDrawList *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::PathLineTo",2,"ImVec2 const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_PathLineTo",1,SWIGTYPE_p_ImDrawList); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_PathLineTo",2,SWIGTYPE_p_ImVec2); }  (arg1)->PathLineTo((ImVec2 const &)*arg2); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList_PathLineToMergeDuplicate(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImVec2 *arg2 = 0 ; SWIG_check_num_args("ImDrawList::PathLineToMergeDuplicate",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PathLineToMergeDuplicate",1,"ImDrawList *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::PathLineToMergeDuplicate",2,"ImVec2 const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_PathLineToMergeDuplicate",1,SWIGTYPE_p_ImDrawList); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_PathLineToMergeDuplicate",2,SWIGTYPE_p_ImVec2); } 
    (arg1)->PathLineToMergeDuplicate((ImVec2 const &)*arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList_PathFillConvex(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImU32 arg2 ; SWIG_check_num_args("ImDrawList::PathFillConvex",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PathFillConvex",1,"ImDrawList *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawList::PathFillConvex",2,"ImU32");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_PathFillConvex",1,SWIGTYPE_p_ImDrawList); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (ImU32)lua_tonumber(L, 2);
    (arg1)->PathFillConvex(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList_PathFillConcave(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImU32 arg2 ; SWIG_check_num_args("ImDrawList::PathFillConcave",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PathFillConcave",1,"ImDrawList *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawList::PathFillConcave",2,"ImU32");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_PathFillConcave",1,SWIGTYPE_p_ImDrawList); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (ImU32)lua_tonumber(L, 2);
    (arg1)->PathFillConcave(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList_PathStroke(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ; ImU32 arg2 ;
    ImDrawFlags arg3 = (ImDrawFlags) 0 ; float arg4 = (float) 1.0 ; SWIG_check_num_args("ImDrawList::PathStroke",2,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PathStroke",1,"ImDrawList *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawList::PathStroke",2,"ImU32");
    if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("ImDrawList::PathStroke",3,"ImDrawFlags");
    if(lua_gettop(L)>=4 && !lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::PathStroke",4,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_PathStroke",1,SWIGTYPE_p_ImDrawList); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (ImU32)lua_tonumber(L, 2);
    if(lua_gettop(L)>=3){ arg3 = (ImDrawFlags)lua_tonumber(L, 3);}  if(lua_gettop(L)>=4){ arg4 = (float)lua_tonumber(L, 4);} 
    (arg1)->PathStroke(arg2,arg3,arg4); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList_PathArcTo(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImVec2 *arg2 = 0 ; float arg3 ; float arg4 ; float arg5 ; int arg6 = (int) 0 ;
    SWIG_check_num_args("ImDrawList::PathArcTo",5,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PathArcTo",1,"ImDrawList *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::PathArcTo",2,"ImVec2 const &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImDrawList::PathArcTo",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::PathArcTo",4,"float");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ImDrawList::PathArcTo",5,"float");
    if(lua_gettop(L)>=6 && !lua_isnumber(L,6)) SWIG_fail_arg("ImDrawList::PathArcTo",6,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_PathArcTo",1,SWIGTYPE_p_ImDrawList); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_PathArcTo",2,SWIGTYPE_p_ImVec2); }  arg3 = (float)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5); if(lua_gettop(L)>=6){ arg6 = (int)lua_tonumber(L, 6);} 
    (arg1)->PathArcTo((ImVec2 const &)*arg2,arg3,arg4,arg5,arg6); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList_PathArcToFast(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImVec2 *arg2 = 0 ; float arg3 ; int arg4 ; int arg5 ; SWIG_check_num_args("ImDrawList::PathArcToFast",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PathArcToFast",1,"ImDrawList *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::PathArcToFast",2,"ImVec2 const &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImDrawList::PathArcToFast",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::PathArcToFast",4,"int");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ImDrawList::PathArcToFast",5,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_PathArcToFast",1,SWIGTYPE_p_ImDrawList); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_PathArcToFast",2,SWIGTYPE_p_ImVec2); }  arg3 = (float)lua_tonumber(L, 3);
    arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); (arg1)->PathArcToFast((ImVec2 const &)*arg2,arg3,arg4,arg5);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList_PathEllipticalArcTo(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImVec2 *arg2 = 0 ; ImVec2 *arg3 = 0 ; float arg4 ; float arg5 ; float arg6 ; int arg7 = (int) 0 ;
    SWIG_check_num_args("ImDrawList::PathEllipticalArcTo",6,7)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PathEllipticalArcTo",1,"ImDrawList *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::PathEllipticalArcTo",2,"ImVec2 const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::PathEllipticalArcTo",3,"ImVec2 const &");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::PathEllipticalArcTo",4,"float");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ImDrawList::PathEllipticalArcTo",5,"float");
    if(!lua_isnumber(L,6)) SWIG_fail_arg("ImDrawList::PathEllipticalArcTo",6,"float");
    if(lua_gettop(L)>=7 && !lua_isnumber(L,7)) SWIG_fail_arg("ImDrawList::PathEllipticalArcTo",7,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_PathEllipticalArcTo",1,SWIGTYPE_p_ImDrawList); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_PathEllipticalArcTo",2,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_PathEllipticalArcTo",3,SWIGTYPE_p_ImVec2); }  arg4 = (float)lua_tonumber(L, 4);
    arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); if(lua_gettop(L)>=7){ arg7 = (int)lua_tonumber(L, 7);} 
    (arg1)->PathEllipticalArcTo((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4,arg5,arg6,arg7); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList_PathBezierCubicCurveTo(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImVec2 *arg2 = 0 ; ImVec2 *arg3 = 0 ; ImVec2 *arg4 = 0 ; int arg5 = (int) 0 ;
    SWIG_check_num_args("ImDrawList::PathBezierCubicCurveTo",4,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PathBezierCubicCurveTo",1,"ImDrawList *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::PathBezierCubicCurveTo",2,"ImVec2 const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::PathBezierCubicCurveTo",3,"ImVec2 const &");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImDrawList::PathBezierCubicCurveTo",4,"ImVec2 const &");
    if(lua_gettop(L)>=5 && !lua_isnumber(L,5)) SWIG_fail_arg("ImDrawList::PathBezierCubicCurveTo",5,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_PathBezierCubicCurveTo",1,SWIGTYPE_p_ImDrawList); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_PathBezierCubicCurveTo",2,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_PathBezierCubicCurveTo",3,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_PathBezierCubicCurveTo",4,SWIGTYPE_p_ImVec2); }  if(lua_gettop(L)>=5){
      arg5 = (int)lua_tonumber(L, 5);} 
    (arg1)->PathBezierCubicCurveTo((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,arg5); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList_PathBezierQuadraticCurveTo(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImVec2 *arg2 = 0 ; ImVec2 *arg3 = 0 ; int arg4 = (int) 0 ; SWIG_check_num_args("ImDrawList::PathBezierQuadraticCurveTo",3,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PathBezierQuadraticCurveTo",1,"ImDrawList *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::PathBezierQuadraticCurveTo",2,"ImVec2 const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::PathBezierQuadraticCurveTo",3,"ImVec2 const &");
    if(lua_gettop(L)>=4 && !lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::PathBezierQuadraticCurveTo",4,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_PathBezierQuadraticCurveTo",1,SWIGTYPE_p_ImDrawList); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_PathBezierQuadraticCurveTo",2,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_PathBezierQuadraticCurveTo",3,SWIGTYPE_p_ImVec2); }  if(lua_gettop(L)>=4){
      arg4 = (int)lua_tonumber(L, 4);}  (arg1)->PathBezierQuadraticCurveTo((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList_PathRect(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImVec2 *arg2 = 0 ; ImVec2 *arg3 = 0 ; float arg4 = (float) 0.0 ; ImDrawFlags arg5 = (ImDrawFlags) 0 ;
    SWIG_check_num_args("ImDrawList::PathRect",3,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PathRect",1,"ImDrawList *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::PathRect",2,"ImVec2 const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::PathRect",3,"ImVec2 const &");
    if(lua_gettop(L)>=4 && !lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::PathRect",4,"float");
    if(lua_gettop(L)>=5 && !lua_isnumber(L,5)) SWIG_fail_arg("ImDrawList::PathRect",5,"ImDrawFlags");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_PathRect",1,SWIGTYPE_p_ImDrawList); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_PathRect",2,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_PathRect",3,SWIGTYPE_p_ImVec2); }  if(lua_gettop(L)>=4){ arg4 = (float)lua_tonumber(L, 4);} 
    if(lua_gettop(L)>=5){ arg5 = (ImDrawFlags)lua_tonumber(L, 5);} 
    (arg1)->PathRect((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4,arg5); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImDrawList_AddCallback(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImDrawCallback arg2 = (ImDrawCallback) 0 ; void *arg3 = (void *) 0 ; size_t arg4 = (size_t) 0 ;
    SWIG_check_num_args("ImDrawList::AddCallback",3,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddCallback",1,"ImDrawList *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawList::AddCallback",2,"ImDrawCallback");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImDrawList::AddCallback",3,"void *");
    if(lua_gettop(L)>=4 && !lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::AddCallback",4,"size_t");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_AddCallback",1,SWIGTYPE_p_ImDrawList); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_q_const__ImDrawList_p_q_const__ImDrawCmd__void,0))){
      SWIG_fail_ptr("ImDrawList_AddCallback",2,SWIGTYPE_p_f_p_q_const__ImDrawList_p_q_const__ImDrawCmd__void); } 
    arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"ImDrawList_AddCallback"); if(lua_gettop(L)>=4){
      SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative"); arg4 = (size_t)lua_tonumber(L, 4);} 
    (arg1)->AddCallback(arg2,arg3,arg4); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList_AddDrawCmd(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    SWIG_check_num_args("ImDrawList::AddDrawCmd",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::AddDrawCmd",1,"ImDrawList *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_AddDrawCmd",1,SWIGTYPE_p_ImDrawList); }  (arg1)->AddDrawCmd(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList_CloneOutput(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImDrawList *result = 0 ; SWIG_check_num_args("ImDrawList::CloneOutput",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::CloneOutput",1,"ImDrawList const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_CloneOutput",1,SWIGTYPE_p_ImDrawList); } 
    result = (ImDrawList *)((ImDrawList const *)arg1)->CloneOutput();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImDrawList,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImDrawList_ChannelsSplit(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ; int arg2 ;
    SWIG_check_num_args("ImDrawList::ChannelsSplit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::ChannelsSplit",1,"ImDrawList *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawList::ChannelsSplit",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_ChannelsSplit",1,SWIGTYPE_p_ImDrawList); }  arg2 = (int)lua_tonumber(L, 2);
    (arg1)->ChannelsSplit(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList_ChannelsMerge(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    SWIG_check_num_args("ImDrawList::ChannelsMerge",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::ChannelsMerge",1,"ImDrawList *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_ChannelsMerge",1,SWIGTYPE_p_ImDrawList); }  (arg1)->ChannelsMerge(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList_ChannelsSetCurrent(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    int arg2 ; SWIG_check_num_args("ImDrawList::ChannelsSetCurrent",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::ChannelsSetCurrent",1,"ImDrawList *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawList::ChannelsSetCurrent",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_ChannelsSetCurrent",1,SWIGTYPE_p_ImDrawList); }  arg2 = (int)lua_tonumber(L, 2);
    (arg1)->ChannelsSetCurrent(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList_PrimReserve(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ; int arg2 ;
    int arg3 ; SWIG_check_num_args("ImDrawList::PrimReserve",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PrimReserve",1,"ImDrawList *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawList::PrimReserve",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImDrawList::PrimReserve",3,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_PrimReserve",1,SWIGTYPE_p_ImDrawList); }  arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3); (arg1)->PrimReserve(arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImDrawList_PrimUnreserve(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ; int arg2 ;
    int arg3 ; SWIG_check_num_args("ImDrawList::PrimUnreserve",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PrimUnreserve",1,"ImDrawList *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawList::PrimUnreserve",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImDrawList::PrimUnreserve",3,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_PrimUnreserve",1,SWIGTYPE_p_ImDrawList); }  arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3); (arg1)->PrimUnreserve(arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImDrawList_PrimRect(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImVec2 *arg2 = 0 ; ImVec2 *arg3 = 0 ; ImU32 arg4 ; SWIG_check_num_args("ImDrawList::PrimRect",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PrimRect",1,"ImDrawList *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::PrimRect",2,"ImVec2 const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::PrimRect",3,"ImVec2 const &");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::PrimRect",4,"ImU32");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_PrimRect",1,SWIGTYPE_p_ImDrawList); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_PrimRect",2,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_PrimRect",3,SWIGTYPE_p_ImVec2); } 
    SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative"); arg4 = (ImU32)lua_tonumber(L, 4);
    (arg1)->PrimRect((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImDrawList_PrimRectUV(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImVec2 *arg2 = 0 ; ImVec2 *arg3 = 0 ; ImVec2 *arg4 = 0 ; ImVec2 *arg5 = 0 ; ImU32 arg6 ;
    SWIG_check_num_args("ImDrawList::PrimRectUV",6,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PrimRectUV",1,"ImDrawList *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::PrimRectUV",2,"ImVec2 const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::PrimRectUV",3,"ImVec2 const &");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImDrawList::PrimRectUV",4,"ImVec2 const &");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ImDrawList::PrimRectUV",5,"ImVec2 const &");
    if(!lua_isnumber(L,6)) SWIG_fail_arg("ImDrawList::PrimRectUV",6,"ImU32");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_PrimRectUV",1,SWIGTYPE_p_ImDrawList); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_PrimRectUV",2,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_PrimRectUV",3,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_PrimRectUV",4,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_PrimRectUV",5,SWIGTYPE_p_ImVec2); } 
    SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative"); arg6 = (ImU32)lua_tonumber(L, 6);
    (arg1)->PrimRectUV((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,arg6);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList_PrimQuadUV(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImVec2 *arg2 = 0 ; ImVec2 *arg3 = 0 ; ImVec2 *arg4 = 0 ; ImVec2 *arg5 = 0 ; ImVec2 *arg6 = 0 ; ImVec2 *arg7 = 0 ;
    ImVec2 *arg8 = 0 ; ImVec2 *arg9 = 0 ; ImU32 arg10 ; SWIG_check_num_args("ImDrawList::PrimQuadUV",10,10)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PrimQuadUV",1,"ImDrawList *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::PrimQuadUV",2,"ImVec2 const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::PrimQuadUV",3,"ImVec2 const &");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImDrawList::PrimQuadUV",4,"ImVec2 const &");
    if(!lua_isuserdata(L,5)) SWIG_fail_arg("ImDrawList::PrimQuadUV",5,"ImVec2 const &");
    if(!lua_isuserdata(L,6)) SWIG_fail_arg("ImDrawList::PrimQuadUV",6,"ImVec2 const &");
    if(!lua_isuserdata(L,7)) SWIG_fail_arg("ImDrawList::PrimQuadUV",7,"ImVec2 const &");
    if(!lua_isuserdata(L,8)) SWIG_fail_arg("ImDrawList::PrimQuadUV",8,"ImVec2 const &");
    if(!lua_isuserdata(L,9)) SWIG_fail_arg("ImDrawList::PrimQuadUV",9,"ImVec2 const &");
    if(!lua_isnumber(L,10)) SWIG_fail_arg("ImDrawList::PrimQuadUV",10,"ImU32");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_PrimQuadUV",1,SWIGTYPE_p_ImDrawList); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_PrimQuadUV",2,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_PrimQuadUV",3,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_PrimQuadUV",4,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_PrimQuadUV",5,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_PrimQuadUV",6,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_PrimQuadUV",7,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_PrimQuadUV",8,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_PrimQuadUV",9,SWIGTYPE_p_ImVec2); } 
    SWIG_contract_assert((lua_tonumber(L,10)>=0),"number must not be negative"); arg10 = (ImU32)lua_tonumber(L, 10);
    (arg1)->PrimQuadUV((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec2 const &)*arg6,(ImVec2 const &)*arg7,(ImVec2 const &)*arg8,(ImVec2 const &)*arg9,arg10);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList_PrimWriteVtx(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImVec2 *arg2 = 0 ; ImVec2 *arg3 = 0 ; ImU32 arg4 ; SWIG_check_num_args("ImDrawList::PrimWriteVtx",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PrimWriteVtx",1,"ImDrawList *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::PrimWriteVtx",2,"ImVec2 const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::PrimWriteVtx",3,"ImVec2 const &");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::PrimWriteVtx",4,"ImU32");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_PrimWriteVtx",1,SWIGTYPE_p_ImDrawList); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_PrimWriteVtx",2,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_PrimWriteVtx",3,SWIGTYPE_p_ImVec2); } 
    SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative"); arg4 = (ImU32)lua_tonumber(L, 4);
    (arg1)->PrimWriteVtx((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImDrawList_PrimWriteIdx(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ofIndexType arg2 ; ofIndexType *argp2 ; SWIG_check_num_args("ImDrawList::PrimWriteIdx",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PrimWriteIdx",1,"ImDrawList *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::PrimWriteIdx",2,"ofIndexType");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_PrimWriteIdx",1,SWIGTYPE_p_ImDrawList); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofIndexType,0))){
      SWIG_fail_ptr("ImDrawList_PrimWriteIdx",2,SWIGTYPE_p_ofIndexType); }  arg2 = *argp2; (arg1)->PrimWriteIdx(arg2);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList_PrimVtx(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ; ImVec2 *arg2 = 0 ;
    ImVec2 *arg3 = 0 ; ImU32 arg4 ; SWIG_check_num_args("ImDrawList::PrimVtx",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::PrimVtx",1,"ImDrawList *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::PrimVtx",2,"ImVec2 const &");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ImDrawList::PrimVtx",3,"ImVec2 const &");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::PrimVtx",4,"ImU32");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList_PrimVtx",1,SWIGTYPE_p_ImDrawList); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_PrimVtx",2,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList_PrimVtx",3,SWIGTYPE_p_ImVec2); } 
    SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative"); arg4 = (ImU32)lua_tonumber(L, 4);
    (arg1)->PrimVtx((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImDrawList__ResetForNewFrame(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    SWIG_check_num_args("ImDrawList::_ResetForNewFrame",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_ResetForNewFrame",1,"ImDrawList *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList__ResetForNewFrame",1,SWIGTYPE_p_ImDrawList); }  (arg1)->_ResetForNewFrame(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList__ClearFreeMemory(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    SWIG_check_num_args("ImDrawList::_ClearFreeMemory",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_ClearFreeMemory",1,"ImDrawList *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList__ClearFreeMemory",1,SWIGTYPE_p_ImDrawList); }  (arg1)->_ClearFreeMemory(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList__PopUnusedDrawCmd(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    SWIG_check_num_args("ImDrawList::_PopUnusedDrawCmd",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_PopUnusedDrawCmd",1,"ImDrawList *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList__PopUnusedDrawCmd",1,SWIGTYPE_p_ImDrawList); }  (arg1)->_PopUnusedDrawCmd(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList__TryMergeDrawCmds(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    SWIG_check_num_args("ImDrawList::_TryMergeDrawCmds",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_TryMergeDrawCmds",1,"ImDrawList *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList__TryMergeDrawCmds",1,SWIGTYPE_p_ImDrawList); }  (arg1)->_TryMergeDrawCmds(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList__OnChangedClipRect(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    SWIG_check_num_args("ImDrawList::_OnChangedClipRect",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_OnChangedClipRect",1,"ImDrawList *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList__OnChangedClipRect",1,SWIGTYPE_p_ImDrawList); }  (arg1)->_OnChangedClipRect(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList__OnChangedTextureID(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    SWIG_check_num_args("ImDrawList::_OnChangedTextureID",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_OnChangedTextureID",1,"ImDrawList *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList__OnChangedTextureID",1,SWIGTYPE_p_ImDrawList); }  (arg1)->_OnChangedTextureID();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList__OnChangedVtxOffset(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    SWIG_check_num_args("ImDrawList::_OnChangedVtxOffset",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_OnChangedVtxOffset",1,"ImDrawList *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList__OnChangedVtxOffset",1,SWIGTYPE_p_ImDrawList); }  (arg1)->_OnChangedVtxOffset();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList__SetTextureID(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ; int arg2 ;
    SWIG_check_num_args("ImDrawList::_SetTextureID",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_SetTextureID",1,"ImDrawList *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawList::_SetTextureID",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList__SetTextureID",1,SWIGTYPE_p_ImDrawList); }  arg2 = (int)lua_tonumber(L, 2);
    (arg1)->_SetTextureID(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList__CalcCircleAutoSegmentCount(lua_State* L) { { int SWIG_arg = 0;
    ImDrawList *arg1 = (ImDrawList *) 0 ; float arg2 ; int result;
    SWIG_check_num_args("ImDrawList::_CalcCircleAutoSegmentCount",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_CalcCircleAutoSegmentCount",1,"ImDrawList const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawList::_CalcCircleAutoSegmentCount",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList__CalcCircleAutoSegmentCount",1,SWIGTYPE_p_ImDrawList); }  arg2 = (float)lua_tonumber(L, 2);
    result = (int)((ImDrawList const *)arg1)->_CalcCircleAutoSegmentCount(arg2);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawList__PathArcToFastEx(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImVec2 *arg2 = 0 ; float arg3 ; int arg4 ; int arg5 ; int arg6 ; SWIG_check_num_args("ImDrawList::_PathArcToFastEx",6,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_PathArcToFastEx",1,"ImDrawList *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::_PathArcToFastEx",2,"ImVec2 const &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImDrawList::_PathArcToFastEx",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::_PathArcToFastEx",4,"int");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ImDrawList::_PathArcToFastEx",5,"int");
    if(!lua_isnumber(L,6)) SWIG_fail_arg("ImDrawList::_PathArcToFastEx",6,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList__PathArcToFastEx",1,SWIGTYPE_p_ImDrawList); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList__PathArcToFastEx",2,SWIGTYPE_p_ImVec2); }  arg3 = (float)lua_tonumber(L, 3);
    arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); arg6 = (int)lua_tonumber(L, 6);
    (arg1)->_PathArcToFastEx((ImVec2 const &)*arg2,arg3,arg4,arg5,arg6); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImDrawList__PathArcToN(lua_State* L) { { int SWIG_arg = 0; ImDrawList *arg1 = (ImDrawList *) 0 ;
    ImVec2 *arg2 = 0 ; float arg3 ; float arg4 ; float arg5 ; int arg6 ; SWIG_check_num_args("ImDrawList::_PathArcToN",6,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawList::_PathArcToN",1,"ImDrawList *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawList::_PathArcToN",2,"ImVec2 const &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImDrawList::_PathArcToN",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ImDrawList::_PathArcToN",4,"float");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ImDrawList::_PathArcToN",5,"float");
    if(!lua_isnumber(L,6)) SWIG_fail_arg("ImDrawList::_PathArcToN",6,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawList__PathArcToN",1,SWIGTYPE_p_ImDrawList); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawList__PathArcToN",2,SWIGTYPE_p_ImVec2); }  arg3 = (float)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5); arg6 = (int)lua_tonumber(L, 6);
    (arg1)->_PathArcToN((ImVec2 const &)*arg2,arg3,arg4,arg5,arg6); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static void swig_delete_ImDrawList(void *obj) {
ImDrawList *arg1 = (ImDrawList *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImDrawList(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImDrawList);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImDrawList_attributes[] = {
    { "CmdBuffer", _wrap_ImDrawList_CmdBuffer_get, _wrap_ImDrawList_CmdBuffer_set },
    { "IdxBuffer", _wrap_ImDrawList_IdxBuffer_get, _wrap_ImDrawList_IdxBuffer_set },
    { "VtxBuffer", _wrap_ImDrawList_VtxBuffer_get, _wrap_ImDrawList_VtxBuffer_set },
    { "Flags", _wrap_ImDrawList_Flags_get, _wrap_ImDrawList_Flags_set },
    { "_VtxCurrentIdx", _wrap_ImDrawList__VtxCurrentIdx_get, _wrap_ImDrawList__VtxCurrentIdx_set },
    { "_Data", _wrap_ImDrawList__Data_get, _wrap_ImDrawList__Data_set },
    { "_VtxWritePtr", _wrap_ImDrawList__VtxWritePtr_get, _wrap_ImDrawList__VtxWritePtr_set },
    { "_IdxWritePtr", _wrap_ImDrawList__IdxWritePtr_get, _wrap_ImDrawList__IdxWritePtr_set },
    { "_Path", _wrap_ImDrawList__Path_get, _wrap_ImDrawList__Path_set },
    { "_CmdHeader", _wrap_ImDrawList__CmdHeader_get, _wrap_ImDrawList__CmdHeader_set },
    { "_Splitter", _wrap_ImDrawList__Splitter_get, _wrap_ImDrawList__Splitter_set },
    { "_ClipRectStack", _wrap_ImDrawList__ClipRectStack_get, _wrap_ImDrawList__ClipRectStack_set },
    { "_TextureIdStack", _wrap_ImDrawList__TextureIdStack_get, _wrap_ImDrawList__TextureIdStack_set },
    { "_CallbacksDataBuf", _wrap_ImDrawList__CallbacksDataBuf_get, _wrap_ImDrawList__CallbacksDataBuf_set },
    { "_FringeScale", _wrap_ImDrawList__FringeScale_get, _wrap_ImDrawList__FringeScale_set },
    { "_OwnerName", _wrap_ImDrawList__OwnerName_get, SWIG_Lua_set_immutable },
    {0,0,0}
};
static swig_lua_method swig_ImDrawList_methods[]= {
    { "PushClipRect", _wrap_ImDrawList_PushClipRect},
    { "PushClipRectFullScreen", _wrap_ImDrawList_PushClipRectFullScreen},
    { "PopClipRect", _wrap_ImDrawList_PopClipRect},
    { "PushTextureID", _wrap_ImDrawList_PushTextureID},
    { "PopTextureID", _wrap_ImDrawList_PopTextureID},
    { "GetClipRectMin", _wrap_ImDrawList_GetClipRectMin},
    { "GetClipRectMax", _wrap_ImDrawList_GetClipRectMax},
    { "AddLine", _wrap_ImDrawList_AddLine},
    { "AddRect", _wrap_ImDrawList_AddRect},
    { "AddRectFilled", _wrap_ImDrawList_AddRectFilled},
    { "AddRectFilledMultiColor", _wrap_ImDrawList_AddRectFilledMultiColor},
    { "AddQuad", _wrap_ImDrawList_AddQuad},
    { "AddQuadFilled", _wrap_ImDrawList_AddQuadFilled},
    { "AddTriangle", _wrap_ImDrawList_AddTriangle},
    { "AddTriangleFilled", _wrap_ImDrawList_AddTriangleFilled},
    { "AddCircle", _wrap_ImDrawList_AddCircle},
    { "AddCircleFilled", _wrap_ImDrawList_AddCircleFilled},
    { "AddNgon", _wrap_ImDrawList_AddNgon},
    { "AddNgonFilled", _wrap_ImDrawList_AddNgonFilled},
    { "AddEllipse", _wrap_ImDrawList_AddEllipse},
    { "AddEllipseFilled", _wrap_ImDrawList_AddEllipseFilled},
    { "AddText", _wrap_ImDrawList_AddText},
    { "AddBezierCubic", _wrap_ImDrawList_AddBezierCubic},
    { "AddBezierQuadratic", _wrap_ImDrawList_AddBezierQuadratic},
    { "AddPolyline", _wrap_ImDrawList_AddPolyline},
    { "AddConvexPolyFilled", _wrap_ImDrawList_AddConvexPolyFilled},
    { "AddConcavePolyFilled", _wrap_ImDrawList_AddConcavePolyFilled},
    { "AddImage", _wrap_ImDrawList_AddImage},
    { "AddImageQuad", _wrap_ImDrawList_AddImageQuad},
    { "AddImageRounded", _wrap_ImDrawList_AddImageRounded},
    { "PathClear", _wrap_ImDrawList_PathClear},
    { "PathLineTo", _wrap_ImDrawList_PathLineTo},
    { "PathLineToMergeDuplicate", _wrap_ImDrawList_PathLineToMergeDuplicate},
    { "PathFillConvex", _wrap_ImDrawList_PathFillConvex},
    { "PathFillConcave", _wrap_ImDrawList_PathFillConcave},
    { "PathStroke", _wrap_ImDrawList_PathStroke},
    { "PathArcTo", _wrap_ImDrawList_PathArcTo},
    { "PathArcToFast", _wrap_ImDrawList_PathArcToFast},
    { "PathEllipticalArcTo", _wrap_ImDrawList_PathEllipticalArcTo},
    { "PathBezierCubicCurveTo", _wrap_ImDrawList_PathBezierCubicCurveTo},
    { "PathBezierQuadraticCurveTo", _wrap_ImDrawList_PathBezierQuadraticCurveTo},
    { "PathRect", _wrap_ImDrawList_PathRect},
    { "AddCallback", _wrap_ImDrawList_AddCallback},
    { "AddDrawCmd", _wrap_ImDrawList_AddDrawCmd},
    { "CloneOutput", _wrap_ImDrawList_CloneOutput},
    { "ChannelsSplit", _wrap_ImDrawList_ChannelsSplit},
    { "ChannelsMerge", _wrap_ImDrawList_ChannelsMerge},
    { "ChannelsSetCurrent", _wrap_ImDrawList_ChannelsSetCurrent},
    { "PrimReserve", _wrap_ImDrawList_PrimReserve},
    { "PrimUnreserve", _wrap_ImDrawList_PrimUnreserve},
    { "PrimRect", _wrap_ImDrawList_PrimRect},
    { "PrimRectUV", _wrap_ImDrawList_PrimRectUV},
    { "PrimQuadUV", _wrap_ImDrawList_PrimQuadUV},
    { "PrimWriteVtx", _wrap_ImDrawList_PrimWriteVtx},
    { "PrimWriteIdx", _wrap_ImDrawList_PrimWriteIdx},
    { "PrimVtx", _wrap_ImDrawList_PrimVtx},
    { "_ResetForNewFrame", _wrap_ImDrawList__ResetForNewFrame},
    { "_ClearFreeMemory", _wrap_ImDrawList__ClearFreeMemory},
    { "_PopUnusedDrawCmd", _wrap_ImDrawList__PopUnusedDrawCmd},
    { "_TryMergeDrawCmds", _wrap_ImDrawList__TryMergeDrawCmds},
    { "_OnChangedClipRect", _wrap_ImDrawList__OnChangedClipRect},
    { "_OnChangedTextureID", _wrap_ImDrawList__OnChangedTextureID},
    { "_OnChangedVtxOffset", _wrap_ImDrawList__OnChangedVtxOffset},
    { "_SetTextureID", _wrap_ImDrawList__SetTextureID},
    { "_CalcCircleAutoSegmentCount", _wrap_ImDrawList__CalcCircleAutoSegmentCount},
    { "_PathArcToFastEx", _wrap_ImDrawList__PathArcToFastEx},
    { "_PathArcToN", _wrap_ImDrawList__PathArcToN},
    {0,0}
};
static swig_lua_method swig_ImDrawList_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImDrawList_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImDrawList_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImDrawList_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImDrawList_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImDrawList_Sf_SwigStatic = {
    "ImDrawList",
    swig_ImDrawList_Sf_SwigStatic_methods,
    swig_ImDrawList_Sf_SwigStatic_attributes,
    swig_ImDrawList_Sf_SwigStatic_constants,
    swig_ImDrawList_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImDrawList_bases[] = {0};
static const char *swig_ImDrawList_base_names[] = {0};
static swig_lua_class _wrap_class_ImDrawList = { "ImDrawList", "ImDrawList", &SWIGTYPE_p_ImDrawList,_proxy__wrap_new_ImDrawList, swig_delete_ImDrawList, swig_ImDrawList_methods, swig_ImDrawList_attributes, &swig_ImDrawList_Sf_SwigStatic, swig_ImDrawList_meta, swig_ImDrawList_bases, swig_ImDrawList_base_names };

static int _wrap_ImDrawData_Valid_set(lua_State* L) { { int SWIG_arg = 0; ImDrawData *arg1 = (ImDrawData *) 0 ; bool arg2 ;
    SWIG_check_num_args("ImDrawData::Valid",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawData::Valid",1,"ImDrawData *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImDrawData::Valid",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawData,0))){
      SWIG_fail_ptr("ImDrawData_Valid_set",1,SWIGTYPE_p_ImDrawData); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->Valid = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawData_Valid_get(lua_State* L) { { int SWIG_arg = 0; ImDrawData *arg1 = (ImDrawData *) 0 ; bool result;
    SWIG_check_num_args("ImDrawData::Valid",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawData::Valid",1,"ImDrawData *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawData,0))){
      SWIG_fail_ptr("ImDrawData_Valid_get",1,SWIGTYPE_p_ImDrawData); }  result = (bool) ((arg1)->Valid);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawData_CmdListsCount_set(lua_State* L) { { int SWIG_arg = 0; ImDrawData *arg1 = (ImDrawData *) 0 ;
    int arg2 ; SWIG_check_num_args("ImDrawData::CmdListsCount",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawData::CmdListsCount",1,"ImDrawData *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawData::CmdListsCount",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawData,0))){
      SWIG_fail_ptr("ImDrawData_CmdListsCount_set",1,SWIGTYPE_p_ImDrawData); }  arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->CmdListsCount = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawData_CmdListsCount_get(lua_State* L) { { int SWIG_arg = 0; ImDrawData *arg1 = (ImDrawData *) 0 ;
    int result; SWIG_check_num_args("ImDrawData::CmdListsCount",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawData::CmdListsCount",1,"ImDrawData *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawData,0))){
      SWIG_fail_ptr("ImDrawData_CmdListsCount_get",1,SWIGTYPE_p_ImDrawData); }  result = (int) ((arg1)->CmdListsCount);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawData_TotalIdxCount_set(lua_State* L) { { int SWIG_arg = 0; ImDrawData *arg1 = (ImDrawData *) 0 ;
    int arg2 ; SWIG_check_num_args("ImDrawData::TotalIdxCount",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawData::TotalIdxCount",1,"ImDrawData *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawData::TotalIdxCount",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawData,0))){
      SWIG_fail_ptr("ImDrawData_TotalIdxCount_set",1,SWIGTYPE_p_ImDrawData); }  arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->TotalIdxCount = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawData_TotalIdxCount_get(lua_State* L) { { int SWIG_arg = 0; ImDrawData *arg1 = (ImDrawData *) 0 ;
    int result; SWIG_check_num_args("ImDrawData::TotalIdxCount",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawData::TotalIdxCount",1,"ImDrawData *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawData,0))){
      SWIG_fail_ptr("ImDrawData_TotalIdxCount_get",1,SWIGTYPE_p_ImDrawData); }  result = (int) ((arg1)->TotalIdxCount);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawData_TotalVtxCount_set(lua_State* L) { { int SWIG_arg = 0; ImDrawData *arg1 = (ImDrawData *) 0 ;
    int arg2 ; SWIG_check_num_args("ImDrawData::TotalVtxCount",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawData::TotalVtxCount",1,"ImDrawData *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImDrawData::TotalVtxCount",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawData,0))){
      SWIG_fail_ptr("ImDrawData_TotalVtxCount_set",1,SWIGTYPE_p_ImDrawData); }  arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->TotalVtxCount = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawData_TotalVtxCount_get(lua_State* L) { { int SWIG_arg = 0; ImDrawData *arg1 = (ImDrawData *) 0 ;
    int result; SWIG_check_num_args("ImDrawData::TotalVtxCount",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawData::TotalVtxCount",1,"ImDrawData *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawData,0))){
      SWIG_fail_ptr("ImDrawData_TotalVtxCount_get",1,SWIGTYPE_p_ImDrawData); }  result = (int) ((arg1)->TotalVtxCount);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawData_CmdLists_set(lua_State* L) { { int SWIG_arg = 0; ImDrawData *arg1 = (ImDrawData *) 0 ;
    ImVector< ImDrawList * > *arg2 = (ImVector< ImDrawList * > *) 0 ; SWIG_check_num_args("ImDrawData::CmdLists",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawData::CmdLists",1,"ImDrawData *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawData::CmdLists",2,"ImVector< ImDrawList * > *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawData,0))){
      SWIG_fail_ptr("ImDrawData_CmdLists_set",1,SWIGTYPE_p_ImDrawData); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImDrawList_p_t,0))){
      SWIG_fail_ptr("ImDrawData_CmdLists_set",2,SWIGTYPE_p_ImVectorT_ImDrawList_p_t); }  if (arg1) (arg1)->CmdLists = *arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawData_CmdLists_get(lua_State* L) { { int SWIG_arg = 0; ImDrawData *arg1 = (ImDrawData *) 0 ;
    ImVector< ImDrawList * > *result = 0 ; SWIG_check_num_args("ImDrawData::CmdLists",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawData::CmdLists",1,"ImDrawData *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawData,0))){
      SWIG_fail_ptr("ImDrawData_CmdLists_get",1,SWIGTYPE_p_ImDrawData); } 
    result = (ImVector< ImDrawList * > *)& ((arg1)->CmdLists);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImDrawList_p_t,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImDrawData_DisplayPos_set(lua_State* L) { { int SWIG_arg = 0; ImDrawData *arg1 = (ImDrawData *) 0 ;
    ImVec2 *arg2 = (ImVec2 *) 0 ; SWIG_check_num_args("ImDrawData::DisplayPos",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawData::DisplayPos",1,"ImDrawData *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawData::DisplayPos",2,"ImVec2 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawData,0))){
      SWIG_fail_ptr("ImDrawData_DisplayPos_set",1,SWIGTYPE_p_ImDrawData); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawData_DisplayPos_set",2,SWIGTYPE_p_ImVec2); }  if (arg1) (arg1)->DisplayPos = *arg2; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawData_DisplayPos_get(lua_State* L) { { int SWIG_arg = 0; ImDrawData *arg1 = (ImDrawData *) 0 ;
    ImVec2 *result = 0 ; SWIG_check_num_args("ImDrawData::DisplayPos",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawData::DisplayPos",1,"ImDrawData *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawData,0))){
      SWIG_fail_ptr("ImDrawData_DisplayPos_get",1,SWIGTYPE_p_ImDrawData); }  result = (ImVec2 *)& ((arg1)->DisplayPos);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImDrawData_DisplaySize_set(lua_State* L) { { int SWIG_arg = 0; ImDrawData *arg1 = (ImDrawData *) 0 ;
    ImVec2 *arg2 = (ImVec2 *) 0 ; SWIG_check_num_args("ImDrawData::DisplaySize",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawData::DisplaySize",1,"ImDrawData *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawData::DisplaySize",2,"ImVec2 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawData,0))){
      SWIG_fail_ptr("ImDrawData_DisplaySize_set",1,SWIGTYPE_p_ImDrawData); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawData_DisplaySize_set",2,SWIGTYPE_p_ImVec2); }  if (arg1) (arg1)->DisplaySize = *arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawData_DisplaySize_get(lua_State* L) { { int SWIG_arg = 0; ImDrawData *arg1 = (ImDrawData *) 0 ;
    ImVec2 *result = 0 ; SWIG_check_num_args("ImDrawData::DisplaySize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawData::DisplaySize",1,"ImDrawData *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawData,0))){
      SWIG_fail_ptr("ImDrawData_DisplaySize_get",1,SWIGTYPE_p_ImDrawData); }  result = (ImVec2 *)& ((arg1)->DisplaySize);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImDrawData_FramebufferScale_set(lua_State* L) { { int SWIG_arg = 0; ImDrawData *arg1 = (ImDrawData *) 0 ;
    ImVec2 *arg2 = (ImVec2 *) 0 ; SWIG_check_num_args("ImDrawData::FramebufferScale",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawData::FramebufferScale",1,"ImDrawData *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawData::FramebufferScale",2,"ImVec2 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawData,0))){
      SWIG_fail_ptr("ImDrawData_FramebufferScale_set",1,SWIGTYPE_p_ImDrawData); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawData_FramebufferScale_set",2,SWIGTYPE_p_ImVec2); }  if (arg1) (arg1)->FramebufferScale = *arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawData_FramebufferScale_get(lua_State* L) { { int SWIG_arg = 0; ImDrawData *arg1 = (ImDrawData *) 0 ;
    ImVec2 *result = 0 ; SWIG_check_num_args("ImDrawData::FramebufferScale",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawData::FramebufferScale",1,"ImDrawData *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawData,0))){
      SWIG_fail_ptr("ImDrawData_FramebufferScale_get",1,SWIGTYPE_p_ImDrawData); } 
    result = (ImVec2 *)& ((arg1)->FramebufferScale); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawData_OwnerViewport_set(lua_State* L) { { int SWIG_arg = 0; ImDrawData *arg1 = (ImDrawData *) 0 ;
    ImGuiViewport *arg2 = (ImGuiViewport *) 0 ; SWIG_check_num_args("ImDrawData::OwnerViewport",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawData::OwnerViewport",1,"ImDrawData *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawData::OwnerViewport",2,"ImGuiViewport *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawData,0))){
      SWIG_fail_ptr("ImDrawData_OwnerViewport_set",1,SWIGTYPE_p_ImDrawData); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImGuiViewport,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("ImDrawData_OwnerViewport_set",2,SWIGTYPE_p_ImGuiViewport); }  if (arg1) (arg1)->OwnerViewport = arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawData_OwnerViewport_get(lua_State* L) { { int SWIG_arg = 0; ImDrawData *arg1 = (ImDrawData *) 0 ;
    ImGuiViewport *result = 0 ; SWIG_check_num_args("ImDrawData::OwnerViewport",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawData::OwnerViewport",1,"ImDrawData *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawData,0))){
      SWIG_fail_ptr("ImDrawData_OwnerViewport_get",1,SWIGTYPE_p_ImDrawData); } 
    result = (ImGuiViewport *) ((arg1)->OwnerViewport); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiViewport,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_ImDrawData(lua_State* L) { { int SWIG_arg = 0; ImDrawData *result = 0 ;
    SWIG_check_num_args("ImDrawData::ImDrawData",0,0) result = (ImDrawData *)new ImDrawData();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImDrawData,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImDrawData_Clear(lua_State* L) { { int SWIG_arg = 0; ImDrawData *arg1 = (ImDrawData *) 0 ;
    SWIG_check_num_args("ImDrawData::Clear",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawData::Clear",1,"ImDrawData *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawData,0))){
      SWIG_fail_ptr("ImDrawData_Clear",1,SWIGTYPE_p_ImDrawData); }  (arg1)->Clear(); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImDrawData_AddDrawList(lua_State* L) { { int SWIG_arg = 0; ImDrawData *arg1 = (ImDrawData *) 0 ;
    ImDrawList *arg2 = (ImDrawList *) 0 ; SWIG_check_num_args("ImDrawData::AddDrawList",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawData::AddDrawList",1,"ImDrawData *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImDrawData::AddDrawList",2,"ImDrawList *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawData,0))){
      SWIG_fail_ptr("ImDrawData_AddDrawList",1,SWIGTYPE_p_ImDrawData); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImDrawData_AddDrawList",2,SWIGTYPE_p_ImDrawList); }  (arg1)->AddDrawList(arg2); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawData_DeIndexAllBuffers(lua_State* L) { { int SWIG_arg = 0; ImDrawData *arg1 = (ImDrawData *) 0 ;
    SWIG_check_num_args("ImDrawData::DeIndexAllBuffers",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawData::DeIndexAllBuffers",1,"ImDrawData *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawData,0))){
      SWIG_fail_ptr("ImDrawData_DeIndexAllBuffers",1,SWIGTYPE_p_ImDrawData); }  (arg1)->DeIndexAllBuffers(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImDrawData_ScaleClipRects(lua_State* L) { { int SWIG_arg = 0; ImDrawData *arg1 = (ImDrawData *) 0 ;
    ImVec2 *arg2 = 0 ; SWIG_check_num_args("ImDrawData::ScaleClipRects",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImDrawData::ScaleClipRects",1,"ImDrawData *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImDrawData::ScaleClipRects",2,"ImVec2 const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImDrawData,0))){
      SWIG_fail_ptr("ImDrawData_ScaleClipRects",1,SWIGTYPE_p_ImDrawData); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImDrawData_ScaleClipRects",2,SWIGTYPE_p_ImVec2); }  (arg1)->ScaleClipRects((ImVec2 const &)*arg2);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static void swig_delete_ImDrawData(void *obj) {
ImDrawData *arg1 = (ImDrawData *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImDrawData(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImDrawData);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImDrawData_attributes[] = {
    { "Valid", _wrap_ImDrawData_Valid_get, _wrap_ImDrawData_Valid_set },
    { "CmdListsCount", _wrap_ImDrawData_CmdListsCount_get, _wrap_ImDrawData_CmdListsCount_set },
    { "TotalIdxCount", _wrap_ImDrawData_TotalIdxCount_get, _wrap_ImDrawData_TotalIdxCount_set },
    { "TotalVtxCount", _wrap_ImDrawData_TotalVtxCount_get, _wrap_ImDrawData_TotalVtxCount_set },
    { "CmdLists", _wrap_ImDrawData_CmdLists_get, _wrap_ImDrawData_CmdLists_set },
    { "DisplayPos", _wrap_ImDrawData_DisplayPos_get, _wrap_ImDrawData_DisplayPos_set },
    { "DisplaySize", _wrap_ImDrawData_DisplaySize_get, _wrap_ImDrawData_DisplaySize_set },
    { "FramebufferScale", _wrap_ImDrawData_FramebufferScale_get, _wrap_ImDrawData_FramebufferScale_set },
    { "OwnerViewport", _wrap_ImDrawData_OwnerViewport_get, _wrap_ImDrawData_OwnerViewport_set },
    {0,0,0}
};
static swig_lua_method swig_ImDrawData_methods[]= {
    { "Clear", _wrap_ImDrawData_Clear},
    { "AddDrawList", _wrap_ImDrawData_AddDrawList},
    { "DeIndexAllBuffers", _wrap_ImDrawData_DeIndexAllBuffers},
    { "ScaleClipRects", _wrap_ImDrawData_ScaleClipRects},
    {0,0}
};
static swig_lua_method swig_ImDrawData_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImDrawData_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImDrawData_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImDrawData_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImDrawData_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImDrawData_Sf_SwigStatic = {
    "ImDrawData",
    swig_ImDrawData_Sf_SwigStatic_methods,
    swig_ImDrawData_Sf_SwigStatic_attributes,
    swig_ImDrawData_Sf_SwigStatic_constants,
    swig_ImDrawData_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImDrawData_bases[] = {0};
static const char *swig_ImDrawData_base_names[] = {0};
static swig_lua_class _wrap_class_ImDrawData = { "ImDrawData", "ImDrawData", &SWIGTYPE_p_ImDrawData,_proxy__wrap_new_ImDrawData, swig_delete_ImDrawData, swig_ImDrawData_methods, swig_ImDrawData_attributes, &swig_ImDrawData_Sf_SwigStatic, swig_ImDrawData_meta, swig_ImDrawData_bases, swig_ImDrawData_base_names };

static int _wrap_ImFontConfig_FontData_set(lua_State* L) { { int SWIG_arg = 0; ImFontConfig *arg1 = (ImFontConfig *) 0 ;
    void *arg2 = (void *) 0 ; SWIG_check_num_args("ImFontConfig::FontData",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::FontData",1,"ImFontConfig *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontConfig::FontData",2,"void *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
      SWIG_fail_ptr("ImFontConfig_FontData_set",1,SWIGTYPE_p_ImFontConfig); } 
    arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImFontConfig_FontData_set"); if (arg1) (arg1)->FontData = arg2; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontConfig_FontData_get(lua_State* L) { { int SWIG_arg = 0; ImFontConfig *arg1 = (ImFontConfig *) 0 ;
    void *result = 0 ; SWIG_check_num_args("ImFontConfig::FontData",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::FontData",1,"ImFontConfig *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
      SWIG_fail_ptr("ImFontConfig_FontData_get",1,SWIGTYPE_p_ImFontConfig); }  result = (void *) ((arg1)->FontData);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontConfig_FontDataSize_set(lua_State* L) { { int SWIG_arg = 0; ImFontConfig *arg1 = (ImFontConfig *) 0 ;
    int arg2 ; SWIG_check_num_args("ImFontConfig::FontDataSize",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::FontDataSize",1,"ImFontConfig *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontConfig::FontDataSize",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
      SWIG_fail_ptr("ImFontConfig_FontDataSize_set",1,SWIGTYPE_p_ImFontConfig); }  arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->FontDataSize = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontConfig_FontDataSize_get(lua_State* L) { { int SWIG_arg = 0; ImFontConfig *arg1 = (ImFontConfig *) 0 ;
    int result; SWIG_check_num_args("ImFontConfig::FontDataSize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::FontDataSize",1,"ImFontConfig *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
      SWIG_fail_ptr("ImFontConfig_FontDataSize_get",1,SWIGTYPE_p_ImFontConfig); }  result = (int) ((arg1)->FontDataSize);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontConfig_FontDataOwnedByAtlas_set(lua_State* L) { { int SWIG_arg = 0;
    ImFontConfig *arg1 = (ImFontConfig *) 0 ; bool arg2 ; SWIG_check_num_args("ImFontConfig::FontDataOwnedByAtlas",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::FontDataOwnedByAtlas",1,"ImFontConfig *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImFontConfig::FontDataOwnedByAtlas",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
      SWIG_fail_ptr("ImFontConfig_FontDataOwnedByAtlas_set",1,SWIGTYPE_p_ImFontConfig); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->FontDataOwnedByAtlas = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontConfig_FontDataOwnedByAtlas_get(lua_State* L) { { int SWIG_arg = 0;
    ImFontConfig *arg1 = (ImFontConfig *) 0 ; bool result; SWIG_check_num_args("ImFontConfig::FontDataOwnedByAtlas",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::FontDataOwnedByAtlas",1,"ImFontConfig *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
      SWIG_fail_ptr("ImFontConfig_FontDataOwnedByAtlas_get",1,SWIGTYPE_p_ImFontConfig); } 
    result = (bool) ((arg1)->FontDataOwnedByAtlas); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontConfig_FontNo_set(lua_State* L) { { int SWIG_arg = 0; ImFontConfig *arg1 = (ImFontConfig *) 0 ;
    int arg2 ; SWIG_check_num_args("ImFontConfig::FontNo",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::FontNo",1,"ImFontConfig *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontConfig::FontNo",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
      SWIG_fail_ptr("ImFontConfig_FontNo_set",1,SWIGTYPE_p_ImFontConfig); }  arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->FontNo = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontConfig_FontNo_get(lua_State* L) { { int SWIG_arg = 0; ImFontConfig *arg1 = (ImFontConfig *) 0 ;
    int result; SWIG_check_num_args("ImFontConfig::FontNo",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::FontNo",1,"ImFontConfig *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
      SWIG_fail_ptr("ImFontConfig_FontNo_get",1,SWIGTYPE_p_ImFontConfig); }  result = (int) ((arg1)->FontNo);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontConfig_SizePixels_set(lua_State* L) { { int SWIG_arg = 0; ImFontConfig *arg1 = (ImFontConfig *) 0 ;
    float arg2 ; SWIG_check_num_args("ImFontConfig::SizePixels",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::SizePixels",1,"ImFontConfig *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontConfig::SizePixels",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
      SWIG_fail_ptr("ImFontConfig_SizePixels_set",1,SWIGTYPE_p_ImFontConfig); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->SizePixels = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontConfig_SizePixels_get(lua_State* L) { { int SWIG_arg = 0; ImFontConfig *arg1 = (ImFontConfig *) 0 ;
    float result; SWIG_check_num_args("ImFontConfig::SizePixels",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::SizePixels",1,"ImFontConfig *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
      SWIG_fail_ptr("ImFontConfig_SizePixels_get",1,SWIGTYPE_p_ImFontConfig); }  result = (float) ((arg1)->SizePixels);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontConfig_OversampleH_set(lua_State* L) { { int SWIG_arg = 0; ImFontConfig *arg1 = (ImFontConfig *) 0 ;
    int arg2 ; SWIG_check_num_args("ImFontConfig::OversampleH",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::OversampleH",1,"ImFontConfig *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontConfig::OversampleH",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
      SWIG_fail_ptr("ImFontConfig_OversampleH_set",1,SWIGTYPE_p_ImFontConfig); }  arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->OversampleH = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontConfig_OversampleH_get(lua_State* L) { { int SWIG_arg = 0; ImFontConfig *arg1 = (ImFontConfig *) 0 ;
    int result; SWIG_check_num_args("ImFontConfig::OversampleH",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::OversampleH",1,"ImFontConfig *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
      SWIG_fail_ptr("ImFontConfig_OversampleH_get",1,SWIGTYPE_p_ImFontConfig); }  result = (int) ((arg1)->OversampleH);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontConfig_OversampleV_set(lua_State* L) { { int SWIG_arg = 0; ImFontConfig *arg1 = (ImFontConfig *) 0 ;
    int arg2 ; SWIG_check_num_args("ImFontConfig::OversampleV",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::OversampleV",1,"ImFontConfig *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontConfig::OversampleV",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
      SWIG_fail_ptr("ImFontConfig_OversampleV_set",1,SWIGTYPE_p_ImFontConfig); }  arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->OversampleV = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontConfig_OversampleV_get(lua_State* L) { { int SWIG_arg = 0; ImFontConfig *arg1 = (ImFontConfig *) 0 ;
    int result; SWIG_check_num_args("ImFontConfig::OversampleV",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::OversampleV",1,"ImFontConfig *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
      SWIG_fail_ptr("ImFontConfig_OversampleV_get",1,SWIGTYPE_p_ImFontConfig); }  result = (int) ((arg1)->OversampleV);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontConfig_PixelSnapH_set(lua_State* L) { { int SWIG_arg = 0; ImFontConfig *arg1 = (ImFontConfig *) 0 ;
    bool arg2 ; SWIG_check_num_args("ImFontConfig::PixelSnapH",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::PixelSnapH",1,"ImFontConfig *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImFontConfig::PixelSnapH",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
      SWIG_fail_ptr("ImFontConfig_PixelSnapH_set",1,SWIGTYPE_p_ImFontConfig); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->PixelSnapH = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontConfig_PixelSnapH_get(lua_State* L) { { int SWIG_arg = 0; ImFontConfig *arg1 = (ImFontConfig *) 0 ;
    bool result; SWIG_check_num_args("ImFontConfig::PixelSnapH",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::PixelSnapH",1,"ImFontConfig *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
      SWIG_fail_ptr("ImFontConfig_PixelSnapH_get",1,SWIGTYPE_p_ImFontConfig); }  result = (bool) ((arg1)->PixelSnapH);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontConfig_GlyphExtraSpacing_set(lua_State* L) { { int SWIG_arg = 0;
    ImFontConfig *arg1 = (ImFontConfig *) 0 ; ImVec2 *arg2 = (ImVec2 *) 0 ;
    SWIG_check_num_args("ImFontConfig::GlyphExtraSpacing",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::GlyphExtraSpacing",1,"ImFontConfig *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontConfig::GlyphExtraSpacing",2,"ImVec2 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
      SWIG_fail_ptr("ImFontConfig_GlyphExtraSpacing_set",1,SWIGTYPE_p_ImFontConfig); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImFontConfig_GlyphExtraSpacing_set",2,SWIGTYPE_p_ImVec2); }  if (arg1) (arg1)->GlyphExtraSpacing = *arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontConfig_GlyphExtraSpacing_get(lua_State* L) { { int SWIG_arg = 0;
    ImFontConfig *arg1 = (ImFontConfig *) 0 ; ImVec2 *result = 0 ; SWIG_check_num_args("ImFontConfig::GlyphExtraSpacing",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::GlyphExtraSpacing",1,"ImFontConfig *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
      SWIG_fail_ptr("ImFontConfig_GlyphExtraSpacing_get",1,SWIGTYPE_p_ImFontConfig); } 
    result = (ImVec2 *)& ((arg1)->GlyphExtraSpacing); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontConfig_GlyphOffset_set(lua_State* L) { { int SWIG_arg = 0; ImFontConfig *arg1 = (ImFontConfig *) 0 ;
    ImVec2 *arg2 = (ImVec2 *) 0 ; SWIG_check_num_args("ImFontConfig::GlyphOffset",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::GlyphOffset",1,"ImFontConfig *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontConfig::GlyphOffset",2,"ImVec2 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
      SWIG_fail_ptr("ImFontConfig_GlyphOffset_set",1,SWIGTYPE_p_ImFontConfig); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImFontConfig_GlyphOffset_set",2,SWIGTYPE_p_ImVec2); }  if (arg1) (arg1)->GlyphOffset = *arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontConfig_GlyphOffset_get(lua_State* L) { { int SWIG_arg = 0; ImFontConfig *arg1 = (ImFontConfig *) 0 ;
    ImVec2 *result = 0 ; SWIG_check_num_args("ImFontConfig::GlyphOffset",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::GlyphOffset",1,"ImFontConfig *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
      SWIG_fail_ptr("ImFontConfig_GlyphOffset_get",1,SWIGTYPE_p_ImFontConfig); }  result = (ImVec2 *)& ((arg1)->GlyphOffset);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImFontConfig_GlyphRanges_set(lua_State* L) { { int SWIG_arg = 0; ImFontConfig *arg1 = (ImFontConfig *) 0 ;
    ImWchar *arg2 = (ImWchar *) 0 ; SWIG_check_num_args("ImFontConfig::GlyphRanges",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::GlyphRanges",1,"ImFontConfig *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontConfig::GlyphRanges",2,"ImWchar const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
      SWIG_fail_ptr("ImFontConfig_GlyphRanges_set",1,SWIGTYPE_p_ImFontConfig); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_short,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("ImFontConfig_GlyphRanges_set",2,SWIGTYPE_p_unsigned_short); } 
    if (arg1) (arg1)->GlyphRanges = (ImWchar const *)arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontConfig_GlyphRanges_get(lua_State* L) { { int SWIG_arg = 0; ImFontConfig *arg1 = (ImFontConfig *) 0 ;
    ImWchar *result = 0 ; SWIG_check_num_args("ImFontConfig::GlyphRanges",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::GlyphRanges",1,"ImFontConfig *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
      SWIG_fail_ptr("ImFontConfig_GlyphRanges_get",1,SWIGTYPE_p_ImFontConfig); }  result = (ImWchar *) ((arg1)->GlyphRanges);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImFontConfig_GlyphMinAdvanceX_set(lua_State* L) { { int SWIG_arg = 0; ImFontConfig *arg1 = (ImFontConfig *) 0 ;
    float arg2 ; SWIG_check_num_args("ImFontConfig::GlyphMinAdvanceX",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::GlyphMinAdvanceX",1,"ImFontConfig *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontConfig::GlyphMinAdvanceX",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
      SWIG_fail_ptr("ImFontConfig_GlyphMinAdvanceX_set",1,SWIGTYPE_p_ImFontConfig); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->GlyphMinAdvanceX = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontConfig_GlyphMinAdvanceX_get(lua_State* L) { { int SWIG_arg = 0; ImFontConfig *arg1 = (ImFontConfig *) 0 ;
    float result; SWIG_check_num_args("ImFontConfig::GlyphMinAdvanceX",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::GlyphMinAdvanceX",1,"ImFontConfig *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
      SWIG_fail_ptr("ImFontConfig_GlyphMinAdvanceX_get",1,SWIGTYPE_p_ImFontConfig); } 
    result = (float) ((arg1)->GlyphMinAdvanceX); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontConfig_GlyphMaxAdvanceX_set(lua_State* L) { { int SWIG_arg = 0; ImFontConfig *arg1 = (ImFontConfig *) 0 ;
    float arg2 ; SWIG_check_num_args("ImFontConfig::GlyphMaxAdvanceX",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::GlyphMaxAdvanceX",1,"ImFontConfig *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontConfig::GlyphMaxAdvanceX",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
      SWIG_fail_ptr("ImFontConfig_GlyphMaxAdvanceX_set",1,SWIGTYPE_p_ImFontConfig); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->GlyphMaxAdvanceX = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontConfig_GlyphMaxAdvanceX_get(lua_State* L) { { int SWIG_arg = 0; ImFontConfig *arg1 = (ImFontConfig *) 0 ;
    float result; SWIG_check_num_args("ImFontConfig::GlyphMaxAdvanceX",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::GlyphMaxAdvanceX",1,"ImFontConfig *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
      SWIG_fail_ptr("ImFontConfig_GlyphMaxAdvanceX_get",1,SWIGTYPE_p_ImFontConfig); } 
    result = (float) ((arg1)->GlyphMaxAdvanceX); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontConfig_MergeMode_set(lua_State* L) { { int SWIG_arg = 0; ImFontConfig *arg1 = (ImFontConfig *) 0 ;
    bool arg2 ; SWIG_check_num_args("ImFontConfig::MergeMode",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::MergeMode",1,"ImFontConfig *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImFontConfig::MergeMode",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
      SWIG_fail_ptr("ImFontConfig_MergeMode_set",1,SWIGTYPE_p_ImFontConfig); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->MergeMode = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontConfig_MergeMode_get(lua_State* L) { { int SWIG_arg = 0; ImFontConfig *arg1 = (ImFontConfig *) 0 ;
    bool result; SWIG_check_num_args("ImFontConfig::MergeMode",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::MergeMode",1,"ImFontConfig *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
      SWIG_fail_ptr("ImFontConfig_MergeMode_get",1,SWIGTYPE_p_ImFontConfig); }  result = (bool) ((arg1)->MergeMode);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontConfig_FontBuilderFlags_set(lua_State* L) { { int SWIG_arg = 0; ImFontConfig *arg1 = (ImFontConfig *) 0 ;
    unsigned int arg2 ; SWIG_check_num_args("ImFontConfig::FontBuilderFlags",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::FontBuilderFlags",1,"ImFontConfig *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontConfig::FontBuilderFlags",2,"unsigned int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
      SWIG_fail_ptr("ImFontConfig_FontBuilderFlags_set",1,SWIGTYPE_p_ImFontConfig); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (unsigned int)lua_tonumber(L, 2);
    if (arg1) (arg1)->FontBuilderFlags = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontConfig_FontBuilderFlags_get(lua_State* L) { { int SWIG_arg = 0; ImFontConfig *arg1 = (ImFontConfig *) 0 ;
    unsigned int result; SWIG_check_num_args("ImFontConfig::FontBuilderFlags",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::FontBuilderFlags",1,"ImFontConfig *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
      SWIG_fail_ptr("ImFontConfig_FontBuilderFlags_get",1,SWIGTYPE_p_ImFontConfig); } 
    result = (unsigned int) ((arg1)->FontBuilderFlags); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontConfig_RasterizerMultiply_set(lua_State* L) { { int SWIG_arg = 0;
    ImFontConfig *arg1 = (ImFontConfig *) 0 ; float arg2 ; SWIG_check_num_args("ImFontConfig::RasterizerMultiply",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::RasterizerMultiply",1,"ImFontConfig *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontConfig::RasterizerMultiply",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
      SWIG_fail_ptr("ImFontConfig_RasterizerMultiply_set",1,SWIGTYPE_p_ImFontConfig); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->RasterizerMultiply = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontConfig_RasterizerMultiply_get(lua_State* L) { { int SWIG_arg = 0;
    ImFontConfig *arg1 = (ImFontConfig *) 0 ; float result; SWIG_check_num_args("ImFontConfig::RasterizerMultiply",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::RasterizerMultiply",1,"ImFontConfig *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
      SWIG_fail_ptr("ImFontConfig_RasterizerMultiply_get",1,SWIGTYPE_p_ImFontConfig); } 
    result = (float) ((arg1)->RasterizerMultiply); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontConfig_RasterizerDensity_set(lua_State* L) { { int SWIG_arg = 0;
    ImFontConfig *arg1 = (ImFontConfig *) 0 ; float arg2 ; SWIG_check_num_args("ImFontConfig::RasterizerDensity",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::RasterizerDensity",1,"ImFontConfig *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontConfig::RasterizerDensity",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
      SWIG_fail_ptr("ImFontConfig_RasterizerDensity_set",1,SWIGTYPE_p_ImFontConfig); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->RasterizerDensity = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontConfig_RasterizerDensity_get(lua_State* L) { { int SWIG_arg = 0;
    ImFontConfig *arg1 = (ImFontConfig *) 0 ; float result; SWIG_check_num_args("ImFontConfig::RasterizerDensity",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::RasterizerDensity",1,"ImFontConfig *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
      SWIG_fail_ptr("ImFontConfig_RasterizerDensity_get",1,SWIGTYPE_p_ImFontConfig); } 
    result = (float) ((arg1)->RasterizerDensity); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontConfig_EllipsisChar_set(lua_State* L) { { int SWIG_arg = 0; ImFontConfig *arg1 = (ImFontConfig *) 0 ;
    ImWchar arg2 ; SWIG_check_num_args("ImFontConfig::EllipsisChar",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::EllipsisChar",1,"ImFontConfig *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontConfig::EllipsisChar",2,"ImWchar");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
      SWIG_fail_ptr("ImFontConfig_EllipsisChar_set",1,SWIGTYPE_p_ImFontConfig); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (ImWchar)lua_tonumber(L, 2);
    if (arg1) (arg1)->EllipsisChar = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontConfig_EllipsisChar_get(lua_State* L) { { int SWIG_arg = 0; ImFontConfig *arg1 = (ImFontConfig *) 0 ;
    ImWchar result; SWIG_check_num_args("ImFontConfig::EllipsisChar",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::EllipsisChar",1,"ImFontConfig *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
      SWIG_fail_ptr("ImFontConfig_EllipsisChar_get",1,SWIGTYPE_p_ImFontConfig); }  result = (ImWchar) ((arg1)->EllipsisChar);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontConfig_Name_set(lua_State* L) { { int SWIG_arg = 0; ImFontConfig *arg1 = (ImFontConfig *) 0 ;
    char *arg2 = (char *) (char *)0 ; SWIG_check_num_args("ImFontConfig::Name",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::Name",1,"ImFontConfig *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImFontConfig::Name",2,"char [40]");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
      SWIG_fail_ptr("ImFontConfig_Name_set",1,SWIGTYPE_p_ImFontConfig); }  arg2 = (char *)lua_tostring(L, 2); { if(arg2) {
        strncpy((char*)arg1->Name, (const char *)arg2, 40-1); arg1->Name[40-1] = 0; }  else { arg1->Name[0] = 0; }  } 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontConfig_Name_get(lua_State* L) { { int SWIG_arg = 0; ImFontConfig *arg1 = (ImFontConfig *) 0 ;
    char *result = 0 ; SWIG_check_num_args("ImFontConfig::Name",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::Name",1,"ImFontConfig *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
      SWIG_fail_ptr("ImFontConfig_Name_get",1,SWIGTYPE_p_ImFontConfig); }  result = (char *)(char *) ((arg1)->Name);
    lua_pushstring(L,(const char *)result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontConfig_DstFont_set(lua_State* L) { { int SWIG_arg = 0; ImFontConfig *arg1 = (ImFontConfig *) 0 ;
    ImFont *arg2 = (ImFont *) 0 ; SWIG_check_num_args("ImFontConfig::DstFont",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::DstFont",1,"ImFontConfig *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontConfig::DstFont",2,"ImFont *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
      SWIG_fail_ptr("ImFontConfig_DstFont_set",1,SWIGTYPE_p_ImFontConfig); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImFont,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("ImFontConfig_DstFont_set",2,SWIGTYPE_p_ImFont); }  if (arg1) (arg1)->DstFont = arg2; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontConfig_DstFont_get(lua_State* L) { { int SWIG_arg = 0; ImFontConfig *arg1 = (ImFontConfig *) 0 ;
    ImFont *result = 0 ; SWIG_check_num_args("ImFontConfig::DstFont",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontConfig::DstFont",1,"ImFontConfig *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontConfig,0))){
      SWIG_fail_ptr("ImFontConfig_DstFont_get",1,SWIGTYPE_p_ImFontConfig); }  result = (ImFont *) ((arg1)->DstFont);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFont,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_new_ImFontConfig(lua_State* L) { { int SWIG_arg = 0; ImFontConfig *result = 0 ;
    SWIG_check_num_args("ImFontConfig::ImFontConfig",0,0) result = (ImFontConfig *)new ImFontConfig();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFontConfig,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static void swig_delete_ImFontConfig(void *obj) {
ImFontConfig *arg1 = (ImFontConfig *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImFontConfig(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImFontConfig);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImFontConfig_attributes[] = {
    { "FontData", _wrap_ImFontConfig_FontData_get, _wrap_ImFontConfig_FontData_set },
    { "FontDataSize", _wrap_ImFontConfig_FontDataSize_get, _wrap_ImFontConfig_FontDataSize_set },
    { "FontDataOwnedByAtlas", _wrap_ImFontConfig_FontDataOwnedByAtlas_get, _wrap_ImFontConfig_FontDataOwnedByAtlas_set },
    { "FontNo", _wrap_ImFontConfig_FontNo_get, _wrap_ImFontConfig_FontNo_set },
    { "SizePixels", _wrap_ImFontConfig_SizePixels_get, _wrap_ImFontConfig_SizePixels_set },
    { "OversampleH", _wrap_ImFontConfig_OversampleH_get, _wrap_ImFontConfig_OversampleH_set },
    { "OversampleV", _wrap_ImFontConfig_OversampleV_get, _wrap_ImFontConfig_OversampleV_set },
    { "PixelSnapH", _wrap_ImFontConfig_PixelSnapH_get, _wrap_ImFontConfig_PixelSnapH_set },
    { "GlyphExtraSpacing", _wrap_ImFontConfig_GlyphExtraSpacing_get, _wrap_ImFontConfig_GlyphExtraSpacing_set },
    { "GlyphOffset", _wrap_ImFontConfig_GlyphOffset_get, _wrap_ImFontConfig_GlyphOffset_set },
    { "GlyphRanges", _wrap_ImFontConfig_GlyphRanges_get, _wrap_ImFontConfig_GlyphRanges_set },
    { "GlyphMinAdvanceX", _wrap_ImFontConfig_GlyphMinAdvanceX_get, _wrap_ImFontConfig_GlyphMinAdvanceX_set },
    { "GlyphMaxAdvanceX", _wrap_ImFontConfig_GlyphMaxAdvanceX_get, _wrap_ImFontConfig_GlyphMaxAdvanceX_set },
    { "MergeMode", _wrap_ImFontConfig_MergeMode_get, _wrap_ImFontConfig_MergeMode_set },
    { "FontBuilderFlags", _wrap_ImFontConfig_FontBuilderFlags_get, _wrap_ImFontConfig_FontBuilderFlags_set },
    { "RasterizerMultiply", _wrap_ImFontConfig_RasterizerMultiply_get, _wrap_ImFontConfig_RasterizerMultiply_set },
    { "RasterizerDensity", _wrap_ImFontConfig_RasterizerDensity_get, _wrap_ImFontConfig_RasterizerDensity_set },
    { "EllipsisChar", _wrap_ImFontConfig_EllipsisChar_get, _wrap_ImFontConfig_EllipsisChar_set },
    { "Name", _wrap_ImFontConfig_Name_get, _wrap_ImFontConfig_Name_set },
    { "DstFont", _wrap_ImFontConfig_DstFont_get, _wrap_ImFontConfig_DstFont_set },
    {0,0,0}
};
static swig_lua_method swig_ImFontConfig_methods[]= {
    {0,0}
};
static swig_lua_method swig_ImFontConfig_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImFontConfig_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImFontConfig_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImFontConfig_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImFontConfig_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImFontConfig_Sf_SwigStatic = {
    "ImFontConfig",
    swig_ImFontConfig_Sf_SwigStatic_methods,
    swig_ImFontConfig_Sf_SwigStatic_attributes,
    swig_ImFontConfig_Sf_SwigStatic_constants,
    swig_ImFontConfig_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImFontConfig_bases[] = {0};
static const char *swig_ImFontConfig_base_names[] = {0};
static swig_lua_class _wrap_class_ImFontConfig = { "ImFontConfig", "ImFontConfig", &SWIGTYPE_p_ImFontConfig,_proxy__wrap_new_ImFontConfig, swig_delete_ImFontConfig, swig_ImFontConfig_methods, swig_ImFontConfig_attributes, &swig_ImFontConfig_Sf_SwigStatic, swig_ImFontConfig_meta, swig_ImFontConfig_bases, swig_ImFontConfig_base_names };

static int _wrap_ImFontGlyph_Colored_set(lua_State* L) { { int SWIG_arg = 0; ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
    unsigned int arg2 ; SWIG_check_num_args("ImFontGlyph::Colored",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyph::Colored",1,"ImFontGlyph *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontGlyph::Colored",2,"unsigned int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyph,0))){
      SWIG_fail_ptr("ImFontGlyph_Colored_set",1,SWIGTYPE_p_ImFontGlyph); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (unsigned int)lua_tonumber(L, 2);
    if (arg1) (arg1)->Colored = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontGlyph_Colored_get(lua_State* L) { { int SWIG_arg = 0; ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
    unsigned int result; SWIG_check_num_args("ImFontGlyph::Colored",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyph::Colored",1,"ImFontGlyph *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyph,0))){
      SWIG_fail_ptr("ImFontGlyph_Colored_get",1,SWIGTYPE_p_ImFontGlyph); }  result = (unsigned int) ((arg1)->Colored);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontGlyph_Visible_set(lua_State* L) { { int SWIG_arg = 0; ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
    unsigned int arg2 ; SWIG_check_num_args("ImFontGlyph::Visible",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyph::Visible",1,"ImFontGlyph *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontGlyph::Visible",2,"unsigned int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyph,0))){
      SWIG_fail_ptr("ImFontGlyph_Visible_set",1,SWIGTYPE_p_ImFontGlyph); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (unsigned int)lua_tonumber(L, 2);
    if (arg1) (arg1)->Visible = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontGlyph_Visible_get(lua_State* L) { { int SWIG_arg = 0; ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
    unsigned int result; SWIG_check_num_args("ImFontGlyph::Visible",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyph::Visible",1,"ImFontGlyph *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyph,0))){
      SWIG_fail_ptr("ImFontGlyph_Visible_get",1,SWIGTYPE_p_ImFontGlyph); }  result = (unsigned int) ((arg1)->Visible);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontGlyph_Codepoint_set(lua_State* L) { { int SWIG_arg = 0; ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
    unsigned int arg2 ; SWIG_check_num_args("ImFontGlyph::Codepoint",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyph::Codepoint",1,"ImFontGlyph *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontGlyph::Codepoint",2,"unsigned int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyph,0))){
      SWIG_fail_ptr("ImFontGlyph_Codepoint_set",1,SWIGTYPE_p_ImFontGlyph); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (unsigned int)lua_tonumber(L, 2);
    if (arg1) (arg1)->Codepoint = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontGlyph_Codepoint_get(lua_State* L) { { int SWIG_arg = 0; ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
    unsigned int result; SWIG_check_num_args("ImFontGlyph::Codepoint",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyph::Codepoint",1,"ImFontGlyph *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyph,0))){
      SWIG_fail_ptr("ImFontGlyph_Codepoint_get",1,SWIGTYPE_p_ImFontGlyph); }  result = (unsigned int) ((arg1)->Codepoint);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontGlyph_AdvanceX_set(lua_State* L) { { int SWIG_arg = 0; ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
    float arg2 ; SWIG_check_num_args("ImFontGlyph::AdvanceX",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyph::AdvanceX",1,"ImFontGlyph *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontGlyph::AdvanceX",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyph,0))){
      SWIG_fail_ptr("ImFontGlyph_AdvanceX_set",1,SWIGTYPE_p_ImFontGlyph); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->AdvanceX = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontGlyph_AdvanceX_get(lua_State* L) { { int SWIG_arg = 0; ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
    float result; SWIG_check_num_args("ImFontGlyph::AdvanceX",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyph::AdvanceX",1,"ImFontGlyph *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyph,0))){
      SWIG_fail_ptr("ImFontGlyph_AdvanceX_get",1,SWIGTYPE_p_ImFontGlyph); }  result = (float) ((arg1)->AdvanceX);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontGlyph_X0_set(lua_State* L) { { int SWIG_arg = 0; ImFontGlyph *arg1 = (ImFontGlyph *) 0 ; float arg2 ;
    SWIG_check_num_args("ImFontGlyph::X0",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyph::X0",1,"ImFontGlyph *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontGlyph::X0",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyph,0))){
      SWIG_fail_ptr("ImFontGlyph_X0_set",1,SWIGTYPE_p_ImFontGlyph); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->X0 = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontGlyph_X0_get(lua_State* L) { { int SWIG_arg = 0; ImFontGlyph *arg1 = (ImFontGlyph *) 0 ; float result;
    SWIG_check_num_args("ImFontGlyph::X0",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyph::X0",1,"ImFontGlyph *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyph,0))){
      SWIG_fail_ptr("ImFontGlyph_X0_get",1,SWIGTYPE_p_ImFontGlyph); }  result = (float) ((arg1)->X0);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontGlyph_Y0_set(lua_State* L) { { int SWIG_arg = 0; ImFontGlyph *arg1 = (ImFontGlyph *) 0 ; float arg2 ;
    SWIG_check_num_args("ImFontGlyph::Y0",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyph::Y0",1,"ImFontGlyph *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontGlyph::Y0",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyph,0))){
      SWIG_fail_ptr("ImFontGlyph_Y0_set",1,SWIGTYPE_p_ImFontGlyph); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->Y0 = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontGlyph_Y0_get(lua_State* L) { { int SWIG_arg = 0; ImFontGlyph *arg1 = (ImFontGlyph *) 0 ; float result;
    SWIG_check_num_args("ImFontGlyph::Y0",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyph::Y0",1,"ImFontGlyph *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyph,0))){
      SWIG_fail_ptr("ImFontGlyph_Y0_get",1,SWIGTYPE_p_ImFontGlyph); }  result = (float) ((arg1)->Y0);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontGlyph_X1_set(lua_State* L) { { int SWIG_arg = 0; ImFontGlyph *arg1 = (ImFontGlyph *) 0 ; float arg2 ;
    SWIG_check_num_args("ImFontGlyph::X1",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyph::X1",1,"ImFontGlyph *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontGlyph::X1",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyph,0))){
      SWIG_fail_ptr("ImFontGlyph_X1_set",1,SWIGTYPE_p_ImFontGlyph); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->X1 = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontGlyph_X1_get(lua_State* L) { { int SWIG_arg = 0; ImFontGlyph *arg1 = (ImFontGlyph *) 0 ; float result;
    SWIG_check_num_args("ImFontGlyph::X1",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyph::X1",1,"ImFontGlyph *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyph,0))){
      SWIG_fail_ptr("ImFontGlyph_X1_get",1,SWIGTYPE_p_ImFontGlyph); }  result = (float) ((arg1)->X1);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontGlyph_Y1_set(lua_State* L) { { int SWIG_arg = 0; ImFontGlyph *arg1 = (ImFontGlyph *) 0 ; float arg2 ;
    SWIG_check_num_args("ImFontGlyph::Y1",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyph::Y1",1,"ImFontGlyph *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontGlyph::Y1",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyph,0))){
      SWIG_fail_ptr("ImFontGlyph_Y1_set",1,SWIGTYPE_p_ImFontGlyph); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->Y1 = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontGlyph_Y1_get(lua_State* L) { { int SWIG_arg = 0; ImFontGlyph *arg1 = (ImFontGlyph *) 0 ; float result;
    SWIG_check_num_args("ImFontGlyph::Y1",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyph::Y1",1,"ImFontGlyph *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyph,0))){
      SWIG_fail_ptr("ImFontGlyph_Y1_get",1,SWIGTYPE_p_ImFontGlyph); }  result = (float) ((arg1)->Y1);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontGlyph_U0_set(lua_State* L) { { int SWIG_arg = 0; ImFontGlyph *arg1 = (ImFontGlyph *) 0 ; float arg2 ;
    SWIG_check_num_args("ImFontGlyph::U0",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyph::U0",1,"ImFontGlyph *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontGlyph::U0",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyph,0))){
      SWIG_fail_ptr("ImFontGlyph_U0_set",1,SWIGTYPE_p_ImFontGlyph); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->U0 = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontGlyph_U0_get(lua_State* L) { { int SWIG_arg = 0; ImFontGlyph *arg1 = (ImFontGlyph *) 0 ; float result;
    SWIG_check_num_args("ImFontGlyph::U0",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyph::U0",1,"ImFontGlyph *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyph,0))){
      SWIG_fail_ptr("ImFontGlyph_U0_get",1,SWIGTYPE_p_ImFontGlyph); }  result = (float) ((arg1)->U0);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontGlyph_V0_set(lua_State* L) { { int SWIG_arg = 0; ImFontGlyph *arg1 = (ImFontGlyph *) 0 ; float arg2 ;
    SWIG_check_num_args("ImFontGlyph::V0",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyph::V0",1,"ImFontGlyph *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontGlyph::V0",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyph,0))){
      SWIG_fail_ptr("ImFontGlyph_V0_set",1,SWIGTYPE_p_ImFontGlyph); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->V0 = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontGlyph_V0_get(lua_State* L) { { int SWIG_arg = 0; ImFontGlyph *arg1 = (ImFontGlyph *) 0 ; float result;
    SWIG_check_num_args("ImFontGlyph::V0",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyph::V0",1,"ImFontGlyph *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyph,0))){
      SWIG_fail_ptr("ImFontGlyph_V0_get",1,SWIGTYPE_p_ImFontGlyph); }  result = (float) ((arg1)->V0);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontGlyph_U1_set(lua_State* L) { { int SWIG_arg = 0; ImFontGlyph *arg1 = (ImFontGlyph *) 0 ; float arg2 ;
    SWIG_check_num_args("ImFontGlyph::U1",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyph::U1",1,"ImFontGlyph *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontGlyph::U1",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyph,0))){
      SWIG_fail_ptr("ImFontGlyph_U1_set",1,SWIGTYPE_p_ImFontGlyph); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->U1 = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontGlyph_U1_get(lua_State* L) { { int SWIG_arg = 0; ImFontGlyph *arg1 = (ImFontGlyph *) 0 ; float result;
    SWIG_check_num_args("ImFontGlyph::U1",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyph::U1",1,"ImFontGlyph *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyph,0))){
      SWIG_fail_ptr("ImFontGlyph_U1_get",1,SWIGTYPE_p_ImFontGlyph); }  result = (float) ((arg1)->U1);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontGlyph_V1_set(lua_State* L) { { int SWIG_arg = 0; ImFontGlyph *arg1 = (ImFontGlyph *) 0 ; float arg2 ;
    SWIG_check_num_args("ImFontGlyph::V1",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyph::V1",1,"ImFontGlyph *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontGlyph::V1",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyph,0))){
      SWIG_fail_ptr("ImFontGlyph_V1_set",1,SWIGTYPE_p_ImFontGlyph); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->V1 = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontGlyph_V1_get(lua_State* L) { { int SWIG_arg = 0; ImFontGlyph *arg1 = (ImFontGlyph *) 0 ; float result;
    SWIG_check_num_args("ImFontGlyph::V1",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyph::V1",1,"ImFontGlyph *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyph,0))){
      SWIG_fail_ptr("ImFontGlyph_V1_get",1,SWIGTYPE_p_ImFontGlyph); }  result = (float) ((arg1)->V1);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_ImFontGlyph(lua_State* L) { { int SWIG_arg = 0; ImFontGlyph *result = 0 ;
    SWIG_check_num_args("ImFontGlyph::ImFontGlyph",0,0) result = (ImFontGlyph *)new ImFontGlyph();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFontGlyph,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static void swig_delete_ImFontGlyph(void *obj) {
ImFontGlyph *arg1 = (ImFontGlyph *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImFontGlyph(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImFontGlyph);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImFontGlyph_attributes[] = {
    { "Colored", _wrap_ImFontGlyph_Colored_get, _wrap_ImFontGlyph_Colored_set },
    { "Visible", _wrap_ImFontGlyph_Visible_get, _wrap_ImFontGlyph_Visible_set },
    { "Codepoint", _wrap_ImFontGlyph_Codepoint_get, _wrap_ImFontGlyph_Codepoint_set },
    { "AdvanceX", _wrap_ImFontGlyph_AdvanceX_get, _wrap_ImFontGlyph_AdvanceX_set },
    { "X0", _wrap_ImFontGlyph_X0_get, _wrap_ImFontGlyph_X0_set },
    { "Y0", _wrap_ImFontGlyph_Y0_get, _wrap_ImFontGlyph_Y0_set },
    { "X1", _wrap_ImFontGlyph_X1_get, _wrap_ImFontGlyph_X1_set },
    { "Y1", _wrap_ImFontGlyph_Y1_get, _wrap_ImFontGlyph_Y1_set },
    { "U0", _wrap_ImFontGlyph_U0_get, _wrap_ImFontGlyph_U0_set },
    { "V0", _wrap_ImFontGlyph_V0_get, _wrap_ImFontGlyph_V0_set },
    { "U1", _wrap_ImFontGlyph_U1_get, _wrap_ImFontGlyph_U1_set },
    { "V1", _wrap_ImFontGlyph_V1_get, _wrap_ImFontGlyph_V1_set },
    {0,0,0}
};
static swig_lua_method swig_ImFontGlyph_methods[]= {
    {0,0}
};
static swig_lua_method swig_ImFontGlyph_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImFontGlyph_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImFontGlyph_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImFontGlyph_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImFontGlyph_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImFontGlyph_Sf_SwigStatic = {
    "ImFontGlyph",
    swig_ImFontGlyph_Sf_SwigStatic_methods,
    swig_ImFontGlyph_Sf_SwigStatic_attributes,
    swig_ImFontGlyph_Sf_SwigStatic_constants,
    swig_ImFontGlyph_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImFontGlyph_bases[] = {0};
static const char *swig_ImFontGlyph_base_names[] = {0};
static swig_lua_class _wrap_class_ImFontGlyph = { "ImFontGlyph", "ImFontGlyph", &SWIGTYPE_p_ImFontGlyph,_proxy__wrap_new_ImFontGlyph, swig_delete_ImFontGlyph, swig_ImFontGlyph_methods, swig_ImFontGlyph_attributes, &swig_ImFontGlyph_Sf_SwigStatic, swig_ImFontGlyph_meta, swig_ImFontGlyph_bases, swig_ImFontGlyph_base_names };

static int _wrap_ImFontGlyphRangesBuilder_UsedChars_set(lua_State* L) { { int SWIG_arg = 0;
    ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) 0 ; ImVector< ImU32 > *arg2 = (ImVector< ImU32 > *) 0 ;
    SWIG_check_num_args("ImFontGlyphRangesBuilder::UsedChars",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyphRangesBuilder::UsedChars",1,"ImFontGlyphRangesBuilder *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontGlyphRangesBuilder::UsedChars",2,"ImVector< ImU32 > *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyphRangesBuilder,0))){
      SWIG_fail_ptr("ImFontGlyphRangesBuilder_UsedChars_set",1,SWIGTYPE_p_ImFontGlyphRangesBuilder); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_unsigned_int_t,0))){
      SWIG_fail_ptr("ImFontGlyphRangesBuilder_UsedChars_set",2,SWIGTYPE_p_ImVectorT_unsigned_int_t); } 
    if (arg1) (arg1)->UsedChars = *arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontGlyphRangesBuilder_UsedChars_get(lua_State* L) { { int SWIG_arg = 0;
    ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) 0 ; ImVector< ImU32 > *result = 0 ;
    SWIG_check_num_args("ImFontGlyphRangesBuilder::UsedChars",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyphRangesBuilder::UsedChars",1,"ImFontGlyphRangesBuilder *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyphRangesBuilder,0))){
      SWIG_fail_ptr("ImFontGlyphRangesBuilder_UsedChars_get",1,SWIGTYPE_p_ImFontGlyphRangesBuilder); } 
    result = (ImVector< ImU32 > *)& ((arg1)->UsedChars);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_unsigned_int_t,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_new_ImFontGlyphRangesBuilder(lua_State* L) { { int SWIG_arg = 0; ImFontGlyphRangesBuilder *result = 0 ;
    SWIG_check_num_args("ImFontGlyphRangesBuilder::ImFontGlyphRangesBuilder",0,0)
    result = (ImFontGlyphRangesBuilder *)new ImFontGlyphRangesBuilder();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFontGlyphRangesBuilder,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImFontGlyphRangesBuilder_Clear(lua_State* L) { { int SWIG_arg = 0;
    ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) 0 ; SWIG_check_num_args("ImFontGlyphRangesBuilder::Clear",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyphRangesBuilder::Clear",1,"ImFontGlyphRangesBuilder *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyphRangesBuilder,0))){
      SWIG_fail_ptr("ImFontGlyphRangesBuilder_Clear",1,SWIGTYPE_p_ImFontGlyphRangesBuilder); }  (arg1)->Clear();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontGlyphRangesBuilder_GetBit(lua_State* L) { { int SWIG_arg = 0;
    ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) 0 ; size_t arg2 ; bool result;
    SWIG_check_num_args("ImFontGlyphRangesBuilder::GetBit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyphRangesBuilder::GetBit",1,"ImFontGlyphRangesBuilder const *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontGlyphRangesBuilder::GetBit",2,"size_t");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyphRangesBuilder,0))){
      SWIG_fail_ptr("ImFontGlyphRangesBuilder_GetBit",1,SWIGTYPE_p_ImFontGlyphRangesBuilder); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (size_t)lua_tonumber(L, 2);
    result = (bool)((ImFontGlyphRangesBuilder const *)arg1)->GetBit(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontGlyphRangesBuilder_SetBit(lua_State* L) { { int SWIG_arg = 0;
    ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) 0 ; size_t arg2 ;
    SWIG_check_num_args("ImFontGlyphRangesBuilder::SetBit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyphRangesBuilder::SetBit",1,"ImFontGlyphRangesBuilder *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontGlyphRangesBuilder::SetBit",2,"size_t");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyphRangesBuilder,0))){
      SWIG_fail_ptr("ImFontGlyphRangesBuilder_SetBit",1,SWIGTYPE_p_ImFontGlyphRangesBuilder); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (size_t)lua_tonumber(L, 2);
    (arg1)->SetBit(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontGlyphRangesBuilder_AddChar(lua_State* L) { { int SWIG_arg = 0;
    ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) 0 ; ImWchar arg2 ;
    SWIG_check_num_args("ImFontGlyphRangesBuilder::AddChar",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyphRangesBuilder::AddChar",1,"ImFontGlyphRangesBuilder *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontGlyphRangesBuilder::AddChar",2,"ImWchar");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyphRangesBuilder,0))){
      SWIG_fail_ptr("ImFontGlyphRangesBuilder_AddChar",1,SWIGTYPE_p_ImFontGlyphRangesBuilder); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (ImWchar)lua_tonumber(L, 2);
    (arg1)->AddChar(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontGlyphRangesBuilder_AddText(lua_State* L) { { int SWIG_arg = 0;
    ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) 0 ; char *arg2 = (char *) 0 ; char *arg3 = (char *) NULL ;
    SWIG_check_num_args("ImFontGlyphRangesBuilder::AddText",2,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyphRangesBuilder::AddText",1,"ImFontGlyphRangesBuilder *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImFontGlyphRangesBuilder::AddText",2,"char const *");
    if(lua_gettop(L)>=3 && !SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImFontGlyphRangesBuilder::AddText",3,"char const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyphRangesBuilder,0))){
      SWIG_fail_ptr("ImFontGlyphRangesBuilder_AddText",1,SWIGTYPE_p_ImFontGlyphRangesBuilder); } 
    arg2 = (char *)lua_tostring(L, 2); if(lua_gettop(L)>=3){ arg3 = (char *)lua_tostring(L, 3);} 
    (arg1)->AddText((char const *)arg2,(char const *)arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontGlyphRangesBuilder_AddRanges(lua_State* L) { { int SWIG_arg = 0;
    ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) 0 ; ImWchar *arg2 = (ImWchar *) 0 ;
    SWIG_check_num_args("ImFontGlyphRangesBuilder::AddRanges",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyphRangesBuilder::AddRanges",1,"ImFontGlyphRangesBuilder *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontGlyphRangesBuilder::AddRanges",2,"ImWchar const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyphRangesBuilder,0))){
      SWIG_fail_ptr("ImFontGlyphRangesBuilder_AddRanges",1,SWIGTYPE_p_ImFontGlyphRangesBuilder); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_short,0))){
      SWIG_fail_ptr("ImFontGlyphRangesBuilder_AddRanges",2,SWIGTYPE_p_unsigned_short); } 
    (arg1)->AddRanges((ImWchar const *)arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontGlyphRangesBuilder_BuildRanges(lua_State* L) { { int SWIG_arg = 0;
    ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) 0 ; ImVector< ImWchar > *arg2 = (ImVector< ImWchar > *) 0 ;
    SWIG_check_num_args("ImFontGlyphRangesBuilder::BuildRanges",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontGlyphRangesBuilder::BuildRanges",1,"ImFontGlyphRangesBuilder *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontGlyphRangesBuilder::BuildRanges",2,"ImVector< ImWchar > *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontGlyphRangesBuilder,0))){
      SWIG_fail_ptr("ImFontGlyphRangesBuilder_BuildRanges",1,SWIGTYPE_p_ImFontGlyphRangesBuilder); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_unsigned_short_t,0))){
      SWIG_fail_ptr("ImFontGlyphRangesBuilder_BuildRanges",2,SWIGTYPE_p_ImVectorT_unsigned_short_t); } 
    (arg1)->BuildRanges(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static void swig_delete_ImFontGlyphRangesBuilder(void *obj) {
ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImFontGlyphRangesBuilder(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImFontGlyphRangesBuilder);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImFontGlyphRangesBuilder_attributes[] = {
    { "UsedChars", _wrap_ImFontGlyphRangesBuilder_UsedChars_get, _wrap_ImFontGlyphRangesBuilder_UsedChars_set },
    {0,0,0}
};
static swig_lua_method swig_ImFontGlyphRangesBuilder_methods[]= {
    { "Clear", _wrap_ImFontGlyphRangesBuilder_Clear},
    { "GetBit", _wrap_ImFontGlyphRangesBuilder_GetBit},
    { "SetBit", _wrap_ImFontGlyphRangesBuilder_SetBit},
    { "AddChar", _wrap_ImFontGlyphRangesBuilder_AddChar},
    { "AddText", _wrap_ImFontGlyphRangesBuilder_AddText},
    { "AddRanges", _wrap_ImFontGlyphRangesBuilder_AddRanges},
    { "BuildRanges", _wrap_ImFontGlyphRangesBuilder_BuildRanges},
    {0,0}
};
static swig_lua_method swig_ImFontGlyphRangesBuilder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImFontGlyphRangesBuilder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImFontGlyphRangesBuilder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImFontGlyphRangesBuilder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImFontGlyphRangesBuilder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImFontGlyphRangesBuilder_Sf_SwigStatic = {
    "ImFontGlyphRangesBuilder",
    swig_ImFontGlyphRangesBuilder_Sf_SwigStatic_methods,
    swig_ImFontGlyphRangesBuilder_Sf_SwigStatic_attributes,
    swig_ImFontGlyphRangesBuilder_Sf_SwigStatic_constants,
    swig_ImFontGlyphRangesBuilder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImFontGlyphRangesBuilder_bases[] = {0};
static const char *swig_ImFontGlyphRangesBuilder_base_names[] = {0};
static swig_lua_class _wrap_class_ImFontGlyphRangesBuilder = { "ImFontGlyphRangesBuilder", "ImFontGlyphRangesBuilder", &SWIGTYPE_p_ImFontGlyphRangesBuilder,_proxy__wrap_new_ImFontGlyphRangesBuilder, swig_delete_ImFontGlyphRangesBuilder, swig_ImFontGlyphRangesBuilder_methods, swig_ImFontGlyphRangesBuilder_attributes, &swig_ImFontGlyphRangesBuilder_Sf_SwigStatic, swig_ImFontGlyphRangesBuilder_meta, swig_ImFontGlyphRangesBuilder_bases, swig_ImFontGlyphRangesBuilder_base_names };

static int _wrap_ImFontAtlasCustomRect_Width_set(lua_State* L) { { int SWIG_arg = 0;
    ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ; unsigned short arg2 ;
    SWIG_check_num_args("ImFontAtlasCustomRect::Width",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlasCustomRect::Width",1,"ImFontAtlasCustomRect *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontAtlasCustomRect::Width",2,"unsigned short");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlasCustomRect,0))){
      SWIG_fail_ptr("ImFontAtlasCustomRect_Width_set",1,SWIGTYPE_p_ImFontAtlasCustomRect); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (unsigned short)lua_tonumber(L, 2);
    if (arg1) (arg1)->Width = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlasCustomRect_Width_get(lua_State* L) { { int SWIG_arg = 0;
    ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ; unsigned short result;
    SWIG_check_num_args("ImFontAtlasCustomRect::Width",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlasCustomRect::Width",1,"ImFontAtlasCustomRect *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlasCustomRect,0))){
      SWIG_fail_ptr("ImFontAtlasCustomRect_Width_get",1,SWIGTYPE_p_ImFontAtlasCustomRect); } 
    result = (unsigned short) ((arg1)->Width); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlasCustomRect_Height_set(lua_State* L) { { int SWIG_arg = 0;
    ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ; unsigned short arg2 ;
    SWIG_check_num_args("ImFontAtlasCustomRect::Height",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlasCustomRect::Height",1,"ImFontAtlasCustomRect *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontAtlasCustomRect::Height",2,"unsigned short");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlasCustomRect,0))){
      SWIG_fail_ptr("ImFontAtlasCustomRect_Height_set",1,SWIGTYPE_p_ImFontAtlasCustomRect); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (unsigned short)lua_tonumber(L, 2);
    if (arg1) (arg1)->Height = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlasCustomRect_Height_get(lua_State* L) { { int SWIG_arg = 0;
    ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ; unsigned short result;
    SWIG_check_num_args("ImFontAtlasCustomRect::Height",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlasCustomRect::Height",1,"ImFontAtlasCustomRect *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlasCustomRect,0))){
      SWIG_fail_ptr("ImFontAtlasCustomRect_Height_get",1,SWIGTYPE_p_ImFontAtlasCustomRect); } 
    result = (unsigned short) ((arg1)->Height); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlasCustomRect_X_set(lua_State* L) { { int SWIG_arg = 0;
    ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ; unsigned short arg2 ;
    SWIG_check_num_args("ImFontAtlasCustomRect::X",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlasCustomRect::X",1,"ImFontAtlasCustomRect *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontAtlasCustomRect::X",2,"unsigned short");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlasCustomRect,0))){
      SWIG_fail_ptr("ImFontAtlasCustomRect_X_set",1,SWIGTYPE_p_ImFontAtlasCustomRect); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (unsigned short)lua_tonumber(L, 2);
    if (arg1) (arg1)->X = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlasCustomRect_X_get(lua_State* L) { { int SWIG_arg = 0;
    ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ; unsigned short result;
    SWIG_check_num_args("ImFontAtlasCustomRect::X",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlasCustomRect::X",1,"ImFontAtlasCustomRect *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlasCustomRect,0))){
      SWIG_fail_ptr("ImFontAtlasCustomRect_X_get",1,SWIGTYPE_p_ImFontAtlasCustomRect); }  result = (unsigned short) ((arg1)->X);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlasCustomRect_Y_set(lua_State* L) { { int SWIG_arg = 0;
    ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ; unsigned short arg2 ;
    SWIG_check_num_args("ImFontAtlasCustomRect::Y",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlasCustomRect::Y",1,"ImFontAtlasCustomRect *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontAtlasCustomRect::Y",2,"unsigned short");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlasCustomRect,0))){
      SWIG_fail_ptr("ImFontAtlasCustomRect_Y_set",1,SWIGTYPE_p_ImFontAtlasCustomRect); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (unsigned short)lua_tonumber(L, 2);
    if (arg1) (arg1)->Y = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlasCustomRect_Y_get(lua_State* L) { { int SWIG_arg = 0;
    ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ; unsigned short result;
    SWIG_check_num_args("ImFontAtlasCustomRect::Y",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlasCustomRect::Y",1,"ImFontAtlasCustomRect *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlasCustomRect,0))){
      SWIG_fail_ptr("ImFontAtlasCustomRect_Y_get",1,SWIGTYPE_p_ImFontAtlasCustomRect); }  result = (unsigned short) ((arg1)->Y);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlasCustomRect_GlyphID_set(lua_State* L) { { int SWIG_arg = 0;
    ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ; unsigned int arg2 ;
    SWIG_check_num_args("ImFontAtlasCustomRect::GlyphID",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlasCustomRect::GlyphID",1,"ImFontAtlasCustomRect *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontAtlasCustomRect::GlyphID",2,"unsigned int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlasCustomRect,0))){
      SWIG_fail_ptr("ImFontAtlasCustomRect_GlyphID_set",1,SWIGTYPE_p_ImFontAtlasCustomRect); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (unsigned int)lua_tonumber(L, 2);
    if (arg1) (arg1)->GlyphID = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlasCustomRect_GlyphID_get(lua_State* L) { { int SWIG_arg = 0;
    ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ; unsigned int result;
    SWIG_check_num_args("ImFontAtlasCustomRect::GlyphID",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlasCustomRect::GlyphID",1,"ImFontAtlasCustomRect *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlasCustomRect,0))){
      SWIG_fail_ptr("ImFontAtlasCustomRect_GlyphID_get",1,SWIGTYPE_p_ImFontAtlasCustomRect); } 
    result = (unsigned int) ((arg1)->GlyphID); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlasCustomRect_GlyphColored_set(lua_State* L) { { int SWIG_arg = 0;
    ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ; unsigned int arg2 ;
    SWIG_check_num_args("ImFontAtlasCustomRect::GlyphColored",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlasCustomRect::GlyphColored",1,"ImFontAtlasCustomRect *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontAtlasCustomRect::GlyphColored",2,"unsigned int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlasCustomRect,0))){
      SWIG_fail_ptr("ImFontAtlasCustomRect_GlyphColored_set",1,SWIGTYPE_p_ImFontAtlasCustomRect); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (unsigned int)lua_tonumber(L, 2);
    if (arg1) (arg1)->GlyphColored = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlasCustomRect_GlyphColored_get(lua_State* L) { { int SWIG_arg = 0;
    ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ; unsigned int result;
    SWIG_check_num_args("ImFontAtlasCustomRect::GlyphColored",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlasCustomRect::GlyphColored",1,"ImFontAtlasCustomRect *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlasCustomRect,0))){
      SWIG_fail_ptr("ImFontAtlasCustomRect_GlyphColored_get",1,SWIGTYPE_p_ImFontAtlasCustomRect); } 
    result = (unsigned int) ((arg1)->GlyphColored); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlasCustomRect_GlyphAdvanceX_set(lua_State* L) { { int SWIG_arg = 0;
    ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ; float arg2 ;
    SWIG_check_num_args("ImFontAtlasCustomRect::GlyphAdvanceX",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlasCustomRect::GlyphAdvanceX",1,"ImFontAtlasCustomRect *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontAtlasCustomRect::GlyphAdvanceX",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlasCustomRect,0))){
      SWIG_fail_ptr("ImFontAtlasCustomRect_GlyphAdvanceX_set",1,SWIGTYPE_p_ImFontAtlasCustomRect); } 
    arg2 = (float)lua_tonumber(L, 2); if (arg1) (arg1)->GlyphAdvanceX = arg2; return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImFontAtlasCustomRect_GlyphAdvanceX_get(lua_State* L) { { int SWIG_arg = 0;
    ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ; float result;
    SWIG_check_num_args("ImFontAtlasCustomRect::GlyphAdvanceX",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlasCustomRect::GlyphAdvanceX",1,"ImFontAtlasCustomRect *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlasCustomRect,0))){
      SWIG_fail_ptr("ImFontAtlasCustomRect_GlyphAdvanceX_get",1,SWIGTYPE_p_ImFontAtlasCustomRect); } 
    result = (float) ((arg1)->GlyphAdvanceX); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlasCustomRect_GlyphOffset_set(lua_State* L) { { int SWIG_arg = 0;
    ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ; ImVec2 *arg2 = (ImVec2 *) 0 ;
    SWIG_check_num_args("ImFontAtlasCustomRect::GlyphOffset",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlasCustomRect::GlyphOffset",1,"ImFontAtlasCustomRect *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontAtlasCustomRect::GlyphOffset",2,"ImVec2 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlasCustomRect,0))){
      SWIG_fail_ptr("ImFontAtlasCustomRect_GlyphOffset_set",1,SWIGTYPE_p_ImFontAtlasCustomRect); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImFontAtlasCustomRect_GlyphOffset_set",2,SWIGTYPE_p_ImVec2); }  if (arg1) (arg1)->GlyphOffset = *arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlasCustomRect_GlyphOffset_get(lua_State* L) { { int SWIG_arg = 0;
    ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ; ImVec2 *result = 0 ;
    SWIG_check_num_args("ImFontAtlasCustomRect::GlyphOffset",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlasCustomRect::GlyphOffset",1,"ImFontAtlasCustomRect *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlasCustomRect,0))){
      SWIG_fail_ptr("ImFontAtlasCustomRect_GlyphOffset_get",1,SWIGTYPE_p_ImFontAtlasCustomRect); } 
    result = (ImVec2 *)& ((arg1)->GlyphOffset); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++;  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlasCustomRect_Font_set(lua_State* L) { { int SWIG_arg = 0;
    ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ; ImFont *arg2 = (ImFont *) 0 ;
    SWIG_check_num_args("ImFontAtlasCustomRect::Font",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlasCustomRect::Font",1,"ImFontAtlasCustomRect *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontAtlasCustomRect::Font",2,"ImFont *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlasCustomRect,0))){
      SWIG_fail_ptr("ImFontAtlasCustomRect_Font_set",1,SWIGTYPE_p_ImFontAtlasCustomRect); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImFont,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("ImFontAtlasCustomRect_Font_set",2,SWIGTYPE_p_ImFont); }  if (arg1) (arg1)->Font = arg2; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlasCustomRect_Font_get(lua_State* L) { { int SWIG_arg = 0;
    ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ; ImFont *result = 0 ;
    SWIG_check_num_args("ImFontAtlasCustomRect::Font",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlasCustomRect::Font",1,"ImFontAtlasCustomRect *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlasCustomRect,0))){
      SWIG_fail_ptr("ImFontAtlasCustomRect_Font_get",1,SWIGTYPE_p_ImFontAtlasCustomRect); }  result = (ImFont *) ((arg1)->Font);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFont,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_new_ImFontAtlasCustomRect(lua_State* L) { { int SWIG_arg = 0; ImFontAtlasCustomRect *result = 0 ;
    SWIG_check_num_args("ImFontAtlasCustomRect::ImFontAtlasCustomRect",0,0)
    result = (ImFontAtlasCustomRect *)new ImFontAtlasCustomRect();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFontAtlasCustomRect,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImFontAtlasCustomRect_IsPacked(lua_State* L) { { int SWIG_arg = 0;
    ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ; bool result;
    SWIG_check_num_args("ImFontAtlasCustomRect::IsPacked",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlasCustomRect::IsPacked",1,"ImFontAtlasCustomRect const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlasCustomRect,0))){
      SWIG_fail_ptr("ImFontAtlasCustomRect_IsPacked",1,SWIGTYPE_p_ImFontAtlasCustomRect); } 
    result = (bool)((ImFontAtlasCustomRect const *)arg1)->IsPacked(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static void swig_delete_ImFontAtlasCustomRect(void *obj) {
ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImFontAtlasCustomRect(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImFontAtlasCustomRect);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImFontAtlasCustomRect_attributes[] = {
    { "Width", _wrap_ImFontAtlasCustomRect_Width_get, _wrap_ImFontAtlasCustomRect_Width_set },
    { "Height", _wrap_ImFontAtlasCustomRect_Height_get, _wrap_ImFontAtlasCustomRect_Height_set },
    { "X", _wrap_ImFontAtlasCustomRect_X_get, _wrap_ImFontAtlasCustomRect_X_set },
    { "Y", _wrap_ImFontAtlasCustomRect_Y_get, _wrap_ImFontAtlasCustomRect_Y_set },
    { "GlyphID", _wrap_ImFontAtlasCustomRect_GlyphID_get, _wrap_ImFontAtlasCustomRect_GlyphID_set },
    { "GlyphColored", _wrap_ImFontAtlasCustomRect_GlyphColored_get, _wrap_ImFontAtlasCustomRect_GlyphColored_set },
    { "GlyphAdvanceX", _wrap_ImFontAtlasCustomRect_GlyphAdvanceX_get, _wrap_ImFontAtlasCustomRect_GlyphAdvanceX_set },
    { "GlyphOffset", _wrap_ImFontAtlasCustomRect_GlyphOffset_get, _wrap_ImFontAtlasCustomRect_GlyphOffset_set },
    { "Font", _wrap_ImFontAtlasCustomRect_Font_get, _wrap_ImFontAtlasCustomRect_Font_set },
    {0,0,0}
};
static swig_lua_method swig_ImFontAtlasCustomRect_methods[]= {
    { "IsPacked", _wrap_ImFontAtlasCustomRect_IsPacked},
    {0,0}
};
static swig_lua_method swig_ImFontAtlasCustomRect_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImFontAtlasCustomRect_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImFontAtlasCustomRect_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImFontAtlasCustomRect_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImFontAtlasCustomRect_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImFontAtlasCustomRect_Sf_SwigStatic = {
    "ImFontAtlasCustomRect",
    swig_ImFontAtlasCustomRect_Sf_SwigStatic_methods,
    swig_ImFontAtlasCustomRect_Sf_SwigStatic_attributes,
    swig_ImFontAtlasCustomRect_Sf_SwigStatic_constants,
    swig_ImFontAtlasCustomRect_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImFontAtlasCustomRect_bases[] = {0};
static const char *swig_ImFontAtlasCustomRect_base_names[] = {0};
static swig_lua_class _wrap_class_ImFontAtlasCustomRect = { "ImFontAtlasCustomRect", "ImFontAtlasCustomRect", &SWIGTYPE_p_ImFontAtlasCustomRect,_proxy__wrap_new_ImFontAtlasCustomRect, swig_delete_ImFontAtlasCustomRect, swig_ImFontAtlasCustomRect_methods, swig_ImFontAtlasCustomRect_attributes, &swig_ImFontAtlasCustomRect_Sf_SwigStatic, swig_ImFontAtlasCustomRect_meta, swig_ImFontAtlasCustomRect_bases, swig_ImFontAtlasCustomRect_base_names };

static int _wrap_new_ImFontAtlas(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *result = 0 ;
    SWIG_check_num_args("ImFontAtlas::ImFontAtlas",0,0) result = (ImFontAtlas *)new ImFontAtlas();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFontAtlas,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImFontAtlas_AddFont(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    ImFontConfig *arg2 = (ImFontConfig *) 0 ; ImFont *result = 0 ; SWIG_check_num_args("ImFontAtlas::AddFont",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::AddFont",1,"ImFontAtlas *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontAtlas::AddFont",2,"ImFontConfig const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_AddFont",1,SWIGTYPE_p_ImFontAtlas); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImFontConfig,0))){
      SWIG_fail_ptr("ImFontAtlas_AddFont",2,SWIGTYPE_p_ImFontConfig); } 
    result = (ImFont *)(arg1)->AddFont((ImFontConfig const *)arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFont,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImFontAtlas_AddFontDefault(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    ImFontConfig *arg2 = (ImFontConfig *) NULL ; ImFont *result = 0 ; SWIG_check_num_args("ImFontAtlas::AddFontDefault",1,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::AddFontDefault",1,"ImFontAtlas *");
    if(lua_gettop(L)>=2 && !SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontAtlas::AddFontDefault",2,"ImFontConfig const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_AddFontDefault",1,SWIGTYPE_p_ImFontAtlas); }  if(lua_gettop(L)>=2){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImFontConfig,0))){
        SWIG_fail_ptr("ImFontAtlas_AddFontDefault",2,SWIGTYPE_p_ImFontConfig); }  } 
    result = (ImFont *)(arg1)->AddFontDefault((ImFontConfig const *)arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFont,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImFontAtlas_AddFontFromFileTTF(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    char *arg2 = (char *) 0 ; float arg3 ; ImFontConfig *arg4 = (ImFontConfig *) NULL ; ImWchar *arg5 = (ImWchar *) NULL ;
    ImFont *result = 0 ; SWIG_check_num_args("ImFontAtlas::AddFontFromFileTTF",3,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::AddFontFromFileTTF",1,"ImFontAtlas *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImFontAtlas::AddFontFromFileTTF",2,"char const *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImFontAtlas::AddFontFromFileTTF",3,"float");
    if(lua_gettop(L)>=4 && !SWIG_isptrtype(L,4)) SWIG_fail_arg("ImFontAtlas::AddFontFromFileTTF",4,"ImFontConfig const *");
    if(lua_gettop(L)>=5 && !SWIG_isptrtype(L,5)) SWIG_fail_arg("ImFontAtlas::AddFontFromFileTTF",5,"ImWchar const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_AddFontFromFileTTF",1,SWIGTYPE_p_ImFontAtlas); }  arg2 = (char *)lua_tostring(L, 2);
    arg3 = (float)lua_tonumber(L, 3); if(lua_gettop(L)>=4){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImFontConfig,0))){
        SWIG_fail_ptr("ImFontAtlas_AddFontFromFileTTF",4,SWIGTYPE_p_ImFontConfig); }  }  if(lua_gettop(L)>=5){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_unsigned_short,0))){
        SWIG_fail_ptr("ImFontAtlas_AddFontFromFileTTF",5,SWIGTYPE_p_unsigned_short); }  } 
    result = (ImFont *)(arg1)->AddFontFromFileTTF((char const *)arg2,arg3,(ImFontConfig const *)arg4,(ImWchar const *)arg5);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFont,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImFontAtlas_AddFontFromMemoryTTF(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    void *arg2 = (void *) 0 ; int arg3 ; float arg4 ; ImFontConfig *arg5 = (ImFontConfig *) NULL ;
    ImWchar *arg6 = (ImWchar *) NULL ; ImFont *result = 0 ; SWIG_check_num_args("ImFontAtlas::AddFontFromMemoryTTF",4,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryTTF",1,"ImFontAtlas *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryTTF",2,"void *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryTTF",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryTTF",4,"float");
    if(lua_gettop(L)>=5 && !SWIG_isptrtype(L,5)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryTTF",5,"ImFontConfig const *");
    if(lua_gettop(L)>=6 && !SWIG_isptrtype(L,6)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryTTF",6,"ImWchar const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_AddFontFromMemoryTTF",1,SWIGTYPE_p_ImFontAtlas); } 
    arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImFontAtlas_AddFontFromMemoryTTF"); arg3 = (int)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4); if(lua_gettop(L)>=5){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImFontConfig,0))){
        SWIG_fail_ptr("ImFontAtlas_AddFontFromMemoryTTF",5,SWIGTYPE_p_ImFontConfig); }  }  if(lua_gettop(L)>=6){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_unsigned_short,0))){
        SWIG_fail_ptr("ImFontAtlas_AddFontFromMemoryTTF",6,SWIGTYPE_p_unsigned_short); }  } 
    result = (ImFont *)(arg1)->AddFontFromMemoryTTF(arg2,arg3,arg4,(ImFontConfig const *)arg5,(ImWchar const *)arg6);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFont,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImFontAtlas_AddFontFromMemoryCompressedTTF(lua_State* L) { { int SWIG_arg = 0;
    ImFontAtlas *arg1 = (ImFontAtlas *) 0 ; void *arg2 = (void *) 0 ; int arg3 ; float arg4 ;
    ImFontConfig *arg5 = (ImFontConfig *) NULL ; ImWchar *arg6 = (ImWchar *) NULL ; ImFont *result = 0 ;
    SWIG_check_num_args("ImFontAtlas::AddFontFromMemoryCompressedTTF",4,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryCompressedTTF",1,"ImFontAtlas *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryCompressedTTF",2,"void const *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryCompressedTTF",3,"int");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryCompressedTTF",4,"float");
    if(lua_gettop(L)>=5 && !SWIG_isptrtype(L,5)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryCompressedTTF",5,"ImFontConfig const *");
    if(lua_gettop(L)>=6 && !SWIG_isptrtype(L,6)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryCompressedTTF",6,"ImWchar const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_AddFontFromMemoryCompressedTTF",1,SWIGTYPE_p_ImFontAtlas); } 
    arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImFontAtlas_AddFontFromMemoryCompressedTTF"); arg3 = (int)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4); if(lua_gettop(L)>=5){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImFontConfig,0))){
        SWIG_fail_ptr("ImFontAtlas_AddFontFromMemoryCompressedTTF",5,SWIGTYPE_p_ImFontConfig); }  }  if(lua_gettop(L)>=6){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_unsigned_short,0))){
        SWIG_fail_ptr("ImFontAtlas_AddFontFromMemoryCompressedTTF",6,SWIGTYPE_p_unsigned_short); }  } 
    result = (ImFont *)(arg1)->AddFontFromMemoryCompressedTTF((void const *)arg2,arg3,arg4,(ImFontConfig const *)arg5,(ImWchar const *)arg6);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFont,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(lua_State* L) { { int SWIG_arg = 0;
    ImFontAtlas *arg1 = (ImFontAtlas *) 0 ; char *arg2 = (char *) 0 ; float arg3 ; ImFontConfig *arg4 = (ImFontConfig *) NULL ;
    ImWchar *arg5 = (ImWchar *) NULL ; ImFont *result = 0 ;
    SWIG_check_num_args("ImFontAtlas::AddFontFromMemoryCompressedBase85TTF",3,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryCompressedBase85TTF",1,"ImFontAtlas *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryCompressedBase85TTF",2,"char const *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryCompressedBase85TTF",3,"float");
    if(lua_gettop(L)>=4 && !SWIG_isptrtype(L,4)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryCompressedBase85TTF",4,"ImFontConfig const *");
    if(lua_gettop(L)>=5 && !SWIG_isptrtype(L,5)) SWIG_fail_arg("ImFontAtlas::AddFontFromMemoryCompressedBase85TTF",5,"ImWchar const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_AddFontFromMemoryCompressedBase85TTF",1,SWIGTYPE_p_ImFontAtlas); } 
    arg2 = (char *)lua_tostring(L, 2); arg3 = (float)lua_tonumber(L, 3); if(lua_gettop(L)>=4){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImFontConfig,0))){
        SWIG_fail_ptr("ImFontAtlas_AddFontFromMemoryCompressedBase85TTF",4,SWIGTYPE_p_ImFontConfig); }  }  if(lua_gettop(L)>=5){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_unsigned_short,0))){
        SWIG_fail_ptr("ImFontAtlas_AddFontFromMemoryCompressedBase85TTF",5,SWIGTYPE_p_unsigned_short); }  } 
    result = (ImFont *)(arg1)->AddFontFromMemoryCompressedBase85TTF((char const *)arg2,arg3,(ImFontConfig const *)arg4,(ImWchar const *)arg5);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFont,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImFontAtlas_ClearInputData(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    SWIG_check_num_args("ImFontAtlas::ClearInputData",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::ClearInputData",1,"ImFontAtlas *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_ClearInputData",1,SWIGTYPE_p_ImFontAtlas); }  (arg1)->ClearInputData(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_ClearTexData(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    SWIG_check_num_args("ImFontAtlas::ClearTexData",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::ClearTexData",1,"ImFontAtlas *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_ClearTexData",1,SWIGTYPE_p_ImFontAtlas); }  (arg1)->ClearTexData(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_ClearFonts(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    SWIG_check_num_args("ImFontAtlas::ClearFonts",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::ClearFonts",1,"ImFontAtlas *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_ClearFonts",1,SWIGTYPE_p_ImFontAtlas); }  (arg1)->ClearFonts(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_Clear(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    SWIG_check_num_args("ImFontAtlas::Clear",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::Clear",1,"ImFontAtlas *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_Clear",1,SWIGTYPE_p_ImFontAtlas); }  (arg1)->Clear(); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_Build(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ; bool result;
    SWIG_check_num_args("ImFontAtlas::Build",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::Build",1,"ImFontAtlas *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_Build",1,SWIGTYPE_p_ImFontAtlas); }  result = (bool)(arg1)->Build();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_GetTexDataAsAlpha8(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    unsigned char **arg2 = (unsigned char **) 0 ; int *arg3 = (int *) 0 ; int *arg4 = (int *) 0 ; int *arg5 = (int *) NULL ;
    SWIG_check_num_args("ImFontAtlas::GetTexDataAsAlpha8",4,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::GetTexDataAsAlpha8",1,"ImFontAtlas *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontAtlas::GetTexDataAsAlpha8",2,"unsigned char **");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImFontAtlas::GetTexDataAsAlpha8",3,"int *");
    if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImFontAtlas::GetTexDataAsAlpha8",4,"int *");
    if(lua_gettop(L)>=5 && !SWIG_isptrtype(L,5)) SWIG_fail_arg("ImFontAtlas::GetTexDataAsAlpha8",5,"int *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_GetTexDataAsAlpha8",1,SWIGTYPE_p_ImFontAtlas); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_unsigned_char,0))){
      SWIG_fail_ptr("ImFontAtlas_GetTexDataAsAlpha8",2,SWIGTYPE_p_p_unsigned_char); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
      SWIG_fail_ptr("ImFontAtlas_GetTexDataAsAlpha8",3,SWIGTYPE_p_int); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_int,0))){
      SWIG_fail_ptr("ImFontAtlas_GetTexDataAsAlpha8",4,SWIGTYPE_p_int); }  if(lua_gettop(L)>=5){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_int,0))){
        SWIG_fail_ptr("ImFontAtlas_GetTexDataAsAlpha8",5,SWIGTYPE_p_int); }  }  (arg1)->GetTexDataAsAlpha8(arg2,arg3,arg4,arg5);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_GetTexDataAsRGBA32(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    unsigned char **arg2 = (unsigned char **) 0 ; int *arg3 = (int *) 0 ; int *arg4 = (int *) 0 ; int *arg5 = (int *) NULL ;
    SWIG_check_num_args("ImFontAtlas::GetTexDataAsRGBA32",4,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::GetTexDataAsRGBA32",1,"ImFontAtlas *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontAtlas::GetTexDataAsRGBA32",2,"unsigned char **");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImFontAtlas::GetTexDataAsRGBA32",3,"int *");
    if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImFontAtlas::GetTexDataAsRGBA32",4,"int *");
    if(lua_gettop(L)>=5 && !SWIG_isptrtype(L,5)) SWIG_fail_arg("ImFontAtlas::GetTexDataAsRGBA32",5,"int *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_GetTexDataAsRGBA32",1,SWIGTYPE_p_ImFontAtlas); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_unsigned_char,0))){
      SWIG_fail_ptr("ImFontAtlas_GetTexDataAsRGBA32",2,SWIGTYPE_p_p_unsigned_char); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
      SWIG_fail_ptr("ImFontAtlas_GetTexDataAsRGBA32",3,SWIGTYPE_p_int); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_int,0))){
      SWIG_fail_ptr("ImFontAtlas_GetTexDataAsRGBA32",4,SWIGTYPE_p_int); }  if(lua_gettop(L)>=5){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_int,0))){
        SWIG_fail_ptr("ImFontAtlas_GetTexDataAsRGBA32",5,SWIGTYPE_p_int); }  }  (arg1)->GetTexDataAsRGBA32(arg2,arg3,arg4,arg5);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_IsBuilt(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ; bool result;
    SWIG_check_num_args("ImFontAtlas::IsBuilt",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::IsBuilt",1,"ImFontAtlas const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_IsBuilt",1,SWIGTYPE_p_ImFontAtlas); }  result = (bool)((ImFontAtlas const *)arg1)->IsBuilt();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_SetTexID(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ; int arg2 ;
    SWIG_check_num_args("ImFontAtlas::SetTexID",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::SetTexID",1,"ImFontAtlas *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontAtlas::SetTexID",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_SetTexID",1,SWIGTYPE_p_ImFontAtlas); }  arg2 = (int)lua_tonumber(L, 2); (arg1)->SetTexID(arg2);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_GetGlyphRangesDefault(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    ImWchar *result = 0 ; SWIG_check_num_args("ImFontAtlas::GetGlyphRangesDefault",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::GetGlyphRangesDefault",1,"ImFontAtlas *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_GetGlyphRangesDefault",1,SWIGTYPE_p_ImFontAtlas); } 
    result = (ImWchar *)(arg1)->GetGlyphRangesDefault(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_GetGlyphRangesGreek(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    ImWchar *result = 0 ; SWIG_check_num_args("ImFontAtlas::GetGlyphRangesGreek",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::GetGlyphRangesGreek",1,"ImFontAtlas *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_GetGlyphRangesGreek",1,SWIGTYPE_p_ImFontAtlas); } 
    result = (ImWchar *)(arg1)->GetGlyphRangesGreek(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_GetGlyphRangesKorean(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    ImWchar *result = 0 ; SWIG_check_num_args("ImFontAtlas::GetGlyphRangesKorean",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::GetGlyphRangesKorean",1,"ImFontAtlas *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_GetGlyphRangesKorean",1,SWIGTYPE_p_ImFontAtlas); } 
    result = (ImWchar *)(arg1)->GetGlyphRangesKorean(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_GetGlyphRangesJapanese(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    ImWchar *result = 0 ; SWIG_check_num_args("ImFontAtlas::GetGlyphRangesJapanese",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::GetGlyphRangesJapanese",1,"ImFontAtlas *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_GetGlyphRangesJapanese",1,SWIGTYPE_p_ImFontAtlas); } 
    result = (ImWchar *)(arg1)->GetGlyphRangesJapanese(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_GetGlyphRangesChineseFull(lua_State* L) { { int SWIG_arg = 0;
    ImFontAtlas *arg1 = (ImFontAtlas *) 0 ; ImWchar *result = 0 ;
    SWIG_check_num_args("ImFontAtlas::GetGlyphRangesChineseFull",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::GetGlyphRangesChineseFull",1,"ImFontAtlas *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_GetGlyphRangesChineseFull",1,SWIGTYPE_p_ImFontAtlas); } 
    result = (ImWchar *)(arg1)->GetGlyphRangesChineseFull();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(lua_State* L) { { int SWIG_arg = 0;
    ImFontAtlas *arg1 = (ImFontAtlas *) 0 ; ImWchar *result = 0 ;
    SWIG_check_num_args("ImFontAtlas::GetGlyphRangesChineseSimplifiedCommon",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::GetGlyphRangesChineseSimplifiedCommon",1,"ImFontAtlas *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon",1,SWIGTYPE_p_ImFontAtlas); } 
    result = (ImWchar *)(arg1)->GetGlyphRangesChineseSimplifiedCommon();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImFontAtlas_GetGlyphRangesCyrillic(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    ImWchar *result = 0 ; SWIG_check_num_args("ImFontAtlas::GetGlyphRangesCyrillic",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::GetGlyphRangesCyrillic",1,"ImFontAtlas *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_GetGlyphRangesCyrillic",1,SWIGTYPE_p_ImFontAtlas); } 
    result = (ImWchar *)(arg1)->GetGlyphRangesCyrillic(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_GetGlyphRangesThai(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    ImWchar *result = 0 ; SWIG_check_num_args("ImFontAtlas::GetGlyphRangesThai",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::GetGlyphRangesThai",1,"ImFontAtlas *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_GetGlyphRangesThai",1,SWIGTYPE_p_ImFontAtlas); } 
    result = (ImWchar *)(arg1)->GetGlyphRangesThai(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_GetGlyphRangesVietnamese(lua_State* L) { { int SWIG_arg = 0;
    ImFontAtlas *arg1 = (ImFontAtlas *) 0 ; ImWchar *result = 0 ;
    SWIG_check_num_args("ImFontAtlas::GetGlyphRangesVietnamese",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::GetGlyphRangesVietnamese",1,"ImFontAtlas *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_GetGlyphRangesVietnamese",1,SWIGTYPE_p_ImFontAtlas); } 
    result = (ImWchar *)(arg1)->GetGlyphRangesVietnamese();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImFontAtlas_AddCustomRectRegular(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    int arg2 ; int arg3 ; int result; SWIG_check_num_args("ImFontAtlas::AddCustomRectRegular",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::AddCustomRectRegular",1,"ImFontAtlas *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontAtlas::AddCustomRectRegular",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImFontAtlas::AddCustomRectRegular",3,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_AddCustomRectRegular",1,SWIGTYPE_p_ImFontAtlas); }  arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3); result = (int)(arg1)->AddCustomRectRegular(arg2,arg3);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_AddCustomRectFontGlyph(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    ImFont *arg2 = (ImFont *) 0 ; ImWchar arg3 ; int arg4 ; int arg5 ; float arg6 ; ImVec2 const &arg7_defvalue = ImVec2(0, 0) ;
    ImVec2 *arg7 = (ImVec2 *) &arg7_defvalue ; int result; SWIG_check_num_args("ImFontAtlas::AddCustomRectFontGlyph",6,7)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::AddCustomRectFontGlyph",1,"ImFontAtlas *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontAtlas::AddCustomRectFontGlyph",2,"ImFont *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImFontAtlas::AddCustomRectFontGlyph",3,"ImWchar");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ImFontAtlas::AddCustomRectFontGlyph",4,"int");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ImFontAtlas::AddCustomRectFontGlyph",5,"int");
    if(!lua_isnumber(L,6)) SWIG_fail_arg("ImFontAtlas::AddCustomRectFontGlyph",6,"float");
    if(lua_gettop(L)>=7 && !lua_isuserdata(L,7)) SWIG_fail_arg("ImFontAtlas::AddCustomRectFontGlyph",7,"ImVec2 const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_AddCustomRectFontGlyph",1,SWIGTYPE_p_ImFontAtlas); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFontAtlas_AddCustomRectFontGlyph",2,SWIGTYPE_p_ImFont); } 
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative"); arg3 = (ImWchar)lua_tonumber(L, 3);
    arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); if(lua_gettop(L)>=7){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_ImVec2,0))){
        SWIG_fail_ptr("ImFontAtlas_AddCustomRectFontGlyph",7,SWIGTYPE_p_ImVec2); }  } 
    result = (int)(arg1)->AddCustomRectFontGlyph(arg2,arg3,arg4,arg5,arg6,(ImVec2 const &)*arg7);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_GetCustomRectByIndex(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    int arg2 ; ImFontAtlasCustomRect *result = 0 ; SWIG_check_num_args("ImFontAtlas::GetCustomRectByIndex",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::GetCustomRectByIndex",1,"ImFontAtlas *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontAtlas::GetCustomRectByIndex",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_GetCustomRectByIndex",1,SWIGTYPE_p_ImFontAtlas); }  arg2 = (int)lua_tonumber(L, 2);
    result = (ImFontAtlasCustomRect *)(arg1)->GetCustomRectByIndex(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFontAtlasCustomRect,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_CalcCustomRectUV(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    ImFontAtlasCustomRect *arg2 = (ImFontAtlasCustomRect *) 0 ; ImVec2 *arg3 = (ImVec2 *) 0 ; ImVec2 *arg4 = (ImVec2 *) 0 ;
    SWIG_check_num_args("ImFontAtlas::CalcCustomRectUV",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::CalcCustomRectUV",1,"ImFontAtlas const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontAtlas::CalcCustomRectUV",2,"ImFontAtlasCustomRect const *");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImFontAtlas::CalcCustomRectUV",3,"ImVec2 *");
    if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImFontAtlas::CalcCustomRectUV",4,"ImVec2 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_CalcCustomRectUV",1,SWIGTYPE_p_ImFontAtlas); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImFontAtlasCustomRect,0))){
      SWIG_fail_ptr("ImFontAtlas_CalcCustomRectUV",2,SWIGTYPE_p_ImFontAtlasCustomRect); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImFontAtlas_CalcCustomRectUV",3,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImFontAtlas_CalcCustomRectUV",4,SWIGTYPE_p_ImVec2); } 
    ((ImFontAtlas const *)arg1)->CalcCustomRectUV((ImFontAtlasCustomRect const *)arg2,arg3,arg4); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_GetMouseCursorTexData(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    ImGuiMouseCursor arg2 ; ImVec2 *arg3 = (ImVec2 *) 0 ; ImVec2 *arg4 = (ImVec2 *) 0 ; ImVec2 *arg5 = (ImVec2 *) (ImVec2 *)0 ;
    ImVec2 *arg6 = (ImVec2 *) (ImVec2 *)0 ; bool result; SWIG_check_num_args("ImFontAtlas::GetMouseCursorTexData",6,6)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::GetMouseCursorTexData",1,"ImFontAtlas *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontAtlas::GetMouseCursorTexData",2,"ImGuiMouseCursor");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImFontAtlas::GetMouseCursorTexData",3,"ImVec2 *");
    if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImFontAtlas::GetMouseCursorTexData",4,"ImVec2 *");
    if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ImFontAtlas::GetMouseCursorTexData",5,"ImVec2 [2]");
    if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ImFontAtlas::GetMouseCursorTexData",6,"ImVec2 [2]");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_GetMouseCursorTexData",1,SWIGTYPE_p_ImFontAtlas); } 
    arg2 = (ImGuiMouseCursor)lua_tonumber(L, 2); if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImFontAtlas_GetMouseCursorTexData",3,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImFontAtlas_GetMouseCursorTexData",4,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImFontAtlas_GetMouseCursorTexData",5,SWIGTYPE_p_ImVec2); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImFontAtlas_GetMouseCursorTexData",6,SWIGTYPE_p_ImVec2); } 
    result = (bool)(arg1)->GetMouseCursorTexData(arg2,arg3,arg4,arg5,arg6); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_Flags_set(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    ImFontAtlasFlags arg2 ; SWIG_check_num_args("ImFontAtlas::Flags",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::Flags",1,"ImFontAtlas *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontAtlas::Flags",2,"ImFontAtlasFlags");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_Flags_set",1,SWIGTYPE_p_ImFontAtlas); }  arg2 = (ImFontAtlasFlags)lua_tonumber(L, 2);
    if (arg1) (arg1)->Flags = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_Flags_get(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    ImFontAtlasFlags result; SWIG_check_num_args("ImFontAtlas::Flags",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::Flags",1,"ImFontAtlas *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_Flags_get",1,SWIGTYPE_p_ImFontAtlas); }  result = (ImFontAtlasFlags) ((arg1)->Flags);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_TexID_set(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ; int arg2 ;
    SWIG_check_num_args("ImFontAtlas::TexID",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::TexID",1,"ImFontAtlas *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontAtlas::TexID",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_TexID_set",1,SWIGTYPE_p_ImFontAtlas); }  arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->TexID = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_TexID_get(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ; int result;
    SWIG_check_num_args("ImFontAtlas::TexID",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::TexID",1,"ImFontAtlas *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_TexID_get",1,SWIGTYPE_p_ImFontAtlas); }  result = (int) ((arg1)->TexID);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_TexDesiredWidth_set(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    int arg2 ; SWIG_check_num_args("ImFontAtlas::TexDesiredWidth",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::TexDesiredWidth",1,"ImFontAtlas *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontAtlas::TexDesiredWidth",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_TexDesiredWidth_set",1,SWIGTYPE_p_ImFontAtlas); }  arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->TexDesiredWidth = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_TexDesiredWidth_get(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    int result; SWIG_check_num_args("ImFontAtlas::TexDesiredWidth",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::TexDesiredWidth",1,"ImFontAtlas *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_TexDesiredWidth_get",1,SWIGTYPE_p_ImFontAtlas); }  result = (int) ((arg1)->TexDesiredWidth);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_TexGlyphPadding_set(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    int arg2 ; SWIG_check_num_args("ImFontAtlas::TexGlyphPadding",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::TexGlyphPadding",1,"ImFontAtlas *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontAtlas::TexGlyphPadding",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_TexGlyphPadding_set",1,SWIGTYPE_p_ImFontAtlas); }  arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->TexGlyphPadding = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_TexGlyphPadding_get(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    int result; SWIG_check_num_args("ImFontAtlas::TexGlyphPadding",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::TexGlyphPadding",1,"ImFontAtlas *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_TexGlyphPadding_get",1,SWIGTYPE_p_ImFontAtlas); }  result = (int) ((arg1)->TexGlyphPadding);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_Locked_set(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ; bool arg2 ;
    SWIG_check_num_args("ImFontAtlas::Locked",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::Locked",1,"ImFontAtlas *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImFontAtlas::Locked",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_Locked_set",1,SWIGTYPE_p_ImFontAtlas); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->Locked = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_Locked_get(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ; bool result;
    SWIG_check_num_args("ImFontAtlas::Locked",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::Locked",1,"ImFontAtlas *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_Locked_get",1,SWIGTYPE_p_ImFontAtlas); }  result = (bool) ((arg1)->Locked);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_UserData_set(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    void *arg2 = (void *) 0 ; SWIG_check_num_args("ImFontAtlas::UserData",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::UserData",1,"ImFontAtlas *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontAtlas::UserData",2,"void *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_UserData_set",1,SWIGTYPE_p_ImFontAtlas); } 
    arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImFontAtlas_UserData_set"); if (arg1) (arg1)->UserData = arg2; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_UserData_get(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    void *result = 0 ; SWIG_check_num_args("ImFontAtlas::UserData",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::UserData",1,"ImFontAtlas *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_UserData_get",1,SWIGTYPE_p_ImFontAtlas); }  result = (void *) ((arg1)->UserData);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_TexReady_set(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    bool arg2 ; SWIG_check_num_args("ImFontAtlas::TexReady",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::TexReady",1,"ImFontAtlas *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImFontAtlas::TexReady",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_TexReady_set",1,SWIGTYPE_p_ImFontAtlas); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->TexReady = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_TexReady_get(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    bool result; SWIG_check_num_args("ImFontAtlas::TexReady",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::TexReady",1,"ImFontAtlas *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_TexReady_get",1,SWIGTYPE_p_ImFontAtlas); }  result = (bool) ((arg1)->TexReady);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_TexPixelsUseColors_set(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    bool arg2 ; SWIG_check_num_args("ImFontAtlas::TexPixelsUseColors",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::TexPixelsUseColors",1,"ImFontAtlas *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImFontAtlas::TexPixelsUseColors",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_TexPixelsUseColors_set",1,SWIGTYPE_p_ImFontAtlas); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->TexPixelsUseColors = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_TexPixelsUseColors_get(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    bool result; SWIG_check_num_args("ImFontAtlas::TexPixelsUseColors",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::TexPixelsUseColors",1,"ImFontAtlas *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_TexPixelsUseColors_get",1,SWIGTYPE_p_ImFontAtlas); } 
    result = (bool) ((arg1)->TexPixelsUseColors); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_TexPixelsAlpha8_set(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    unsigned char *arg2 = (unsigned char *) 0 ; SWIG_check_num_args("ImFontAtlas::TexPixelsAlpha8",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::TexPixelsAlpha8",1,"ImFontAtlas *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontAtlas::TexPixelsAlpha8",2,"unsigned char *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_TexPixelsAlpha8_set",1,SWIGTYPE_p_ImFontAtlas); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("ImFontAtlas_TexPixelsAlpha8_set",2,SWIGTYPE_p_unsigned_char); }  if (arg1) (arg1)->TexPixelsAlpha8 = arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_TexPixelsAlpha8_get(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    unsigned char *result = 0 ; SWIG_check_num_args("ImFontAtlas::TexPixelsAlpha8",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::TexPixelsAlpha8",1,"ImFontAtlas *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_TexPixelsAlpha8_get",1,SWIGTYPE_p_ImFontAtlas); } 
    result = (unsigned char *) ((arg1)->TexPixelsAlpha8); SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_TexPixelsRGBA32_set(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    unsigned int *arg2 = (unsigned int *) 0 ; SWIG_check_num_args("ImFontAtlas::TexPixelsRGBA32",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::TexPixelsRGBA32",1,"ImFontAtlas *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontAtlas::TexPixelsRGBA32",2,"unsigned int *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_TexPixelsRGBA32_set",1,SWIGTYPE_p_ImFontAtlas); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("ImFontAtlas_TexPixelsRGBA32_set",2,SWIGTYPE_p_unsigned_int); }  if (arg1) (arg1)->TexPixelsRGBA32 = arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_TexPixelsRGBA32_get(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    unsigned int *result = 0 ; SWIG_check_num_args("ImFontAtlas::TexPixelsRGBA32",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::TexPixelsRGBA32",1,"ImFontAtlas *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_TexPixelsRGBA32_get",1,SWIGTYPE_p_ImFontAtlas); } 
    result = (unsigned int *) ((arg1)->TexPixelsRGBA32); SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_TexWidth_set(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ; int arg2 ;
    SWIG_check_num_args("ImFontAtlas::TexWidth",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::TexWidth",1,"ImFontAtlas *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontAtlas::TexWidth",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_TexWidth_set",1,SWIGTYPE_p_ImFontAtlas); }  arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->TexWidth = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_TexWidth_get(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    int result; SWIG_check_num_args("ImFontAtlas::TexWidth",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::TexWidth",1,"ImFontAtlas *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_TexWidth_get",1,SWIGTYPE_p_ImFontAtlas); }  result = (int) ((arg1)->TexWidth);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_TexHeight_set(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    int arg2 ; SWIG_check_num_args("ImFontAtlas::TexHeight",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::TexHeight",1,"ImFontAtlas *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontAtlas::TexHeight",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_TexHeight_set",1,SWIGTYPE_p_ImFontAtlas); }  arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->TexHeight = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_TexHeight_get(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    int result; SWIG_check_num_args("ImFontAtlas::TexHeight",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::TexHeight",1,"ImFontAtlas *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_TexHeight_get",1,SWIGTYPE_p_ImFontAtlas); }  result = (int) ((arg1)->TexHeight);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_TexUvScale_set(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    ImVec2 *arg2 = (ImVec2 *) 0 ; SWIG_check_num_args("ImFontAtlas::TexUvScale",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::TexUvScale",1,"ImFontAtlas *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontAtlas::TexUvScale",2,"ImVec2 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_TexUvScale_set",1,SWIGTYPE_p_ImFontAtlas); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImFontAtlas_TexUvScale_set",2,SWIGTYPE_p_ImVec2); }  if (arg1) (arg1)->TexUvScale = *arg2; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_TexUvScale_get(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    ImVec2 *result = 0 ; SWIG_check_num_args("ImFontAtlas::TexUvScale",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::TexUvScale",1,"ImFontAtlas *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_TexUvScale_get",1,SWIGTYPE_p_ImFontAtlas); }  result = (ImVec2 *)& ((arg1)->TexUvScale);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImFontAtlas_TexUvWhitePixel_set(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    ImVec2 *arg2 = (ImVec2 *) 0 ; SWIG_check_num_args("ImFontAtlas::TexUvWhitePixel",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::TexUvWhitePixel",1,"ImFontAtlas *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontAtlas::TexUvWhitePixel",2,"ImVec2 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_TexUvWhitePixel_set",1,SWIGTYPE_p_ImFontAtlas); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImFontAtlas_TexUvWhitePixel_set",2,SWIGTYPE_p_ImVec2); }  if (arg1) (arg1)->TexUvWhitePixel = *arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_TexUvWhitePixel_get(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    ImVec2 *result = 0 ; SWIG_check_num_args("ImFontAtlas::TexUvWhitePixel",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::TexUvWhitePixel",1,"ImFontAtlas *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_TexUvWhitePixel_get",1,SWIGTYPE_p_ImFontAtlas); } 
    result = (ImVec2 *)& ((arg1)->TexUvWhitePixel); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_Fonts_set(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    ImVector< ImFont * > *arg2 = (ImVector< ImFont * > *) 0 ; SWIG_check_num_args("ImFontAtlas::Fonts",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::Fonts",1,"ImFontAtlas *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontAtlas::Fonts",2,"ImVector< ImFont * > *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_Fonts_set",1,SWIGTYPE_p_ImFontAtlas); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImFont_p_t,0))){
      SWIG_fail_ptr("ImFontAtlas_Fonts_set",2,SWIGTYPE_p_ImVectorT_ImFont_p_t); }  if (arg1) (arg1)->Fonts = *arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_Fonts_get(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    ImVector< ImFont * > *result = 0 ; SWIG_check_num_args("ImFontAtlas::Fonts",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::Fonts",1,"ImFontAtlas *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_Fonts_get",1,SWIGTYPE_p_ImFontAtlas); }  result = (ImVector< ImFont * > *)& ((arg1)->Fonts);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImFont_p_t,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_CustomRects_set(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    ImVector< ImFontAtlasCustomRect > *arg2 = (ImVector< ImFontAtlasCustomRect > *) 0 ;
    SWIG_check_num_args("ImFontAtlas::CustomRects",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::CustomRects",1,"ImFontAtlas *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontAtlas::CustomRects",2,"ImVector< ImFontAtlasCustomRect > *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_CustomRects_set",1,SWIGTYPE_p_ImFontAtlas); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImFontAtlasCustomRect_t,0))){
      SWIG_fail_ptr("ImFontAtlas_CustomRects_set",2,SWIGTYPE_p_ImVectorT_ImFontAtlasCustomRect_t); } 
    if (arg1) (arg1)->CustomRects = *arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_CustomRects_get(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    ImVector< ImFontAtlasCustomRect > *result = 0 ; SWIG_check_num_args("ImFontAtlas::CustomRects",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::CustomRects",1,"ImFontAtlas *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_CustomRects_get",1,SWIGTYPE_p_ImFontAtlas); } 
    result = (ImVector< ImFontAtlasCustomRect > *)& ((arg1)->CustomRects);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImFontAtlasCustomRect_t,0); SWIG_arg++;  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_ConfigData_set(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    ImVector< ImFontConfig > *arg2 = (ImVector< ImFontConfig > *) 0 ; SWIG_check_num_args("ImFontAtlas::ConfigData",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::ConfigData",1,"ImFontAtlas *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontAtlas::ConfigData",2,"ImVector< ImFontConfig > *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_ConfigData_set",1,SWIGTYPE_p_ImFontAtlas); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImFontConfig_t,0))){
      SWIG_fail_ptr("ImFontAtlas_ConfigData_set",2,SWIGTYPE_p_ImVectorT_ImFontConfig_t); } 
    if (arg1) (arg1)->ConfigData = *arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_ConfigData_get(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    ImVector< ImFontConfig > *result = 0 ; SWIG_check_num_args("ImFontAtlas::ConfigData",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::ConfigData",1,"ImFontAtlas *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_ConfigData_get",1,SWIGTYPE_p_ImFontAtlas); } 
    result = (ImVector< ImFontConfig > *)& ((arg1)->ConfigData);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImFontConfig_t,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_TexUvLines_set(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    ImVec4 *arg2 = (ImVec4 *) (ImVec4 *)0 ; SWIG_check_num_args("ImFontAtlas::TexUvLines",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::TexUvLines",1,"ImFontAtlas *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontAtlas::TexUvLines",2,"ImVec4 [(63) +1]");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_TexUvLines_set",1,SWIGTYPE_p_ImFontAtlas); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec4,0))){
      SWIG_fail_ptr("ImFontAtlas_TexUvLines_set",2,SWIGTYPE_p_ImVec4); }  { size_t ii; ImVec4 *b = (ImVec4 *) arg1->TexUvLines;
      for (ii = 0; ii < (size_t)(63) +1; ii++) b[ii] = *((ImVec4 *) arg2 + ii); }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_TexUvLines_get(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    ImVec4 *result = 0 ; SWIG_check_num_args("ImFontAtlas::TexUvLines",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::TexUvLines",1,"ImFontAtlas *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_TexUvLines_get",1,SWIGTYPE_p_ImFontAtlas); } 
    result = (ImVec4 *)(ImVec4 *) ((arg1)->TexUvLines); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec4,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_FontBuilderIO_set(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    ImFontBuilderIO *arg2 = (ImFontBuilderIO *) 0 ; SWIG_check_num_args("ImFontAtlas::FontBuilderIO",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::FontBuilderIO",1,"ImFontAtlas *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFontAtlas::FontBuilderIO",2,"ImFontBuilderIO const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_FontBuilderIO_set",1,SWIGTYPE_p_ImFontAtlas); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImFontBuilderIO,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("ImFontAtlas_FontBuilderIO_set",2,SWIGTYPE_p_ImFontBuilderIO); } 
    if (arg1) (arg1)->FontBuilderIO = (ImFontBuilderIO const *)arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImFontAtlas_FontBuilderIO_get(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    ImFontBuilderIO *result = 0 ; SWIG_check_num_args("ImFontAtlas::FontBuilderIO",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::FontBuilderIO",1,"ImFontAtlas *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_FontBuilderIO_get",1,SWIGTYPE_p_ImFontAtlas); } 
    result = (ImFontBuilderIO *) ((arg1)->FontBuilderIO);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFontBuilderIO,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImFontAtlas_FontBuilderFlags_set(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    unsigned int arg2 ; SWIG_check_num_args("ImFontAtlas::FontBuilderFlags",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::FontBuilderFlags",1,"ImFontAtlas *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontAtlas::FontBuilderFlags",2,"unsigned int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_FontBuilderFlags_set",1,SWIGTYPE_p_ImFontAtlas); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (unsigned int)lua_tonumber(L, 2);
    if (arg1) (arg1)->FontBuilderFlags = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_FontBuilderFlags_get(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    unsigned int result; SWIG_check_num_args("ImFontAtlas::FontBuilderFlags",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::FontBuilderFlags",1,"ImFontAtlas *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_FontBuilderFlags_get",1,SWIGTYPE_p_ImFontAtlas); } 
    result = (unsigned int) ((arg1)->FontBuilderFlags); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_PackIdMouseCursors_set(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    int arg2 ; SWIG_check_num_args("ImFontAtlas::PackIdMouseCursors",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::PackIdMouseCursors",1,"ImFontAtlas *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontAtlas::PackIdMouseCursors",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_PackIdMouseCursors_set",1,SWIGTYPE_p_ImFontAtlas); }  arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->PackIdMouseCursors = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_PackIdMouseCursors_get(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    int result; SWIG_check_num_args("ImFontAtlas::PackIdMouseCursors",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::PackIdMouseCursors",1,"ImFontAtlas *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_PackIdMouseCursors_get",1,SWIGTYPE_p_ImFontAtlas); } 
    result = (int) ((arg1)->PackIdMouseCursors); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_PackIdLines_set(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    int arg2 ; SWIG_check_num_args("ImFontAtlas::PackIdLines",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::PackIdLines",1,"ImFontAtlas *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFontAtlas::PackIdLines",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_PackIdLines_set",1,SWIGTYPE_p_ImFontAtlas); }  arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->PackIdLines = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFontAtlas_PackIdLines_get(lua_State* L) { { int SWIG_arg = 0; ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
    int result; SWIG_check_num_args("ImFontAtlas::PackIdLines",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFontAtlas::PackIdLines",1,"ImFontAtlas *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFontAtlas,0))){
      SWIG_fail_ptr("ImFontAtlas_PackIdLines_get",1,SWIGTYPE_p_ImFontAtlas); }  result = (int) ((arg1)->PackIdLines);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static void swig_delete_ImFontAtlas(void *obj) {
ImFontAtlas *arg1 = (ImFontAtlas *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImFontAtlas(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImFontAtlas);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImFontAtlas_attributes[] = {
    { "Flags", _wrap_ImFontAtlas_Flags_get, _wrap_ImFontAtlas_Flags_set },
    { "TexID", _wrap_ImFontAtlas_TexID_get, _wrap_ImFontAtlas_TexID_set },
    { "TexDesiredWidth", _wrap_ImFontAtlas_TexDesiredWidth_get, _wrap_ImFontAtlas_TexDesiredWidth_set },
    { "TexGlyphPadding", _wrap_ImFontAtlas_TexGlyphPadding_get, _wrap_ImFontAtlas_TexGlyphPadding_set },
    { "Locked", _wrap_ImFontAtlas_Locked_get, _wrap_ImFontAtlas_Locked_set },
    { "UserData", _wrap_ImFontAtlas_UserData_get, _wrap_ImFontAtlas_UserData_set },
    { "TexReady", _wrap_ImFontAtlas_TexReady_get, _wrap_ImFontAtlas_TexReady_set },
    { "TexPixelsUseColors", _wrap_ImFontAtlas_TexPixelsUseColors_get, _wrap_ImFontAtlas_TexPixelsUseColors_set },
    { "TexPixelsAlpha8", _wrap_ImFontAtlas_TexPixelsAlpha8_get, _wrap_ImFontAtlas_TexPixelsAlpha8_set },
    { "TexPixelsRGBA32", _wrap_ImFontAtlas_TexPixelsRGBA32_get, _wrap_ImFontAtlas_TexPixelsRGBA32_set },
    { "TexWidth", _wrap_ImFontAtlas_TexWidth_get, _wrap_ImFontAtlas_TexWidth_set },
    { "TexHeight", _wrap_ImFontAtlas_TexHeight_get, _wrap_ImFontAtlas_TexHeight_set },
    { "TexUvScale", _wrap_ImFontAtlas_TexUvScale_get, _wrap_ImFontAtlas_TexUvScale_set },
    { "TexUvWhitePixel", _wrap_ImFontAtlas_TexUvWhitePixel_get, _wrap_ImFontAtlas_TexUvWhitePixel_set },
    { "Fonts", _wrap_ImFontAtlas_Fonts_get, _wrap_ImFontAtlas_Fonts_set },
    { "CustomRects", _wrap_ImFontAtlas_CustomRects_get, _wrap_ImFontAtlas_CustomRects_set },
    { "ConfigData", _wrap_ImFontAtlas_ConfigData_get, _wrap_ImFontAtlas_ConfigData_set },
    { "TexUvLines", _wrap_ImFontAtlas_TexUvLines_get, _wrap_ImFontAtlas_TexUvLines_set },
    { "FontBuilderIO", _wrap_ImFontAtlas_FontBuilderIO_get, _wrap_ImFontAtlas_FontBuilderIO_set },
    { "FontBuilderFlags", _wrap_ImFontAtlas_FontBuilderFlags_get, _wrap_ImFontAtlas_FontBuilderFlags_set },
    { "PackIdMouseCursors", _wrap_ImFontAtlas_PackIdMouseCursors_get, _wrap_ImFontAtlas_PackIdMouseCursors_set },
    { "PackIdLines", _wrap_ImFontAtlas_PackIdLines_get, _wrap_ImFontAtlas_PackIdLines_set },
    {0,0,0}
};
static swig_lua_method swig_ImFontAtlas_methods[]= {
    { "AddFont", _wrap_ImFontAtlas_AddFont},
    { "AddFontDefault", _wrap_ImFontAtlas_AddFontDefault},
    { "AddFontFromFileTTF", _wrap_ImFontAtlas_AddFontFromFileTTF},
    { "AddFontFromMemoryTTF", _wrap_ImFontAtlas_AddFontFromMemoryTTF},
    { "AddFontFromMemoryCompressedTTF", _wrap_ImFontAtlas_AddFontFromMemoryCompressedTTF},
    { "AddFontFromMemoryCompressedBase85TTF", _wrap_ImFontAtlas_AddFontFromMemoryCompressedBase85TTF},
    { "ClearInputData", _wrap_ImFontAtlas_ClearInputData},
    { "ClearTexData", _wrap_ImFontAtlas_ClearTexData},
    { "ClearFonts", _wrap_ImFontAtlas_ClearFonts},
    { "Clear", _wrap_ImFontAtlas_Clear},
    { "Build", _wrap_ImFontAtlas_Build},
    { "GetTexDataAsAlpha8", _wrap_ImFontAtlas_GetTexDataAsAlpha8},
    { "GetTexDataAsRGBA32", _wrap_ImFontAtlas_GetTexDataAsRGBA32},
    { "IsBuilt", _wrap_ImFontAtlas_IsBuilt},
    { "SetTexID", _wrap_ImFontAtlas_SetTexID},
    { "GetGlyphRangesDefault", _wrap_ImFontAtlas_GetGlyphRangesDefault},
    { "GetGlyphRangesGreek", _wrap_ImFontAtlas_GetGlyphRangesGreek},
    { "GetGlyphRangesKorean", _wrap_ImFontAtlas_GetGlyphRangesKorean},
    { "GetGlyphRangesJapanese", _wrap_ImFontAtlas_GetGlyphRangesJapanese},
    { "GetGlyphRangesChineseFull", _wrap_ImFontAtlas_GetGlyphRangesChineseFull},
    { "GetGlyphRangesChineseSimplifiedCommon", _wrap_ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon},
    { "GetGlyphRangesCyrillic", _wrap_ImFontAtlas_GetGlyphRangesCyrillic},
    { "GetGlyphRangesThai", _wrap_ImFontAtlas_GetGlyphRangesThai},
    { "GetGlyphRangesVietnamese", _wrap_ImFontAtlas_GetGlyphRangesVietnamese},
    { "AddCustomRectRegular", _wrap_ImFontAtlas_AddCustomRectRegular},
    { "AddCustomRectFontGlyph", _wrap_ImFontAtlas_AddCustomRectFontGlyph},
    { "GetCustomRectByIndex", _wrap_ImFontAtlas_GetCustomRectByIndex},
    { "CalcCustomRectUV", _wrap_ImFontAtlas_CalcCustomRectUV},
    { "GetMouseCursorTexData", _wrap_ImFontAtlas_GetMouseCursorTexData},
    {0,0}
};
static swig_lua_method swig_ImFontAtlas_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImFontAtlas_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImFontAtlas_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImFontAtlas_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImFontAtlas_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImFontAtlas_Sf_SwigStatic = {
    "ImFontAtlas",
    swig_ImFontAtlas_Sf_SwigStatic_methods,
    swig_ImFontAtlas_Sf_SwigStatic_attributes,
    swig_ImFontAtlas_Sf_SwigStatic_constants,
    swig_ImFontAtlas_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImFontAtlas_bases[] = {0};
static const char *swig_ImFontAtlas_base_names[] = {0};
static swig_lua_class _wrap_class_ImFontAtlas = { "ImFontAtlas", "ImFontAtlas", &SWIGTYPE_p_ImFontAtlas,_proxy__wrap_new_ImFontAtlas, swig_delete_ImFontAtlas, swig_ImFontAtlas_methods, swig_ImFontAtlas_attributes, &swig_ImFontAtlas_Sf_SwigStatic, swig_ImFontAtlas_meta, swig_ImFontAtlas_bases, swig_ImFontAtlas_base_names };

static int _wrap_ImFont_IndexAdvanceX_set(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ;
    ImVector< float > *arg2 = (ImVector< float > *) 0 ; SWIG_check_num_args("ImFont::IndexAdvanceX",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::IndexAdvanceX",1,"ImFont *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFont::IndexAdvanceX",2,"ImVector< float > *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_IndexAdvanceX_set",1,SWIGTYPE_p_ImFont); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_float_t,0))){
      SWIG_fail_ptr("ImFont_IndexAdvanceX_set",2,SWIGTYPE_p_ImVectorT_float_t); }  if (arg1) (arg1)->IndexAdvanceX = *arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFont_IndexAdvanceX_get(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ;
    ImVector< float > *result = 0 ; SWIG_check_num_args("ImFont::IndexAdvanceX",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::IndexAdvanceX",1,"ImFont *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_IndexAdvanceX_get",1,SWIGTYPE_p_ImFont); }  result = (ImVector< float > *)& ((arg1)->IndexAdvanceX);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_float_t,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImFont_FallbackAdvanceX_set(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ; float arg2 ;
    SWIG_check_num_args("ImFont::FallbackAdvanceX",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::FallbackAdvanceX",1,"ImFont *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFont::FallbackAdvanceX",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_FallbackAdvanceX_set",1,SWIGTYPE_p_ImFont); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->FallbackAdvanceX = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFont_FallbackAdvanceX_get(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ; float result;
    SWIG_check_num_args("ImFont::FallbackAdvanceX",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::FallbackAdvanceX",1,"ImFont *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_FallbackAdvanceX_get",1,SWIGTYPE_p_ImFont); }  result = (float) ((arg1)->FallbackAdvanceX);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFont_FontSize_set(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ; float arg2 ;
    SWIG_check_num_args("ImFont::FontSize",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::FontSize",1,"ImFont *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFont::FontSize",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_FontSize_set",1,SWIGTYPE_p_ImFont); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->FontSize = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFont_FontSize_get(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ; float result;
    SWIG_check_num_args("ImFont::FontSize",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::FontSize",1,"ImFont *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_FontSize_get",1,SWIGTYPE_p_ImFont); }  result = (float) ((arg1)->FontSize);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFont_IndexLookup_set(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ;
    ImVector< ImWchar > *arg2 = (ImVector< ImWchar > *) 0 ; SWIG_check_num_args("ImFont::IndexLookup",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::IndexLookup",1,"ImFont *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFont::IndexLookup",2,"ImVector< ImWchar > *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_IndexLookup_set",1,SWIGTYPE_p_ImFont); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_unsigned_short_t,0))){
      SWIG_fail_ptr("ImFont_IndexLookup_set",2,SWIGTYPE_p_ImVectorT_unsigned_short_t); }  if (arg1) (arg1)->IndexLookup = *arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFont_IndexLookup_get(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ;
    ImVector< ImWchar > *result = 0 ; SWIG_check_num_args("ImFont::IndexLookup",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::IndexLookup",1,"ImFont *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_IndexLookup_get",1,SWIGTYPE_p_ImFont); }  result = (ImVector< ImWchar > *)& ((arg1)->IndexLookup);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImFont_Glyphs_set(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ;
    ImVector< ImFontGlyph > *arg2 = (ImVector< ImFontGlyph > *) 0 ; SWIG_check_num_args("ImFont::Glyphs",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::Glyphs",1,"ImFont *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFont::Glyphs",2,"ImVector< ImFontGlyph > *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_Glyphs_set",1,SWIGTYPE_p_ImFont); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImFontGlyph_t,0))){
      SWIG_fail_ptr("ImFont_Glyphs_set",2,SWIGTYPE_p_ImVectorT_ImFontGlyph_t); }  if (arg1) (arg1)->Glyphs = *arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFont_Glyphs_get(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ;
    ImVector< ImFontGlyph > *result = 0 ; SWIG_check_num_args("ImFont::Glyphs",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::Glyphs",1,"ImFont *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_Glyphs_get",1,SWIGTYPE_p_ImFont); }  result = (ImVector< ImFontGlyph > *)& ((arg1)->Glyphs);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImFontGlyph_t,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImFont_FallbackGlyph_set(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ;
    ImFontGlyph *arg2 = (ImFontGlyph *) 0 ; SWIG_check_num_args("ImFont::FallbackGlyph",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::FallbackGlyph",1,"ImFont *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFont::FallbackGlyph",2,"ImFontGlyph const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_FallbackGlyph_set",1,SWIGTYPE_p_ImFont); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImFontGlyph,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("ImFont_FallbackGlyph_set",2,SWIGTYPE_p_ImFontGlyph); } 
    if (arg1) (arg1)->FallbackGlyph = (ImFontGlyph const *)arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFont_FallbackGlyph_get(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ;
    ImFontGlyph *result = 0 ; SWIG_check_num_args("ImFont::FallbackGlyph",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::FallbackGlyph",1,"ImFont *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_FallbackGlyph_get",1,SWIGTYPE_p_ImFont); }  result = (ImFontGlyph *) ((arg1)->FallbackGlyph);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFontGlyph,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImFont_ContainerAtlas_set(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ;
    ImFontAtlas *arg2 = (ImFontAtlas *) 0 ; SWIG_check_num_args("ImFont::ContainerAtlas",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::ContainerAtlas",1,"ImFont *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFont::ContainerAtlas",2,"ImFontAtlas *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_ContainerAtlas_set",1,SWIGTYPE_p_ImFont); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImFontAtlas,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("ImFont_ContainerAtlas_set",2,SWIGTYPE_p_ImFontAtlas); }  if (arg1) (arg1)->ContainerAtlas = arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFont_ContainerAtlas_get(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ;
    ImFontAtlas *result = 0 ; SWIG_check_num_args("ImFont::ContainerAtlas",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::ContainerAtlas",1,"ImFont *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_ContainerAtlas_get",1,SWIGTYPE_p_ImFont); }  result = (ImFontAtlas *) ((arg1)->ContainerAtlas);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFontAtlas,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImFont_ConfigData_set(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ;
    ImFontConfig *arg2 = (ImFontConfig *) 0 ; SWIG_check_num_args("ImFont::ConfigData",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::ConfigData",1,"ImFont *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFont::ConfigData",2,"ImFontConfig const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_ConfigData_set",1,SWIGTYPE_p_ImFont); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImFontConfig,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("ImFont_ConfigData_set",2,SWIGTYPE_p_ImFontConfig); } 
    if (arg1) (arg1)->ConfigData = (ImFontConfig const *)arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFont_ConfigData_get(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ;
    ImFontConfig *result = 0 ; SWIG_check_num_args("ImFont::ConfigData",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::ConfigData",1,"ImFont *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_ConfigData_get",1,SWIGTYPE_p_ImFont); }  result = (ImFontConfig *) ((arg1)->ConfigData);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFontConfig,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImFont_ConfigDataCount_set(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ; short arg2 ;
    SWIG_check_num_args("ImFont::ConfigDataCount",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::ConfigDataCount",1,"ImFont *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFont::ConfigDataCount",2,"short");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_ConfigDataCount_set",1,SWIGTYPE_p_ImFont); }  arg2 = (short)lua_tonumber(L, 2);
    if (arg1) (arg1)->ConfigDataCount = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFont_ConfigDataCount_get(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ; short result;
    SWIG_check_num_args("ImFont::ConfigDataCount",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::ConfigDataCount",1,"ImFont *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_ConfigDataCount_get",1,SWIGTYPE_p_ImFont); }  result = (short) ((arg1)->ConfigDataCount);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFont_FallbackChar_set(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ; ImWchar arg2 ;
    SWIG_check_num_args("ImFont::FallbackChar",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::FallbackChar",1,"ImFont *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFont::FallbackChar",2,"ImWchar");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_FallbackChar_set",1,SWIGTYPE_p_ImFont); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (ImWchar)lua_tonumber(L, 2);
    if (arg1) (arg1)->FallbackChar = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFont_FallbackChar_get(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ; ImWchar result;
    SWIG_check_num_args("ImFont::FallbackChar",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::FallbackChar",1,"ImFont *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_FallbackChar_get",1,SWIGTYPE_p_ImFont); }  result = (ImWchar) ((arg1)->FallbackChar);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFont_EllipsisChar_set(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ; ImWchar arg2 ;
    SWIG_check_num_args("ImFont::EllipsisChar",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::EllipsisChar",1,"ImFont *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFont::EllipsisChar",2,"ImWchar");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_EllipsisChar_set",1,SWIGTYPE_p_ImFont); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (ImWchar)lua_tonumber(L, 2);
    if (arg1) (arg1)->EllipsisChar = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFont_EllipsisChar_get(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ; ImWchar result;
    SWIG_check_num_args("ImFont::EllipsisChar",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::EllipsisChar",1,"ImFont *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_EllipsisChar_get",1,SWIGTYPE_p_ImFont); }  result = (ImWchar) ((arg1)->EllipsisChar);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFont_EllipsisCharCount_set(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ; short arg2 ;
    SWIG_check_num_args("ImFont::EllipsisCharCount",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::EllipsisCharCount",1,"ImFont *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFont::EllipsisCharCount",2,"short");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_EllipsisCharCount_set",1,SWIGTYPE_p_ImFont); }  arg2 = (short)lua_tonumber(L, 2);
    if (arg1) (arg1)->EllipsisCharCount = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFont_EllipsisCharCount_get(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ; short result;
    SWIG_check_num_args("ImFont::EllipsisCharCount",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::EllipsisCharCount",1,"ImFont *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_EllipsisCharCount_get",1,SWIGTYPE_p_ImFont); }  result = (short) ((arg1)->EllipsisCharCount);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFont_EllipsisWidth_set(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ; float arg2 ;
    SWIG_check_num_args("ImFont::EllipsisWidth",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::EllipsisWidth",1,"ImFont *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFont::EllipsisWidth",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_EllipsisWidth_set",1,SWIGTYPE_p_ImFont); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->EllipsisWidth = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFont_EllipsisWidth_get(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ; float result;
    SWIG_check_num_args("ImFont::EllipsisWidth",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::EllipsisWidth",1,"ImFont *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_EllipsisWidth_get",1,SWIGTYPE_p_ImFont); }  result = (float) ((arg1)->EllipsisWidth);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFont_EllipsisCharStep_set(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ; float arg2 ;
    SWIG_check_num_args("ImFont::EllipsisCharStep",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::EllipsisCharStep",1,"ImFont *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFont::EllipsisCharStep",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_EllipsisCharStep_set",1,SWIGTYPE_p_ImFont); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->EllipsisCharStep = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFont_EllipsisCharStep_get(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ; float result;
    SWIG_check_num_args("ImFont::EllipsisCharStep",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::EllipsisCharStep",1,"ImFont *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_EllipsisCharStep_get",1,SWIGTYPE_p_ImFont); }  result = (float) ((arg1)->EllipsisCharStep);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFont_DirtyLookupTables_set(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ; bool arg2 ;
    SWIG_check_num_args("ImFont::DirtyLookupTables",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::DirtyLookupTables",1,"ImFont *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImFont::DirtyLookupTables",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_DirtyLookupTables_set",1,SWIGTYPE_p_ImFont); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->DirtyLookupTables = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFont_DirtyLookupTables_get(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ; bool result;
    SWIG_check_num_args("ImFont::DirtyLookupTables",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::DirtyLookupTables",1,"ImFont *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_DirtyLookupTables_get",1,SWIGTYPE_p_ImFont); }  result = (bool) ((arg1)->DirtyLookupTables);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFont_Scale_set(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ; float arg2 ;
    SWIG_check_num_args("ImFont::Scale",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::Scale",1,"ImFont *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFont::Scale",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_Scale_set",1,SWIGTYPE_p_ImFont); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->Scale = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFont_Scale_get(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ; float result;
    SWIG_check_num_args("ImFont::Scale",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::Scale",1,"ImFont *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_Scale_get",1,SWIGTYPE_p_ImFont); }  result = (float) ((arg1)->Scale);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFont_Ascent_set(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ; float arg2 ;
    SWIG_check_num_args("ImFont::Ascent",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::Ascent",1,"ImFont *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFont::Ascent",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_Ascent_set",1,SWIGTYPE_p_ImFont); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->Ascent = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFont_Ascent_get(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ; float result;
    SWIG_check_num_args("ImFont::Ascent",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::Ascent",1,"ImFont *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_Ascent_get",1,SWIGTYPE_p_ImFont); }  result = (float) ((arg1)->Ascent);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFont_Descent_set(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ; float arg2 ;
    SWIG_check_num_args("ImFont::Descent",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::Descent",1,"ImFont *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFont::Descent",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_Descent_set",1,SWIGTYPE_p_ImFont); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->Descent = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFont_Descent_get(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ; float result;
    SWIG_check_num_args("ImFont::Descent",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::Descent",1,"ImFont *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_Descent_get",1,SWIGTYPE_p_ImFont); }  result = (float) ((arg1)->Descent);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFont_MetricsTotalSurface_set(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ; int arg2 ;
    SWIG_check_num_args("ImFont::MetricsTotalSurface",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::MetricsTotalSurface",1,"ImFont *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFont::MetricsTotalSurface",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_MetricsTotalSurface_set",1,SWIGTYPE_p_ImFont); }  arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->MetricsTotalSurface = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFont_MetricsTotalSurface_get(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ; int result;
    SWIG_check_num_args("ImFont::MetricsTotalSurface",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::MetricsTotalSurface",1,"ImFont *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_MetricsTotalSurface_get",1,SWIGTYPE_p_ImFont); }  result = (int) ((arg1)->MetricsTotalSurface);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFont_Used4kPagesMap_set(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ;
    ImU8 *arg2 = (ImU8 *) (ImU8 *)0 ; SWIG_check_num_args("ImFont::Used4kPagesMap",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::Used4kPagesMap",1,"ImFont *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFont::Used4kPagesMap",2,"ImU8 [(0xFFFF+1)/4096/8]");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_Used4kPagesMap_set",1,SWIGTYPE_p_ImFont); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
      SWIG_fail_ptr("ImFont_Used4kPagesMap_set",2,SWIGTYPE_p_unsigned_char); }  { size_t ii;
      ImU8 *b = (ImU8 *) arg1->Used4kPagesMap;
      for (ii = 0; ii < (size_t)(0xFFFF+1)/4096/8; ii++) b[ii] = *((ImU8 *) arg2 + ii); }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImFont_Used4kPagesMap_get(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ; ImU8 *result = 0 ;
    SWIG_check_num_args("ImFont::Used4kPagesMap",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::Used4kPagesMap",1,"ImFont *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_Used4kPagesMap_get",1,SWIGTYPE_p_ImFont); }  result = (ImU8 *)(ImU8 *) ((arg1)->Used4kPagesMap);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_new_ImFont(lua_State* L) { { int SWIG_arg = 0; ImFont *result = 0 ; SWIG_check_num_args("ImFont::ImFont",0,0)
    result = (ImFont *)new ImFont(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFont,1); SWIG_arg++;  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFont_FindGlyph(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ; ImWchar arg2 ;
    ImFontGlyph *result = 0 ; SWIG_check_num_args("ImFont::FindGlyph",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::FindGlyph",1,"ImFont *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFont::FindGlyph",2,"ImWchar");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_FindGlyph",1,SWIGTYPE_p_ImFont); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (ImWchar)lua_tonumber(L, 2);
    result = (ImFontGlyph *)(arg1)->FindGlyph(arg2); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFontGlyph,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFont_FindGlyphNoFallback(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ; ImWchar arg2 ;
    ImFontGlyph *result = 0 ; SWIG_check_num_args("ImFont::FindGlyphNoFallback",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::FindGlyphNoFallback",1,"ImFont *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFont::FindGlyphNoFallback",2,"ImWchar");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_FindGlyphNoFallback",1,SWIGTYPE_p_ImFont); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (ImWchar)lua_tonumber(L, 2);
    result = (ImFontGlyph *)(arg1)->FindGlyphNoFallback(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImFontGlyph,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImFont_GetCharAdvance(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ; ImWchar arg2 ;
    float result; SWIG_check_num_args("ImFont::GetCharAdvance",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::GetCharAdvance",1,"ImFont *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFont::GetCharAdvance",2,"ImWchar");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_GetCharAdvance",1,SWIGTYPE_p_ImFont); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (ImWchar)lua_tonumber(L, 2);
    result = (float)(arg1)->GetCharAdvance(arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFont_IsLoaded(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ; bool result;
    SWIG_check_num_args("ImFont::IsLoaded",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::IsLoaded",1,"ImFont const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_IsLoaded",1,SWIGTYPE_p_ImFont); }  result = (bool)((ImFont const *)arg1)->IsLoaded();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFont_GetDebugName(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ; char *result = 0 ;
    SWIG_check_num_args("ImFont::GetDebugName",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::GetDebugName",1,"ImFont const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_GetDebugName",1,SWIGTYPE_p_ImFont); }  result = (char *)((ImFont const *)arg1)->GetDebugName();
    lua_pushstring(L,(const char *)result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFont_CalcTextSizeA(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ; float arg2 ;
    float arg3 ; float arg4 ; char *arg5 = (char *) 0 ; char *arg6 = (char *) NULL ; char **arg7 = (char **) NULL ;
    ImVec2 result; SWIG_check_num_args("ImFont::CalcTextSizeA",5,7)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::CalcTextSizeA",1,"ImFont *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFont::CalcTextSizeA",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImFont::CalcTextSizeA",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ImFont::CalcTextSizeA",4,"float");
    if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ImFont::CalcTextSizeA",5,"char const *");
    if(lua_gettop(L)>=6 && !SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("ImFont::CalcTextSizeA",6,"char const *");
    if(lua_gettop(L)>=7 && !SWIG_isptrtype(L,7)) SWIG_fail_arg("ImFont::CalcTextSizeA",7,"char const **");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_CalcTextSizeA",1,SWIGTYPE_p_ImFont); }  arg2 = (float)lua_tonumber(L, 2);
    arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (char *)lua_tostring(L, 5); if(lua_gettop(L)>=6){
      arg6 = (char *)lua_tostring(L, 6);}  if(lua_gettop(L)>=7){
      if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_p_char,0))){
        SWIG_fail_ptr("ImFont_CalcTextSizeA",7,SWIGTYPE_p_p_char); }  } 
    result = (arg1)->CalcTextSizeA(arg2,arg3,arg4,(char const *)arg5,(char const *)arg6,(char const **)arg7); {
      ImVec2 * resultptr = new ImVec2(result); SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++; } 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFont_CalcWordWrapPositionA(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ; float arg2 ;
    char *arg3 = (char *) 0 ; char *arg4 = (char *) 0 ; float arg5 ; char *result = 0 ;
    SWIG_check_num_args("ImFont::CalcWordWrapPositionA",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::CalcWordWrapPositionA",1,"ImFont *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFont::CalcWordWrapPositionA",2,"float");
    if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ImFont::CalcWordWrapPositionA",3,"char const *");
    if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("ImFont::CalcWordWrapPositionA",4,"char const *");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ImFont::CalcWordWrapPositionA",5,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_CalcWordWrapPositionA",1,SWIGTYPE_p_ImFont); }  arg2 = (float)lua_tonumber(L, 2);
    arg3 = (char *)lua_tostring(L, 3); arg4 = (char *)lua_tostring(L, 4); arg5 = (float)lua_tonumber(L, 5);
    result = (char *)(arg1)->CalcWordWrapPositionA(arg2,(char const *)arg3,(char const *)arg4,arg5);
    lua_pushstring(L,(const char *)result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFont_RenderChar(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ;
    ImDrawList *arg2 = (ImDrawList *) 0 ; float arg3 ; ImVec2 *arg4 = 0 ; ImU32 arg5 ; ImWchar arg6 ;
    SWIG_check_num_args("ImFont::RenderChar",6,6) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::RenderChar",1,"ImFont *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFont::RenderChar",2,"ImDrawList *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImFont::RenderChar",3,"float");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImFont::RenderChar",4,"ImVec2 const &");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ImFont::RenderChar",5,"ImU32");
    if(!lua_isnumber(L,6)) SWIG_fail_arg("ImFont::RenderChar",6,"ImWchar");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_RenderChar",1,SWIGTYPE_p_ImFont); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImFont_RenderChar",2,SWIGTYPE_p_ImDrawList); }  arg3 = (float)lua_tonumber(L, 3);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImFont_RenderChar",4,SWIGTYPE_p_ImVec2); } 
    SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative"); arg5 = (ImU32)lua_tonumber(L, 5);
    SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative"); arg6 = (ImWchar)lua_tonumber(L, 6);
    (arg1)->RenderChar(arg2,arg3,(ImVec2 const &)*arg4,arg5,arg6); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImFont_RenderText(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ;
    ImDrawList *arg2 = (ImDrawList *) 0 ; float arg3 ; ImVec2 *arg4 = 0 ; ImU32 arg5 ; ImVec4 *arg6 = 0 ;
    char *arg7 = (char *) 0 ; char *arg8 = (char *) 0 ; float arg9 = (float) 0.0 ; bool arg10 = (bool) false ;
    SWIG_check_num_args("ImFont::RenderText",8,10) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::RenderText",1,"ImFont *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFont::RenderText",2,"ImDrawList *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImFont::RenderText",3,"float");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ImFont::RenderText",4,"ImVec2 const &");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ImFont::RenderText",5,"ImU32");
    if(!lua_isuserdata(L,6)) SWIG_fail_arg("ImFont::RenderText",6,"ImVec4 const &");
    if(!SWIG_lua_isnilstring(L,7)) SWIG_fail_arg("ImFont::RenderText",7,"char const *");
    if(!SWIG_lua_isnilstring(L,8)) SWIG_fail_arg("ImFont::RenderText",8,"char const *");
    if(lua_gettop(L)>=9 && !lua_isnumber(L,9)) SWIG_fail_arg("ImFont::RenderText",9,"float");
    if(lua_gettop(L)>=10 && !lua_isboolean(L,10)) SWIG_fail_arg("ImFont::RenderText",10,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_RenderText",1,SWIGTYPE_p_ImFont); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImDrawList,0))){
      SWIG_fail_ptr("ImFont_RenderText",2,SWIGTYPE_p_ImDrawList); }  arg3 = (float)lua_tonumber(L, 3);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImFont_RenderText",4,SWIGTYPE_p_ImVec2); } 
    SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative"); arg5 = (ImU32)lua_tonumber(L, 5);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ImVec4,0))){
      SWIG_fail_ptr("ImFont_RenderText",6,SWIGTYPE_p_ImVec4); }  arg7 = (char *)lua_tostring(L, 7);
    arg8 = (char *)lua_tostring(L, 8); if(lua_gettop(L)>=9){ arg9 = (float)lua_tonumber(L, 9);}  if(lua_gettop(L)>=10){
      arg10 = (lua_toboolean(L, 10)!=0);} 
    (arg1)->RenderText(arg2,arg3,(ImVec2 const &)*arg4,arg5,(ImVec4 const &)*arg6,(char const *)arg7,(char const *)arg8,arg9,arg10);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFont_BuildLookupTable(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ;
    SWIG_check_num_args("ImFont::BuildLookupTable",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::BuildLookupTable",1,"ImFont *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_BuildLookupTable",1,SWIGTYPE_p_ImFont); }  (arg1)->BuildLookupTable(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFont_ClearOutputData(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ;
    SWIG_check_num_args("ImFont::ClearOutputData",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::ClearOutputData",1,"ImFont *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_ClearOutputData",1,SWIGTYPE_p_ImFont); }  (arg1)->ClearOutputData(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFont_GrowIndex(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ; int arg2 ;
    SWIG_check_num_args("ImFont::GrowIndex",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::GrowIndex",1,"ImFont *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFont::GrowIndex",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_GrowIndex",1,SWIGTYPE_p_ImFont); }  arg2 = (int)lua_tonumber(L, 2); (arg1)->GrowIndex(arg2);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFont_AddGlyph(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ;
    ImFontConfig *arg2 = (ImFontConfig *) 0 ; ImWchar arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; float arg8 ;
    float arg9 ; float arg10 ; float arg11 ; float arg12 ; SWIG_check_num_args("ImFont::AddGlyph",12,12)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::AddGlyph",1,"ImFont *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImFont::AddGlyph",2,"ImFontConfig const *");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImFont::AddGlyph",3,"ImWchar");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ImFont::AddGlyph",4,"float");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ImFont::AddGlyph",5,"float");
    if(!lua_isnumber(L,6)) SWIG_fail_arg("ImFont::AddGlyph",6,"float");
    if(!lua_isnumber(L,7)) SWIG_fail_arg("ImFont::AddGlyph",7,"float");
    if(!lua_isnumber(L,8)) SWIG_fail_arg("ImFont::AddGlyph",8,"float");
    if(!lua_isnumber(L,9)) SWIG_fail_arg("ImFont::AddGlyph",9,"float");
    if(!lua_isnumber(L,10)) SWIG_fail_arg("ImFont::AddGlyph",10,"float");
    if(!lua_isnumber(L,11)) SWIG_fail_arg("ImFont::AddGlyph",11,"float");
    if(!lua_isnumber(L,12)) SWIG_fail_arg("ImFont::AddGlyph",12,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_AddGlyph",1,SWIGTYPE_p_ImFont); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImFontConfig,0))){
      SWIG_fail_ptr("ImFont_AddGlyph",2,SWIGTYPE_p_ImFontConfig); } 
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative"); arg3 = (ImWchar)lua_tonumber(L, 3);
    arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6);
    arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8); arg9 = (float)lua_tonumber(L, 9);
    arg10 = (float)lua_tonumber(L, 10); arg11 = (float)lua_tonumber(L, 11); arg12 = (float)lua_tonumber(L, 12);
    (arg1)->AddGlyph((ImFontConfig const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFont_AddRemapChar(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ; ImWchar arg2 ;
    ImWchar arg3 ; bool arg4 = (bool) true ; SWIG_check_num_args("ImFont::AddRemapChar",3,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::AddRemapChar",1,"ImFont *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFont::AddRemapChar",2,"ImWchar");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImFont::AddRemapChar",3,"ImWchar");
    if(lua_gettop(L)>=4 && !lua_isboolean(L,4)) SWIG_fail_arg("ImFont::AddRemapChar",4,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_AddRemapChar",1,SWIGTYPE_p_ImFont); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (ImWchar)lua_tonumber(L, 2);
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative"); arg3 = (ImWchar)lua_tonumber(L, 3);
    if(lua_gettop(L)>=4){ arg4 = (lua_toboolean(L, 4)!=0);}  (arg1)->AddRemapChar(arg2,arg3,arg4); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImFont_SetGlyphVisible(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ; ImWchar arg2 ;
    bool arg3 ; SWIG_check_num_args("ImFont::SetGlyphVisible",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::SetGlyphVisible",1,"ImFont *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFont::SetGlyphVisible",2,"ImWchar");
    if(!lua_isboolean(L,3)) SWIG_fail_arg("ImFont::SetGlyphVisible",3,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_SetGlyphVisible",1,SWIGTYPE_p_ImFont); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (ImWchar)lua_tonumber(L, 2);
    arg3 = (lua_toboolean(L, 3)!=0); (arg1)->SetGlyphVisible(arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImFont_IsGlyphRangeUnused(lua_State* L) { { int SWIG_arg = 0; ImFont *arg1 = (ImFont *) 0 ; unsigned int arg2 ;
    unsigned int arg3 ; bool result; SWIG_check_num_args("ImFont::IsGlyphRangeUnused",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImFont::IsGlyphRangeUnused",1,"ImFont *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImFont::IsGlyphRangeUnused",2,"unsigned int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ImFont::IsGlyphRangeUnused",3,"unsigned int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImFont,0))){
      SWIG_fail_ptr("ImFont_IsGlyphRangeUnused",1,SWIGTYPE_p_ImFont); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (unsigned int)lua_tonumber(L, 2);
    SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative"); arg3 = (unsigned int)lua_tonumber(L, 3);
    result = (bool)(arg1)->IsGlyphRangeUnused(arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static void swig_delete_ImFont(void *obj) {
ImFont *arg1 = (ImFont *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImFont(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImFont);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImFont_attributes[] = {
    { "IndexAdvanceX", _wrap_ImFont_IndexAdvanceX_get, _wrap_ImFont_IndexAdvanceX_set },
    { "FallbackAdvanceX", _wrap_ImFont_FallbackAdvanceX_get, _wrap_ImFont_FallbackAdvanceX_set },
    { "FontSize", _wrap_ImFont_FontSize_get, _wrap_ImFont_FontSize_set },
    { "IndexLookup", _wrap_ImFont_IndexLookup_get, _wrap_ImFont_IndexLookup_set },
    { "Glyphs", _wrap_ImFont_Glyphs_get, _wrap_ImFont_Glyphs_set },
    { "FallbackGlyph", _wrap_ImFont_FallbackGlyph_get, _wrap_ImFont_FallbackGlyph_set },
    { "ContainerAtlas", _wrap_ImFont_ContainerAtlas_get, _wrap_ImFont_ContainerAtlas_set },
    { "ConfigData", _wrap_ImFont_ConfigData_get, _wrap_ImFont_ConfigData_set },
    { "ConfigDataCount", _wrap_ImFont_ConfigDataCount_get, _wrap_ImFont_ConfigDataCount_set },
    { "FallbackChar", _wrap_ImFont_FallbackChar_get, _wrap_ImFont_FallbackChar_set },
    { "EllipsisChar", _wrap_ImFont_EllipsisChar_get, _wrap_ImFont_EllipsisChar_set },
    { "EllipsisCharCount", _wrap_ImFont_EllipsisCharCount_get, _wrap_ImFont_EllipsisCharCount_set },
    { "EllipsisWidth", _wrap_ImFont_EllipsisWidth_get, _wrap_ImFont_EllipsisWidth_set },
    { "EllipsisCharStep", _wrap_ImFont_EllipsisCharStep_get, _wrap_ImFont_EllipsisCharStep_set },
    { "DirtyLookupTables", _wrap_ImFont_DirtyLookupTables_get, _wrap_ImFont_DirtyLookupTables_set },
    { "Scale", _wrap_ImFont_Scale_get, _wrap_ImFont_Scale_set },
    { "Ascent", _wrap_ImFont_Ascent_get, _wrap_ImFont_Ascent_set },
    { "Descent", _wrap_ImFont_Descent_get, _wrap_ImFont_Descent_set },
    { "MetricsTotalSurface", _wrap_ImFont_MetricsTotalSurface_get, _wrap_ImFont_MetricsTotalSurface_set },
    { "Used4kPagesMap", _wrap_ImFont_Used4kPagesMap_get, _wrap_ImFont_Used4kPagesMap_set },
    {0,0,0}
};
static swig_lua_method swig_ImFont_methods[]= {
    { "FindGlyph", _wrap_ImFont_FindGlyph},
    { "FindGlyphNoFallback", _wrap_ImFont_FindGlyphNoFallback},
    { "GetCharAdvance", _wrap_ImFont_GetCharAdvance},
    { "IsLoaded", _wrap_ImFont_IsLoaded},
    { "GetDebugName", _wrap_ImFont_GetDebugName},
    { "CalcTextSizeA", _wrap_ImFont_CalcTextSizeA},
    { "CalcWordWrapPositionA", _wrap_ImFont_CalcWordWrapPositionA},
    { "RenderChar", _wrap_ImFont_RenderChar},
    { "RenderText", _wrap_ImFont_RenderText},
    { "BuildLookupTable", _wrap_ImFont_BuildLookupTable},
    { "ClearOutputData", _wrap_ImFont_ClearOutputData},
    { "GrowIndex", _wrap_ImFont_GrowIndex},
    { "AddGlyph", _wrap_ImFont_AddGlyph},
    { "AddRemapChar", _wrap_ImFont_AddRemapChar},
    { "SetGlyphVisible", _wrap_ImFont_SetGlyphVisible},
    { "IsGlyphRangeUnused", _wrap_ImFont_IsGlyphRangeUnused},
    {0,0}
};
static swig_lua_method swig_ImFont_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImFont_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImFont_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImFont_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImFont_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImFont_Sf_SwigStatic = {
    "ImFont",
    swig_ImFont_Sf_SwigStatic_methods,
    swig_ImFont_Sf_SwigStatic_attributes,
    swig_ImFont_Sf_SwigStatic_constants,
    swig_ImFont_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImFont_bases[] = {0};
static const char *swig_ImFont_base_names[] = {0};
static swig_lua_class _wrap_class_ImFont = { "ImFont", "ImFont", &SWIGTYPE_p_ImFont,_proxy__wrap_new_ImFont, swig_delete_ImFont, swig_ImFont_methods, swig_ImFont_attributes, &swig_ImFont_Sf_SwigStatic, swig_ImFont_meta, swig_ImFont_bases, swig_ImFont_base_names };

static int _wrap_ImGuiViewport_ID_set(lua_State* L) { { int SWIG_arg = 0; ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
    ImGuiID arg2 ; SWIG_check_num_args("ImGuiViewport::ID",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::ID",1,"ImGuiViewport *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiViewport::ID",2,"ImGuiID");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
      SWIG_fail_ptr("ImGuiViewport_ID_set",1,SWIGTYPE_p_ImGuiViewport); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (ImGuiID)lua_tonumber(L, 2);
    if (arg1) (arg1)->ID = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiViewport_ID_get(lua_State* L) { { int SWIG_arg = 0; ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
    ImGuiID result; SWIG_check_num_args("ImGuiViewport::ID",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::ID",1,"ImGuiViewport *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
      SWIG_fail_ptr("ImGuiViewport_ID_get",1,SWIGTYPE_p_ImGuiViewport); }  result = (ImGuiID) ((arg1)->ID);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiViewport_Flags_set(lua_State* L) { { int SWIG_arg = 0; ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
    ImGuiViewportFlags arg2 ; SWIG_check_num_args("ImGuiViewport::Flags",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::Flags",1,"ImGuiViewport *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiViewport::Flags",2,"ImGuiViewportFlags");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
      SWIG_fail_ptr("ImGuiViewport_Flags_set",1,SWIGTYPE_p_ImGuiViewport); }  arg2 = (ImGuiViewportFlags)lua_tonumber(L, 2);
    if (arg1) (arg1)->Flags = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiViewport_Flags_get(lua_State* L) { { int SWIG_arg = 0; ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
    ImGuiViewportFlags result; SWIG_check_num_args("ImGuiViewport::Flags",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::Flags",1,"ImGuiViewport *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
      SWIG_fail_ptr("ImGuiViewport_Flags_get",1,SWIGTYPE_p_ImGuiViewport); }  result = (ImGuiViewportFlags) ((arg1)->Flags);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiViewport_Pos_set(lua_State* L) { { int SWIG_arg = 0; ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
    ImVec2 *arg2 = (ImVec2 *) 0 ; SWIG_check_num_args("ImGuiViewport::Pos",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::Pos",1,"ImGuiViewport *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiViewport::Pos",2,"ImVec2 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
      SWIG_fail_ptr("ImGuiViewport_Pos_set",1,SWIGTYPE_p_ImGuiViewport); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImGuiViewport_Pos_set",2,SWIGTYPE_p_ImVec2); }  if (arg1) (arg1)->Pos = *arg2; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiViewport_Pos_get(lua_State* L) { { int SWIG_arg = 0; ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
    ImVec2 *result = 0 ; SWIG_check_num_args("ImGuiViewport::Pos",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::Pos",1,"ImGuiViewport *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
      SWIG_fail_ptr("ImGuiViewport_Pos_get",1,SWIGTYPE_p_ImGuiViewport); }  result = (ImVec2 *)& ((arg1)->Pos);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiViewport_Size_set(lua_State* L) { { int SWIG_arg = 0; ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
    ImVec2 *arg2 = (ImVec2 *) 0 ; SWIG_check_num_args("ImGuiViewport::Size",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::Size",1,"ImGuiViewport *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiViewport::Size",2,"ImVec2 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
      SWIG_fail_ptr("ImGuiViewport_Size_set",1,SWIGTYPE_p_ImGuiViewport); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImGuiViewport_Size_set",2,SWIGTYPE_p_ImVec2); }  if (arg1) (arg1)->Size = *arg2; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiViewport_Size_get(lua_State* L) { { int SWIG_arg = 0; ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
    ImVec2 *result = 0 ; SWIG_check_num_args("ImGuiViewport::Size",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::Size",1,"ImGuiViewport *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
      SWIG_fail_ptr("ImGuiViewport_Size_get",1,SWIGTYPE_p_ImGuiViewport); }  result = (ImVec2 *)& ((arg1)->Size);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiViewport_WorkPos_set(lua_State* L) { { int SWIG_arg = 0; ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
    ImVec2 *arg2 = (ImVec2 *) 0 ; SWIG_check_num_args("ImGuiViewport::WorkPos",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::WorkPos",1,"ImGuiViewport *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiViewport::WorkPos",2,"ImVec2 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
      SWIG_fail_ptr("ImGuiViewport_WorkPos_set",1,SWIGTYPE_p_ImGuiViewport); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImGuiViewport_WorkPos_set",2,SWIGTYPE_p_ImVec2); }  if (arg1) (arg1)->WorkPos = *arg2; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiViewport_WorkPos_get(lua_State* L) { { int SWIG_arg = 0; ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
    ImVec2 *result = 0 ; SWIG_check_num_args("ImGuiViewport::WorkPos",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::WorkPos",1,"ImGuiViewport *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
      SWIG_fail_ptr("ImGuiViewport_WorkPos_get",1,SWIGTYPE_p_ImGuiViewport); }  result = (ImVec2 *)& ((arg1)->WorkPos);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiViewport_WorkSize_set(lua_State* L) { { int SWIG_arg = 0; ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
    ImVec2 *arg2 = (ImVec2 *) 0 ; SWIG_check_num_args("ImGuiViewport::WorkSize",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::WorkSize",1,"ImGuiViewport *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiViewport::WorkSize",2,"ImVec2 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
      SWIG_fail_ptr("ImGuiViewport_WorkSize_set",1,SWIGTYPE_p_ImGuiViewport); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImGuiViewport_WorkSize_set",2,SWIGTYPE_p_ImVec2); }  if (arg1) (arg1)->WorkSize = *arg2; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiViewport_WorkSize_get(lua_State* L) { { int SWIG_arg = 0; ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
    ImVec2 *result = 0 ; SWIG_check_num_args("ImGuiViewport::WorkSize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::WorkSize",1,"ImGuiViewport *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
      SWIG_fail_ptr("ImGuiViewport_WorkSize_get",1,SWIGTYPE_p_ImGuiViewport); }  result = (ImVec2 *)& ((arg1)->WorkSize);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiViewport_DpiScale_set(lua_State* L) { { int SWIG_arg = 0; ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
    float arg2 ; SWIG_check_num_args("ImGuiViewport::DpiScale",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::DpiScale",1,"ImGuiViewport *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiViewport::DpiScale",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
      SWIG_fail_ptr("ImGuiViewport_DpiScale_set",1,SWIGTYPE_p_ImGuiViewport); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->DpiScale = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiViewport_DpiScale_get(lua_State* L) { { int SWIG_arg = 0; ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
    float result; SWIG_check_num_args("ImGuiViewport::DpiScale",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::DpiScale",1,"ImGuiViewport *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
      SWIG_fail_ptr("ImGuiViewport_DpiScale_get",1,SWIGTYPE_p_ImGuiViewport); }  result = (float) ((arg1)->DpiScale);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiViewport_ParentViewportId_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiViewport *arg1 = (ImGuiViewport *) 0 ; ImGuiID arg2 ; SWIG_check_num_args("ImGuiViewport::ParentViewportId",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::ParentViewportId",1,"ImGuiViewport *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiViewport::ParentViewportId",2,"ImGuiID");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
      SWIG_fail_ptr("ImGuiViewport_ParentViewportId_set",1,SWIGTYPE_p_ImGuiViewport); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (ImGuiID)lua_tonumber(L, 2);
    if (arg1) (arg1)->ParentViewportId = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiViewport_ParentViewportId_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiViewport *arg1 = (ImGuiViewport *) 0 ; ImGuiID result; SWIG_check_num_args("ImGuiViewport::ParentViewportId",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::ParentViewportId",1,"ImGuiViewport *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
      SWIG_fail_ptr("ImGuiViewport_ParentViewportId_get",1,SWIGTYPE_p_ImGuiViewport); } 
    result = (ImGuiID) ((arg1)->ParentViewportId); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiViewport_DrawData_set(lua_State* L) { { int SWIG_arg = 0; ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
    ImDrawData *arg2 = (ImDrawData *) 0 ; SWIG_check_num_args("ImGuiViewport::DrawData",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::DrawData",1,"ImGuiViewport *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiViewport::DrawData",2,"ImDrawData *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
      SWIG_fail_ptr("ImGuiViewport_DrawData_set",1,SWIGTYPE_p_ImGuiViewport); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImDrawData,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("ImGuiViewport_DrawData_set",2,SWIGTYPE_p_ImDrawData); }  if (arg1) (arg1)->DrawData = arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiViewport_DrawData_get(lua_State* L) { { int SWIG_arg = 0; ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
    ImDrawData *result = 0 ; SWIG_check_num_args("ImGuiViewport::DrawData",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::DrawData",1,"ImGuiViewport *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
      SWIG_fail_ptr("ImGuiViewport_DrawData_get",1,SWIGTYPE_p_ImGuiViewport); }  result = (ImDrawData *) ((arg1)->DrawData);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImDrawData,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiViewport_RendererUserData_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiViewport *arg1 = (ImGuiViewport *) 0 ; void *arg2 = (void *) 0 ;
    SWIG_check_num_args("ImGuiViewport::RendererUserData",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::RendererUserData",1,"ImGuiViewport *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiViewport::RendererUserData",2,"void *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
      SWIG_fail_ptr("ImGuiViewport_RendererUserData_set",1,SWIGTYPE_p_ImGuiViewport); } 
    arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImGuiViewport_RendererUserData_set"); if (arg1) (arg1)->RendererUserData = arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiViewport_RendererUserData_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiViewport *arg1 = (ImGuiViewport *) 0 ; void *result = 0 ; SWIG_check_num_args("ImGuiViewport::RendererUserData",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::RendererUserData",1,"ImGuiViewport *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
      SWIG_fail_ptr("ImGuiViewport_RendererUserData_get",1,SWIGTYPE_p_ImGuiViewport); } 
    result = (void *) ((arg1)->RendererUserData); SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++;  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiViewport_PlatformUserData_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiViewport *arg1 = (ImGuiViewport *) 0 ; void *arg2 = (void *) 0 ;
    SWIG_check_num_args("ImGuiViewport::PlatformUserData",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::PlatformUserData",1,"ImGuiViewport *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiViewport::PlatformUserData",2,"void *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
      SWIG_fail_ptr("ImGuiViewport_PlatformUserData_set",1,SWIGTYPE_p_ImGuiViewport); } 
    arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImGuiViewport_PlatformUserData_set"); if (arg1) (arg1)->PlatformUserData = arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiViewport_PlatformUserData_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiViewport *arg1 = (ImGuiViewport *) 0 ; void *result = 0 ; SWIG_check_num_args("ImGuiViewport::PlatformUserData",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::PlatformUserData",1,"ImGuiViewport *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
      SWIG_fail_ptr("ImGuiViewport_PlatformUserData_get",1,SWIGTYPE_p_ImGuiViewport); } 
    result = (void *) ((arg1)->PlatformUserData); SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++;  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiViewport_PlatformHandle_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiViewport *arg1 = (ImGuiViewport *) 0 ; void *arg2 = (void *) 0 ;
    SWIG_check_num_args("ImGuiViewport::PlatformHandle",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::PlatformHandle",1,"ImGuiViewport *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiViewport::PlatformHandle",2,"void *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
      SWIG_fail_ptr("ImGuiViewport_PlatformHandle_set",1,SWIGTYPE_p_ImGuiViewport); } 
    arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImGuiViewport_PlatformHandle_set"); if (arg1) (arg1)->PlatformHandle = arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiViewport_PlatformHandle_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiViewport *arg1 = (ImGuiViewport *) 0 ; void *result = 0 ; SWIG_check_num_args("ImGuiViewport::PlatformHandle",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::PlatformHandle",1,"ImGuiViewport *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
      SWIG_fail_ptr("ImGuiViewport_PlatformHandle_get",1,SWIGTYPE_p_ImGuiViewport); } 
    result = (void *) ((arg1)->PlatformHandle); SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++;  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiViewport_PlatformHandleRaw_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiViewport *arg1 = (ImGuiViewport *) 0 ; void *arg2 = (void *) 0 ;
    SWIG_check_num_args("ImGuiViewport::PlatformHandleRaw",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::PlatformHandleRaw",1,"ImGuiViewport *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiViewport::PlatformHandleRaw",2,"void *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
      SWIG_fail_ptr("ImGuiViewport_PlatformHandleRaw_set",1,SWIGTYPE_p_ImGuiViewport); } 
    arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImGuiViewport_PlatformHandleRaw_set"); if (arg1) (arg1)->PlatformHandleRaw = arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiViewport_PlatformHandleRaw_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiViewport *arg1 = (ImGuiViewport *) 0 ; void *result = 0 ; SWIG_check_num_args("ImGuiViewport::PlatformHandleRaw",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::PlatformHandleRaw",1,"ImGuiViewport *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
      SWIG_fail_ptr("ImGuiViewport_PlatformHandleRaw_get",1,SWIGTYPE_p_ImGuiViewport); } 
    result = (void *) ((arg1)->PlatformHandleRaw); SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++;  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiViewport_PlatformWindowCreated_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiViewport *arg1 = (ImGuiViewport *) 0 ; bool arg2 ; SWIG_check_num_args("ImGuiViewport::PlatformWindowCreated",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::PlatformWindowCreated",1,"ImGuiViewport *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiViewport::PlatformWindowCreated",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
      SWIG_fail_ptr("ImGuiViewport_PlatformWindowCreated_set",1,SWIGTYPE_p_ImGuiViewport); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->PlatformWindowCreated = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiViewport_PlatformWindowCreated_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiViewport *arg1 = (ImGuiViewport *) 0 ; bool result; SWIG_check_num_args("ImGuiViewport::PlatformWindowCreated",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::PlatformWindowCreated",1,"ImGuiViewport *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
      SWIG_fail_ptr("ImGuiViewport_PlatformWindowCreated_get",1,SWIGTYPE_p_ImGuiViewport); } 
    result = (bool) ((arg1)->PlatformWindowCreated); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiViewport_PlatformRequestMove_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiViewport *arg1 = (ImGuiViewport *) 0 ; bool arg2 ; SWIG_check_num_args("ImGuiViewport::PlatformRequestMove",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::PlatformRequestMove",1,"ImGuiViewport *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiViewport::PlatformRequestMove",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
      SWIG_fail_ptr("ImGuiViewport_PlatformRequestMove_set",1,SWIGTYPE_p_ImGuiViewport); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->PlatformRequestMove = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiViewport_PlatformRequestMove_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiViewport *arg1 = (ImGuiViewport *) 0 ; bool result; SWIG_check_num_args("ImGuiViewport::PlatformRequestMove",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::PlatformRequestMove",1,"ImGuiViewport *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
      SWIG_fail_ptr("ImGuiViewport_PlatformRequestMove_get",1,SWIGTYPE_p_ImGuiViewport); } 
    result = (bool) ((arg1)->PlatformRequestMove); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiViewport_PlatformRequestResize_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiViewport *arg1 = (ImGuiViewport *) 0 ; bool arg2 ; SWIG_check_num_args("ImGuiViewport::PlatformRequestResize",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::PlatformRequestResize",1,"ImGuiViewport *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiViewport::PlatformRequestResize",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
      SWIG_fail_ptr("ImGuiViewport_PlatformRequestResize_set",1,SWIGTYPE_p_ImGuiViewport); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->PlatformRequestResize = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiViewport_PlatformRequestResize_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiViewport *arg1 = (ImGuiViewport *) 0 ; bool result; SWIG_check_num_args("ImGuiViewport::PlatformRequestResize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::PlatformRequestResize",1,"ImGuiViewport *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
      SWIG_fail_ptr("ImGuiViewport_PlatformRequestResize_get",1,SWIGTYPE_p_ImGuiViewport); } 
    result = (bool) ((arg1)->PlatformRequestResize); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiViewport_PlatformRequestClose_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiViewport *arg1 = (ImGuiViewport *) 0 ; bool arg2 ; SWIG_check_num_args("ImGuiViewport::PlatformRequestClose",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::PlatformRequestClose",1,"ImGuiViewport *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiViewport::PlatformRequestClose",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
      SWIG_fail_ptr("ImGuiViewport_PlatformRequestClose_set",1,SWIGTYPE_p_ImGuiViewport); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->PlatformRequestClose = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiViewport_PlatformRequestClose_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiViewport *arg1 = (ImGuiViewport *) 0 ; bool result; SWIG_check_num_args("ImGuiViewport::PlatformRequestClose",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::PlatformRequestClose",1,"ImGuiViewport *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
      SWIG_fail_ptr("ImGuiViewport_PlatformRequestClose_get",1,SWIGTYPE_p_ImGuiViewport); } 
    result = (bool) ((arg1)->PlatformRequestClose); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_ImGuiViewport(lua_State* L) { { int SWIG_arg = 0; ImGuiViewport *result = 0 ;
    SWIG_check_num_args("ImGuiViewport::ImGuiViewport",0,0) result = (ImGuiViewport *)new ImGuiViewport();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiViewport,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiViewport_GetCenter(lua_State* L) { { int SWIG_arg = 0; ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
    ImVec2 result; SWIG_check_num_args("ImGuiViewport::GetCenter",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::GetCenter",1,"ImGuiViewport const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
      SWIG_fail_ptr("ImGuiViewport_GetCenter",1,SWIGTYPE_p_ImGuiViewport); } 
    result = ((ImGuiViewport const *)arg1)->GetCenter(); { ImVec2 * resultptr = new ImVec2(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiViewport_GetWorkCenter(lua_State* L) { { int SWIG_arg = 0; ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
    ImVec2 result; SWIG_check_num_args("ImGuiViewport::GetWorkCenter",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiViewport::GetWorkCenter",1,"ImGuiViewport const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiViewport,0))){
      SWIG_fail_ptr("ImGuiViewport_GetWorkCenter",1,SWIGTYPE_p_ImGuiViewport); } 
    result = ((ImGuiViewport const *)arg1)->GetWorkCenter(); { ImVec2 * resultptr = new ImVec2(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static void swig_delete_ImGuiViewport(void *obj) {
ImGuiViewport *arg1 = (ImGuiViewport *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiViewport(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiViewport);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiViewport_attributes[] = {
    { "ID", _wrap_ImGuiViewport_ID_get, _wrap_ImGuiViewport_ID_set },
    { "Flags", _wrap_ImGuiViewport_Flags_get, _wrap_ImGuiViewport_Flags_set },
    { "Pos", _wrap_ImGuiViewport_Pos_get, _wrap_ImGuiViewport_Pos_set },
    { "Size", _wrap_ImGuiViewport_Size_get, _wrap_ImGuiViewport_Size_set },
    { "WorkPos", _wrap_ImGuiViewport_WorkPos_get, _wrap_ImGuiViewport_WorkPos_set },
    { "WorkSize", _wrap_ImGuiViewport_WorkSize_get, _wrap_ImGuiViewport_WorkSize_set },
    { "DpiScale", _wrap_ImGuiViewport_DpiScale_get, _wrap_ImGuiViewport_DpiScale_set },
    { "ParentViewportId", _wrap_ImGuiViewport_ParentViewportId_get, _wrap_ImGuiViewport_ParentViewportId_set },
    { "DrawData", _wrap_ImGuiViewport_DrawData_get, _wrap_ImGuiViewport_DrawData_set },
    { "RendererUserData", _wrap_ImGuiViewport_RendererUserData_get, _wrap_ImGuiViewport_RendererUserData_set },
    { "PlatformUserData", _wrap_ImGuiViewport_PlatformUserData_get, _wrap_ImGuiViewport_PlatformUserData_set },
    { "PlatformHandle", _wrap_ImGuiViewport_PlatformHandle_get, _wrap_ImGuiViewport_PlatformHandle_set },
    { "PlatformHandleRaw", _wrap_ImGuiViewport_PlatformHandleRaw_get, _wrap_ImGuiViewport_PlatformHandleRaw_set },
    { "PlatformWindowCreated", _wrap_ImGuiViewport_PlatformWindowCreated_get, _wrap_ImGuiViewport_PlatformWindowCreated_set },
    { "PlatformRequestMove", _wrap_ImGuiViewport_PlatformRequestMove_get, _wrap_ImGuiViewport_PlatformRequestMove_set },
    { "PlatformRequestResize", _wrap_ImGuiViewport_PlatformRequestResize_get, _wrap_ImGuiViewport_PlatformRequestResize_set },
    { "PlatformRequestClose", _wrap_ImGuiViewport_PlatformRequestClose_get, _wrap_ImGuiViewport_PlatformRequestClose_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiViewport_methods[]= {
    { "GetCenter", _wrap_ImGuiViewport_GetCenter},
    { "GetWorkCenter", _wrap_ImGuiViewport_GetWorkCenter},
    {0,0}
};
static swig_lua_method swig_ImGuiViewport_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiViewport_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiViewport_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiViewport_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiViewport_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiViewport_Sf_SwigStatic = {
    "ImGuiViewport",
    swig_ImGuiViewport_Sf_SwigStatic_methods,
    swig_ImGuiViewport_Sf_SwigStatic_attributes,
    swig_ImGuiViewport_Sf_SwigStatic_constants,
    swig_ImGuiViewport_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiViewport_bases[] = {0};
static const char *swig_ImGuiViewport_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiViewport = { "ImGuiViewport", "ImGuiViewport", &SWIGTYPE_p_ImGuiViewport,_proxy__wrap_new_ImGuiViewport, swig_delete_ImGuiViewport, swig_ImGuiViewport_methods, swig_ImGuiViewport_attributes, &swig_ImGuiViewport_Sf_SwigStatic, swig_ImGuiViewport_meta, swig_ImGuiViewport_bases, swig_ImGuiViewport_base_names };

static int _wrap_new_ImGuiPlatformIO(lua_State* L) { { int SWIG_arg = 0; ImGuiPlatformIO *result = 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::ImGuiPlatformIO",0,0) result = (ImGuiPlatformIO *)new ImGuiPlatformIO();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiPlatformIO,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiPlatformIO_Platform_GetClipboardTextFn_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; char *(*arg2)(ImGuiContext *) = (char *(*)(ImGuiContext *)) 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_GetClipboardTextFn",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_GetClipboardTextFn",1,"ImGuiPlatformIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Platform_GetClipboardTextFn",2,"char const *(*)(ImGuiContext *)");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_GetClipboardTextFn_set",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiContext__p_char,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_GetClipboardTextFn_set",2,SWIGTYPE_p_f_p_ImGuiContext__p_char); } 
    if (arg1) (arg1)->Platform_GetClipboardTextFn = (char const *(*)(ImGuiContext *))arg2; return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_GetClipboardTextFn_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; char *(*result)(ImGuiContext *) = 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_GetClipboardTextFn",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_GetClipboardTextFn",1,"ImGuiPlatformIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_GetClipboardTextFn_get",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    result = (char *(*)(ImGuiContext *)) ((arg1)->Platform_GetClipboardTextFn);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiContext__p_char,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_SetClipboardTextFn_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
    void (*arg2)(ImGuiContext *,char const *) = (void (*)(ImGuiContext *,char const *)) 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_SetClipboardTextFn",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_SetClipboardTextFn",1,"ImGuiPlatformIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Platform_SetClipboardTextFn",2,"void (*)(ImGuiContext *,char const *)");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_SetClipboardTextFn_set",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiContext_p_q_const__char__void,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_SetClipboardTextFn_set",2,SWIGTYPE_p_f_p_ImGuiContext_p_q_const__char__void); } 
    if (arg1) (arg1)->Platform_SetClipboardTextFn = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_SetClipboardTextFn_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; void (*result)(ImGuiContext *,char const *) = 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_SetClipboardTextFn",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_SetClipboardTextFn",1,"ImGuiPlatformIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_SetClipboardTextFn_get",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    result = (void (*)(ImGuiContext *,char const *)) ((arg1)->Platform_SetClipboardTextFn);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiContext_p_q_const__char__void,0); SWIG_arg++;  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_ClipboardUserData_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; void *arg2 = (void *) 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_ClipboardUserData",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_ClipboardUserData",1,"ImGuiPlatformIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Platform_ClipboardUserData",2,"void *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_ClipboardUserData_set",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImGuiPlatformIO_Platform_ClipboardUserData_set");
    if (arg1) (arg1)->Platform_ClipboardUserData = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_ClipboardUserData_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; void *result = 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_ClipboardUserData",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_ClipboardUserData",1,"ImGuiPlatformIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_ClipboardUserData_get",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    result = (void *) ((arg1)->Platform_ClipboardUserData); SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_OpenInShellFn_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
    bool (*arg2)(ImGuiContext *,char const *) = (bool (*)(ImGuiContext *,char const *)) 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_OpenInShellFn",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_OpenInShellFn",1,"ImGuiPlatformIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Platform_OpenInShellFn",2,"bool (*)(ImGuiContext *,char const *)");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_OpenInShellFn_set",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiContext_p_q_const__char__bool,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_OpenInShellFn_set",2,SWIGTYPE_p_f_p_ImGuiContext_p_q_const__char__bool); } 
    if (arg1) (arg1)->Platform_OpenInShellFn = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_OpenInShellFn_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; bool (*result)(ImGuiContext *,char const *) = 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_OpenInShellFn",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_OpenInShellFn",1,"ImGuiPlatformIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_OpenInShellFn_get",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    result = (bool (*)(ImGuiContext *,char const *)) ((arg1)->Platform_OpenInShellFn);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiContext_p_q_const__char__bool,0); SWIG_arg++;  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_OpenInShellUserData_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; void *arg2 = (void *) 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_OpenInShellUserData",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_OpenInShellUserData",1,"ImGuiPlatformIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Platform_OpenInShellUserData",2,"void *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_OpenInShellUserData_set",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImGuiPlatformIO_Platform_OpenInShellUserData_set");
    if (arg1) (arg1)->Platform_OpenInShellUserData = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_OpenInShellUserData_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; void *result = 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_OpenInShellUserData",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_OpenInShellUserData",1,"ImGuiPlatformIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_OpenInShellUserData_get",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    result = (void *) ((arg1)->Platform_OpenInShellUserData); SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_SetImeDataFn_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
    void (*arg2)(ImGuiContext *,ImGuiViewport *,ImGuiPlatformImeData *) = (void (*)(ImGuiContext *,ImGuiViewport *,ImGuiPlatformImeData *)) 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_SetImeDataFn",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_SetImeDataFn",1,"ImGuiPlatformIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Platform_SetImeDataFn",2,"void (*)(ImGuiContext *,ImGuiViewport *,ImGuiPlatformImeData *)");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_SetImeDataFn_set",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiContext_p_ImGuiViewport_p_ImGuiPlatformImeData__void,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_SetImeDataFn_set",2,SWIGTYPE_p_f_p_ImGuiContext_p_ImGuiViewport_p_ImGuiPlatformImeData__void); }
     if (arg1) (arg1)->Platform_SetImeDataFn = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_SetImeDataFn_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; void (*result)(ImGuiContext *,ImGuiViewport *,ImGuiPlatformImeData *) = 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_SetImeDataFn",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_SetImeDataFn",1,"ImGuiPlatformIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_SetImeDataFn_get",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    result = (void (*)(ImGuiContext *,ImGuiViewport *,ImGuiPlatformImeData *)) ((arg1)->Platform_SetImeDataFn);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiContext_p_ImGuiViewport_p_ImGuiPlatformImeData__void,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_ImeUserData_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; void *arg2 = (void *) 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_ImeUserData",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_ImeUserData",1,"ImGuiPlatformIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Platform_ImeUserData",2,"void *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_ImeUserData_set",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImGuiPlatformIO_Platform_ImeUserData_set");
    if (arg1) (arg1)->Platform_ImeUserData = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_ImeUserData_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; void *result = 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_ImeUserData",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_ImeUserData",1,"ImGuiPlatformIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_ImeUserData_get",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    result = (void *) ((arg1)->Platform_ImeUserData); SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_LocaleDecimalPoint_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; ImWchar arg2 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_LocaleDecimalPoint",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_LocaleDecimalPoint",1,"ImGuiPlatformIO *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Platform_LocaleDecimalPoint",2,"ImWchar");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_LocaleDecimalPoint_set",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative"); arg2 = (ImWchar)lua_tonumber(L, 2);
    if (arg1) (arg1)->Platform_LocaleDecimalPoint = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_LocaleDecimalPoint_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; ImWchar result;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_LocaleDecimalPoint",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_LocaleDecimalPoint",1,"ImGuiPlatformIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_LocaleDecimalPoint_get",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    result = (ImWchar) ((arg1)->Platform_LocaleDecimalPoint); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Renderer_RenderState_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; void *arg2 = (void *) 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Renderer_RenderState",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Renderer_RenderState",1,"ImGuiPlatformIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Renderer_RenderState",2,"void *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Renderer_RenderState_set",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImGuiPlatformIO_Renderer_RenderState_set");
    if (arg1) (arg1)->Renderer_RenderState = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Renderer_RenderState_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; void *result = 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Renderer_RenderState",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Renderer_RenderState",1,"ImGuiPlatformIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Renderer_RenderState_get",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    result = (void *) ((arg1)->Renderer_RenderState); SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_CreateWindow_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; void (*arg2)(ImGuiViewport *) = (void (*)(ImGuiViewport *)) 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_CreateWindow",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_CreateWindow",1,"ImGuiPlatformIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Platform_CreateWindow",2,"void (*)(ImGuiViewport *)");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_CreateWindow_set",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiViewport__void,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_CreateWindow_set",2,SWIGTYPE_p_f_p_ImGuiViewport__void); } 
    if (arg1) (arg1)->Platform_CreateWindow = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_CreateWindow_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; void (*result)(ImGuiViewport *) = 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_CreateWindow",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_CreateWindow",1,"ImGuiPlatformIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_CreateWindow_get",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    result = (void (*)(ImGuiViewport *)) ((arg1)->Platform_CreateWindow);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiViewport__void,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_DestroyWindow_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; void (*arg2)(ImGuiViewport *) = (void (*)(ImGuiViewport *)) 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_DestroyWindow",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_DestroyWindow",1,"ImGuiPlatformIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Platform_DestroyWindow",2,"void (*)(ImGuiViewport *)");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_DestroyWindow_set",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiViewport__void,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_DestroyWindow_set",2,SWIGTYPE_p_f_p_ImGuiViewport__void); } 
    if (arg1) (arg1)->Platform_DestroyWindow = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_DestroyWindow_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; void (*result)(ImGuiViewport *) = 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_DestroyWindow",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_DestroyWindow",1,"ImGuiPlatformIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_DestroyWindow_get",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    result = (void (*)(ImGuiViewport *)) ((arg1)->Platform_DestroyWindow);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiViewport__void,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_ShowWindow_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; void (*arg2)(ImGuiViewport *) = (void (*)(ImGuiViewport *)) 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_ShowWindow",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_ShowWindow",1,"ImGuiPlatformIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Platform_ShowWindow",2,"void (*)(ImGuiViewport *)");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_ShowWindow_set",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiViewport__void,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_ShowWindow_set",2,SWIGTYPE_p_f_p_ImGuiViewport__void); } 
    if (arg1) (arg1)->Platform_ShowWindow = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_ShowWindow_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; void (*result)(ImGuiViewport *) = 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_ShowWindow",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_ShowWindow",1,"ImGuiPlatformIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_ShowWindow_get",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    result = (void (*)(ImGuiViewport *)) ((arg1)->Platform_ShowWindow);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiViewport__void,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_SetWindowPos_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
    void (*arg2)(ImGuiViewport *,ImVec2) = (void (*)(ImGuiViewport *,ImVec2)) 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_SetWindowPos",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_SetWindowPos",1,"ImGuiPlatformIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Platform_SetWindowPos",2,"void (*)(ImGuiViewport *,ImVec2)");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_SetWindowPos_set",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiViewport_ImVec2__void,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_SetWindowPos_set",2,SWIGTYPE_p_f_p_ImGuiViewport_ImVec2__void); } 
    if (arg1) (arg1)->Platform_SetWindowPos = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_SetWindowPos_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; void (*result)(ImGuiViewport *,ImVec2) = 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_SetWindowPos",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_SetWindowPos",1,"ImGuiPlatformIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_SetWindowPos_get",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    result = (void (*)(ImGuiViewport *,ImVec2)) ((arg1)->Platform_SetWindowPos);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiViewport_ImVec2__void,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_GetWindowPos_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; ImVec2 (*arg2)(ImGuiViewport *) = (ImVec2 (*)(ImGuiViewport *)) 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_GetWindowPos",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_GetWindowPos",1,"ImGuiPlatformIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Platform_GetWindowPos",2,"ImVec2 (*)(ImGuiViewport *)");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_GetWindowPos_set",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiViewport__ImVec2,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_GetWindowPos_set",2,SWIGTYPE_p_f_p_ImGuiViewport__ImVec2); } 
    if (arg1) (arg1)->Platform_GetWindowPos = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_GetWindowPos_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; ImVec2 (*result)(ImGuiViewport *) = 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_GetWindowPos",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_GetWindowPos",1,"ImGuiPlatformIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_GetWindowPos_get",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    result = (ImVec2 (*)(ImGuiViewport *)) ((arg1)->Platform_GetWindowPos);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiViewport__ImVec2,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_SetWindowSize_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
    void (*arg2)(ImGuiViewport *,ImVec2) = (void (*)(ImGuiViewport *,ImVec2)) 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_SetWindowSize",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_SetWindowSize",1,"ImGuiPlatformIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Platform_SetWindowSize",2,"void (*)(ImGuiViewport *,ImVec2)");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_SetWindowSize_set",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiViewport_ImVec2__void,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_SetWindowSize_set",2,SWIGTYPE_p_f_p_ImGuiViewport_ImVec2__void); } 
    if (arg1) (arg1)->Platform_SetWindowSize = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_SetWindowSize_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; void (*result)(ImGuiViewport *,ImVec2) = 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_SetWindowSize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_SetWindowSize",1,"ImGuiPlatformIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_SetWindowSize_get",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    result = (void (*)(ImGuiViewport *,ImVec2)) ((arg1)->Platform_SetWindowSize);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiViewport_ImVec2__void,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_GetWindowSize_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; ImVec2 (*arg2)(ImGuiViewport *) = (ImVec2 (*)(ImGuiViewport *)) 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_GetWindowSize",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_GetWindowSize",1,"ImGuiPlatformIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Platform_GetWindowSize",2,"ImVec2 (*)(ImGuiViewport *)");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_GetWindowSize_set",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiViewport__ImVec2,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_GetWindowSize_set",2,SWIGTYPE_p_f_p_ImGuiViewport__ImVec2); } 
    if (arg1) (arg1)->Platform_GetWindowSize = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_GetWindowSize_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; ImVec2 (*result)(ImGuiViewport *) = 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_GetWindowSize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_GetWindowSize",1,"ImGuiPlatformIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_GetWindowSize_get",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    result = (ImVec2 (*)(ImGuiViewport *)) ((arg1)->Platform_GetWindowSize);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiViewport__ImVec2,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_SetWindowFocus_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; void (*arg2)(ImGuiViewport *) = (void (*)(ImGuiViewport *)) 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_SetWindowFocus",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_SetWindowFocus",1,"ImGuiPlatformIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Platform_SetWindowFocus",2,"void (*)(ImGuiViewport *)");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_SetWindowFocus_set",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiViewport__void,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_SetWindowFocus_set",2,SWIGTYPE_p_f_p_ImGuiViewport__void); } 
    if (arg1) (arg1)->Platform_SetWindowFocus = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_SetWindowFocus_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; void (*result)(ImGuiViewport *) = 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_SetWindowFocus",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_SetWindowFocus",1,"ImGuiPlatformIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_SetWindowFocus_get",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    result = (void (*)(ImGuiViewport *)) ((arg1)->Platform_SetWindowFocus);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiViewport__void,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_GetWindowFocus_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; bool (*arg2)(ImGuiViewport *) = (bool (*)(ImGuiViewport *)) 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_GetWindowFocus",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_GetWindowFocus",1,"ImGuiPlatformIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Platform_GetWindowFocus",2,"bool (*)(ImGuiViewport *)");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_GetWindowFocus_set",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiViewport__bool,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_GetWindowFocus_set",2,SWIGTYPE_p_f_p_ImGuiViewport__bool); } 
    if (arg1) (arg1)->Platform_GetWindowFocus = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_GetWindowFocus_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; bool (*result)(ImGuiViewport *) = 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_GetWindowFocus",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_GetWindowFocus",1,"ImGuiPlatformIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_GetWindowFocus_get",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    result = (bool (*)(ImGuiViewport *)) ((arg1)->Platform_GetWindowFocus);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiViewport__bool,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_GetWindowMinimized_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; bool (*arg2)(ImGuiViewport *) = (bool (*)(ImGuiViewport *)) 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_GetWindowMinimized",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_GetWindowMinimized",1,"ImGuiPlatformIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Platform_GetWindowMinimized",2,"bool (*)(ImGuiViewport *)");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_GetWindowMinimized_set",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiViewport__bool,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_GetWindowMinimized_set",2,SWIGTYPE_p_f_p_ImGuiViewport__bool); } 
    if (arg1) (arg1)->Platform_GetWindowMinimized = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_GetWindowMinimized_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; bool (*result)(ImGuiViewport *) = 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_GetWindowMinimized",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_GetWindowMinimized",1,"ImGuiPlatformIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_GetWindowMinimized_get",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    result = (bool (*)(ImGuiViewport *)) ((arg1)->Platform_GetWindowMinimized);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiViewport__bool,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_SetWindowTitle_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
    void (*arg2)(ImGuiViewport *,char const *) = (void (*)(ImGuiViewport *,char const *)) 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_SetWindowTitle",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_SetWindowTitle",1,"ImGuiPlatformIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Platform_SetWindowTitle",2,"void (*)(ImGuiViewport *,char const *)");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_SetWindowTitle_set",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiViewport_p_q_const__char__void,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_SetWindowTitle_set",2,SWIGTYPE_p_f_p_ImGuiViewport_p_q_const__char__void); } 
    if (arg1) (arg1)->Platform_SetWindowTitle = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_SetWindowTitle_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; void (*result)(ImGuiViewport *,char const *) = 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_SetWindowTitle",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_SetWindowTitle",1,"ImGuiPlatformIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_SetWindowTitle_get",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    result = (void (*)(ImGuiViewport *,char const *)) ((arg1)->Platform_SetWindowTitle);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiViewport_p_q_const__char__void,0); SWIG_arg++;  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_SetWindowAlpha_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; void (*arg2)(ImGuiViewport *,float) = (void (*)(ImGuiViewport *,float)) 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_SetWindowAlpha",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_SetWindowAlpha",1,"ImGuiPlatformIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Platform_SetWindowAlpha",2,"void (*)(ImGuiViewport *,float)");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_SetWindowAlpha_set",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiViewport_float__void,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_SetWindowAlpha_set",2,SWIGTYPE_p_f_p_ImGuiViewport_float__void); } 
    if (arg1) (arg1)->Platform_SetWindowAlpha = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_SetWindowAlpha_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; void (*result)(ImGuiViewport *,float) = 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_SetWindowAlpha",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_SetWindowAlpha",1,"ImGuiPlatformIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_SetWindowAlpha_get",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    result = (void (*)(ImGuiViewport *,float)) ((arg1)->Platform_SetWindowAlpha);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiViewport_float__void,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_UpdateWindow_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; void (*arg2)(ImGuiViewport *) = (void (*)(ImGuiViewport *)) 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_UpdateWindow",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_UpdateWindow",1,"ImGuiPlatformIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Platform_UpdateWindow",2,"void (*)(ImGuiViewport *)");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_UpdateWindow_set",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiViewport__void,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_UpdateWindow_set",2,SWIGTYPE_p_f_p_ImGuiViewport__void); } 
    if (arg1) (arg1)->Platform_UpdateWindow = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_UpdateWindow_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; void (*result)(ImGuiViewport *) = 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_UpdateWindow",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_UpdateWindow",1,"ImGuiPlatformIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_UpdateWindow_get",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    result = (void (*)(ImGuiViewport *)) ((arg1)->Platform_UpdateWindow);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiViewport__void,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_RenderWindow_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
    void (*arg2)(ImGuiViewport *,void *) = (void (*)(ImGuiViewport *,void *)) 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_RenderWindow",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_RenderWindow",1,"ImGuiPlatformIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Platform_RenderWindow",2,"void (*)(ImGuiViewport *,void *)");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_RenderWindow_set",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiViewport_p_void__void,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_RenderWindow_set",2,SWIGTYPE_p_f_p_ImGuiViewport_p_void__void); } 
    if (arg1) (arg1)->Platform_RenderWindow = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_RenderWindow_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; void (*result)(ImGuiViewport *,void *) = 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_RenderWindow",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_RenderWindow",1,"ImGuiPlatformIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_RenderWindow_get",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    result = (void (*)(ImGuiViewport *,void *)) ((arg1)->Platform_RenderWindow);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiViewport_p_void__void,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_SwapBuffers_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
    void (*arg2)(ImGuiViewport *,void *) = (void (*)(ImGuiViewport *,void *)) 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_SwapBuffers",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_SwapBuffers",1,"ImGuiPlatformIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Platform_SwapBuffers",2,"void (*)(ImGuiViewport *,void *)");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_SwapBuffers_set",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiViewport_p_void__void,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_SwapBuffers_set",2,SWIGTYPE_p_f_p_ImGuiViewport_p_void__void); } 
    if (arg1) (arg1)->Platform_SwapBuffers = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_SwapBuffers_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; void (*result)(ImGuiViewport *,void *) = 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_SwapBuffers",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_SwapBuffers",1,"ImGuiPlatformIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_SwapBuffers_get",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    result = (void (*)(ImGuiViewport *,void *)) ((arg1)->Platform_SwapBuffers);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiViewport_p_void__void,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_GetWindowDpiScale_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; float (*arg2)(ImGuiViewport *) = (float (*)(ImGuiViewport *)) 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_GetWindowDpiScale",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_GetWindowDpiScale",1,"ImGuiPlatformIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Platform_GetWindowDpiScale",2,"float (*)(ImGuiViewport *)");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_GetWindowDpiScale_set",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiViewport__float,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_GetWindowDpiScale_set",2,SWIGTYPE_p_f_p_ImGuiViewport__float); } 
    if (arg1) (arg1)->Platform_GetWindowDpiScale = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_GetWindowDpiScale_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; float (*result)(ImGuiViewport *) = 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_GetWindowDpiScale",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_GetWindowDpiScale",1,"ImGuiPlatformIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_GetWindowDpiScale_get",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    result = (float (*)(ImGuiViewport *)) ((arg1)->Platform_GetWindowDpiScale);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiViewport__float,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_OnChangedViewport_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; void (*arg2)(ImGuiViewport *) = (void (*)(ImGuiViewport *)) 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_OnChangedViewport",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_OnChangedViewport",1,"ImGuiPlatformIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Platform_OnChangedViewport",2,"void (*)(ImGuiViewport *)");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_OnChangedViewport_set",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiViewport__void,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_OnChangedViewport_set",2,SWIGTYPE_p_f_p_ImGuiViewport__void); } 
    if (arg1) (arg1)->Platform_OnChangedViewport = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_OnChangedViewport_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; void (*result)(ImGuiViewport *) = 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_OnChangedViewport",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_OnChangedViewport",1,"ImGuiPlatformIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_OnChangedViewport_get",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    result = (void (*)(ImGuiViewport *)) ((arg1)->Platform_OnChangedViewport);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiViewport__void,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_GetWindowWorkAreaInsets_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; ImVec4 (*arg2)(ImGuiViewport *) = (ImVec4 (*)(ImGuiViewport *)) 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_GetWindowWorkAreaInsets",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_GetWindowWorkAreaInsets",1,"ImGuiPlatformIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Platform_GetWindowWorkAreaInsets",2,"ImVec4 (*)(ImGuiViewport *)");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_GetWindowWorkAreaInsets_set",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiViewport__ImVec4,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_GetWindowWorkAreaInsets_set",2,SWIGTYPE_p_f_p_ImGuiViewport__ImVec4); } 
    if (arg1) (arg1)->Platform_GetWindowWorkAreaInsets = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_GetWindowWorkAreaInsets_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; ImVec4 (*result)(ImGuiViewport *) = 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_GetWindowWorkAreaInsets",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_GetWindowWorkAreaInsets",1,"ImGuiPlatformIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_GetWindowWorkAreaInsets_get",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    result = (ImVec4 (*)(ImGuiViewport *)) ((arg1)->Platform_GetWindowWorkAreaInsets);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiViewport__ImVec4,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_CreateVkSurface_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
    int (*arg2)(ImGuiViewport *,ImU64,void const *,ImU64 *) = (int (*)(ImGuiViewport *,ImU64,void const *,ImU64 *)) 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_CreateVkSurface",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_CreateVkSurface",1,"ImGuiPlatformIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Platform_CreateVkSurface",2,"int (*)(ImGuiViewport *,ImU64,void const *,ImU64 *)");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_CreateVkSurface_set",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiViewport_unsigned_long_long_p_q_const__void_p_unsigned_long_long__int,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_CreateVkSurface_set",2,SWIGTYPE_p_f_p_ImGuiViewport_unsigned_long_long_p_q_const__void_p_unsigned_long_long__int); }
     if (arg1) (arg1)->Platform_CreateVkSurface = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Platform_CreateVkSurface_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; int (*result)(ImGuiViewport *,ImU64,void const *,ImU64 *) = 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Platform_CreateVkSurface",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Platform_CreateVkSurface",1,"ImGuiPlatformIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Platform_CreateVkSurface_get",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    result = (int (*)(ImGuiViewport *,ImU64,void const *,ImU64 *)) ((arg1)->Platform_CreateVkSurface);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiViewport_unsigned_long_long_p_q_const__void_p_unsigned_long_long__int,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Renderer_CreateWindow_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; void (*arg2)(ImGuiViewport *) = (void (*)(ImGuiViewport *)) 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Renderer_CreateWindow",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Renderer_CreateWindow",1,"ImGuiPlatformIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Renderer_CreateWindow",2,"void (*)(ImGuiViewport *)");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Renderer_CreateWindow_set",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiViewport__void,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Renderer_CreateWindow_set",2,SWIGTYPE_p_f_p_ImGuiViewport__void); } 
    if (arg1) (arg1)->Renderer_CreateWindow = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Renderer_CreateWindow_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; void (*result)(ImGuiViewport *) = 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Renderer_CreateWindow",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Renderer_CreateWindow",1,"ImGuiPlatformIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Renderer_CreateWindow_get",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    result = (void (*)(ImGuiViewport *)) ((arg1)->Renderer_CreateWindow);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiViewport__void,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Renderer_DestroyWindow_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; void (*arg2)(ImGuiViewport *) = (void (*)(ImGuiViewport *)) 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Renderer_DestroyWindow",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Renderer_DestroyWindow",1,"ImGuiPlatformIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Renderer_DestroyWindow",2,"void (*)(ImGuiViewport *)");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Renderer_DestroyWindow_set",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiViewport__void,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Renderer_DestroyWindow_set",2,SWIGTYPE_p_f_p_ImGuiViewport__void); } 
    if (arg1) (arg1)->Renderer_DestroyWindow = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Renderer_DestroyWindow_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; void (*result)(ImGuiViewport *) = 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Renderer_DestroyWindow",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Renderer_DestroyWindow",1,"ImGuiPlatformIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Renderer_DestroyWindow_get",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    result = (void (*)(ImGuiViewport *)) ((arg1)->Renderer_DestroyWindow);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiViewport__void,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Renderer_SetWindowSize_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
    void (*arg2)(ImGuiViewport *,ImVec2) = (void (*)(ImGuiViewport *,ImVec2)) 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Renderer_SetWindowSize",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Renderer_SetWindowSize",1,"ImGuiPlatformIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Renderer_SetWindowSize",2,"void (*)(ImGuiViewport *,ImVec2)");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Renderer_SetWindowSize_set",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiViewport_ImVec2__void,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Renderer_SetWindowSize_set",2,SWIGTYPE_p_f_p_ImGuiViewport_ImVec2__void); } 
    if (arg1) (arg1)->Renderer_SetWindowSize = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Renderer_SetWindowSize_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; void (*result)(ImGuiViewport *,ImVec2) = 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Renderer_SetWindowSize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Renderer_SetWindowSize",1,"ImGuiPlatformIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Renderer_SetWindowSize_get",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    result = (void (*)(ImGuiViewport *,ImVec2)) ((arg1)->Renderer_SetWindowSize);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiViewport_ImVec2__void,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Renderer_RenderWindow_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
    void (*arg2)(ImGuiViewport *,void *) = (void (*)(ImGuiViewport *,void *)) 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Renderer_RenderWindow",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Renderer_RenderWindow",1,"ImGuiPlatformIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Renderer_RenderWindow",2,"void (*)(ImGuiViewport *,void *)");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Renderer_RenderWindow_set",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiViewport_p_void__void,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Renderer_RenderWindow_set",2,SWIGTYPE_p_f_p_ImGuiViewport_p_void__void); } 
    if (arg1) (arg1)->Renderer_RenderWindow = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Renderer_RenderWindow_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; void (*result)(ImGuiViewport *,void *) = 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Renderer_RenderWindow",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Renderer_RenderWindow",1,"ImGuiPlatformIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Renderer_RenderWindow_get",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    result = (void (*)(ImGuiViewport *,void *)) ((arg1)->Renderer_RenderWindow);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiViewport_p_void__void,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Renderer_SwapBuffers_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
    void (*arg2)(ImGuiViewport *,void *) = (void (*)(ImGuiViewport *,void *)) 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Renderer_SwapBuffers",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Renderer_SwapBuffers",1,"ImGuiPlatformIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Renderer_SwapBuffers",2,"void (*)(ImGuiViewport *,void *)");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Renderer_SwapBuffers_set",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_ImGuiViewport_p_void__void,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Renderer_SwapBuffers_set",2,SWIGTYPE_p_f_p_ImGuiViewport_p_void__void); } 
    if (arg1) (arg1)->Renderer_SwapBuffers = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Renderer_SwapBuffers_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; void (*result)(ImGuiViewport *,void *) = 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Renderer_SwapBuffers",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Renderer_SwapBuffers",1,"ImGuiPlatformIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Renderer_SwapBuffers_get",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    result = (void (*)(ImGuiViewport *,void *)) ((arg1)->Renderer_SwapBuffers);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_ImGuiViewport_p_void__void,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Monitors_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
    ImVector< ImGuiPlatformMonitor > *arg2 = (ImVector< ImGuiPlatformMonitor > *) 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Monitors",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Monitors",1,"ImGuiPlatformIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Monitors",2,"ImVector< ImGuiPlatformMonitor > *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Monitors_set",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImGuiPlatformMonitor_t,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Monitors_set",2,SWIGTYPE_p_ImVectorT_ImGuiPlatformMonitor_t); } 
    if (arg1) (arg1)->Monitors = *arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Monitors_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; ImVector< ImGuiPlatformMonitor > *result = 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Monitors",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Monitors",1,"ImGuiPlatformIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Monitors_get",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    result = (ImVector< ImGuiPlatformMonitor > *)& ((arg1)->Monitors);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImGuiPlatformMonitor_t,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }
   lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Viewports_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; ImVector< ImGuiViewport * > *arg2 = (ImVector< ImGuiViewport * > *) 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Viewports",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Viewports",1,"ImGuiPlatformIO *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformIO::Viewports",2,"ImVector< ImGuiViewport * > *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Viewports_set",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVectorT_ImGuiViewport_p_t,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Viewports_set",2,SWIGTYPE_p_ImVectorT_ImGuiViewport_p_t); } 
    if (arg1) (arg1)->Viewports = *arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformIO_Viewports_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ; ImVector< ImGuiViewport * > *result = 0 ;
    SWIG_check_num_args("ImGuiPlatformIO::Viewports",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformIO::Viewports",1,"ImGuiPlatformIO *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformIO,0))){
      SWIG_fail_ptr("ImGuiPlatformIO_Viewports_get",1,SWIGTYPE_p_ImGuiPlatformIO); } 
    result = (ImVector< ImGuiViewport * > *)& ((arg1)->Viewports);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVectorT_ImGuiViewport_p_t,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static void swig_delete_ImGuiPlatformIO(void *obj) {
ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiPlatformIO(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiPlatformIO);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiPlatformIO_attributes[] = {
    { "Platform_GetClipboardTextFn", _wrap_ImGuiPlatformIO_Platform_GetClipboardTextFn_get, _wrap_ImGuiPlatformIO_Platform_GetClipboardTextFn_set },
    { "Platform_SetClipboardTextFn", _wrap_ImGuiPlatformIO_Platform_SetClipboardTextFn_get, _wrap_ImGuiPlatformIO_Platform_SetClipboardTextFn_set },
    { "Platform_ClipboardUserData", _wrap_ImGuiPlatformIO_Platform_ClipboardUserData_get, _wrap_ImGuiPlatformIO_Platform_ClipboardUserData_set },
    { "Platform_OpenInShellFn", _wrap_ImGuiPlatformIO_Platform_OpenInShellFn_get, _wrap_ImGuiPlatformIO_Platform_OpenInShellFn_set },
    { "Platform_OpenInShellUserData", _wrap_ImGuiPlatformIO_Platform_OpenInShellUserData_get, _wrap_ImGuiPlatformIO_Platform_OpenInShellUserData_set },
    { "Platform_SetImeDataFn", _wrap_ImGuiPlatformIO_Platform_SetImeDataFn_get, _wrap_ImGuiPlatformIO_Platform_SetImeDataFn_set },
    { "Platform_ImeUserData", _wrap_ImGuiPlatformIO_Platform_ImeUserData_get, _wrap_ImGuiPlatformIO_Platform_ImeUserData_set },
    { "Platform_LocaleDecimalPoint", _wrap_ImGuiPlatformIO_Platform_LocaleDecimalPoint_get, _wrap_ImGuiPlatformIO_Platform_LocaleDecimalPoint_set },
    { "Renderer_RenderState", _wrap_ImGuiPlatformIO_Renderer_RenderState_get, _wrap_ImGuiPlatformIO_Renderer_RenderState_set },
    { "Platform_CreateWindow", _wrap_ImGuiPlatformIO_Platform_CreateWindow_get, _wrap_ImGuiPlatformIO_Platform_CreateWindow_set },
    { "Platform_DestroyWindow", _wrap_ImGuiPlatformIO_Platform_DestroyWindow_get, _wrap_ImGuiPlatformIO_Platform_DestroyWindow_set },
    { "Platform_ShowWindow", _wrap_ImGuiPlatformIO_Platform_ShowWindow_get, _wrap_ImGuiPlatformIO_Platform_ShowWindow_set },
    { "Platform_SetWindowPos", _wrap_ImGuiPlatformIO_Platform_SetWindowPos_get, _wrap_ImGuiPlatformIO_Platform_SetWindowPos_set },
    { "Platform_GetWindowPos", _wrap_ImGuiPlatformIO_Platform_GetWindowPos_get, _wrap_ImGuiPlatformIO_Platform_GetWindowPos_set },
    { "Platform_SetWindowSize", _wrap_ImGuiPlatformIO_Platform_SetWindowSize_get, _wrap_ImGuiPlatformIO_Platform_SetWindowSize_set },
    { "Platform_GetWindowSize", _wrap_ImGuiPlatformIO_Platform_GetWindowSize_get, _wrap_ImGuiPlatformIO_Platform_GetWindowSize_set },
    { "Platform_SetWindowFocus", _wrap_ImGuiPlatformIO_Platform_SetWindowFocus_get, _wrap_ImGuiPlatformIO_Platform_SetWindowFocus_set },
    { "Platform_GetWindowFocus", _wrap_ImGuiPlatformIO_Platform_GetWindowFocus_get, _wrap_ImGuiPlatformIO_Platform_GetWindowFocus_set },
    { "Platform_GetWindowMinimized", _wrap_ImGuiPlatformIO_Platform_GetWindowMinimized_get, _wrap_ImGuiPlatformIO_Platform_GetWindowMinimized_set },
    { "Platform_SetWindowTitle", _wrap_ImGuiPlatformIO_Platform_SetWindowTitle_get, _wrap_ImGuiPlatformIO_Platform_SetWindowTitle_set },
    { "Platform_SetWindowAlpha", _wrap_ImGuiPlatformIO_Platform_SetWindowAlpha_get, _wrap_ImGuiPlatformIO_Platform_SetWindowAlpha_set },
    { "Platform_UpdateWindow", _wrap_ImGuiPlatformIO_Platform_UpdateWindow_get, _wrap_ImGuiPlatformIO_Platform_UpdateWindow_set },
    { "Platform_RenderWindow", _wrap_ImGuiPlatformIO_Platform_RenderWindow_get, _wrap_ImGuiPlatformIO_Platform_RenderWindow_set },
    { "Platform_SwapBuffers", _wrap_ImGuiPlatformIO_Platform_SwapBuffers_get, _wrap_ImGuiPlatformIO_Platform_SwapBuffers_set },
    { "Platform_GetWindowDpiScale", _wrap_ImGuiPlatformIO_Platform_GetWindowDpiScale_get, _wrap_ImGuiPlatformIO_Platform_GetWindowDpiScale_set },
    { "Platform_OnChangedViewport", _wrap_ImGuiPlatformIO_Platform_OnChangedViewport_get, _wrap_ImGuiPlatformIO_Platform_OnChangedViewport_set },
    { "Platform_GetWindowWorkAreaInsets", _wrap_ImGuiPlatformIO_Platform_GetWindowWorkAreaInsets_get, _wrap_ImGuiPlatformIO_Platform_GetWindowWorkAreaInsets_set },
    { "Platform_CreateVkSurface", _wrap_ImGuiPlatformIO_Platform_CreateVkSurface_get, _wrap_ImGuiPlatformIO_Platform_CreateVkSurface_set },
    { "Renderer_CreateWindow", _wrap_ImGuiPlatformIO_Renderer_CreateWindow_get, _wrap_ImGuiPlatformIO_Renderer_CreateWindow_set },
    { "Renderer_DestroyWindow", _wrap_ImGuiPlatformIO_Renderer_DestroyWindow_get, _wrap_ImGuiPlatformIO_Renderer_DestroyWindow_set },
    { "Renderer_SetWindowSize", _wrap_ImGuiPlatformIO_Renderer_SetWindowSize_get, _wrap_ImGuiPlatformIO_Renderer_SetWindowSize_set },
    { "Renderer_RenderWindow", _wrap_ImGuiPlatformIO_Renderer_RenderWindow_get, _wrap_ImGuiPlatformIO_Renderer_RenderWindow_set },
    { "Renderer_SwapBuffers", _wrap_ImGuiPlatformIO_Renderer_SwapBuffers_get, _wrap_ImGuiPlatformIO_Renderer_SwapBuffers_set },
    { "Monitors", _wrap_ImGuiPlatformIO_Monitors_get, _wrap_ImGuiPlatformIO_Monitors_set },
    { "Viewports", _wrap_ImGuiPlatformIO_Viewports_get, _wrap_ImGuiPlatformIO_Viewports_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiPlatformIO_methods[]= {
    {0,0}
};
static swig_lua_method swig_ImGuiPlatformIO_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiPlatformIO_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiPlatformIO_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiPlatformIO_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiPlatformIO_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiPlatformIO_Sf_SwigStatic = {
    "ImGuiPlatformIO",
    swig_ImGuiPlatformIO_Sf_SwigStatic_methods,
    swig_ImGuiPlatformIO_Sf_SwigStatic_attributes,
    swig_ImGuiPlatformIO_Sf_SwigStatic_constants,
    swig_ImGuiPlatformIO_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiPlatformIO_bases[] = {0};
static const char *swig_ImGuiPlatformIO_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiPlatformIO = { "ImGuiPlatformIO", "ImGuiPlatformIO", &SWIGTYPE_p_ImGuiPlatformIO,_proxy__wrap_new_ImGuiPlatformIO, swig_delete_ImGuiPlatformIO, swig_ImGuiPlatformIO_methods, swig_ImGuiPlatformIO_attributes, &swig_ImGuiPlatformIO_Sf_SwigStatic, swig_ImGuiPlatformIO_meta, swig_ImGuiPlatformIO_bases, swig_ImGuiPlatformIO_base_names };

static int _wrap_ImGuiPlatformMonitor_MainPos_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformMonitor *arg1 = (ImGuiPlatformMonitor *) 0 ; ImVec2 *arg2 = (ImVec2 *) 0 ;
    SWIG_check_num_args("ImGuiPlatformMonitor::MainPos",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformMonitor::MainPos",1,"ImGuiPlatformMonitor *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformMonitor::MainPos",2,"ImVec2 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformMonitor,0))){
      SWIG_fail_ptr("ImGuiPlatformMonitor_MainPos_set",1,SWIGTYPE_p_ImGuiPlatformMonitor); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImGuiPlatformMonitor_MainPos_set",2,SWIGTYPE_p_ImVec2); }  if (arg1) (arg1)->MainPos = *arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformMonitor_MainPos_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformMonitor *arg1 = (ImGuiPlatformMonitor *) 0 ; ImVec2 *result = 0 ;
    SWIG_check_num_args("ImGuiPlatformMonitor::MainPos",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformMonitor::MainPos",1,"ImGuiPlatformMonitor *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformMonitor,0))){
      SWIG_fail_ptr("ImGuiPlatformMonitor_MainPos_get",1,SWIGTYPE_p_ImGuiPlatformMonitor); } 
    result = (ImVec2 *)& ((arg1)->MainPos); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++;  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformMonitor_MainSize_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformMonitor *arg1 = (ImGuiPlatformMonitor *) 0 ; ImVec2 *arg2 = (ImVec2 *) 0 ;
    SWIG_check_num_args("ImGuiPlatformMonitor::MainSize",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformMonitor::MainSize",1,"ImGuiPlatformMonitor *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformMonitor::MainSize",2,"ImVec2 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformMonitor,0))){
      SWIG_fail_ptr("ImGuiPlatformMonitor_MainSize_set",1,SWIGTYPE_p_ImGuiPlatformMonitor); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImGuiPlatformMonitor_MainSize_set",2,SWIGTYPE_p_ImVec2); }  if (arg1) (arg1)->MainSize = *arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformMonitor_MainSize_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformMonitor *arg1 = (ImGuiPlatformMonitor *) 0 ; ImVec2 *result = 0 ;
    SWIG_check_num_args("ImGuiPlatformMonitor::MainSize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformMonitor::MainSize",1,"ImGuiPlatformMonitor *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformMonitor,0))){
      SWIG_fail_ptr("ImGuiPlatformMonitor_MainSize_get",1,SWIGTYPE_p_ImGuiPlatformMonitor); } 
    result = (ImVec2 *)& ((arg1)->MainSize); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++;  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformMonitor_WorkPos_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformMonitor *arg1 = (ImGuiPlatformMonitor *) 0 ; ImVec2 *arg2 = (ImVec2 *) 0 ;
    SWIG_check_num_args("ImGuiPlatformMonitor::WorkPos",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformMonitor::WorkPos",1,"ImGuiPlatformMonitor *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformMonitor::WorkPos",2,"ImVec2 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformMonitor,0))){
      SWIG_fail_ptr("ImGuiPlatformMonitor_WorkPos_set",1,SWIGTYPE_p_ImGuiPlatformMonitor); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImGuiPlatformMonitor_WorkPos_set",2,SWIGTYPE_p_ImVec2); }  if (arg1) (arg1)->WorkPos = *arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformMonitor_WorkPos_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformMonitor *arg1 = (ImGuiPlatformMonitor *) 0 ; ImVec2 *result = 0 ;
    SWIG_check_num_args("ImGuiPlatformMonitor::WorkPos",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformMonitor::WorkPos",1,"ImGuiPlatformMonitor *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformMonitor,0))){
      SWIG_fail_ptr("ImGuiPlatformMonitor_WorkPos_get",1,SWIGTYPE_p_ImGuiPlatformMonitor); } 
    result = (ImVec2 *)& ((arg1)->WorkPos); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++;  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformMonitor_WorkSize_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformMonitor *arg1 = (ImGuiPlatformMonitor *) 0 ; ImVec2 *arg2 = (ImVec2 *) 0 ;
    SWIG_check_num_args("ImGuiPlatformMonitor::WorkSize",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformMonitor::WorkSize",1,"ImGuiPlatformMonitor *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformMonitor::WorkSize",2,"ImVec2 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformMonitor,0))){
      SWIG_fail_ptr("ImGuiPlatformMonitor_WorkSize_set",1,SWIGTYPE_p_ImGuiPlatformMonitor); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImGuiPlatformMonitor_WorkSize_set",2,SWIGTYPE_p_ImVec2); }  if (arg1) (arg1)->WorkSize = *arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformMonitor_WorkSize_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformMonitor *arg1 = (ImGuiPlatformMonitor *) 0 ; ImVec2 *result = 0 ;
    SWIG_check_num_args("ImGuiPlatformMonitor::WorkSize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformMonitor::WorkSize",1,"ImGuiPlatformMonitor *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformMonitor,0))){
      SWIG_fail_ptr("ImGuiPlatformMonitor_WorkSize_get",1,SWIGTYPE_p_ImGuiPlatformMonitor); } 
    result = (ImVec2 *)& ((arg1)->WorkSize); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++;  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformMonitor_DpiScale_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformMonitor *arg1 = (ImGuiPlatformMonitor *) 0 ; float arg2 ;
    SWIG_check_num_args("ImGuiPlatformMonitor::DpiScale",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformMonitor::DpiScale",1,"ImGuiPlatformMonitor *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiPlatformMonitor::DpiScale",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformMonitor,0))){
      SWIG_fail_ptr("ImGuiPlatformMonitor_DpiScale_set",1,SWIGTYPE_p_ImGuiPlatformMonitor); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->DpiScale = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformMonitor_DpiScale_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformMonitor *arg1 = (ImGuiPlatformMonitor *) 0 ; float result;
    SWIG_check_num_args("ImGuiPlatformMonitor::DpiScale",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformMonitor::DpiScale",1,"ImGuiPlatformMonitor *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformMonitor,0))){
      SWIG_fail_ptr("ImGuiPlatformMonitor_DpiScale_get",1,SWIGTYPE_p_ImGuiPlatformMonitor); } 
    result = (float) ((arg1)->DpiScale); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }
   lua_error(L); return 0; }
static int _wrap_ImGuiPlatformMonitor_PlatformHandle_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformMonitor *arg1 = (ImGuiPlatformMonitor *) 0 ; void *arg2 = (void *) 0 ;
    SWIG_check_num_args("ImGuiPlatformMonitor::PlatformHandle",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformMonitor::PlatformHandle",1,"ImGuiPlatformMonitor *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformMonitor::PlatformHandle",2,"void *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformMonitor,0))){
      SWIG_fail_ptr("ImGuiPlatformMonitor_PlatformHandle_set",1,SWIGTYPE_p_ImGuiPlatformMonitor); } 
    arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ImGuiPlatformMonitor_PlatformHandle_set"); if (arg1) (arg1)->PlatformHandle = arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformMonitor_PlatformHandle_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformMonitor *arg1 = (ImGuiPlatformMonitor *) 0 ; void *result = 0 ;
    SWIG_check_num_args("ImGuiPlatformMonitor::PlatformHandle",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformMonitor::PlatformHandle",1,"ImGuiPlatformMonitor *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformMonitor,0))){
      SWIG_fail_ptr("ImGuiPlatformMonitor_PlatformHandle_get",1,SWIGTYPE_p_ImGuiPlatformMonitor); } 
    result = (void *) ((arg1)->PlatformHandle); SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++;  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_ImGuiPlatformMonitor(lua_State* L) { { int SWIG_arg = 0; ImGuiPlatformMonitor *result = 0 ;
    SWIG_check_num_args("ImGuiPlatformMonitor::ImGuiPlatformMonitor",0,0)
    result = (ImGuiPlatformMonitor *)new ImGuiPlatformMonitor();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiPlatformMonitor,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static void swig_delete_ImGuiPlatformMonitor(void *obj) {
ImGuiPlatformMonitor *arg1 = (ImGuiPlatformMonitor *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiPlatformMonitor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiPlatformMonitor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiPlatformMonitor_attributes[] = {
    { "MainPos", _wrap_ImGuiPlatformMonitor_MainPos_get, _wrap_ImGuiPlatformMonitor_MainPos_set },
    { "MainSize", _wrap_ImGuiPlatformMonitor_MainSize_get, _wrap_ImGuiPlatformMonitor_MainSize_set },
    { "WorkPos", _wrap_ImGuiPlatformMonitor_WorkPos_get, _wrap_ImGuiPlatformMonitor_WorkPos_set },
    { "WorkSize", _wrap_ImGuiPlatformMonitor_WorkSize_get, _wrap_ImGuiPlatformMonitor_WorkSize_set },
    { "DpiScale", _wrap_ImGuiPlatformMonitor_DpiScale_get, _wrap_ImGuiPlatformMonitor_DpiScale_set },
    { "PlatformHandle", _wrap_ImGuiPlatformMonitor_PlatformHandle_get, _wrap_ImGuiPlatformMonitor_PlatformHandle_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiPlatformMonitor_methods[]= {
    {0,0}
};
static swig_lua_method swig_ImGuiPlatformMonitor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiPlatformMonitor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiPlatformMonitor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiPlatformMonitor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiPlatformMonitor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiPlatformMonitor_Sf_SwigStatic = {
    "ImGuiPlatformMonitor",
    swig_ImGuiPlatformMonitor_Sf_SwigStatic_methods,
    swig_ImGuiPlatformMonitor_Sf_SwigStatic_attributes,
    swig_ImGuiPlatformMonitor_Sf_SwigStatic_constants,
    swig_ImGuiPlatformMonitor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiPlatformMonitor_bases[] = {0};
static const char *swig_ImGuiPlatformMonitor_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiPlatformMonitor = { "ImGuiPlatformMonitor", "ImGuiPlatformMonitor", &SWIGTYPE_p_ImGuiPlatformMonitor,_proxy__wrap_new_ImGuiPlatformMonitor, swig_delete_ImGuiPlatformMonitor, swig_ImGuiPlatformMonitor_methods, swig_ImGuiPlatformMonitor_attributes, &swig_ImGuiPlatformMonitor_Sf_SwigStatic, swig_ImGuiPlatformMonitor_meta, swig_ImGuiPlatformMonitor_bases, swig_ImGuiPlatformMonitor_base_names };

static int _wrap_ImGuiPlatformImeData_WantVisible_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformImeData *arg1 = (ImGuiPlatformImeData *) 0 ; bool arg2 ;
    SWIG_check_num_args("ImGuiPlatformImeData::WantVisible",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformImeData::WantVisible",1,"ImGuiPlatformImeData *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ImGuiPlatformImeData::WantVisible",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformImeData,0))){
      SWIG_fail_ptr("ImGuiPlatformImeData_WantVisible_set",1,SWIGTYPE_p_ImGuiPlatformImeData); } 
    arg2 = (lua_toboolean(L, 2)!=0); if (arg1) (arg1)->WantVisible = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ImGuiPlatformImeData_WantVisible_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformImeData *arg1 = (ImGuiPlatformImeData *) 0 ; bool result;
    SWIG_check_num_args("ImGuiPlatformImeData::WantVisible",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformImeData::WantVisible",1,"ImGuiPlatformImeData *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformImeData,0))){
      SWIG_fail_ptr("ImGuiPlatformImeData_WantVisible_get",1,SWIGTYPE_p_ImGuiPlatformImeData); } 
    result = (bool) ((arg1)->WantVisible); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }
   lua_error(L); return 0; }
static int _wrap_ImGuiPlatformImeData_InputPos_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformImeData *arg1 = (ImGuiPlatformImeData *) 0 ; ImVec2 *arg2 = (ImVec2 *) 0 ;
    SWIG_check_num_args("ImGuiPlatformImeData::InputPos",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformImeData::InputPos",1,"ImGuiPlatformImeData *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGuiPlatformImeData::InputPos",2,"ImVec2 *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformImeData,0))){
      SWIG_fail_ptr("ImGuiPlatformImeData_InputPos_set",1,SWIGTYPE_p_ImGuiPlatformImeData); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("ImGuiPlatformImeData_InputPos_set",2,SWIGTYPE_p_ImVec2); }  if (arg1) (arg1)->InputPos = *arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformImeData_InputPos_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformImeData *arg1 = (ImGuiPlatformImeData *) 0 ; ImVec2 *result = 0 ;
    SWIG_check_num_args("ImGuiPlatformImeData::InputPos",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformImeData::InputPos",1,"ImGuiPlatformImeData *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformImeData,0))){
      SWIG_fail_ptr("ImGuiPlatformImeData_InputPos_get",1,SWIGTYPE_p_ImGuiPlatformImeData); } 
    result = (ImVec2 *)& ((arg1)->InputPos); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImVec2,0); SWIG_arg++;  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformImeData_InputLineHeight_set(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformImeData *arg1 = (ImGuiPlatformImeData *) 0 ; float arg2 ;
    SWIG_check_num_args("ImGuiPlatformImeData::InputLineHeight",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformImeData::InputLineHeight",1,"ImGuiPlatformImeData *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ImGuiPlatformImeData::InputLineHeight",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformImeData,0))){
      SWIG_fail_ptr("ImGuiPlatformImeData_InputLineHeight_set",1,SWIGTYPE_p_ImGuiPlatformImeData); } 
    arg2 = (float)lua_tonumber(L, 2); if (arg1) (arg1)->InputLineHeight = arg2; return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ImGuiPlatformImeData_InputLineHeight_get(lua_State* L) { { int SWIG_arg = 0;
    ImGuiPlatformImeData *arg1 = (ImGuiPlatformImeData *) 0 ; float result;
    SWIG_check_num_args("ImGuiPlatformImeData::InputLineHeight",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGuiPlatformImeData::InputLineHeight",1,"ImGuiPlatformImeData *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ImGuiPlatformImeData,0))){
      SWIG_fail_ptr("ImGuiPlatformImeData_InputLineHeight_get",1,SWIGTYPE_p_ImGuiPlatformImeData); } 
    result = (float) ((arg1)->InputLineHeight); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_ImGuiPlatformImeData(lua_State* L) { { int SWIG_arg = 0; ImGuiPlatformImeData *result = 0 ;
    SWIG_check_num_args("ImGuiPlatformImeData::ImGuiPlatformImeData",0,0)
    result = (ImGuiPlatformImeData *)new ImGuiPlatformImeData();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImGuiPlatformImeData,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static void swig_delete_ImGuiPlatformImeData(void *obj) {
ImGuiPlatformImeData *arg1 = (ImGuiPlatformImeData *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImGuiPlatformImeData(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImGuiPlatformImeData);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImGuiPlatformImeData_attributes[] = {
    { "WantVisible", _wrap_ImGuiPlatformImeData_WantVisible_get, _wrap_ImGuiPlatformImeData_WantVisible_set },
    { "InputPos", _wrap_ImGuiPlatformImeData_InputPos_get, _wrap_ImGuiPlatformImeData_InputPos_set },
    { "InputLineHeight", _wrap_ImGuiPlatformImeData_InputLineHeight_get, _wrap_ImGuiPlatformImeData_InputLineHeight_set },
    {0,0,0}
};
static swig_lua_method swig_ImGuiPlatformImeData_methods[]= {
    {0,0}
};
static swig_lua_method swig_ImGuiPlatformImeData_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImGuiPlatformImeData_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImGuiPlatformImeData_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImGuiPlatformImeData_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImGuiPlatformImeData_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImGuiPlatformImeData_Sf_SwigStatic = {
    "ImGuiPlatformImeData",
    swig_ImGuiPlatformImeData_Sf_SwigStatic_methods,
    swig_ImGuiPlatformImeData_Sf_SwigStatic_attributes,
    swig_ImGuiPlatformImeData_Sf_SwigStatic_constants,
    swig_ImGuiPlatformImeData_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImGuiPlatformImeData_bases[] = {0};
static const char *swig_ImGuiPlatformImeData_base_names[] = {0};
static swig_lua_class _wrap_class_ImGuiPlatformImeData = { "ImGuiPlatformImeData", "ImGuiPlatformImeData", &SWIGTYPE_p_ImGuiPlatformImeData,_proxy__wrap_new_ImGuiPlatformImeData, swig_delete_ImGuiPlatformImeData, swig_ImGuiPlatformImeData_methods, swig_ImGuiPlatformImeData_attributes, &swig_ImGuiPlatformImeData_Sf_SwigStatic, swig_ImGuiPlatformImeData_meta, swig_ImGuiPlatformImeData_bases, swig_ImGuiPlatformImeData_base_names };

static int _wrap_PushButtonRepeat(lua_State* L) { { int SWIG_arg = 0; bool arg1 ;
    SWIG_check_num_args("ImGui::PushButtonRepeat",1,1)
    if(!lua_isboolean(L,1)) SWIG_fail_arg("ImGui::PushButtonRepeat",1,"bool"); arg1 = (lua_toboolean(L, 1)!=0);
    ImGui::PushButtonRepeat(arg1); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_PopButtonRepeat(lua_State* L) { { int SWIG_arg = 0; SWIG_check_num_args("ImGui::PopButtonRepeat",0,0)
    ImGui::PopButtonRepeat(); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_PushTabStop(lua_State* L) { { int SWIG_arg = 0; bool arg1 ; SWIG_check_num_args("ImGui::PushTabStop",1,1)
    if(!lua_isboolean(L,1)) SWIG_fail_arg("ImGui::PushTabStop",1,"bool"); arg1 = (lua_toboolean(L, 1)!=0);
    ImGui::PushTabStop(arg1); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_PopTabStop(lua_State* L) { { int SWIG_arg = 0; SWIG_check_num_args("ImGui::PopTabStop",0,0)
    ImGui::PopTabStop(); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetContentRegionMax(lua_State* L) { { int SWIG_arg = 0; ImVec2 result;
    SWIG_check_num_args("ImGui::GetContentRegionMax",0,0) result = ImGui::GetContentRegionMax(); {
      ImVec2 * resultptr = new ImVec2(result); SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++; } 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetWindowContentRegionMin(lua_State* L) { { int SWIG_arg = 0; ImVec2 result;
    SWIG_check_num_args("ImGui::GetWindowContentRegionMin",0,0) result = ImGui::GetWindowContentRegionMin(); {
      ImVec2 * resultptr = new ImVec2(result); SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++; } 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_GetWindowContentRegionMax(lua_State* L) { { int SWIG_arg = 0; ImVec2 result;
    SWIG_check_num_args("ImGui::GetWindowContentRegionMax",0,0) result = ImGui::GetWindowContentRegionMax(); {
      ImVec2 * resultptr = new ImVec2(result); SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ImVec2,1); SWIG_arg++; } 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_BeginChildFrame(lua_State* L) { { int SWIG_arg = 0; ImGuiID arg1 ; ImVec2 *arg2 = 0 ;
    ImGuiWindowFlags arg3 = (ImGuiWindowFlags) 0 ; bool result; SWIG_check_num_args("ImGui::BeginChildFrame",2,3)
    if(!lua_isnumber(L,1)) SWIG_fail_arg("ImGui::BeginChildFrame",1,"ImGuiID");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ImGui::BeginChildFrame",2,"ImVec2 const &");
    if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("ImGui::BeginChildFrame",3,"ImGuiWindowFlags");
    SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative"); arg1 = (ImGuiID)lua_tonumber(L, 1);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ImVec2,0))){
      SWIG_fail_ptr("BeginChildFrame",2,SWIGTYPE_p_ImVec2); }  if(lua_gettop(L)>=3){
      arg3 = (ImGuiWindowFlags)lua_tonumber(L, 3);}  result = (bool)ImGui::BeginChildFrame(arg1,(ImVec2 const &)*arg2,arg3);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_EndChildFrame(lua_State* L) { { int SWIG_arg = 0; SWIG_check_num_args("ImGui::EndChildFrame",0,0)
    ImGui::EndChildFrame(); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ShowStackToolWindow_1(lua_State* L) { { int SWIG_arg = 0; bool *arg1 = (bool *) 0 ;
    SWIG_check_num_args("ImGui::ShowStackToolWindow",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ImGui::ShowStackToolWindow",1,"bool *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_bool,0))){
      SWIG_fail_ptr("ShowStackToolWindow_1",1,SWIGTYPE_p_bool); }  ImGui::ShowStackToolWindow(arg1); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ShowStackToolWindow_0(lua_State* L) { { int SWIG_arg = 0; SWIG_check_num_args("ImGui::ShowStackToolWindow",0,0)
    ImGui::ShowStackToolWindow(); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_Combo_itemsGetter(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; int *arg2 = (int *) 0 ;
    bool (*arg3)(void *,int,char const **) = (bool (*)(void *,int,char const **)) 0 ; void *arg4 = (void *) 0 ; int arg5 ;
    int arg6 = (int) -1 ; bool result; SWIG_check_num_args("ImGui::Combo",5,6)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::Combo",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::Combo",2,"int *");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::Combo",3,"bool (*)(void *,int,char const **)");
    if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImGui::Combo",4,"void *");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::Combo",5,"int");
    if(lua_gettop(L)>=6 && !lua_isnumber(L,6)) SWIG_fail_arg("ImGui::Combo",6,"int"); arg1 = (char *)lua_tostring(L, 1);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){ SWIG_fail_ptr("Combo_itemsGetter",2,SWIGTYPE_p_int); }
     if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_f_p_void_int_p_p_q_const__char__bool,0))){
      SWIG_fail_ptr("Combo_itemsGetter",3,SWIGTYPE_p_f_p_void_int_p_p_q_const__char__bool); } 
    arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"Combo_itemsGetter"); arg5 = (int)lua_tonumber(L, 5); if(lua_gettop(L)>=6){
      arg6 = (int)lua_tonumber(L, 6);}  result = (bool)ImGui::Combo((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ListBox_itemsGetter(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; int *arg2 = (int *) 0 ;
    bool (*arg3)(void *,int,char const **) = (bool (*)(void *,int,char const **)) 0 ; void *arg4 = (void *) 0 ; int arg5 ;
    int arg6 = (int) -1 ; bool result; SWIG_check_num_args("ImGui::ListBox",5,6)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ImGui::ListBox",1,"char const *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ImGui::ListBox",2,"int *");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ImGui::ListBox",3,"bool (*)(void *,int,char const **)");
    if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ImGui::ListBox",4,"void *");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ImGui::ListBox",5,"int");
    if(lua_gettop(L)>=6 && !lua_isnumber(L,6)) SWIG_fail_arg("ImGui::ListBox",6,"int"); arg1 = (char *)lua_tostring(L, 1);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
      SWIG_fail_ptr("ListBox_itemsGetter",2,SWIGTYPE_p_int); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_f_p_void_int_p_p_q_const__char__bool,0))){
      SWIG_fail_ptr("ListBox_itemsGetter",3,SWIGTYPE_p_f_p_void_int_p_p_q_const__char__bool); } 
    arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"ListBox_itemsGetter"); arg5 = (int)lua_tonumber(L, 5); if(lua_gettop(L)>=6){
      arg6 = (int)lua_tonumber(L, 6);}  result = (bool)ImGui::ListBox((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_SetItemAllowOverlap(lua_State* L) { { int SWIG_arg = 0; SWIG_check_num_args("ImGui::SetItemAllowOverlap",0,0)
    ImGui::SetItemAllowOverlap(); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_PushAllowKeyboardFocus(lua_State* L) { { int SWIG_arg = 0; bool arg1 ;
    SWIG_check_num_args("ImGui::PushAllowKeyboardFocus",1,1)
    if(!lua_isboolean(L,1)) SWIG_fail_arg("ImGui::PushAllowKeyboardFocus",1,"bool"); arg1 = (lua_toboolean(L, 1)!=0);
    ImGui::PushAllowKeyboardFocus(arg1); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_PopAllowKeyboardFocus(lua_State* L) { { int SWIG_arg = 0;
    SWIG_check_num_args("ImGui::PopAllowKeyboardFocus",0,0) ImGui::PopAllowKeyboardFocus(); return SWIG_arg; fail: SWIGUNUSED; }
   lua_error(L); return 0; }
static swig_lua_attribute swig_SwigModule_attributes[] = {
    { "ofColorScale", _wrap_ofColorScale_get, SWIG_Lua_set_immutable },
    { "ImGuiTextBuffer_EmptyString", _wrap_ImGuiTextBuffer_EmptyString_get, _wrap_ImGuiTextBuffer_EmptyString_set },
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("Error", (ofxImGui::Error))},
    {SWIG_LUA_CONSTTAB_INT("Slave", (ofxImGui::Slave))},
    {SWIG_LUA_CONSTTAB_INT("Master", (ofxImGui::Master))},
    {SWIG_LUA_CONSTTAB_INT("Success", (ofxImGui::Success))},
    {SWIG_LUA_CONSTTAB_STRING("IMGUI_VERSION", "1.91.5")},
    {SWIG_LUA_CONSTTAB_INT("IMGUI_VERSION_NUM", (19150))},
    {SWIG_LUA_CONSTTAB_INT("WindowFlags_None", (ImGuiWindowFlags_None))},
    {SWIG_LUA_CONSTTAB_INT("WindowFlags_NoTitleBar", (ImGuiWindowFlags_NoTitleBar))},
    {SWIG_LUA_CONSTTAB_INT("WindowFlags_NoResize", (ImGuiWindowFlags_NoResize))},
    {SWIG_LUA_CONSTTAB_INT("WindowFlags_NoMove", (ImGuiWindowFlags_NoMove))},
    {SWIG_LUA_CONSTTAB_INT("WindowFlags_NoScrollbar", (ImGuiWindowFlags_NoScrollbar))},
    {SWIG_LUA_CONSTTAB_INT("WindowFlags_NoScrollWithMouse", (ImGuiWindowFlags_NoScrollWithMouse))},
    {SWIG_LUA_CONSTTAB_INT("WindowFlags_NoCollapse", (ImGuiWindowFlags_NoCollapse))},
    {SWIG_LUA_CONSTTAB_INT("WindowFlags_AlwaysAutoResize", (ImGuiWindowFlags_AlwaysAutoResize))},
    {SWIG_LUA_CONSTTAB_INT("WindowFlags_NoBackground", (ImGuiWindowFlags_NoBackground))},
    {SWIG_LUA_CONSTTAB_INT("WindowFlags_NoSavedSettings", (ImGuiWindowFlags_NoSavedSettings))},
    {SWIG_LUA_CONSTTAB_INT("WindowFlags_NoMouseInputs", (ImGuiWindowFlags_NoMouseInputs))},
    {SWIG_LUA_CONSTTAB_INT("WindowFlags_MenuBar", (ImGuiWindowFlags_MenuBar))},
    {SWIG_LUA_CONSTTAB_INT("WindowFlags_HorizontalScrollbar", (ImGuiWindowFlags_HorizontalScrollbar))},
    {SWIG_LUA_CONSTTAB_INT("WindowFlags_NoFocusOnAppearing", (ImGuiWindowFlags_NoFocusOnAppearing))},
    {SWIG_LUA_CONSTTAB_INT("WindowFlags_NoBringToFrontOnFocus", (ImGuiWindowFlags_NoBringToFrontOnFocus))},
    {SWIG_LUA_CONSTTAB_INT("WindowFlags_AlwaysVerticalScrollbar", (ImGuiWindowFlags_AlwaysVerticalScrollbar))},
    {SWIG_LUA_CONSTTAB_INT("WindowFlags_AlwaysHorizontalScrollbar", (ImGuiWindowFlags_AlwaysHorizontalScrollbar))},
    {SWIG_LUA_CONSTTAB_INT("WindowFlags_NoNavInputs", (ImGuiWindowFlags_NoNavInputs))},
    {SWIG_LUA_CONSTTAB_INT("WindowFlags_NoNavFocus", (ImGuiWindowFlags_NoNavFocus))},
    {SWIG_LUA_CONSTTAB_INT("WindowFlags_UnsavedDocument", (ImGuiWindowFlags_UnsavedDocument))},
    {SWIG_LUA_CONSTTAB_INT("WindowFlags_NoDocking", (ImGuiWindowFlags_NoDocking))},
    {SWIG_LUA_CONSTTAB_INT("WindowFlags_NoNav", (ImGuiWindowFlags_NoNav))},
    {SWIG_LUA_CONSTTAB_INT("WindowFlags_NoDecoration", (ImGuiWindowFlags_NoDecoration))},
    {SWIG_LUA_CONSTTAB_INT("WindowFlags_NoInputs", (ImGuiWindowFlags_NoInputs))},
    {SWIG_LUA_CONSTTAB_INT("WindowFlags_ChildWindow", (ImGuiWindowFlags_ChildWindow))},
    {SWIG_LUA_CONSTTAB_INT("WindowFlags_Tooltip", (ImGuiWindowFlags_Tooltip))},
    {SWIG_LUA_CONSTTAB_INT("WindowFlags_Popup", (ImGuiWindowFlags_Popup))},
    {SWIG_LUA_CONSTTAB_INT("WindowFlags_Modal", (ImGuiWindowFlags_Modal))},
    {SWIG_LUA_CONSTTAB_INT("WindowFlags_ChildMenu", (ImGuiWindowFlags_ChildMenu))},
    {SWIG_LUA_CONSTTAB_INT("WindowFlags_DockNodeHost", (ImGuiWindowFlags_DockNodeHost))},
    {SWIG_LUA_CONSTTAB_INT("WindowFlags_AlwaysUseWindowPadding", (ImGuiWindowFlags_AlwaysUseWindowPadding))},
    {SWIG_LUA_CONSTTAB_INT("WindowFlags_NavFlattened", (ImGuiWindowFlags_NavFlattened))},
    {SWIG_LUA_CONSTTAB_INT("ChildFlags_None", (ImGuiChildFlags_None))},
    {SWIG_LUA_CONSTTAB_INT("ChildFlags_Borders", (ImGuiChildFlags_Borders))},
    {SWIG_LUA_CONSTTAB_INT("ChildFlags_AlwaysUseWindowPadding", (ImGuiChildFlags_AlwaysUseWindowPadding))},
    {SWIG_LUA_CONSTTAB_INT("ChildFlags_ResizeX", (ImGuiChildFlags_ResizeX))},
    {SWIG_LUA_CONSTTAB_INT("ChildFlags_ResizeY", (ImGuiChildFlags_ResizeY))},
    {SWIG_LUA_CONSTTAB_INT("ChildFlags_AutoResizeX", (ImGuiChildFlags_AutoResizeX))},
    {SWIG_LUA_CONSTTAB_INT("ChildFlags_AutoResizeY", (ImGuiChildFlags_AutoResizeY))},
    {SWIG_LUA_CONSTTAB_INT("ChildFlags_AlwaysAutoResize", (ImGuiChildFlags_AlwaysAutoResize))},
    {SWIG_LUA_CONSTTAB_INT("ChildFlags_FrameStyle", (ImGuiChildFlags_FrameStyle))},
    {SWIG_LUA_CONSTTAB_INT("ChildFlags_NavFlattened", (ImGuiChildFlags_NavFlattened))},
    {SWIG_LUA_CONSTTAB_INT("ChildFlags_Border", (ImGuiChildFlags_Border))},
    {SWIG_LUA_CONSTTAB_INT("ItemFlags_None", (ImGuiItemFlags_None))},
    {SWIG_LUA_CONSTTAB_INT("ItemFlags_NoTabStop", (ImGuiItemFlags_NoTabStop))},
    {SWIG_LUA_CONSTTAB_INT("ItemFlags_NoNav", (ImGuiItemFlags_NoNav))},
    {SWIG_LUA_CONSTTAB_INT("ItemFlags_NoNavDefaultFocus", (ImGuiItemFlags_NoNavDefaultFocus))},
    {SWIG_LUA_CONSTTAB_INT("ItemFlags_ButtonRepeat", (ImGuiItemFlags_ButtonRepeat))},
    {SWIG_LUA_CONSTTAB_INT("ItemFlags_AutoClosePopups", (ImGuiItemFlags_AutoClosePopups))},
    {SWIG_LUA_CONSTTAB_INT("ItemFlags_AllowDuplicateId", (ImGuiItemFlags_AllowDuplicateId))},
    {SWIG_LUA_CONSTTAB_INT("InputTextFlags_None", (ImGuiInputTextFlags_None))},
    {SWIG_LUA_CONSTTAB_INT("InputTextFlags_CharsDecimal", (ImGuiInputTextFlags_CharsDecimal))},
    {SWIG_LUA_CONSTTAB_INT("InputTextFlags_CharsHexadecimal", (ImGuiInputTextFlags_CharsHexadecimal))},
    {SWIG_LUA_CONSTTAB_INT("InputTextFlags_CharsScientific", (ImGuiInputTextFlags_CharsScientific))},
    {SWIG_LUA_CONSTTAB_INT("InputTextFlags_CharsUppercase", (ImGuiInputTextFlags_CharsUppercase))},
    {SWIG_LUA_CONSTTAB_INT("InputTextFlags_CharsNoBlank", (ImGuiInputTextFlags_CharsNoBlank))},
    {SWIG_LUA_CONSTTAB_INT("InputTextFlags_AllowTabInput", (ImGuiInputTextFlags_AllowTabInput))},
    {SWIG_LUA_CONSTTAB_INT("InputTextFlags_EnterReturnsTrue", (ImGuiInputTextFlags_EnterReturnsTrue))},
    {SWIG_LUA_CONSTTAB_INT("InputTextFlags_EscapeClearsAll", (ImGuiInputTextFlags_EscapeClearsAll))},
    {SWIG_LUA_CONSTTAB_INT("InputTextFlags_CtrlEnterForNewLine", (ImGuiInputTextFlags_CtrlEnterForNewLine))},
    {SWIG_LUA_CONSTTAB_INT("InputTextFlags_ReadOnly", (ImGuiInputTextFlags_ReadOnly))},
    {SWIG_LUA_CONSTTAB_INT("InputTextFlags_Password", (ImGuiInputTextFlags_Password))},
    {SWIG_LUA_CONSTTAB_INT("InputTextFlags_AlwaysOverwrite", (ImGuiInputTextFlags_AlwaysOverwrite))},
    {SWIG_LUA_CONSTTAB_INT("InputTextFlags_AutoSelectAll", (ImGuiInputTextFlags_AutoSelectAll))},
    {SWIG_LUA_CONSTTAB_INT("InputTextFlags_ParseEmptyRefVal", (ImGuiInputTextFlags_ParseEmptyRefVal))},
    {SWIG_LUA_CONSTTAB_INT("InputTextFlags_DisplayEmptyRefVal", (ImGuiInputTextFlags_DisplayEmptyRefVal))},
    {SWIG_LUA_CONSTTAB_INT("InputTextFlags_NoHorizontalScroll", (ImGuiInputTextFlags_NoHorizontalScroll))},
    {SWIG_LUA_CONSTTAB_INT("InputTextFlags_NoUndoRedo", (ImGuiInputTextFlags_NoUndoRedo))},
    {SWIG_LUA_CONSTTAB_INT("InputTextFlags_CallbackCompletion", (ImGuiInputTextFlags_CallbackCompletion))},
    {SWIG_LUA_CONSTTAB_INT("InputTextFlags_CallbackHistory", (ImGuiInputTextFlags_CallbackHistory))},
    {SWIG_LUA_CONSTTAB_INT("InputTextFlags_CallbackAlways", (ImGuiInputTextFlags_CallbackAlways))},
    {SWIG_LUA_CONSTTAB_INT("InputTextFlags_CallbackCharFilter", (ImGuiInputTextFlags_CallbackCharFilter))},
    {SWIG_LUA_CONSTTAB_INT("InputTextFlags_CallbackResize", (ImGuiInputTextFlags_CallbackResize))},
    {SWIG_LUA_CONSTTAB_INT("InputTextFlags_CallbackEdit", (ImGuiInputTextFlags_CallbackEdit))},
    {SWIG_LUA_CONSTTAB_INT("TreeNodeFlags_None", (ImGuiTreeNodeFlags_None))},
    {SWIG_LUA_CONSTTAB_INT("TreeNodeFlags_Selected", (ImGuiTreeNodeFlags_Selected))},
    {SWIG_LUA_CONSTTAB_INT("TreeNodeFlags_Framed", (ImGuiTreeNodeFlags_Framed))},
    {SWIG_LUA_CONSTTAB_INT("TreeNodeFlags_AllowOverlap", (ImGuiTreeNodeFlags_AllowOverlap))},
    {SWIG_LUA_CONSTTAB_INT("TreeNodeFlags_NoTreePushOnOpen", (ImGuiTreeNodeFlags_NoTreePushOnOpen))},
    {SWIG_LUA_CONSTTAB_INT("TreeNodeFlags_NoAutoOpenOnLog", (ImGuiTreeNodeFlags_NoAutoOpenOnLog))},
    {SWIG_LUA_CONSTTAB_INT("TreeNodeFlags_DefaultOpen", (ImGuiTreeNodeFlags_DefaultOpen))},
    {SWIG_LUA_CONSTTAB_INT("TreeNodeFlags_OpenOnDoubleClick", (ImGuiTreeNodeFlags_OpenOnDoubleClick))},
    {SWIG_LUA_CONSTTAB_INT("TreeNodeFlags_OpenOnArrow", (ImGuiTreeNodeFlags_OpenOnArrow))},
    {SWIG_LUA_CONSTTAB_INT("TreeNodeFlags_Leaf", (ImGuiTreeNodeFlags_Leaf))},
    {SWIG_LUA_CONSTTAB_INT("TreeNodeFlags_Bullet", (ImGuiTreeNodeFlags_Bullet))},
    {SWIG_LUA_CONSTTAB_INT("TreeNodeFlags_FramePadding", (ImGuiTreeNodeFlags_FramePadding))},
    {SWIG_LUA_CONSTTAB_INT("TreeNodeFlags_SpanAvailWidth", (ImGuiTreeNodeFlags_SpanAvailWidth))},
    {SWIG_LUA_CONSTTAB_INT("TreeNodeFlags_SpanFullWidth", (ImGuiTreeNodeFlags_SpanFullWidth))},
    {SWIG_LUA_CONSTTAB_INT("TreeNodeFlags_SpanTextWidth", (ImGuiTreeNodeFlags_SpanTextWidth))},
    {SWIG_LUA_CONSTTAB_INT("TreeNodeFlags_SpanAllColumns", (ImGuiTreeNodeFlags_SpanAllColumns))},
    {SWIG_LUA_CONSTTAB_INT("TreeNodeFlags_NavLeftJumpsBackHere", (ImGuiTreeNodeFlags_NavLeftJumpsBackHere))},
    {SWIG_LUA_CONSTTAB_INT("TreeNodeFlags_CollapsingHeader", (ImGuiTreeNodeFlags_CollapsingHeader))},
    {SWIG_LUA_CONSTTAB_INT("TreeNodeFlags_AllowItemOverlap", (ImGuiTreeNodeFlags_AllowItemOverlap))},
    {SWIG_LUA_CONSTTAB_INT("PopupFlags_None", (ImGuiPopupFlags_None))},
    {SWIG_LUA_CONSTTAB_INT("PopupFlags_MouseButtonLeft", (ImGuiPopupFlags_MouseButtonLeft))},
    {SWIG_LUA_CONSTTAB_INT("PopupFlags_MouseButtonRight", (ImGuiPopupFlags_MouseButtonRight))},
    {SWIG_LUA_CONSTTAB_INT("PopupFlags_MouseButtonMiddle", (ImGuiPopupFlags_MouseButtonMiddle))},
    {SWIG_LUA_CONSTTAB_INT("PopupFlags_MouseButtonMask_", (ImGuiPopupFlags_MouseButtonMask_))},
    {SWIG_LUA_CONSTTAB_INT("PopupFlags_MouseButtonDefault_", (ImGuiPopupFlags_MouseButtonDefault_))},
    {SWIG_LUA_CONSTTAB_INT("PopupFlags_NoReopen", (ImGuiPopupFlags_NoReopen))},
    {SWIG_LUA_CONSTTAB_INT("PopupFlags_NoOpenOverExistingPopup", (ImGuiPopupFlags_NoOpenOverExistingPopup))},
    {SWIG_LUA_CONSTTAB_INT("PopupFlags_NoOpenOverItems", (ImGuiPopupFlags_NoOpenOverItems))},
    {SWIG_LUA_CONSTTAB_INT("PopupFlags_AnyPopupId", (ImGuiPopupFlags_AnyPopupId))},
    {SWIG_LUA_CONSTTAB_INT("PopupFlags_AnyPopupLevel", (ImGuiPopupFlags_AnyPopupLevel))},
    {SWIG_LUA_CONSTTAB_INT("PopupFlags_AnyPopup", (ImGuiPopupFlags_AnyPopup))},
    {SWIG_LUA_CONSTTAB_INT("SelectableFlags_None", (ImGuiSelectableFlags_None))},
    {SWIG_LUA_CONSTTAB_INT("SelectableFlags_NoAutoClosePopups", (ImGuiSelectableFlags_NoAutoClosePopups))},
    {SWIG_LUA_CONSTTAB_INT("SelectableFlags_SpanAllColumns", (ImGuiSelectableFlags_SpanAllColumns))},
    {SWIG_LUA_CONSTTAB_INT("SelectableFlags_AllowDoubleClick", (ImGuiSelectableFlags_AllowDoubleClick))},
    {SWIG_LUA_CONSTTAB_INT("SelectableFlags_Disabled", (ImGuiSelectableFlags_Disabled))},
    {SWIG_LUA_CONSTTAB_INT("SelectableFlags_AllowOverlap", (ImGuiSelectableFlags_AllowOverlap))},
    {SWIG_LUA_CONSTTAB_INT("SelectableFlags_Highlight", (ImGuiSelectableFlags_Highlight))},
    {SWIG_LUA_CONSTTAB_INT("SelectableFlags_DontClosePopups", (ImGuiSelectableFlags_DontClosePopups))},
    {SWIG_LUA_CONSTTAB_INT("SelectableFlags_AllowItemOverlap", (ImGuiSelectableFlags_AllowItemOverlap))},
    {SWIG_LUA_CONSTTAB_INT("ComboFlags_None", (ImGuiComboFlags_None))},
    {SWIG_LUA_CONSTTAB_INT("ComboFlags_PopupAlignLeft", (ImGuiComboFlags_PopupAlignLeft))},
    {SWIG_LUA_CONSTTAB_INT("ComboFlags_HeightSmall", (ImGuiComboFlags_HeightSmall))},
    {SWIG_LUA_CONSTTAB_INT("ComboFlags_HeightRegular", (ImGuiComboFlags_HeightRegular))},
    {SWIG_LUA_CONSTTAB_INT("ComboFlags_HeightLarge", (ImGuiComboFlags_HeightLarge))},
    {SWIG_LUA_CONSTTAB_INT("ComboFlags_HeightLargest", (ImGuiComboFlags_HeightLargest))},
    {SWIG_LUA_CONSTTAB_INT("ComboFlags_NoArrowButton", (ImGuiComboFlags_NoArrowButton))},
    {SWIG_LUA_CONSTTAB_INT("ComboFlags_NoPreview", (ImGuiComboFlags_NoPreview))},
    {SWIG_LUA_CONSTTAB_INT("ComboFlags_WidthFitPreview", (ImGuiComboFlags_WidthFitPreview))},
    {SWIG_LUA_CONSTTAB_INT("ComboFlags_HeightMask_", (ImGuiComboFlags_HeightMask_))},
    {SWIG_LUA_CONSTTAB_INT("TabBarFlags_None", (ImGuiTabBarFlags_None))},
    {SWIG_LUA_CONSTTAB_INT("TabBarFlags_Reorderable", (ImGuiTabBarFlags_Reorderable))},
    {SWIG_LUA_CONSTTAB_INT("TabBarFlags_AutoSelectNewTabs", (ImGuiTabBarFlags_AutoSelectNewTabs))},
    {SWIG_LUA_CONSTTAB_INT("TabBarFlags_TabListPopupButton", (ImGuiTabBarFlags_TabListPopupButton))},
    {SWIG_LUA_CONSTTAB_INT("TabBarFlags_NoCloseWithMiddleMouseButton", (ImGuiTabBarFlags_NoCloseWithMiddleMouseButton))},
    {SWIG_LUA_CONSTTAB_INT("TabBarFlags_NoTabListScrollingButtons", (ImGuiTabBarFlags_NoTabListScrollingButtons))},
    {SWIG_LUA_CONSTTAB_INT("TabBarFlags_NoTooltip", (ImGuiTabBarFlags_NoTooltip))},
    {SWIG_LUA_CONSTTAB_INT("TabBarFlags_DrawSelectedOverline", (ImGuiTabBarFlags_DrawSelectedOverline))},
    {SWIG_LUA_CONSTTAB_INT("TabBarFlags_FittingPolicyResizeDown", (ImGuiTabBarFlags_FittingPolicyResizeDown))},
    {SWIG_LUA_CONSTTAB_INT("TabBarFlags_FittingPolicyScroll", (ImGuiTabBarFlags_FittingPolicyScroll))},
    {SWIG_LUA_CONSTTAB_INT("TabBarFlags_FittingPolicyMask_", (ImGuiTabBarFlags_FittingPolicyMask_))},
    {SWIG_LUA_CONSTTAB_INT("TabBarFlags_FittingPolicyDefault_", (ImGuiTabBarFlags_FittingPolicyDefault_))},
    {SWIG_LUA_CONSTTAB_INT("TabItemFlags_None", (ImGuiTabItemFlags_None))},
    {SWIG_LUA_CONSTTAB_INT("TabItemFlags_UnsavedDocument", (ImGuiTabItemFlags_UnsavedDocument))},
    {SWIG_LUA_CONSTTAB_INT("TabItemFlags_SetSelected", (ImGuiTabItemFlags_SetSelected))},
    {SWIG_LUA_CONSTTAB_INT("TabItemFlags_NoCloseWithMiddleMouseButton", (ImGuiTabItemFlags_NoCloseWithMiddleMouseButton))},
    {SWIG_LUA_CONSTTAB_INT("TabItemFlags_NoPushId", (ImGuiTabItemFlags_NoPushId))},
    {SWIG_LUA_CONSTTAB_INT("TabItemFlags_NoTooltip", (ImGuiTabItemFlags_NoTooltip))},
    {SWIG_LUA_CONSTTAB_INT("TabItemFlags_NoReorder", (ImGuiTabItemFlags_NoReorder))},
    {SWIG_LUA_CONSTTAB_INT("TabItemFlags_Leading", (ImGuiTabItemFlags_Leading))},
    {SWIG_LUA_CONSTTAB_INT("TabItemFlags_Trailing", (ImGuiTabItemFlags_Trailing))},
    {SWIG_LUA_CONSTTAB_INT("TabItemFlags_NoAssumedClosure", (ImGuiTabItemFlags_NoAssumedClosure))},
    {SWIG_LUA_CONSTTAB_INT("FocusedFlags_None", (ImGuiFocusedFlags_None))},
    {SWIG_LUA_CONSTTAB_INT("FocusedFlags_ChildWindows", (ImGuiFocusedFlags_ChildWindows))},
    {SWIG_LUA_CONSTTAB_INT("FocusedFlags_RootWindow", (ImGuiFocusedFlags_RootWindow))},
    {SWIG_LUA_CONSTTAB_INT("FocusedFlags_AnyWindow", (ImGuiFocusedFlags_AnyWindow))},
    {SWIG_LUA_CONSTTAB_INT("FocusedFlags_NoPopupHierarchy", (ImGuiFocusedFlags_NoPopupHierarchy))},
    {SWIG_LUA_CONSTTAB_INT("FocusedFlags_DockHierarchy", (ImGuiFocusedFlags_DockHierarchy))},
    {SWIG_LUA_CONSTTAB_INT("FocusedFlags_RootAndChildWindows", (ImGuiFocusedFlags_RootAndChildWindows))},
    {SWIG_LUA_CONSTTAB_INT("HoveredFlags_None", (ImGuiHoveredFlags_None))},
    {SWIG_LUA_CONSTTAB_INT("HoveredFlags_ChildWindows", (ImGuiHoveredFlags_ChildWindows))},
    {SWIG_LUA_CONSTTAB_INT("HoveredFlags_RootWindow", (ImGuiHoveredFlags_RootWindow))},
    {SWIG_LUA_CONSTTAB_INT("HoveredFlags_AnyWindow", (ImGuiHoveredFlags_AnyWindow))},
    {SWIG_LUA_CONSTTAB_INT("HoveredFlags_NoPopupHierarchy", (ImGuiHoveredFlags_NoPopupHierarchy))},
    {SWIG_LUA_CONSTTAB_INT("HoveredFlags_DockHierarchy", (ImGuiHoveredFlags_DockHierarchy))},
    {SWIG_LUA_CONSTTAB_INT("HoveredFlags_AllowWhenBlockedByPopup", (ImGuiHoveredFlags_AllowWhenBlockedByPopup))},
    {SWIG_LUA_CONSTTAB_INT("HoveredFlags_AllowWhenBlockedByActiveItem", (ImGuiHoveredFlags_AllowWhenBlockedByActiveItem))},
    {SWIG_LUA_CONSTTAB_INT("HoveredFlags_AllowWhenOverlappedByItem", (ImGuiHoveredFlags_AllowWhenOverlappedByItem))},
    {SWIG_LUA_CONSTTAB_INT("HoveredFlags_AllowWhenOverlappedByWindow", (ImGuiHoveredFlags_AllowWhenOverlappedByWindow))},
    {SWIG_LUA_CONSTTAB_INT("HoveredFlags_AllowWhenDisabled", (ImGuiHoveredFlags_AllowWhenDisabled))},
    {SWIG_LUA_CONSTTAB_INT("HoveredFlags_NoNavOverride", (ImGuiHoveredFlags_NoNavOverride))},
    {SWIG_LUA_CONSTTAB_INT("HoveredFlags_AllowWhenOverlapped", (ImGuiHoveredFlags_AllowWhenOverlapped))},
    {SWIG_LUA_CONSTTAB_INT("HoveredFlags_RectOnly", (ImGuiHoveredFlags_RectOnly))},
    {SWIG_LUA_CONSTTAB_INT("HoveredFlags_RootAndChildWindows", (ImGuiHoveredFlags_RootAndChildWindows))},
    {SWIG_LUA_CONSTTAB_INT("HoveredFlags_ForTooltip", (ImGuiHoveredFlags_ForTooltip))},
    {SWIG_LUA_CONSTTAB_INT("HoveredFlags_Stationary", (ImGuiHoveredFlags_Stationary))},
    {SWIG_LUA_CONSTTAB_INT("HoveredFlags_DelayNone", (ImGuiHoveredFlags_DelayNone))},
    {SWIG_LUA_CONSTTAB_INT("HoveredFlags_DelayShort", (ImGuiHoveredFlags_DelayShort))},
    {SWIG_LUA_CONSTTAB_INT("HoveredFlags_DelayNormal", (ImGuiHoveredFlags_DelayNormal))},
    {SWIG_LUA_CONSTTAB_INT("HoveredFlags_NoSharedDelay", (ImGuiHoveredFlags_NoSharedDelay))},
    {SWIG_LUA_CONSTTAB_INT("DockNodeFlags_None", (ImGuiDockNodeFlags_None))},
    {SWIG_LUA_CONSTTAB_INT("DockNodeFlags_KeepAliveOnly", (ImGuiDockNodeFlags_KeepAliveOnly))},
    {SWIG_LUA_CONSTTAB_INT("DockNodeFlags_NoDockingOverCentralNode", (ImGuiDockNodeFlags_NoDockingOverCentralNode))},
    {SWIG_LUA_CONSTTAB_INT("DockNodeFlags_PassthruCentralNode", (ImGuiDockNodeFlags_PassthruCentralNode))},
    {SWIG_LUA_CONSTTAB_INT("DockNodeFlags_NoDockingSplit", (ImGuiDockNodeFlags_NoDockingSplit))},
    {SWIG_LUA_CONSTTAB_INT("DockNodeFlags_NoResize", (ImGuiDockNodeFlags_NoResize))},
    {SWIG_LUA_CONSTTAB_INT("DockNodeFlags_AutoHideTabBar", (ImGuiDockNodeFlags_AutoHideTabBar))},
    {SWIG_LUA_CONSTTAB_INT("DockNodeFlags_NoUndocking", (ImGuiDockNodeFlags_NoUndocking))},
    {SWIG_LUA_CONSTTAB_INT("DockNodeFlags_NoSplit", (ImGuiDockNodeFlags_NoSplit))},
    {SWIG_LUA_CONSTTAB_INT("DockNodeFlags_NoDockingInCentralNode", (ImGuiDockNodeFlags_NoDockingInCentralNode))},
    {SWIG_LUA_CONSTTAB_INT("DragDropFlags_None", (ImGuiDragDropFlags_None))},
    {SWIG_LUA_CONSTTAB_INT("DragDropFlags_SourceNoPreviewTooltip", (ImGuiDragDropFlags_SourceNoPreviewTooltip))},
    {SWIG_LUA_CONSTTAB_INT("DragDropFlags_SourceNoDisableHover", (ImGuiDragDropFlags_SourceNoDisableHover))},
    {SWIG_LUA_CONSTTAB_INT("DragDropFlags_SourceNoHoldToOpenOthers", (ImGuiDragDropFlags_SourceNoHoldToOpenOthers))},
    {SWIG_LUA_CONSTTAB_INT("DragDropFlags_SourceAllowNullID", (ImGuiDragDropFlags_SourceAllowNullID))},
    {SWIG_LUA_CONSTTAB_INT("DragDropFlags_SourceExtern", (ImGuiDragDropFlags_SourceExtern))},
    {SWIG_LUA_CONSTTAB_INT("DragDropFlags_PayloadAutoExpire", (ImGuiDragDropFlags_PayloadAutoExpire))},
    {SWIG_LUA_CONSTTAB_INT("DragDropFlags_PayloadNoCrossContext", (ImGuiDragDropFlags_PayloadNoCrossContext))},
    {SWIG_LUA_CONSTTAB_INT("DragDropFlags_PayloadNoCrossProcess", (ImGuiDragDropFlags_PayloadNoCrossProcess))},
    {SWIG_LUA_CONSTTAB_INT("DragDropFlags_AcceptBeforeDelivery", (ImGuiDragDropFlags_AcceptBeforeDelivery))},
    {SWIG_LUA_CONSTTAB_INT("DragDropFlags_AcceptNoDrawDefaultRect", (ImGuiDragDropFlags_AcceptNoDrawDefaultRect))},
    {SWIG_LUA_CONSTTAB_INT("DragDropFlags_AcceptNoPreviewTooltip", (ImGuiDragDropFlags_AcceptNoPreviewTooltip))},
    {SWIG_LUA_CONSTTAB_INT("DragDropFlags_AcceptPeekOnly", (ImGuiDragDropFlags_AcceptPeekOnly))},
    {SWIG_LUA_CONSTTAB_INT("DragDropFlags_SourceAutoExpirePayload", (ImGuiDragDropFlags_SourceAutoExpirePayload))},
    {SWIG_LUA_CONSTTAB_STRING("IMGUI_PAYLOAD_TYPE_COLOR_3F", "_COL3F")},
    {SWIG_LUA_CONSTTAB_STRING("IMGUI_PAYLOAD_TYPE_COLOR_4F", "_COL4F")},
    {SWIG_LUA_CONSTTAB_INT("DataType_S8", (ImGuiDataType_S8))},
    {SWIG_LUA_CONSTTAB_INT("DataType_U8", (ImGuiDataType_U8))},
    {SWIG_LUA_CONSTTAB_INT("DataType_S16", (ImGuiDataType_S16))},
    {SWIG_LUA_CONSTTAB_INT("DataType_U16", (ImGuiDataType_U16))},
    {SWIG_LUA_CONSTTAB_INT("DataType_S32", (ImGuiDataType_S32))},
    {SWIG_LUA_CONSTTAB_INT("DataType_U32", (ImGuiDataType_U32))},
    {SWIG_LUA_CONSTTAB_INT("DataType_S64", (ImGuiDataType_S64))},
    {SWIG_LUA_CONSTTAB_INT("DataType_U64", (ImGuiDataType_U64))},
    {SWIG_LUA_CONSTTAB_INT("DataType_Float", (ImGuiDataType_Float))},
    {SWIG_LUA_CONSTTAB_INT("DataType_Double", (ImGuiDataType_Double))},
    {SWIG_LUA_CONSTTAB_INT("DataType_Bool", (ImGuiDataType_Bool))},
    {SWIG_LUA_CONSTTAB_INT("DataType_COUNT", (ImGuiDataType_COUNT))},
    {SWIG_LUA_CONSTTAB_INT("Dir_None", (ImGuiDir_None))},
    {SWIG_LUA_CONSTTAB_INT("Dir_Left", (ImGuiDir_Left))},
    {SWIG_LUA_CONSTTAB_INT("Dir_Right", (ImGuiDir_Right))},
    {SWIG_LUA_CONSTTAB_INT("Dir_Up", (ImGuiDir_Up))},
    {SWIG_LUA_CONSTTAB_INT("Dir_Down", (ImGuiDir_Down))},
    {SWIG_LUA_CONSTTAB_INT("Dir_COUNT", (ImGuiDir_COUNT))},
    {SWIG_LUA_CONSTTAB_INT("SortDirection_None", (ImGuiSortDirection_None))},
    {SWIG_LUA_CONSTTAB_INT("SortDirection_Ascending", (ImGuiSortDirection_Ascending))},
    {SWIG_LUA_CONSTTAB_INT("SortDirection_Descending", (ImGuiSortDirection_Descending))},
    {SWIG_LUA_CONSTTAB_INT("Key_None", (ImGuiKey_None))},
    {SWIG_LUA_CONSTTAB_INT("Key_NamedKey_BEGIN", (ImGuiKey_NamedKey_BEGIN))},
    {SWIG_LUA_CONSTTAB_INT("Key_Tab", (ImGuiKey_Tab))},
    {SWIG_LUA_CONSTTAB_INT("Key_LeftArrow", (ImGuiKey_LeftArrow))},
    {SWIG_LUA_CONSTTAB_INT("Key_RightArrow", (ImGuiKey_RightArrow))},
    {SWIG_LUA_CONSTTAB_INT("Key_UpArrow", (ImGuiKey_UpArrow))},
    {SWIG_LUA_CONSTTAB_INT("Key_DownArrow", (ImGuiKey_DownArrow))},
    {SWIG_LUA_CONSTTAB_INT("Key_PageUp", (ImGuiKey_PageUp))},
    {SWIG_LUA_CONSTTAB_INT("Key_PageDown", (ImGuiKey_PageDown))},
    {SWIG_LUA_CONSTTAB_INT("Key_Home", (ImGuiKey_Home))},
    {SWIG_LUA_CONSTTAB_INT("Key_End", (ImGuiKey_End))},
    {SWIG_LUA_CONSTTAB_INT("Key_Insert", (ImGuiKey_Insert))},
    {SWIG_LUA_CONSTTAB_INT("Key_Delete", (ImGuiKey_Delete))},
    {SWIG_LUA_CONSTTAB_INT("Key_Backspace", (ImGuiKey_Backspace))},
    {SWIG_LUA_CONSTTAB_INT("Key_Space", (ImGuiKey_Space))},
    {SWIG_LUA_CONSTTAB_INT("Key_Enter", (ImGuiKey_Enter))},
    {SWIG_LUA_CONSTTAB_INT("Key_Escape", (ImGuiKey_Escape))},
    {SWIG_LUA_CONSTTAB_INT("Key_LeftCtrl", (ImGuiKey_LeftCtrl))},
    {SWIG_LUA_CONSTTAB_INT("Key_LeftShift", (ImGuiKey_LeftShift))},
    {SWIG_LUA_CONSTTAB_INT("Key_LeftAlt", (ImGuiKey_LeftAlt))},
    {SWIG_LUA_CONSTTAB_INT("Key_LeftSuper", (ImGuiKey_LeftSuper))},
    {SWIG_LUA_CONSTTAB_INT("Key_RightCtrl", (ImGuiKey_RightCtrl))},
    {SWIG_LUA_CONSTTAB_INT("Key_RightShift", (ImGuiKey_RightShift))},
    {SWIG_LUA_CONSTTAB_INT("Key_RightAlt", (ImGuiKey_RightAlt))},
    {SWIG_LUA_CONSTTAB_INT("Key_RightSuper", (ImGuiKey_RightSuper))},
    {SWIG_LUA_CONSTTAB_INT("Key_Menu", (ImGuiKey_Menu))},
    {SWIG_LUA_CONSTTAB_INT("Key_0", (ImGuiKey_0))},
    {SWIG_LUA_CONSTTAB_INT("Key_1", (ImGuiKey_1))},
    {SWIG_LUA_CONSTTAB_INT("Key_2", (ImGuiKey_2))},
    {SWIG_LUA_CONSTTAB_INT("Key_3", (ImGuiKey_3))},
    {SWIG_LUA_CONSTTAB_INT("Key_4", (ImGuiKey_4))},
    {SWIG_LUA_CONSTTAB_INT("Key_5", (ImGuiKey_5))},
    {SWIG_LUA_CONSTTAB_INT("Key_6", (ImGuiKey_6))},
    {SWIG_LUA_CONSTTAB_INT("Key_7", (ImGuiKey_7))},
    {SWIG_LUA_CONSTTAB_INT("Key_8", (ImGuiKey_8))},
    {SWIG_LUA_CONSTTAB_INT("Key_9", (ImGuiKey_9))},
    {SWIG_LUA_CONSTTAB_INT("Key_A", (ImGuiKey_A))},
    {SWIG_LUA_CONSTTAB_INT("Key_B", (ImGuiKey_B))},
    {SWIG_LUA_CONSTTAB_INT("Key_C", (ImGuiKey_C))},
    {SWIG_LUA_CONSTTAB_INT("Key_D", (ImGuiKey_D))},
    {SWIG_LUA_CONSTTAB_INT("Key_E", (ImGuiKey_E))},
    {SWIG_LUA_CONSTTAB_INT("Key_F", (ImGuiKey_F))},
    {SWIG_LUA_CONSTTAB_INT("Key_G", (ImGuiKey_G))},
    {SWIG_LUA_CONSTTAB_INT("Key_H", (ImGuiKey_H))},
    {SWIG_LUA_CONSTTAB_INT("Key_I", (ImGuiKey_I))},
    {SWIG_LUA_CONSTTAB_INT("Key_J", (ImGuiKey_J))},
    {SWIG_LUA_CONSTTAB_INT("Key_K", (ImGuiKey_K))},
    {SWIG_LUA_CONSTTAB_INT("Key_L", (ImGuiKey_L))},
    {SWIG_LUA_CONSTTAB_INT("Key_M", (ImGuiKey_M))},
    {SWIG_LUA_CONSTTAB_INT("Key_N", (ImGuiKey_N))},
    {SWIG_LUA_CONSTTAB_INT("Key_O", (ImGuiKey_O))},
    {SWIG_LUA_CONSTTAB_INT("Key_P", (ImGuiKey_P))},
    {SWIG_LUA_CONSTTAB_INT("Key_Q", (ImGuiKey_Q))},
    {SWIG_LUA_CONSTTAB_INT("Key_R", (ImGuiKey_R))},
    {SWIG_LUA_CONSTTAB_INT("Key_S", (ImGuiKey_S))},
    {SWIG_LUA_CONSTTAB_INT("Key_T", (ImGuiKey_T))},
    {SWIG_LUA_CONSTTAB_INT("Key_U", (ImGuiKey_U))},
    {SWIG_LUA_CONSTTAB_INT("Key_V", (ImGuiKey_V))},
    {SWIG_LUA_CONSTTAB_INT("Key_W", (ImGuiKey_W))},
    {SWIG_LUA_CONSTTAB_INT("Key_X", (ImGuiKey_X))},
    {SWIG_LUA_CONSTTAB_INT("Key_Y", (ImGuiKey_Y))},
    {SWIG_LUA_CONSTTAB_INT("Key_Z", (ImGuiKey_Z))},
    {SWIG_LUA_CONSTTAB_INT("Key_F1", (ImGuiKey_F1))},
    {SWIG_LUA_CONSTTAB_INT("Key_F2", (ImGuiKey_F2))},
    {SWIG_LUA_CONSTTAB_INT("Key_F3", (ImGuiKey_F3))},
    {SWIG_LUA_CONSTTAB_INT("Key_F4", (ImGuiKey_F4))},
    {SWIG_LUA_CONSTTAB_INT("Key_F5", (ImGuiKey_F5))},
    {SWIG_LUA_CONSTTAB_INT("Key_F6", (ImGuiKey_F6))},
    {SWIG_LUA_CONSTTAB_INT("Key_F7", (ImGuiKey_F7))},
    {SWIG_LUA_CONSTTAB_INT("Key_F8", (ImGuiKey_F8))},
    {SWIG_LUA_CONSTTAB_INT("Key_F9", (ImGuiKey_F9))},
    {SWIG_LUA_CONSTTAB_INT("Key_F10", (ImGuiKey_F10))},
    {SWIG_LUA_CONSTTAB_INT("Key_F11", (ImGuiKey_F11))},
    {SWIG_LUA_CONSTTAB_INT("Key_F12", (ImGuiKey_F12))},
    {SWIG_LUA_CONSTTAB_INT("Key_F13", (ImGuiKey_F13))},
    {SWIG_LUA_CONSTTAB_INT("Key_F14", (ImGuiKey_F14))},
    {SWIG_LUA_CONSTTAB_INT("Key_F15", (ImGuiKey_F15))},
    {SWIG_LUA_CONSTTAB_INT("Key_F16", (ImGuiKey_F16))},
    {SWIG_LUA_CONSTTAB_INT("Key_F17", (ImGuiKey_F17))},
    {SWIG_LUA_CONSTTAB_INT("Key_F18", (ImGuiKey_F18))},
    {SWIG_LUA_CONSTTAB_INT("Key_F19", (ImGuiKey_F19))},
    {SWIG_LUA_CONSTTAB_INT("Key_F20", (ImGuiKey_F20))},
    {SWIG_LUA_CONSTTAB_INT("Key_F21", (ImGuiKey_F21))},
    {SWIG_LUA_CONSTTAB_INT("Key_F22", (ImGuiKey_F22))},
    {SWIG_LUA_CONSTTAB_INT("Key_F23", (ImGuiKey_F23))},
    {SWIG_LUA_CONSTTAB_INT("Key_F24", (ImGuiKey_F24))},
    {SWIG_LUA_CONSTTAB_INT("Key_Apostrophe", (ImGuiKey_Apostrophe))},
    {SWIG_LUA_CONSTTAB_INT("Key_Comma", (ImGuiKey_Comma))},
    {SWIG_LUA_CONSTTAB_INT("Key_Minus", (ImGuiKey_Minus))},
    {SWIG_LUA_CONSTTAB_INT("Key_Period", (ImGuiKey_Period))},
    {SWIG_LUA_CONSTTAB_INT("Key_Slash", (ImGuiKey_Slash))},
    {SWIG_LUA_CONSTTAB_INT("Key_Semicolon", (ImGuiKey_Semicolon))},
    {SWIG_LUA_CONSTTAB_INT("Key_Equal", (ImGuiKey_Equal))},
    {SWIG_LUA_CONSTTAB_INT("Key_LeftBracket", (ImGuiKey_LeftBracket))},
    {SWIG_LUA_CONSTTAB_INT("Key_Backslash", (ImGuiKey_Backslash))},
    {SWIG_LUA_CONSTTAB_INT("Key_RightBracket", (ImGuiKey_RightBracket))},
    {SWIG_LUA_CONSTTAB_INT("Key_GraveAccent", (ImGuiKey_GraveAccent))},
    {SWIG_LUA_CONSTTAB_INT("Key_CapsLock", (ImGuiKey_CapsLock))},
    {SWIG_LUA_CONSTTAB_INT("Key_ScrollLock", (ImGuiKey_ScrollLock))},
    {SWIG_LUA_CONSTTAB_INT("Key_NumLock", (ImGuiKey_NumLock))},
    {SWIG_LUA_CONSTTAB_INT("Key_PrintScreen", (ImGuiKey_PrintScreen))},
    {SWIG_LUA_CONSTTAB_INT("Key_Pause", (ImGuiKey_Pause))},
    {SWIG_LUA_CONSTTAB_INT("Key_Keypad0", (ImGuiKey_Keypad0))},
    {SWIG_LUA_CONSTTAB_INT("Key_Keypad1", (ImGuiKey_Keypad1))},
    {SWIG_LUA_CONSTTAB_INT("Key_Keypad2", (ImGuiKey_Keypad2))},
    {SWIG_LUA_CONSTTAB_INT("Key_Keypad3", (ImGuiKey_Keypad3))},
    {SWIG_LUA_CONSTTAB_INT("Key_Keypad4", (ImGuiKey_Keypad4))},
    {SWIG_LUA_CONSTTAB_INT("Key_Keypad5", (ImGuiKey_Keypad5))},
    {SWIG_LUA_CONSTTAB_INT("Key_Keypad6", (ImGuiKey_Keypad6))},
    {SWIG_LUA_CONSTTAB_INT("Key_Keypad7", (ImGuiKey_Keypad7))},
    {SWIG_LUA_CONSTTAB_INT("Key_Keypad8", (ImGuiKey_Keypad8))},
    {SWIG_LUA_CONSTTAB_INT("Key_Keypad9", (ImGuiKey_Keypad9))},
    {SWIG_LUA_CONSTTAB_INT("Key_KeypadDecimal", (ImGuiKey_KeypadDecimal))},
    {SWIG_LUA_CONSTTAB_INT("Key_KeypadDivide", (ImGuiKey_KeypadDivide))},
    {SWIG_LUA_CONSTTAB_INT("Key_KeypadMultiply", (ImGuiKey_KeypadMultiply))},
    {SWIG_LUA_CONSTTAB_INT("Key_KeypadSubtract", (ImGuiKey_KeypadSubtract))},
    {SWIG_LUA_CONSTTAB_INT("Key_KeypadAdd", (ImGuiKey_KeypadAdd))},
    {SWIG_LUA_CONSTTAB_INT("Key_KeypadEnter", (ImGuiKey_KeypadEnter))},
    {SWIG_LUA_CONSTTAB_INT("Key_KeypadEqual", (ImGuiKey_KeypadEqual))},
    {SWIG_LUA_CONSTTAB_INT("Key_AppBack", (ImGuiKey_AppBack))},
    {SWIG_LUA_CONSTTAB_INT("Key_AppForward", (ImGuiKey_AppForward))},
    {SWIG_LUA_CONSTTAB_INT("Key_GamepadStart", (ImGuiKey_GamepadStart))},
    {SWIG_LUA_CONSTTAB_INT("Key_GamepadBack", (ImGuiKey_GamepadBack))},
    {SWIG_LUA_CONSTTAB_INT("Key_GamepadFaceLeft", (ImGuiKey_GamepadFaceLeft))},
    {SWIG_LUA_CONSTTAB_INT("Key_GamepadFaceRight", (ImGuiKey_GamepadFaceRight))},
    {SWIG_LUA_CONSTTAB_INT("Key_GamepadFaceUp", (ImGuiKey_GamepadFaceUp))},
    {SWIG_LUA_CONSTTAB_INT("Key_GamepadFaceDown", (ImGuiKey_GamepadFaceDown))},
    {SWIG_LUA_CONSTTAB_INT("Key_GamepadDpadLeft", (ImGuiKey_GamepadDpadLeft))},
    {SWIG_LUA_CONSTTAB_INT("Key_GamepadDpadRight", (ImGuiKey_GamepadDpadRight))},
    {SWIG_LUA_CONSTTAB_INT("Key_GamepadDpadUp", (ImGuiKey_GamepadDpadUp))},
    {SWIG_LUA_CONSTTAB_INT("Key_GamepadDpadDown", (ImGuiKey_GamepadDpadDown))},
    {SWIG_LUA_CONSTTAB_INT("Key_GamepadL1", (ImGuiKey_GamepadL1))},
    {SWIG_LUA_CONSTTAB_INT("Key_GamepadR1", (ImGuiKey_GamepadR1))},
    {SWIG_LUA_CONSTTAB_INT("Key_GamepadL2", (ImGuiKey_GamepadL2))},
    {SWIG_LUA_CONSTTAB_INT("Key_GamepadR2", (ImGuiKey_GamepadR2))},
    {SWIG_LUA_CONSTTAB_INT("Key_GamepadL3", (ImGuiKey_GamepadL3))},
    {SWIG_LUA_CONSTTAB_INT("Key_GamepadR3", (ImGuiKey_GamepadR3))},
    {SWIG_LUA_CONSTTAB_INT("Key_GamepadLStickLeft", (ImGuiKey_GamepadLStickLeft))},
    {SWIG_LUA_CONSTTAB_INT("Key_GamepadLStickRight", (ImGuiKey_GamepadLStickRight))},
    {SWIG_LUA_CONSTTAB_INT("Key_GamepadLStickUp", (ImGuiKey_GamepadLStickUp))},
    {SWIG_LUA_CONSTTAB_INT("Key_GamepadLStickDown", (ImGuiKey_GamepadLStickDown))},
    {SWIG_LUA_CONSTTAB_INT("Key_GamepadRStickLeft", (ImGuiKey_GamepadRStickLeft))},
    {SWIG_LUA_CONSTTAB_INT("Key_GamepadRStickRight", (ImGuiKey_GamepadRStickRight))},
    {SWIG_LUA_CONSTTAB_INT("Key_GamepadRStickUp", (ImGuiKey_GamepadRStickUp))},
    {SWIG_LUA_CONSTTAB_INT("Key_GamepadRStickDown", (ImGuiKey_GamepadRStickDown))},
    {SWIG_LUA_CONSTTAB_INT("Key_MouseLeft", (ImGuiKey_MouseLeft))},
    {SWIG_LUA_CONSTTAB_INT("Key_MouseRight", (ImGuiKey_MouseRight))},
    {SWIG_LUA_CONSTTAB_INT("Key_MouseMiddle", (ImGuiKey_MouseMiddle))},
    {SWIG_LUA_CONSTTAB_INT("Key_MouseX1", (ImGuiKey_MouseX1))},
    {SWIG_LUA_CONSTTAB_INT("Key_MouseX2", (ImGuiKey_MouseX2))},
    {SWIG_LUA_CONSTTAB_INT("Key_MouseWheelX", (ImGuiKey_MouseWheelX))},
    {SWIG_LUA_CONSTTAB_INT("Key_MouseWheelY", (ImGuiKey_MouseWheelY))},
    {SWIG_LUA_CONSTTAB_INT("Key_ReservedForModCtrl", (ImGuiKey_ReservedForModCtrl))},
    {SWIG_LUA_CONSTTAB_INT("Key_ReservedForModShift", (ImGuiKey_ReservedForModShift))},
    {SWIG_LUA_CONSTTAB_INT("Key_ReservedForModAlt", (ImGuiKey_ReservedForModAlt))},
    {SWIG_LUA_CONSTTAB_INT("Key_ReservedForModSuper", (ImGuiKey_ReservedForModSuper))},
    {SWIG_LUA_CONSTTAB_INT("Key_NamedKey_END", (ImGuiKey_NamedKey_END))},
    {SWIG_LUA_CONSTTAB_INT("Mod_None", (ImGuiMod_None))},
    {SWIG_LUA_CONSTTAB_INT("Mod_Ctrl", (ImGuiMod_Ctrl))},
    {SWIG_LUA_CONSTTAB_INT("Mod_Shift", (ImGuiMod_Shift))},
    {SWIG_LUA_CONSTTAB_INT("Mod_Alt", (ImGuiMod_Alt))},
    {SWIG_LUA_CONSTTAB_INT("Mod_Super", (ImGuiMod_Super))},
    {SWIG_LUA_CONSTTAB_INT("Mod_Mask_", (ImGuiMod_Mask_))},
    {SWIG_LUA_CONSTTAB_INT("Key_NamedKey_COUNT", (ImGuiKey_NamedKey_COUNT))},
    {SWIG_LUA_CONSTTAB_INT("Key_COUNT", (ImGuiKey_COUNT))},
    {SWIG_LUA_CONSTTAB_INT("Mod_Shortcut", (ImGuiMod_Shortcut))},
    {SWIG_LUA_CONSTTAB_INT("Key_ModCtrl", (ImGuiKey_ModCtrl))},
    {SWIG_LUA_CONSTTAB_INT("Key_ModShift", (ImGuiKey_ModShift))},
    {SWIG_LUA_CONSTTAB_INT("Key_ModAlt", (ImGuiKey_ModAlt))},
    {SWIG_LUA_CONSTTAB_INT("Key_ModSuper", (ImGuiKey_ModSuper))},
    {SWIG_LUA_CONSTTAB_INT("InputFlags_None", (ImGuiInputFlags_None))},
    {SWIG_LUA_CONSTTAB_INT("InputFlags_Repeat", (ImGuiInputFlags_Repeat))},
    {SWIG_LUA_CONSTTAB_INT("InputFlags_RouteActive", (ImGuiInputFlags_RouteActive))},
    {SWIG_LUA_CONSTTAB_INT("InputFlags_RouteFocused", (ImGuiInputFlags_RouteFocused))},
    {SWIG_LUA_CONSTTAB_INT("InputFlags_RouteGlobal", (ImGuiInputFlags_RouteGlobal))},
    {SWIG_LUA_CONSTTAB_INT("InputFlags_RouteAlways", (ImGuiInputFlags_RouteAlways))},
    {SWIG_LUA_CONSTTAB_INT("InputFlags_RouteOverFocused", (ImGuiInputFlags_RouteOverFocused))},
    {SWIG_LUA_CONSTTAB_INT("InputFlags_RouteOverActive", (ImGuiInputFlags_RouteOverActive))},
    {SWIG_LUA_CONSTTAB_INT("InputFlags_RouteUnlessBgFocused", (ImGuiInputFlags_RouteUnlessBgFocused))},
    {SWIG_LUA_CONSTTAB_INT("InputFlags_RouteFromRootWindow", (ImGuiInputFlags_RouteFromRootWindow))},
    {SWIG_LUA_CONSTTAB_INT("InputFlags_Tooltip", (ImGuiInputFlags_Tooltip))},
    {SWIG_LUA_CONSTTAB_INT("ConfigFlags_None", (ImGuiConfigFlags_None))},
    {SWIG_LUA_CONSTTAB_INT("ConfigFlags_NavEnableKeyboard", (ImGuiConfigFlags_NavEnableKeyboard))},
    {SWIG_LUA_CONSTTAB_INT("ConfigFlags_NavEnableGamepad", (ImGuiConfigFlags_NavEnableGamepad))},
    {SWIG_LUA_CONSTTAB_INT("ConfigFlags_NoMouse", (ImGuiConfigFlags_NoMouse))},
    {SWIG_LUA_CONSTTAB_INT("ConfigFlags_NoMouseCursorChange", (ImGuiConfigFlags_NoMouseCursorChange))},
    {SWIG_LUA_CONSTTAB_INT("ConfigFlags_NoKeyboard", (ImGuiConfigFlags_NoKeyboard))},
    {SWIG_LUA_CONSTTAB_INT("ConfigFlags_DockingEnable", (ImGuiConfigFlags_DockingEnable))},
    {SWIG_LUA_CONSTTAB_INT("ConfigFlags_ViewportsEnable", (ImGuiConfigFlags_ViewportsEnable))},
    {SWIG_LUA_CONSTTAB_INT("ConfigFlags_DpiEnableScaleViewports", (ImGuiConfigFlags_DpiEnableScaleViewports))},
    {SWIG_LUA_CONSTTAB_INT("ConfigFlags_DpiEnableScaleFonts", (ImGuiConfigFlags_DpiEnableScaleFonts))},
    {SWIG_LUA_CONSTTAB_INT("ConfigFlags_IsSRGB", (ImGuiConfigFlags_IsSRGB))},
    {SWIG_LUA_CONSTTAB_INT("ConfigFlags_IsTouchScreen", (ImGuiConfigFlags_IsTouchScreen))},
    {SWIG_LUA_CONSTTAB_INT("ConfigFlags_NavEnableSetMousePos", (ImGuiConfigFlags_NavEnableSetMousePos))},
    {SWIG_LUA_CONSTTAB_INT("ConfigFlags_NavNoCaptureKeyboard", (ImGuiConfigFlags_NavNoCaptureKeyboard))},
    {SWIG_LUA_CONSTTAB_INT("BackendFlags_None", (ImGuiBackendFlags_None))},
    {SWIG_LUA_CONSTTAB_INT("BackendFlags_HasGamepad", (ImGuiBackendFlags_HasGamepad))},
    {SWIG_LUA_CONSTTAB_INT("BackendFlags_HasMouseCursors", (ImGuiBackendFlags_HasMouseCursors))},
    {SWIG_LUA_CONSTTAB_INT("BackendFlags_HasSetMousePos", (ImGuiBackendFlags_HasSetMousePos))},
    {SWIG_LUA_CONSTTAB_INT("BackendFlags_RendererHasVtxOffset", (ImGuiBackendFlags_RendererHasVtxOffset))},
    {SWIG_LUA_CONSTTAB_INT("BackendFlags_PlatformHasViewports", (ImGuiBackendFlags_PlatformHasViewports))},
    {SWIG_LUA_CONSTTAB_INT("BackendFlags_HasMouseHoveredViewport", (ImGuiBackendFlags_HasMouseHoveredViewport))},
    {SWIG_LUA_CONSTTAB_INT("BackendFlags_RendererHasViewports", (ImGuiBackendFlags_RendererHasViewports))},
    {SWIG_LUA_CONSTTAB_INT("Col_Text", (ImGuiCol_Text))},
    {SWIG_LUA_CONSTTAB_INT("Col_TextDisabled", (ImGuiCol_TextDisabled))},
    {SWIG_LUA_CONSTTAB_INT("Col_WindowBg", (ImGuiCol_WindowBg))},
    {SWIG_LUA_CONSTTAB_INT("Col_ChildBg", (ImGuiCol_ChildBg))},
    {SWIG_LUA_CONSTTAB_INT("Col_PopupBg", (ImGuiCol_PopupBg))},
    {SWIG_LUA_CONSTTAB_INT("Col_Border", (ImGuiCol_Border))},
    {SWIG_LUA_CONSTTAB_INT("Col_BorderShadow", (ImGuiCol_BorderShadow))},
    {SWIG_LUA_CONSTTAB_INT("Col_FrameBg", (ImGuiCol_FrameBg))},
    {SWIG_LUA_CONSTTAB_INT("Col_FrameBgHovered", (ImGuiCol_FrameBgHovered))},
    {SWIG_LUA_CONSTTAB_INT("Col_FrameBgActive", (ImGuiCol_FrameBgActive))},
    {SWIG_LUA_CONSTTAB_INT("Col_TitleBg", (ImGuiCol_TitleBg))},
    {SWIG_LUA_CONSTTAB_INT("Col_TitleBgActive", (ImGuiCol_TitleBgActive))},
    {SWIG_LUA_CONSTTAB_INT("Col_TitleBgCollapsed", (ImGuiCol_TitleBgCollapsed))},
    {SWIG_LUA_CONSTTAB_INT("Col_MenuBarBg", (ImGuiCol_MenuBarBg))},
    {SWIG_LUA_CONSTTAB_INT("Col_ScrollbarBg", (ImGuiCol_ScrollbarBg))},
    {SWIG_LUA_CONSTTAB_INT("Col_ScrollbarGrab", (ImGuiCol_ScrollbarGrab))},
    {SWIG_LUA_CONSTTAB_INT("Col_ScrollbarGrabHovered", (ImGuiCol_ScrollbarGrabHovered))},
    {SWIG_LUA_CONSTTAB_INT("Col_ScrollbarGrabActive", (ImGuiCol_ScrollbarGrabActive))},
    {SWIG_LUA_CONSTTAB_INT("Col_CheckMark", (ImGuiCol_CheckMark))},
    {SWIG_LUA_CONSTTAB_INT("Col_SliderGrab", (ImGuiCol_SliderGrab))},
    {SWIG_LUA_CONSTTAB_INT("Col_SliderGrabActive", (ImGuiCol_SliderGrabActive))},
    {SWIG_LUA_CONSTTAB_INT("Col_Button", (ImGuiCol_Button))},
    {SWIG_LUA_CONSTTAB_INT("Col_ButtonHovered", (ImGuiCol_ButtonHovered))},
    {SWIG_LUA_CONSTTAB_INT("Col_ButtonActive", (ImGuiCol_ButtonActive))},
    {SWIG_LUA_CONSTTAB_INT("Col_Header", (ImGuiCol_Header))},
    {SWIG_LUA_CONSTTAB_INT("Col_HeaderHovered", (ImGuiCol_HeaderHovered))},
    {SWIG_LUA_CONSTTAB_INT("Col_HeaderActive", (ImGuiCol_HeaderActive))},
    {SWIG_LUA_CONSTTAB_INT("Col_Separator", (ImGuiCol_Separator))},
    {SWIG_LUA_CONSTTAB_INT("Col_SeparatorHovered", (ImGuiCol_SeparatorHovered))},
    {SWIG_LUA_CONSTTAB_INT("Col_SeparatorActive", (ImGuiCol_SeparatorActive))},
    {SWIG_LUA_CONSTTAB_INT("Col_ResizeGrip", (ImGuiCol_ResizeGrip))},
    {SWIG_LUA_CONSTTAB_INT("Col_ResizeGripHovered", (ImGuiCol_ResizeGripHovered))},
    {SWIG_LUA_CONSTTAB_INT("Col_ResizeGripActive", (ImGuiCol_ResizeGripActive))},
    {SWIG_LUA_CONSTTAB_INT("Col_TabHovered", (ImGuiCol_TabHovered))},
    {SWIG_LUA_CONSTTAB_INT("Col_Tab", (ImGuiCol_Tab))},
    {SWIG_LUA_CONSTTAB_INT("Col_TabSelected", (ImGuiCol_TabSelected))},
    {SWIG_LUA_CONSTTAB_INT("Col_TabSelectedOverline", (ImGuiCol_TabSelectedOverline))},
    {SWIG_LUA_CONSTTAB_INT("Col_TabDimmed", (ImGuiCol_TabDimmed))},
    {SWIG_LUA_CONSTTAB_INT("Col_TabDimmedSelected", (ImGuiCol_TabDimmedSelected))},
    {SWIG_LUA_CONSTTAB_INT("Col_TabDimmedSelectedOverline", (ImGuiCol_TabDimmedSelectedOverline))},
    {SWIG_LUA_CONSTTAB_INT("Col_DockingPreview", (ImGuiCol_DockingPreview))},
    {SWIG_LUA_CONSTTAB_INT("Col_DockingEmptyBg", (ImGuiCol_DockingEmptyBg))},
    {SWIG_LUA_CONSTTAB_INT("Col_PlotLines", (ImGuiCol_PlotLines))},
    {SWIG_LUA_CONSTTAB_INT("Col_PlotLinesHovered", (ImGuiCol_PlotLinesHovered))},
    {SWIG_LUA_CONSTTAB_INT("Col_PlotHistogram", (ImGuiCol_PlotHistogram))},
    {SWIG_LUA_CONSTTAB_INT("Col_PlotHistogramHovered", (ImGuiCol_PlotHistogramHovered))},
    {SWIG_LUA_CONSTTAB_INT("Col_TableHeaderBg", (ImGuiCol_TableHeaderBg))},
    {SWIG_LUA_CONSTTAB_INT("Col_TableBorderStrong", (ImGuiCol_TableBorderStrong))},
    {SWIG_LUA_CONSTTAB_INT("Col_TableBorderLight", (ImGuiCol_TableBorderLight))},
    {SWIG_LUA_CONSTTAB_INT("Col_TableRowBg", (ImGuiCol_TableRowBg))},
    {SWIG_LUA_CONSTTAB_INT("Col_TableRowBgAlt", (ImGuiCol_TableRowBgAlt))},
    {SWIG_LUA_CONSTTAB_INT("Col_TextLink", (ImGuiCol_TextLink))},
    {SWIG_LUA_CONSTTAB_INT("Col_TextSelectedBg", (ImGuiCol_TextSelectedBg))},
    {SWIG_LUA_CONSTTAB_INT("Col_DragDropTarget", (ImGuiCol_DragDropTarget))},
    {SWIG_LUA_CONSTTAB_INT("Col_NavCursor", (ImGuiCol_NavCursor))},
    {SWIG_LUA_CONSTTAB_INT("Col_NavWindowingHighlight", (ImGuiCol_NavWindowingHighlight))},
    {SWIG_LUA_CONSTTAB_INT("Col_NavWindowingDimBg", (ImGuiCol_NavWindowingDimBg))},
    {SWIG_LUA_CONSTTAB_INT("Col_ModalWindowDimBg", (ImGuiCol_ModalWindowDimBg))},
    {SWIG_LUA_CONSTTAB_INT("Col_COUNT", (ImGuiCol_COUNT))},
    {SWIG_LUA_CONSTTAB_INT("Col_TabActive", (ImGuiCol_TabActive))},
    {SWIG_LUA_CONSTTAB_INT("Col_TabUnfocused", (ImGuiCol_TabUnfocused))},
    {SWIG_LUA_CONSTTAB_INT("Col_TabUnfocusedActive", (ImGuiCol_TabUnfocusedActive))},
    {SWIG_LUA_CONSTTAB_INT("Col_NavHighlight", (ImGuiCol_NavHighlight))},
    {SWIG_LUA_CONSTTAB_INT("StyleVar_Alpha", (ImGuiStyleVar_Alpha))},
    {SWIG_LUA_CONSTTAB_INT("StyleVar_DisabledAlpha", (ImGuiStyleVar_DisabledAlpha))},
    {SWIG_LUA_CONSTTAB_INT("StyleVar_WindowPadding", (ImGuiStyleVar_WindowPadding))},
    {SWIG_LUA_CONSTTAB_INT("StyleVar_WindowRounding", (ImGuiStyleVar_WindowRounding))},
    {SWIG_LUA_CONSTTAB_INT("StyleVar_WindowBorderSize", (ImGuiStyleVar_WindowBorderSize))},
    {SWIG_LUA_CONSTTAB_INT("StyleVar_WindowMinSize", (ImGuiStyleVar_WindowMinSize))},
    {SWIG_LUA_CONSTTAB_INT("StyleVar_WindowTitleAlign", (ImGuiStyleVar_WindowTitleAlign))},
    {SWIG_LUA_CONSTTAB_INT("StyleVar_ChildRounding", (ImGuiStyleVar_ChildRounding))},
    {SWIG_LUA_CONSTTAB_INT("StyleVar_ChildBorderSize", (ImGuiStyleVar_ChildBorderSize))},
    {SWIG_LUA_CONSTTAB_INT("StyleVar_PopupRounding", (ImGuiStyleVar_PopupRounding))},
    {SWIG_LUA_CONSTTAB_INT("StyleVar_PopupBorderSize", (ImGuiStyleVar_PopupBorderSize))},
    {SWIG_LUA_CONSTTAB_INT("StyleVar_FramePadding", (ImGuiStyleVar_FramePadding))},
    {SWIG_LUA_CONSTTAB_INT("StyleVar_FrameRounding", (ImGuiStyleVar_FrameRounding))},
    {SWIG_LUA_CONSTTAB_INT("StyleVar_FrameBorderSize", (ImGuiStyleVar_FrameBorderSize))},
    {SWIG_LUA_CONSTTAB_INT("StyleVar_ItemSpacing", (ImGuiStyleVar_ItemSpacing))},
    {SWIG_LUA_CONSTTAB_INT("StyleVar_ItemInnerSpacing", (ImGuiStyleVar_ItemInnerSpacing))},
    {SWIG_LUA_CONSTTAB_INT("StyleVar_IndentSpacing", (ImGuiStyleVar_IndentSpacing))},
    {SWIG_LUA_CONSTTAB_INT("StyleVar_CellPadding", (ImGuiStyleVar_CellPadding))},
    {SWIG_LUA_CONSTTAB_INT("StyleVar_ScrollbarSize", (ImGuiStyleVar_ScrollbarSize))},
    {SWIG_LUA_CONSTTAB_INT("StyleVar_ScrollbarRounding", (ImGuiStyleVar_ScrollbarRounding))},
    {SWIG_LUA_CONSTTAB_INT("StyleVar_GrabMinSize", (ImGuiStyleVar_GrabMinSize))},
    {SWIG_LUA_CONSTTAB_INT("StyleVar_GrabRounding", (ImGuiStyleVar_GrabRounding))},
    {SWIG_LUA_CONSTTAB_INT("StyleVar_TabRounding", (ImGuiStyleVar_TabRounding))},
    {SWIG_LUA_CONSTTAB_INT("StyleVar_TabBorderSize", (ImGuiStyleVar_TabBorderSize))},
    {SWIG_LUA_CONSTTAB_INT("StyleVar_TabBarBorderSize", (ImGuiStyleVar_TabBarBorderSize))},
    {SWIG_LUA_CONSTTAB_INT("StyleVar_TabBarOverlineSize", (ImGuiStyleVar_TabBarOverlineSize))},
    {SWIG_LUA_CONSTTAB_INT("StyleVar_TableAngledHeadersAngle", (ImGuiStyleVar_TableAngledHeadersAngle))},
    {SWIG_LUA_CONSTTAB_INT("StyleVar_TableAngledHeadersTextAlign", (ImGuiStyleVar_TableAngledHeadersTextAlign))},
    {SWIG_LUA_CONSTTAB_INT("StyleVar_ButtonTextAlign", (ImGuiStyleVar_ButtonTextAlign))},
    {SWIG_LUA_CONSTTAB_INT("StyleVar_SelectableTextAlign", (ImGuiStyleVar_SelectableTextAlign))},
    {SWIG_LUA_CONSTTAB_INT("StyleVar_SeparatorTextBorderSize", (ImGuiStyleVar_SeparatorTextBorderSize))},
    {SWIG_LUA_CONSTTAB_INT("StyleVar_SeparatorTextAlign", (ImGuiStyleVar_SeparatorTextAlign))},
    {SWIG_LUA_CONSTTAB_INT("StyleVar_SeparatorTextPadding", (ImGuiStyleVar_SeparatorTextPadding))},
    {SWIG_LUA_CONSTTAB_INT("StyleVar_DockingSeparatorSize", (ImGuiStyleVar_DockingSeparatorSize))},
    {SWIG_LUA_CONSTTAB_INT("StyleVar_COUNT", (ImGuiStyleVar_COUNT))},
    {SWIG_LUA_CONSTTAB_INT("ButtonFlags_None", (ImGuiButtonFlags_None))},
    {SWIG_LUA_CONSTTAB_INT("ButtonFlags_MouseButtonLeft", (ImGuiButtonFlags_MouseButtonLeft))},
    {SWIG_LUA_CONSTTAB_INT("ButtonFlags_MouseButtonRight", (ImGuiButtonFlags_MouseButtonRight))},
    {SWIG_LUA_CONSTTAB_INT("ButtonFlags_MouseButtonMiddle", (ImGuiButtonFlags_MouseButtonMiddle))},
    {SWIG_LUA_CONSTTAB_INT("ButtonFlags_MouseButtonMask_", (ImGuiButtonFlags_MouseButtonMask_))},
    {SWIG_LUA_CONSTTAB_INT("ButtonFlags_EnableNav", (ImGuiButtonFlags_EnableNav))},
    {SWIG_LUA_CONSTTAB_INT("ColorEditFlags_None", (ImGuiColorEditFlags_None))},
    {SWIG_LUA_CONSTTAB_INT("ColorEditFlags_NoAlpha", (ImGuiColorEditFlags_NoAlpha))},
    {SWIG_LUA_CONSTTAB_INT("ColorEditFlags_NoPicker", (ImGuiColorEditFlags_NoPicker))},
    {SWIG_LUA_CONSTTAB_INT("ColorEditFlags_NoOptions", (ImGuiColorEditFlags_NoOptions))},
    {SWIG_LUA_CONSTTAB_INT("ColorEditFlags_NoSmallPreview", (ImGuiColorEditFlags_NoSmallPreview))},
    {SWIG_LUA_CONSTTAB_INT("ColorEditFlags_NoInputs", (ImGuiColorEditFlags_NoInputs))},
    {SWIG_LUA_CONSTTAB_INT("ColorEditFlags_NoTooltip", (ImGuiColorEditFlags_NoTooltip))},
    {SWIG_LUA_CONSTTAB_INT("ColorEditFlags_NoLabel", (ImGuiColorEditFlags_NoLabel))},
    {SWIG_LUA_CONSTTAB_INT("ColorEditFlags_NoSidePreview", (ImGuiColorEditFlags_NoSidePreview))},
    {SWIG_LUA_CONSTTAB_INT("ColorEditFlags_NoDragDrop", (ImGuiColorEditFlags_NoDragDrop))},
    {SWIG_LUA_CONSTTAB_INT("ColorEditFlags_NoBorder", (ImGuiColorEditFlags_NoBorder))},
    {SWIG_LUA_CONSTTAB_INT("ColorEditFlags_AlphaBar", (ImGuiColorEditFlags_AlphaBar))},
    {SWIG_LUA_CONSTTAB_INT("ColorEditFlags_AlphaPreview", (ImGuiColorEditFlags_AlphaPreview))},
    {SWIG_LUA_CONSTTAB_INT("ColorEditFlags_AlphaPreviewHalf", (ImGuiColorEditFlags_AlphaPreviewHalf))},
    {SWIG_LUA_CONSTTAB_INT("ColorEditFlags_HDR", (ImGuiColorEditFlags_HDR))},
    {SWIG_LUA_CONSTTAB_INT("ColorEditFlags_DisplayRGB", (ImGuiColorEditFlags_DisplayRGB))},
    {SWIG_LUA_CONSTTAB_INT("ColorEditFlags_DisplayHSV", (ImGuiColorEditFlags_DisplayHSV))},
    {SWIG_LUA_CONSTTAB_INT("ColorEditFlags_DisplayHex", (ImGuiColorEditFlags_DisplayHex))},
    {SWIG_LUA_CONSTTAB_INT("ColorEditFlags_Uint8", (ImGuiColorEditFlags_Uint8))},
    {SWIG_LUA_CONSTTAB_INT("ColorEditFlags_Float", (ImGuiColorEditFlags_Float))},
    {SWIG_LUA_CONSTTAB_INT("ColorEditFlags_PickerHueBar", (ImGuiColorEditFlags_PickerHueBar))},
    {SWIG_LUA_CONSTTAB_INT("ColorEditFlags_PickerHueWheel", (ImGuiColorEditFlags_PickerHueWheel))},
    {SWIG_LUA_CONSTTAB_INT("ColorEditFlags_InputRGB", (ImGuiColorEditFlags_InputRGB))},
    {SWIG_LUA_CONSTTAB_INT("ColorEditFlags_InputHSV", (ImGuiColorEditFlags_InputHSV))},
    {SWIG_LUA_CONSTTAB_INT("ColorEditFlags_DefaultOptions_", (ImGuiColorEditFlags_DefaultOptions_))},
    {SWIG_LUA_CONSTTAB_INT("ColorEditFlags_DisplayMask_", (ImGuiColorEditFlags_DisplayMask_))},
    {SWIG_LUA_CONSTTAB_INT("ColorEditFlags_DataTypeMask_", (ImGuiColorEditFlags_DataTypeMask_))},
    {SWIG_LUA_CONSTTAB_INT("ColorEditFlags_PickerMask_", (ImGuiColorEditFlags_PickerMask_))},
    {SWIG_LUA_CONSTTAB_INT("ColorEditFlags_InputMask_", (ImGuiColorEditFlags_InputMask_))},
    {SWIG_LUA_CONSTTAB_INT("SliderFlags_None", (ImGuiSliderFlags_None))},
    {SWIG_LUA_CONSTTAB_INT("SliderFlags_Logarithmic", (ImGuiSliderFlags_Logarithmic))},
    {SWIG_LUA_CONSTTAB_INT("SliderFlags_NoRoundToFormat", (ImGuiSliderFlags_NoRoundToFormat))},
    {SWIG_LUA_CONSTTAB_INT("SliderFlags_NoInput", (ImGuiSliderFlags_NoInput))},
    {SWIG_LUA_CONSTTAB_INT("SliderFlags_WrapAround", (ImGuiSliderFlags_WrapAround))},
    {SWIG_LUA_CONSTTAB_INT("SliderFlags_ClampOnInput", (ImGuiSliderFlags_ClampOnInput))},
    {SWIG_LUA_CONSTTAB_INT("SliderFlags_ClampZeroRange", (ImGuiSliderFlags_ClampZeroRange))},
    {SWIG_LUA_CONSTTAB_INT("SliderFlags_AlwaysClamp", (ImGuiSliderFlags_AlwaysClamp))},
    {SWIG_LUA_CONSTTAB_INT("SliderFlags_InvalidMask_", (ImGuiSliderFlags_InvalidMask_))},
    {SWIG_LUA_CONSTTAB_INT("MouseButton_Left", (ImGuiMouseButton_Left))},
    {SWIG_LUA_CONSTTAB_INT("MouseButton_Right", (ImGuiMouseButton_Right))},
    {SWIG_LUA_CONSTTAB_INT("MouseButton_Middle", (ImGuiMouseButton_Middle))},
    {SWIG_LUA_CONSTTAB_INT("MouseButton_COUNT", (ImGuiMouseButton_COUNT))},
    {SWIG_LUA_CONSTTAB_INT("MouseCursor_None", (ImGuiMouseCursor_None))},
    {SWIG_LUA_CONSTTAB_INT("MouseCursor_Arrow", (ImGuiMouseCursor_Arrow))},
    {SWIG_LUA_CONSTTAB_INT("MouseCursor_TextInput", (ImGuiMouseCursor_TextInput))},
    {SWIG_LUA_CONSTTAB_INT("MouseCursor_ResizeAll", (ImGuiMouseCursor_ResizeAll))},
    {SWIG_LUA_CONSTTAB_INT("MouseCursor_ResizeNS", (ImGuiMouseCursor_ResizeNS))},
    {SWIG_LUA_CONSTTAB_INT("MouseCursor_ResizeEW", (ImGuiMouseCursor_ResizeEW))},
    {SWIG_LUA_CONSTTAB_INT("MouseCursor_ResizeNESW", (ImGuiMouseCursor_ResizeNESW))},
    {SWIG_LUA_CONSTTAB_INT("MouseCursor_ResizeNWSE", (ImGuiMouseCursor_ResizeNWSE))},
    {SWIG_LUA_CONSTTAB_INT("MouseCursor_Hand", (ImGuiMouseCursor_Hand))},
    {SWIG_LUA_CONSTTAB_INT("MouseCursor_NotAllowed", (ImGuiMouseCursor_NotAllowed))},
    {SWIG_LUA_CONSTTAB_INT("MouseCursor_COUNT", (ImGuiMouseCursor_COUNT))},
    {SWIG_LUA_CONSTTAB_INT("MouseSource_Mouse", (ImGuiMouseSource_Mouse))},
    {SWIG_LUA_CONSTTAB_INT("MouseSource_TouchScreen", (ImGuiMouseSource_TouchScreen))},
    {SWIG_LUA_CONSTTAB_INT("MouseSource_Pen", (ImGuiMouseSource_Pen))},
    {SWIG_LUA_CONSTTAB_INT("MouseSource_COUNT", (ImGuiMouseSource_COUNT))},
    {SWIG_LUA_CONSTTAB_INT("Cond_None", (ImGuiCond_None))},
    {SWIG_LUA_CONSTTAB_INT("Cond_Always", (ImGuiCond_Always))},
    {SWIG_LUA_CONSTTAB_INT("Cond_Once", (ImGuiCond_Once))},
    {SWIG_LUA_CONSTTAB_INT("Cond_FirstUseEver", (ImGuiCond_FirstUseEver))},
    {SWIG_LUA_CONSTTAB_INT("Cond_Appearing", (ImGuiCond_Appearing))},
    {SWIG_LUA_CONSTTAB_INT("TableFlags_None", (ImGuiTableFlags_None))},
    {SWIG_LUA_CONSTTAB_INT("TableFlags_Resizable", (ImGuiTableFlags_Resizable))},
    {SWIG_LUA_CONSTTAB_INT("TableFlags_Reorderable", (ImGuiTableFlags_Reorderable))},
    {SWIG_LUA_CONSTTAB_INT("TableFlags_Hideable", (ImGuiTableFlags_Hideable))},
    {SWIG_LUA_CONSTTAB_INT("TableFlags_Sortable", (ImGuiTableFlags_Sortable))},
    {SWIG_LUA_CONSTTAB_INT("TableFlags_NoSavedSettings", (ImGuiTableFlags_NoSavedSettings))},
    {SWIG_LUA_CONSTTAB_INT("TableFlags_ContextMenuInBody", (ImGuiTableFlags_ContextMenuInBody))},
    {SWIG_LUA_CONSTTAB_INT("TableFlags_RowBg", (ImGuiTableFlags_RowBg))},
    {SWIG_LUA_CONSTTAB_INT("TableFlags_BordersInnerH", (ImGuiTableFlags_BordersInnerH))},
    {SWIG_LUA_CONSTTAB_INT("TableFlags_BordersOuterH", (ImGuiTableFlags_BordersOuterH))},
    {SWIG_LUA_CONSTTAB_INT("TableFlags_BordersInnerV", (ImGuiTableFlags_BordersInnerV))},
    {SWIG_LUA_CONSTTAB_INT("TableFlags_BordersOuterV", (ImGuiTableFlags_BordersOuterV))},
    {SWIG_LUA_CONSTTAB_INT("TableFlags_BordersH", (ImGuiTableFlags_BordersH))},
    {SWIG_LUA_CONSTTAB_INT("TableFlags_BordersV", (ImGuiTableFlags_BordersV))},
    {SWIG_LUA_CONSTTAB_INT("TableFlags_BordersInner", (ImGuiTableFlags_BordersInner))},
    {SWIG_LUA_CONSTTAB_INT("TableFlags_BordersOuter", (ImGuiTableFlags_BordersOuter))},
    {SWIG_LUA_CONSTTAB_INT("TableFlags_Borders", (ImGuiTableFlags_Borders))},
    {SWIG_LUA_CONSTTAB_INT("TableFlags_NoBordersInBody", (ImGuiTableFlags_NoBordersInBody))},
    {SWIG_LUA_CONSTTAB_INT("TableFlags_NoBordersInBodyUntilResize", (ImGuiTableFlags_NoBordersInBodyUntilResize))},
    {SWIG_LUA_CONSTTAB_INT("TableFlags_SizingFixedFit", (ImGuiTableFlags_SizingFixedFit))},
    {SWIG_LUA_CONSTTAB_INT("TableFlags_SizingFixedSame", (ImGuiTableFlags_SizingFixedSame))},
    {SWIG_LUA_CONSTTAB_INT("TableFlags_SizingStretchProp", (ImGuiTableFlags_SizingStretchProp))},
    {SWIG_LUA_CONSTTAB_INT("TableFlags_SizingStretchSame", (ImGuiTableFlags_SizingStretchSame))},
    {SWIG_LUA_CONSTTAB_INT("TableFlags_NoHostExtendX", (ImGuiTableFlags_NoHostExtendX))},
    {SWIG_LUA_CONSTTAB_INT("TableFlags_NoHostExtendY", (ImGuiTableFlags_NoHostExtendY))},
    {SWIG_LUA_CONSTTAB_INT("TableFlags_NoKeepColumnsVisible", (ImGuiTableFlags_NoKeepColumnsVisible))},
    {SWIG_LUA_CONSTTAB_INT("TableFlags_PreciseWidths", (ImGuiTableFlags_PreciseWidths))},
    {SWIG_LUA_CONSTTAB_INT("TableFlags_NoClip", (ImGuiTableFlags_NoClip))},
    {SWIG_LUA_CONSTTAB_INT("TableFlags_PadOuterX", (ImGuiTableFlags_PadOuterX))},
    {SWIG_LUA_CONSTTAB_INT("TableFlags_NoPadOuterX", (ImGuiTableFlags_NoPadOuterX))},
    {SWIG_LUA_CONSTTAB_INT("TableFlags_NoPadInnerX", (ImGuiTableFlags_NoPadInnerX))},
    {SWIG_LUA_CONSTTAB_INT("TableFlags_ScrollX", (ImGuiTableFlags_ScrollX))},
    {SWIG_LUA_CONSTTAB_INT("TableFlags_ScrollY", (ImGuiTableFlags_ScrollY))},
    {SWIG_LUA_CONSTTAB_INT("TableFlags_SortMulti", (ImGuiTableFlags_SortMulti))},
    {SWIG_LUA_CONSTTAB_INT("TableFlags_SortTristate", (ImGuiTableFlags_SortTristate))},
    {SWIG_LUA_CONSTTAB_INT("TableFlags_HighlightHoveredColumn", (ImGuiTableFlags_HighlightHoveredColumn))},
    {SWIG_LUA_CONSTTAB_INT("TableFlags_SizingMask_", (ImGuiTableFlags_SizingMask_))},
    {SWIG_LUA_CONSTTAB_INT("TableColumnFlags_None", (ImGuiTableColumnFlags_None))},
    {SWIG_LUA_CONSTTAB_INT("TableColumnFlags_Disabled", (ImGuiTableColumnFlags_Disabled))},
    {SWIG_LUA_CONSTTAB_INT("TableColumnFlags_DefaultHide", (ImGuiTableColumnFlags_DefaultHide))},
    {SWIG_LUA_CONSTTAB_INT("TableColumnFlags_DefaultSort", (ImGuiTableColumnFlags_DefaultSort))},
    {SWIG_LUA_CONSTTAB_INT("TableColumnFlags_WidthStretch", (ImGuiTableColumnFlags_WidthStretch))},
    {SWIG_LUA_CONSTTAB_INT("TableColumnFlags_WidthFixed", (ImGuiTableColumnFlags_WidthFixed))},
    {SWIG_LUA_CONSTTAB_INT("TableColumnFlags_NoResize", (ImGuiTableColumnFlags_NoResize))},
    {SWIG_LUA_CONSTTAB_INT("TableColumnFlags_NoReorder", (ImGuiTableColumnFlags_NoReorder))},
    {SWIG_LUA_CONSTTAB_INT("TableColumnFlags_NoHide", (ImGuiTableColumnFlags_NoHide))},
    {SWIG_LUA_CONSTTAB_INT("TableColumnFlags_NoClip", (ImGuiTableColumnFlags_NoClip))},
    {SWIG_LUA_CONSTTAB_INT("TableColumnFlags_NoSort", (ImGuiTableColumnFlags_NoSort))},
    {SWIG_LUA_CONSTTAB_INT("TableColumnFlags_NoSortAscending", (ImGuiTableColumnFlags_NoSortAscending))},
    {SWIG_LUA_CONSTTAB_INT("TableColumnFlags_NoSortDescending", (ImGuiTableColumnFlags_NoSortDescending))},
    {SWIG_LUA_CONSTTAB_INT("TableColumnFlags_NoHeaderLabel", (ImGuiTableColumnFlags_NoHeaderLabel))},
    {SWIG_LUA_CONSTTAB_INT("TableColumnFlags_NoHeaderWidth", (ImGuiTableColumnFlags_NoHeaderWidth))},
    {SWIG_LUA_CONSTTAB_INT("TableColumnFlags_PreferSortAscending", (ImGuiTableColumnFlags_PreferSortAscending))},
    {SWIG_LUA_CONSTTAB_INT("TableColumnFlags_PreferSortDescending", (ImGuiTableColumnFlags_PreferSortDescending))},
    {SWIG_LUA_CONSTTAB_INT("TableColumnFlags_IndentEnable", (ImGuiTableColumnFlags_IndentEnable))},
    {SWIG_LUA_CONSTTAB_INT("TableColumnFlags_IndentDisable", (ImGuiTableColumnFlags_IndentDisable))},
    {SWIG_LUA_CONSTTAB_INT("TableColumnFlags_AngledHeader", (ImGuiTableColumnFlags_AngledHeader))},
    {SWIG_LUA_CONSTTAB_INT("TableColumnFlags_IsEnabled", (ImGuiTableColumnFlags_IsEnabled))},
    {SWIG_LUA_CONSTTAB_INT("TableColumnFlags_IsVisible", (ImGuiTableColumnFlags_IsVisible))},
    {SWIG_LUA_CONSTTAB_INT("TableColumnFlags_IsSorted", (ImGuiTableColumnFlags_IsSorted))},
    {SWIG_LUA_CONSTTAB_INT("TableColumnFlags_IsHovered", (ImGuiTableColumnFlags_IsHovered))},
    {SWIG_LUA_CONSTTAB_INT("TableColumnFlags_WidthMask_", (ImGuiTableColumnFlags_WidthMask_))},
    {SWIG_LUA_CONSTTAB_INT("TableColumnFlags_IndentMask_", (ImGuiTableColumnFlags_IndentMask_))},
    {SWIG_LUA_CONSTTAB_INT("TableColumnFlags_StatusMask_", (ImGuiTableColumnFlags_StatusMask_))},
    {SWIG_LUA_CONSTTAB_INT("TableColumnFlags_NoDirectResize_", (ImGuiTableColumnFlags_NoDirectResize_))},
    {SWIG_LUA_CONSTTAB_INT("TableRowFlags_None", (ImGuiTableRowFlags_None))},
    {SWIG_LUA_CONSTTAB_INT("TableRowFlags_Headers", (ImGuiTableRowFlags_Headers))},
    {SWIG_LUA_CONSTTAB_INT("TableBgTarget_None", (ImGuiTableBgTarget_None))},
    {SWIG_LUA_CONSTTAB_INT("TableBgTarget_RowBg0", (ImGuiTableBgTarget_RowBg0))},
    {SWIG_LUA_CONSTTAB_INT("TableBgTarget_RowBg1", (ImGuiTableBgTarget_RowBg1))},
    {SWIG_LUA_CONSTTAB_INT("TableBgTarget_CellBg", (ImGuiTableBgTarget_CellBg))},
    {SWIG_LUA_CONSTTAB_INT("IM_UNICODE_CODEPOINT_INVALID", (0xFFFD))},
    {SWIG_LUA_CONSTTAB_INT("IM_UNICODE_CODEPOINT_MAX", (0xFFFF))},
    {SWIG_LUA_CONSTTAB_INT("IM_COL32_R_SHIFT", (0))},
    {SWIG_LUA_CONSTTAB_INT("IM_COL32_G_SHIFT", (8))},
    {SWIG_LUA_CONSTTAB_INT("IM_COL32_B_SHIFT", (16))},
    {SWIG_LUA_CONSTTAB_INT("IM_COL32_A_SHIFT", (24))},
    {SWIG_LUA_CONSTTAB_INT("IM_COL32_A_MASK", (0xFF000000))},
    {SWIG_LUA_CONSTTAB_INT("MultiSelectFlags_None", (ImGuiMultiSelectFlags_None))},
    {SWIG_LUA_CONSTTAB_INT("MultiSelectFlags_SingleSelect", (ImGuiMultiSelectFlags_SingleSelect))},
    {SWIG_LUA_CONSTTAB_INT("MultiSelectFlags_NoSelectAll", (ImGuiMultiSelectFlags_NoSelectAll))},
    {SWIG_LUA_CONSTTAB_INT("MultiSelectFlags_NoRangeSelect", (ImGuiMultiSelectFlags_NoRangeSelect))},
    {SWIG_LUA_CONSTTAB_INT("MultiSelectFlags_NoAutoSelect", (ImGuiMultiSelectFlags_NoAutoSelect))},
    {SWIG_LUA_CONSTTAB_INT("MultiSelectFlags_NoAutoClear", (ImGuiMultiSelectFlags_NoAutoClear))},
    {SWIG_LUA_CONSTTAB_INT("MultiSelectFlags_NoAutoClearOnReselect", (ImGuiMultiSelectFlags_NoAutoClearOnReselect))},
    {SWIG_LUA_CONSTTAB_INT("MultiSelectFlags_BoxSelect1d", (ImGuiMultiSelectFlags_BoxSelect1d))},
    {SWIG_LUA_CONSTTAB_INT("MultiSelectFlags_BoxSelect2d", (ImGuiMultiSelectFlags_BoxSelect2d))},
    {SWIG_LUA_CONSTTAB_INT("MultiSelectFlags_BoxSelectNoScroll", (ImGuiMultiSelectFlags_BoxSelectNoScroll))},
    {SWIG_LUA_CONSTTAB_INT("MultiSelectFlags_ClearOnEscape", (ImGuiMultiSelectFlags_ClearOnEscape))},
    {SWIG_LUA_CONSTTAB_INT("MultiSelectFlags_ClearOnClickVoid", (ImGuiMultiSelectFlags_ClearOnClickVoid))},
    {SWIG_LUA_CONSTTAB_INT("MultiSelectFlags_ScopeWindow", (ImGuiMultiSelectFlags_ScopeWindow))},
    {SWIG_LUA_CONSTTAB_INT("MultiSelectFlags_ScopeRect", (ImGuiMultiSelectFlags_ScopeRect))},
    {SWIG_LUA_CONSTTAB_INT("MultiSelectFlags_SelectOnClick", (ImGuiMultiSelectFlags_SelectOnClick))},
    {SWIG_LUA_CONSTTAB_INT("MultiSelectFlags_SelectOnClickRelease", (ImGuiMultiSelectFlags_SelectOnClickRelease))},
    {SWIG_LUA_CONSTTAB_INT("MultiSelectFlags_NavWrapX", (ImGuiMultiSelectFlags_NavWrapX))},
    {SWIG_LUA_CONSTTAB_INT("SelectionRequestType_None", (ImGuiSelectionRequestType_None))},
    {SWIG_LUA_CONSTTAB_INT("SelectionRequestType_SetAll", (ImGuiSelectionRequestType_SetAll))},
    {SWIG_LUA_CONSTTAB_INT("SelectionRequestType_SetRange", (ImGuiSelectionRequestType_SetRange))},
    {SWIG_LUA_CONSTTAB_INT("IM_DRAWLIST_TEX_LINES_WIDTH_MAX", ((63)))},
    {SWIG_LUA_CONSTTAB_INT("ImDrawFlags_None", (ImDrawFlags_None))},
    {SWIG_LUA_CONSTTAB_INT("ImDrawFlags_Closed", (ImDrawFlags_Closed))},
    {SWIG_LUA_CONSTTAB_INT("ImDrawFlags_RoundCornersTopLeft", (ImDrawFlags_RoundCornersTopLeft))},
    {SWIG_LUA_CONSTTAB_INT("ImDrawFlags_RoundCornersTopRight", (ImDrawFlags_RoundCornersTopRight))},
    {SWIG_LUA_CONSTTAB_INT("ImDrawFlags_RoundCornersBottomLeft", (ImDrawFlags_RoundCornersBottomLeft))},
    {SWIG_LUA_CONSTTAB_INT("ImDrawFlags_RoundCornersBottomRight", (ImDrawFlags_RoundCornersBottomRight))},
    {SWIG_LUA_CONSTTAB_INT("ImDrawFlags_RoundCornersNone", (ImDrawFlags_RoundCornersNone))},
    {SWIG_LUA_CONSTTAB_INT("ImDrawFlags_RoundCornersTop", (ImDrawFlags_RoundCornersTop))},
    {SWIG_LUA_CONSTTAB_INT("ImDrawFlags_RoundCornersBottom", (ImDrawFlags_RoundCornersBottom))},
    {SWIG_LUA_CONSTTAB_INT("ImDrawFlags_RoundCornersLeft", (ImDrawFlags_RoundCornersLeft))},
    {SWIG_LUA_CONSTTAB_INT("ImDrawFlags_RoundCornersRight", (ImDrawFlags_RoundCornersRight))},
    {SWIG_LUA_CONSTTAB_INT("ImDrawFlags_RoundCornersAll", (ImDrawFlags_RoundCornersAll))},
    {SWIG_LUA_CONSTTAB_INT("ImDrawFlags_RoundCornersDefault_", (ImDrawFlags_RoundCornersDefault_))},
    {SWIG_LUA_CONSTTAB_INT("ImDrawFlags_RoundCornersMask_", (ImDrawFlags_RoundCornersMask_))},
    {SWIG_LUA_CONSTTAB_INT("ImDrawListFlags_None", (ImDrawListFlags_None))},
    {SWIG_LUA_CONSTTAB_INT("ImDrawListFlags_AntiAliasedLines", (ImDrawListFlags_AntiAliasedLines))},
    {SWIG_LUA_CONSTTAB_INT("ImDrawListFlags_AntiAliasedLinesUseTex", (ImDrawListFlags_AntiAliasedLinesUseTex))},
    {SWIG_LUA_CONSTTAB_INT("ImDrawListFlags_AntiAliasedFill", (ImDrawListFlags_AntiAliasedFill))},
    {SWIG_LUA_CONSTTAB_INT("ImDrawListFlags_AllowVtxOffset", (ImDrawListFlags_AllowVtxOffset))},
    {SWIG_LUA_CONSTTAB_INT("ImFontAtlasFlags_None", (ImFontAtlasFlags_None))},
    {SWIG_LUA_CONSTTAB_INT("ImFontAtlasFlags_NoPowerOfTwoHeight", (ImFontAtlasFlags_NoPowerOfTwoHeight))},
    {SWIG_LUA_CONSTTAB_INT("ImFontAtlasFlags_NoMouseCursors", (ImFontAtlasFlags_NoMouseCursors))},
    {SWIG_LUA_CONSTTAB_INT("ImFontAtlasFlags_NoBakedLines", (ImFontAtlasFlags_NoBakedLines))},
    {SWIG_LUA_CONSTTAB_INT("ViewportFlags_None", (ImGuiViewportFlags_None))},
    {SWIG_LUA_CONSTTAB_INT("ViewportFlags_IsPlatformWindow", (ImGuiViewportFlags_IsPlatformWindow))},
    {SWIG_LUA_CONSTTAB_INT("ViewportFlags_IsPlatformMonitor", (ImGuiViewportFlags_IsPlatformMonitor))},
    {SWIG_LUA_CONSTTAB_INT("ViewportFlags_OwnedByApp", (ImGuiViewportFlags_OwnedByApp))},
    {SWIG_LUA_CONSTTAB_INT("ViewportFlags_NoDecoration", (ImGuiViewportFlags_NoDecoration))},
    {SWIG_LUA_CONSTTAB_INT("ViewportFlags_NoTaskBarIcon", (ImGuiViewportFlags_NoTaskBarIcon))},
    {SWIG_LUA_CONSTTAB_INT("ViewportFlags_NoFocusOnAppearing", (ImGuiViewportFlags_NoFocusOnAppearing))},
    {SWIG_LUA_CONSTTAB_INT("ViewportFlags_NoFocusOnClick", (ImGuiViewportFlags_NoFocusOnClick))},
    {SWIG_LUA_CONSTTAB_INT("ViewportFlags_NoInputs", (ImGuiViewportFlags_NoInputs))},
    {SWIG_LUA_CONSTTAB_INT("ViewportFlags_NoRendererClear", (ImGuiViewportFlags_NoRendererClear))},
    {SWIG_LUA_CONSTTAB_INT("ViewportFlags_NoAutoMerge", (ImGuiViewportFlags_NoAutoMerge))},
    {SWIG_LUA_CONSTTAB_INT("ViewportFlags_TopMost", (ImGuiViewportFlags_TopMost))},
    {SWIG_LUA_CONSTTAB_INT("ViewportFlags_CanHostOtherWindows", (ImGuiViewportFlags_CanHostOtherWindows))},
    {SWIG_LUA_CONSTTAB_INT("ViewportFlags_IsMinimized", (ImGuiViewportFlags_IsMinimized))},
    {SWIG_LUA_CONSTTAB_INT("ViewportFlags_IsFocused", (ImGuiViewportFlags_IsFocused))},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    { "new_BoolArray", _wrap_new_BoolArray},
    { "delete_BoolArray", _wrap_delete_BoolArray},
    { "BoolArray_getitem", _wrap_BoolArray_getitem},
    { "BoolArray_setitem", _wrap_BoolArray_setitem},
    { "new_IntArray", _wrap_new_IntArray},
    { "delete_IntArray", _wrap_delete_IntArray},
    { "IntArray_getitem", _wrap_IntArray_getitem},
    { "IntArray_setitem", _wrap_IntArray_setitem},
    { "new_FloatArray", _wrap_new_FloatArray},
    { "delete_FloatArray", _wrap_delete_FloatArray},
    { "FloatArray_getitem", _wrap_FloatArray_getitem},
    { "FloatArray_setitem", _wrap_FloatArray_setitem},
    { "new_CharArray", _wrap_new_CharArray},
    { "delete_CharArray", _wrap_delete_CharArray},
    { "CharArray_getitem", _wrap_CharArray_getitem},
    { "CharArray_setitem", _wrap_CharArray_setitem},
    { "new_UintArray", _wrap_new_UintArray},
    { "delete_UintArray", _wrap_delete_UintArray},
    { "UintArray_getitem", _wrap_UintArray_getitem},
    { "UintArray_setitem", _wrap_UintArray_setitem},
    { "new_UcharArray", _wrap_new_UcharArray},
    { "delete_UcharArray", _wrap_delete_UcharArray},
    { "UcharArray_getitem", _wrap_UcharArray_getitem},
    { "UcharArray_setitem", _wrap_UcharArray_setitem},
    { "new_CharPArray", _wrap_new_CharPArray},
    { "delete_CharPArray", _wrap_delete_CharPArray},
    { "CharPArray_getitem", _wrap_CharPArray_getitem},
    { "CharPArray_setitem", _wrap_CharPArray_setitem},
    { "new_ImDrawVertArray", _wrap_new_ImDrawVertArray},
    { "delete_ImDrawVertArray", _wrap_delete_ImDrawVertArray},
    { "ImDrawVertArray_getitem", _wrap_ImDrawVertArray_getitem},
    { "ImDrawVertArray_setitem", _wrap_ImDrawVertArray_setitem},
    { "new_ImFontGlyphArray", _wrap_new_ImFontGlyphArray},
    { "delete_ImFontGlyphArray", _wrap_delete_ImFontGlyphArray},
    { "ImFontGlyphArray_getitem", _wrap_ImFontGlyphArray_getitem},
    { "ImFontGlyphArray_setitem", _wrap_ImFontGlyphArray_setitem},
    { "new_ImColorArray", _wrap_new_ImColorArray},
    { "delete_ImColorArray", _wrap_delete_ImColorArray},
    { "ImColorArray_getitem", _wrap_ImColorArray_getitem},
    { "ImColorArray_setitem", _wrap_ImColorArray_setitem},
    { "new_ImGuiStorageArray", _wrap_new_ImGuiStorageArray},
    { "delete_ImGuiStorageArray", _wrap_delete_ImGuiStorageArray},
    { "ImGuiStorageArray_getitem", _wrap_ImGuiStorageArray_getitem},
    { "ImGuiStorageArray_setitem", _wrap_ImGuiStorageArray_setitem},
    { "new_ImGuiViewportArray", _wrap_new_ImGuiViewportArray},
    { "delete_ImGuiViewportArray", _wrap_delete_ImGuiViewportArray},
    { "ImGuiViewportArray_getitem", _wrap_ImGuiViewportArray_getitem},
    { "ImGuiViewportArray_setitem", _wrap_ImGuiViewportArray_setitem},
    { "_SWIGExtra_IMGUI_CHECKVERSION", _wrap__SWIGExtra_IMGUI_CHECKVERSION},
    { "ImVec2AsFloatP", _wrap_ImVec2AsFloatP},
    { "ImVec4AsFloatP", _wrap_ImVec4AsFloatP},
    { "FloatPAsImVec2", _wrap_FloatPAsImVec2},
    { "FloatPAsImVec4", _wrap_FloatPAsImVec4},
    { "CreateContext", _wrap_CreateContext},
    { "DestroyContext", _wrap_DestroyContext},
    { "GetCurrentContext", _wrap_GetCurrentContext},
    { "SetCurrentContext", _wrap_SetCurrentContext},
    { "GetIO", _wrap_GetIO},
    { "GetPlatformIO", _wrap_GetPlatformIO},
    { "GetStyle", _wrap_GetStyle},
    { "NewFrame", _wrap_NewFrame},
    { "EndFrame", _wrap_EndFrame},
    { "Render", _wrap_Render},
    { "GetDrawData", _wrap_GetDrawData},
    { "ShowDemoWindow_1", _wrap_ShowDemoWindow_1},
    { "ShowDemoWindow_0", _wrap_ShowDemoWindow_0},
    { "ShowMetricsWindow_1", _wrap_ShowMetricsWindow_1},
    { "ShowMetricsWindow_0", _wrap_ShowMetricsWindow_0},
    { "ShowDebugLogWindow", _wrap_ShowDebugLogWindow},
    { "ShowIDStackToolWindow", _wrap_ShowIDStackToolWindow},
    { "ShowAboutWindow_1", _wrap_ShowAboutWindow_1},
    { "ShowAboutWindow_0", _wrap_ShowAboutWindow_0},
    { "ShowStyleEditor", _wrap_ShowStyleEditor},
    { "ShowStyleSelector", _wrap_ShowStyleSelector},
    { "ShowFontSelector", _wrap_ShowFontSelector},
    { "ShowUserGuide", _wrap_ShowUserGuide},
    { "GetVersion", _wrap_GetVersion},
    { "StyleColorsDark", _wrap_StyleColorsDark},
    { "StyleColorsLight", _wrap_StyleColorsLight},
    { "StyleColorsClassic", _wrap_StyleColorsClassic},
    { "Begin_3", _wrap_Begin_3},
    { "Begin_2", _wrap_Begin_2},
    { "Begin_1", _wrap_Begin_1},
    { "End", _wrap_End},
    { "BeginChild", _wrap_BeginChild},
    { "EndChild", _wrap_EndChild},
    { "IsWindowAppearing", _wrap_IsWindowAppearing},
    { "IsWindowCollapsed", _wrap_IsWindowCollapsed},
    { "IsWindowFocused", _wrap_IsWindowFocused},
    { "IsWindowHovered", _wrap_IsWindowHovered},
    { "GetWindowDrawList", _wrap_GetWindowDrawList},
    { "GetWindowDpiScale", _wrap_GetWindowDpiScale},
    { "GetWindowPos", _wrap_GetWindowPos},
    { "GetWindowSize", _wrap_GetWindowSize},
    { "GetWindowWidth", _wrap_GetWindowWidth},
    { "GetWindowHeight", _wrap_GetWindowHeight},
    { "GetWindowViewport", _wrap_GetWindowViewport},
    { "SetNextWindowPos", _wrap_SetNextWindowPos},
    { "SetNextWindowSize", _wrap_SetNextWindowSize},
    { "SetNextWindowSizeConstraints", _wrap_SetNextWindowSizeConstraints},
    { "SetNextWindowContentSize", _wrap_SetNextWindowContentSize},
    { "SetNextWindowCollapsed", _wrap_SetNextWindowCollapsed},
    { "SetNextWindowFocus", _wrap_SetNextWindowFocus},
    { "SetNextWindowScroll", _wrap_SetNextWindowScroll},
    { "SetNextWindowBgAlpha", _wrap_SetNextWindowBgAlpha},
    { "SetNextWindowViewport", _wrap_SetNextWindowViewport},
    { "SetWindowFontScale", _wrap_SetWindowFontScale},
    { "SetWindowPos", _wrap_SetWindowPos},
    { "SetWindowSize", _wrap_SetWindowSize},
    { "SetWindowCollapsed", _wrap_SetWindowCollapsed},
    { "SetWindowFocus", _wrap_SetWindowFocus},
    { "GetScrollX", _wrap_GetScrollX},
    { "GetScrollY", _wrap_GetScrollY},
    { "SetScrollX", _wrap_SetScrollX},
    { "SetScrollY", _wrap_SetScrollY},
    { "GetScrollMaxX", _wrap_GetScrollMaxX},
    { "GetScrollMaxY", _wrap_GetScrollMaxY},
    { "SetScrollHereX", _wrap_SetScrollHereX},
    { "SetScrollHereY", _wrap_SetScrollHereY},
    { "SetScrollFromPosX", _wrap_SetScrollFromPosX},
    { "SetScrollFromPosY", _wrap_SetScrollFromPosY},
    { "PushFont", _wrap_PushFont},
    { "PopFont", _wrap_PopFont},
    { "PushStyleColor", _wrap_PushStyleColor},
    { "PopStyleColor", _wrap_PopStyleColor},
    { "PushStyleVar", _wrap_PushStyleVar},
    { "PushStyleVarX", _wrap_PushStyleVarX},
    { "PushStyleVarY", _wrap_PushStyleVarY},
    { "PopStyleVar", _wrap_PopStyleVar},
    { "PushItemFlag", _wrap_PushItemFlag},
    { "PopItemFlag", _wrap_PopItemFlag},
    { "PushItemWidth", _wrap_PushItemWidth},
    { "PopItemWidth", _wrap_PopItemWidth},
    { "SetNextItemWidth", _wrap_SetNextItemWidth},
    { "CalcItemWidth", _wrap_CalcItemWidth},
    { "PushTextWrapPos", _wrap_PushTextWrapPos},
    { "PopTextWrapPos", _wrap_PopTextWrapPos},
    { "GetFont", _wrap_GetFont},
    { "GetFontSize", _wrap_GetFontSize},
    { "GetFontTexUvWhitePixel", _wrap_GetFontTexUvWhitePixel},
    { "GetColorU32", _wrap_GetColorU32},
    { "GetStyleColorVec4", _wrap_GetStyleColorVec4},
    { "GetCursorScreenPos", _wrap_GetCursorScreenPos},
    { "SetCursorScreenPos", _wrap_SetCursorScreenPos},
    { "GetContentRegionAvail", _wrap_GetContentRegionAvail},
    { "GetCursorPos", _wrap_GetCursorPos},
    { "GetCursorPosX", _wrap_GetCursorPosX},
    { "GetCursorPosY", _wrap_GetCursorPosY},
    { "SetCursorPos", _wrap_SetCursorPos},
    { "SetCursorPosX", _wrap_SetCursorPosX},
    { "SetCursorPosY", _wrap_SetCursorPosY},
    { "GetCursorStartPos", _wrap_GetCursorStartPos},
    { "Separator", _wrap_Separator},
    { "SameLine", _wrap_SameLine},
    { "NewLine", _wrap_NewLine},
    { "Spacing", _wrap_Spacing},
    { "Dummy", _wrap_Dummy},
    { "Indent", _wrap_Indent},
    { "Unindent", _wrap_Unindent},
    { "BeginGroup", _wrap_BeginGroup},
    { "EndGroup", _wrap_EndGroup},
    { "AlignTextToFramePadding", _wrap_AlignTextToFramePadding},
    { "GetTextLineHeight", _wrap_GetTextLineHeight},
    { "GetTextLineHeightWithSpacing", _wrap_GetTextLineHeightWithSpacing},
    { "GetFrameHeight", _wrap_GetFrameHeight},
    { "GetFrameHeightWithSpacing", _wrap_GetFrameHeightWithSpacing},
    { "PushID", _wrap_PushID},
    { "PopID", _wrap_PopID},
    { "GetID", _wrap_GetID},
    { "TextUnformatted", _wrap_TextUnformatted},
    { "Text", _wrap_Text},
    { "TextV", _wrap_TextV},
    { "TextColored", _wrap_TextColored},
    { "TextColoredV", _wrap_TextColoredV},
    { "TextDisabled", _wrap_TextDisabled},
    { "TextDisabledV", _wrap_TextDisabledV},
    { "TextWrapped", _wrap_TextWrapped},
    { "TextWrappedV", _wrap_TextWrappedV},
    { "LabelText", _wrap_LabelText},
    { "LabelTextV", _wrap_LabelTextV},
    { "BulletText", _wrap_BulletText},
    { "BulletTextV", _wrap_BulletTextV},
    { "SeparatorText", _wrap_SeparatorText},
    { "Button", _wrap_Button},
    { "SmallButton", _wrap_SmallButton},
    { "InvisibleButton", _wrap_InvisibleButton},
    { "ArrowButton", _wrap_ArrowButton},
    { "Checkbox", _wrap_Checkbox},
    { "CheckboxFlags", _wrap_CheckboxFlags},
    { "RadioButton", _wrap_RadioButton},
    { "RadioButton_shortcut", _wrap_RadioButton_shortcut},
    { "ProgressBar", _wrap_ProgressBar},
    { "Bullet", _wrap_Bullet},
    { "TextLink", _wrap_TextLink},
    { "TextLinkOpenURL", _wrap_TextLinkOpenURL},
    { "Image", _wrap_Image},
    { "ImageButton", _wrap_ImageButton},
    { "BeginCombo", _wrap_BeginCombo},
    { "EndCombo", _wrap_EndCombo},
    { "Combo_itemsSeperatedByZeros", _wrap_Combo_itemsSeperatedByZeros},
    { "Combo", _wrap_Combo},
    { "DragFloat", _wrap_DragFloat},
    { "DragFloat2", _wrap_DragFloat2},
    { "DragFloat3", _wrap_DragFloat3},
    { "DragFloat4", _wrap_DragFloat4},
    { "DragFloatRange2", _wrap_DragFloatRange2},
    { "DragInt", _wrap_DragInt},
    { "DragInt2", _wrap_DragInt2},
    { "DragInt3", _wrap_DragInt3},
    { "DragInt4", _wrap_DragInt4},
    { "DragIntRange2", _wrap_DragIntRange2},
    { "DragScalar", _wrap_DragScalar},
    { "DragScalarN", _wrap_DragScalarN},
    { "SliderFloat", _wrap_SliderFloat},
    { "SliderFloat2", _wrap_SliderFloat2},
    { "SliderFloat3", _wrap_SliderFloat3},
    { "SliderFloat4", _wrap_SliderFloat4},
    { "SliderAngle", _wrap_SliderAngle},
    { "SliderInt", _wrap_SliderInt},
    { "SliderInt2", _wrap_SliderInt2},
    { "SliderInt3", _wrap_SliderInt3},
    { "SliderInt4", _wrap_SliderInt4},
    { "SliderScalar", _wrap_SliderScalar},
    { "SliderScalarN", _wrap_SliderScalarN},
    { "VSliderFloat", _wrap_VSliderFloat},
    { "VSliderInt", _wrap_VSliderInt},
    { "VSliderScalar", _wrap_VSliderScalar},
    { "InputText", _wrap_InputText},
    { "InputTextMultiline", _wrap_InputTextMultiline},
    { "InputTextWithHint", _wrap_InputTextWithHint},
    { "InputFloat", _wrap_InputFloat},
    { "InputFloat2", _wrap_InputFloat2},
    { "InputFloat3", _wrap_InputFloat3},
    { "InputFloat4", _wrap_InputFloat4},
    { "InputInt", _wrap_InputInt},
    { "InputInt2", _wrap_InputInt2},
    { "InputInt3", _wrap_InputInt3},
    { "InputInt4", _wrap_InputInt4},
    { "InputDouble", _wrap_InputDouble},
    { "InputScalar", _wrap_InputScalar},
    { "InputScalarN", _wrap_InputScalarN},
    { "ColorEdit3", _wrap_ColorEdit3},
    { "ColorEdit4", _wrap_ColorEdit4},
    { "ColorPicker3", _wrap_ColorPicker3},
    { "ColorPicker4", _wrap_ColorPicker4},
    { "ColorButton", _wrap_ColorButton},
    { "SetColorEditOptions", _wrap_SetColorEditOptions},
    { "TreeNode", _wrap_TreeNode},
    { "TreeNodeV", _wrap_TreeNodeV},
    { "TreeNodeEx", _wrap_TreeNodeEx},
    { "TreeNodeExV", _wrap_TreeNodeExV},
    { "TreePush", _wrap_TreePush},
    { "TreePop", _wrap_TreePop},
    { "GetTreeNodeToLabelSpacing", _wrap_GetTreeNodeToLabelSpacing},
    { "CollapsingHeader_shortcut", _wrap_CollapsingHeader_shortcut},
    { "CollapsingHeader", _wrap_CollapsingHeader},
    { "SetNextItemOpen", _wrap_SetNextItemOpen},
    { "SetNextItemStorageID", _wrap_SetNextItemStorageID},
    { "Selectable", _wrap_Selectable},
    { "BeginMultiSelect", _wrap_BeginMultiSelect},
    { "EndMultiSelect", _wrap_EndMultiSelect},
    { "SetNextItemSelectionUserData", _wrap_SetNextItemSelectionUserData},
    { "IsItemToggledSelection", _wrap_IsItemToggledSelection},
    { "BeginListBox", _wrap_BeginListBox},
    { "EndListBox", _wrap_EndListBox},
    { "ListBox", _wrap_ListBox},
    { "PlotLines", _wrap_PlotLines},
    { "PlotHistogram", _wrap_PlotHistogram},
    { "Value", _wrap_Value},
    { "BeginMenuBar", _wrap_BeginMenuBar},
    { "EndMenuBar", _wrap_EndMenuBar},
    { "BeginMainMenuBar", _wrap_BeginMainMenuBar},
    { "EndMainMenuBar", _wrap_EndMainMenuBar},
    { "BeginMenu", _wrap_BeginMenu},
    { "EndMenu", _wrap_EndMenu},
    { "MenuItem", _wrap_MenuItem},
    { "BeginTooltip", _wrap_BeginTooltip},
    { "EndTooltip", _wrap_EndTooltip},
    { "SetTooltip", _wrap_SetTooltip},
    { "SetTooltipV", _wrap_SetTooltipV},
    { "BeginItemTooltip", _wrap_BeginItemTooltip},
    { "SetItemTooltip", _wrap_SetItemTooltip},
    { "SetItemTooltipV", _wrap_SetItemTooltipV},
    { "BeginPopup", _wrap_BeginPopup},
    { "BeginPopupModal_3", _wrap_BeginPopupModal_3},
    { "BeginPopupModal_2", _wrap_BeginPopupModal_2},
    { "BeginPopupModal_1", _wrap_BeginPopupModal_1},
    { "EndPopup", _wrap_EndPopup},
    { "OpenPopup", _wrap_OpenPopup},
    { "OpenPopupOnItemClick", _wrap_OpenPopupOnItemClick},
    { "CloseCurrentPopup", _wrap_CloseCurrentPopup},
    { "BeginPopupContextItem", _wrap_BeginPopupContextItem},
    { "BeginPopupContextWindow", _wrap_BeginPopupContextWindow},
    { "BeginPopupContextVoid", _wrap_BeginPopupContextVoid},
    { "IsPopupOpen", _wrap_IsPopupOpen},
    { "BeginTable", _wrap_BeginTable},
    { "EndTable", _wrap_EndTable},
    { "TableNextRow", _wrap_TableNextRow},
    { "TableNextColumn", _wrap_TableNextColumn},
    { "TableSetColumnIndex", _wrap_TableSetColumnIndex},
    { "TableSetupColumn", _wrap_TableSetupColumn},
    { "TableSetupScrollFreeze", _wrap_TableSetupScrollFreeze},
    { "TableHeader", _wrap_TableHeader},
    { "TableHeadersRow", _wrap_TableHeadersRow},
    { "TableAngledHeadersRow", _wrap_TableAngledHeadersRow},
    { "TableGetSortSpecs", _wrap_TableGetSortSpecs},
    { "TableGetColumnCount", _wrap_TableGetColumnCount},
    { "TableGetColumnIndex", _wrap_TableGetColumnIndex},
    { "TableGetRowIndex", _wrap_TableGetRowIndex},
    { "TableGetColumnName", _wrap_TableGetColumnName},
    { "TableGetColumnFlags", _wrap_TableGetColumnFlags},
    { "TableSetColumnEnabled", _wrap_TableSetColumnEnabled},
    { "TableGetHoveredColumn", _wrap_TableGetHoveredColumn},
    { "TableSetBgColor", _wrap_TableSetBgColor},
    { "Columns", _wrap_Columns},
    { "NextColumn", _wrap_NextColumn},
    { "GetColumnIndex", _wrap_GetColumnIndex},
    { "GetColumnWidth", _wrap_GetColumnWidth},
    { "SetColumnWidth", _wrap_SetColumnWidth},
    { "GetColumnOffset", _wrap_GetColumnOffset},
    { "SetColumnOffset", _wrap_SetColumnOffset},
    { "GetColumnsCount", _wrap_GetColumnsCount},
    { "BeginTabBar", _wrap_BeginTabBar},
    { "EndTabBar", _wrap_EndTabBar},
    { "BeginTabItem_3", _wrap_BeginTabItem_3},
    { "BeginTabItem_2", _wrap_BeginTabItem_2},
    { "BeginTabItem_1", _wrap_BeginTabItem_1},
    { "EndTabItem", _wrap_EndTabItem},
    { "TabItemButton", _wrap_TabItemButton},
    { "SetTabItemClosed", _wrap_SetTabItemClosed},
    { "DockSpace", _wrap_DockSpace},
    { "DockSpaceOverViewport", _wrap_DockSpaceOverViewport},
    { "SetNextWindowDockID", _wrap_SetNextWindowDockID},
    { "SetNextWindowClass", _wrap_SetNextWindowClass},
    { "GetWindowDockID", _wrap_GetWindowDockID},
    { "IsWindowDocked", _wrap_IsWindowDocked},
    { "LogToTTY", _wrap_LogToTTY},
    { "LogToFile", _wrap_LogToFile},
    { "LogToClipboard", _wrap_LogToClipboard},
    { "LogFinish", _wrap_LogFinish},
    { "LogButtons", _wrap_LogButtons},
    { "LogText", _wrap_LogText},
    { "LogTextV", _wrap_LogTextV},
    { "BeginDragDropSource", _wrap_BeginDragDropSource},
    { "SetDragDropPayload", _wrap_SetDragDropPayload},
    { "EndDragDropSource", _wrap_EndDragDropSource},
    { "BeginDragDropTarget", _wrap_BeginDragDropTarget},
    { "AcceptDragDropPayload", _wrap_AcceptDragDropPayload},
    { "EndDragDropTarget", _wrap_EndDragDropTarget},
    { "GetDragDropPayload", _wrap_GetDragDropPayload},
    { "BeginDisabled", _wrap_BeginDisabled},
    { "EndDisabled", _wrap_EndDisabled},
    { "PushClipRect", _wrap_PushClipRect},
    { "PopClipRect", _wrap_PopClipRect},
    { "SetItemDefaultFocus", _wrap_SetItemDefaultFocus},
    { "SetKeyboardFocusHere", _wrap_SetKeyboardFocusHere},
    { "SetNavCursorVisible", _wrap_SetNavCursorVisible},
    { "SetNextItemAllowOverlap", _wrap_SetNextItemAllowOverlap},
    { "IsItemHovered", _wrap_IsItemHovered},
    { "IsItemActive", _wrap_IsItemActive},
    { "IsItemFocused", _wrap_IsItemFocused},
    { "IsItemClicked", _wrap_IsItemClicked},
    { "IsItemVisible", _wrap_IsItemVisible},
    { "IsItemEdited", _wrap_IsItemEdited},
    { "IsItemActivated", _wrap_IsItemActivated},
    { "IsItemDeactivated", _wrap_IsItemDeactivated},
    { "IsItemDeactivatedAfterEdit", _wrap_IsItemDeactivatedAfterEdit},
    { "IsItemToggledOpen", _wrap_IsItemToggledOpen},
    { "IsAnyItemHovered", _wrap_IsAnyItemHovered},
    { "IsAnyItemActive", _wrap_IsAnyItemActive},
    { "IsAnyItemFocused", _wrap_IsAnyItemFocused},
    { "GetItemID", _wrap_GetItemID},
    { "GetItemRectMin", _wrap_GetItemRectMin},
    { "GetItemRectMax", _wrap_GetItemRectMax},
    { "GetItemRectSize", _wrap_GetItemRectSize},
    { "GetMainViewport", _wrap_GetMainViewport},
    { "GetBackgroundDrawList", _wrap_GetBackgroundDrawList},
    { "GetForegroundDrawList", _wrap_GetForegroundDrawList},
    { "IsRectVisible", _wrap_IsRectVisible},
    { "GetTime", _wrap_GetTime},
    { "GetFrameCount", _wrap_GetFrameCount},
    { "GetDrawListSharedData", _wrap_GetDrawListSharedData},
    { "GetStyleColorName", _wrap_GetStyleColorName},
    { "SetStateStorage", _wrap_SetStateStorage},
    { "GetStateStorage", _wrap_GetStateStorage},
    { "CalcTextSize", _wrap_CalcTextSize},
    { "ColorConvertU32ToFloat4", _wrap_ColorConvertU32ToFloat4},
    { "ColorConvertFloat4ToU32", _wrap_ColorConvertFloat4ToU32},
    { "ColorConvertRGBtoHSV", _wrap_ColorConvertRGBtoHSV},
    { "ColorConvertHSVtoRGB", _wrap_ColorConvertHSVtoRGB},
    { "IsKeyDown", _wrap_IsKeyDown},
    { "IsKeyPressed", _wrap_IsKeyPressed},
    { "IsKeyReleased", _wrap_IsKeyReleased},
    { "IsKeyChordPressed", _wrap_IsKeyChordPressed},
    { "GetKeyPressedAmount", _wrap_GetKeyPressedAmount},
    { "GetKeyName", _wrap_GetKeyName},
    { "SetNextFrameWantCaptureKeyboard", _wrap_SetNextFrameWantCaptureKeyboard},
    { "Shortcut", _wrap_Shortcut},
    { "SetNextItemShortcut", _wrap_SetNextItemShortcut},
    { "SetItemKeyOwner", _wrap_SetItemKeyOwner},
    { "IsMouseDown", _wrap_IsMouseDown},
    { "IsMouseClicked", _wrap_IsMouseClicked},
    { "IsMouseReleased", _wrap_IsMouseReleased},
    { "IsMouseDoubleClicked", _wrap_IsMouseDoubleClicked},
    { "GetMouseClickedCount", _wrap_GetMouseClickedCount},
    { "IsMouseHoveringRect", _wrap_IsMouseHoveringRect},
    { "IsMousePosValid", _wrap_IsMousePosValid},
    { "IsAnyMouseDown", _wrap_IsAnyMouseDown},
    { "GetMousePos", _wrap_GetMousePos},
    { "GetMousePosOnOpeningCurrentPopup", _wrap_GetMousePosOnOpeningCurrentPopup},
    { "IsMouseDragging", _wrap_IsMouseDragging},
    { "GetMouseDragDelta", _wrap_GetMouseDragDelta},
    { "ResetMouseDragDelta", _wrap_ResetMouseDragDelta},
    { "GetMouseCursor", _wrap_GetMouseCursor},
    { "SetMouseCursor", _wrap_SetMouseCursor},
    { "SetNextFrameWantCaptureMouse", _wrap_SetNextFrameWantCaptureMouse},
    { "GetClipboardText", _wrap_GetClipboardText},
    { "SetClipboardText", _wrap_SetClipboardText},
    { "LoadIniSettingsFromDisk", _wrap_LoadIniSettingsFromDisk},
    { "LoadIniSettingsFromMemory", _wrap_LoadIniSettingsFromMemory},
    { "SaveIniSettingsToDisk", _wrap_SaveIniSettingsToDisk},
    { "SaveIniSettingsToMemory", _wrap_SaveIniSettingsToMemory},
    { "DebugTextEncoding", _wrap_DebugTextEncoding},
    { "DebugFlashStyleColor", _wrap_DebugFlashStyleColor},
    { "DebugStartItemPicker", _wrap_DebugStartItemPicker},
    { "DebugCheckVersionAndDataLayout", _wrap_DebugCheckVersionAndDataLayout},
    { "DebugLog", _wrap_DebugLog},
    { "DebugLogV", _wrap_DebugLogV},
    { "SetAllocatorFunctions", _wrap_SetAllocatorFunctions},
    { "GetAllocatorFunctions", _wrap_GetAllocatorFunctions},
    { "MemAlloc", _wrap_MemAlloc},
    { "MemFree", _wrap_MemFree},
    { "UpdatePlatformWindows", _wrap_UpdatePlatformWindows},
    { "RenderPlatformWindowsDefault", _wrap_RenderPlatformWindowsDefault},
    { "DestroyPlatformWindows", _wrap_DestroyPlatformWindows},
    { "FindViewportByID", _wrap_FindViewportByID},
    { "FindViewportByPlatformHandle", _wrap_FindViewportByPlatformHandle},
    { "ImColor_HSV", _wrap_ImColor_HSV},
    { "PushButtonRepeat", _wrap_PushButtonRepeat},
    { "PopButtonRepeat", _wrap_PopButtonRepeat},
    { "PushTabStop", _wrap_PushTabStop},
    { "PopTabStop", _wrap_PopTabStop},
    { "GetContentRegionMax", _wrap_GetContentRegionMax},
    { "GetWindowContentRegionMin", _wrap_GetWindowContentRegionMin},
    { "GetWindowContentRegionMax", _wrap_GetWindowContentRegionMax},
    { "BeginChildFrame", _wrap_BeginChildFrame},
    { "EndChildFrame", _wrap_EndChildFrame},
    { "ShowStackToolWindow_1", _wrap_ShowStackToolWindow_1},
    { "ShowStackToolWindow_0", _wrap_ShowStackToolWindow_0},
    { "Combo_itemsGetter", _wrap_Combo_itemsGetter},
    { "ListBox_itemsGetter", _wrap_ListBox_itemsGetter},
    { "SetItemAllowOverlap", _wrap_SetItemAllowOverlap},
    { "PushAllowKeyboardFocus", _wrap_PushAllowKeyboardFocus},
    { "PopAllowKeyboardFocus", _wrap_PopAllowKeyboardFocus},
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_string,
&_wrap_class_ofxImGuiContext,
&_wrap_class_Gui,
&_wrap_class_ImVec2,
&_wrap_class_ImVec4,
&_wrap_class_ImGuiTableSortSpecs,
&_wrap_class_ImGuiTableColumnSortSpecs,
&_wrap_class_ImNewWrapper,
&_wrap_class_ImGuiStyle,
&_wrap_class_ImGuiKeyData,
&_wrap_class_ImGuiIO,
&_wrap_class_ImGuiInputTextCallbackData,
&_wrap_class_ImGuiSizeCallbackData,
&_wrap_class_ImGuiWindowClass,
&_wrap_class_ImGuiPayload,
&_wrap_class_ImGuiOnceUponAFrame,
&_wrap_class_ImGuiTextFilter,
&_wrap_class_ImGuiTextBuffer,
&_wrap_class_ImGuiStoragePair,
&_wrap_class_ImGuiStorage,
&_wrap_class_ImGuiListClipper,
&_wrap_class_ImColor,
&_wrap_class_ImGuiMultiSelectIO,
&_wrap_class_ImGuiSelectionRequest,
&_wrap_class_ImGuiSelectionBasicStorage,
&_wrap_class_ImGuiSelectionExternalStorage,
&_wrap_class_ImDrawCmd,
&_wrap_class_ImDrawVert,
&_wrap_class_ImDrawCmdHeader,
&_wrap_class_ImDrawChannel,
&_wrap_class_ImDrawListSplitter,
&_wrap_class_ImDrawList,
&_wrap_class_ImDrawData,
&_wrap_class_ImFontConfig,
&_wrap_class_ImFontGlyph,
&_wrap_class_ImFontGlyphRangesBuilder,
&_wrap_class_ImFontAtlasCustomRect,
&_wrap_class_ImFontAtlas,
&_wrap_class_ImFont,
&_wrap_class_ImGuiViewport,
&_wrap_class_ImGuiPlatformIO,
&_wrap_class_ImGuiPlatformMonitor,
&_wrap_class_ImGuiPlatformImeData,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "ImGui",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_BaseTheme = {"_p_BaseTheme", "BaseTheme *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GLuint = {"_p_GLuint", "GLuint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImColor = {"_p_ImColor", "ImColor *", 0, 0, (void*)&_wrap_class_ImColor, 0};
static swig_type_info _swigt__p_ImDrawChannel = {"_p_ImDrawChannel", "ImDrawChannel *", 0, 0, (void*)&_wrap_class_ImDrawChannel, 0};
static swig_type_info _swigt__p_ImDrawCmd = {"_p_ImDrawCmd", "ImDrawCmd *", 0, 0, (void*)&_wrap_class_ImDrawCmd, 0};
static swig_type_info _swigt__p_ImDrawCmdHeader = {"_p_ImDrawCmdHeader", "ImDrawCmdHeader *", 0, 0, (void*)&_wrap_class_ImDrawCmdHeader, 0};
static swig_type_info _swigt__p_ImDrawData = {"_p_ImDrawData", "ImDrawData *", 0, 0, (void*)&_wrap_class_ImDrawData, 0};
static swig_type_info _swigt__p_ImDrawList = {"_p_ImDrawList", "ImDrawList *", 0, 0, (void*)&_wrap_class_ImDrawList, 0};
static swig_type_info _swigt__p_ImDrawListSharedData = {"_p_ImDrawListSharedData", "ImDrawListSharedData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImDrawListSplitter = {"_p_ImDrawListSplitter", "ImDrawListSplitter *", 0, 0, (void*)&_wrap_class_ImDrawListSplitter, 0};
static swig_type_info _swigt__p_ImDrawVert = {"_p_ImDrawVert", "ImDrawVert *", 0, 0, (void*)&_wrap_class_ImDrawVert, 0};
static swig_type_info _swigt__p_ImFont = {"_p_ImFont", "ImFont *", 0, 0, (void*)&_wrap_class_ImFont, 0};
static swig_type_info _swigt__p_ImFontAtlas = {"_p_ImFontAtlas", "ImFontAtlas *", 0, 0, (void*)&_wrap_class_ImFontAtlas, 0};
static swig_type_info _swigt__p_ImFontAtlasCustomRect = {"_p_ImFontAtlasCustomRect", "ImFontAtlasCustomRect *", 0, 0, (void*)&_wrap_class_ImFontAtlasCustomRect, 0};
static swig_type_info _swigt__p_ImFontBuilderIO = {"_p_ImFontBuilderIO", "ImFontBuilderIO *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImFontConfig = {"_p_ImFontConfig", "ImFontConfig *", 0, 0, (void*)&_wrap_class_ImFontConfig, 0};
static swig_type_info _swigt__p_ImFontGlyph = {"_p_ImFontGlyph", "ImFontGlyph *", 0, 0, (void*)&_wrap_class_ImFontGlyph, 0};
static swig_type_info _swigt__p_ImFontGlyphRangesBuilder = {"_p_ImFontGlyphRangesBuilder", "ImFontGlyphRangesBuilder *", 0, 0, (void*)&_wrap_class_ImFontGlyphRangesBuilder, 0};
static swig_type_info _swigt__p_ImGuiContext = {"_p_ImGuiContext", "ImGuiContext *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImGuiIO = {"_p_ImGuiIO", "ImGuiIO *", 0, 0, (void*)&_wrap_class_ImGuiIO, 0};
static swig_type_info _swigt__p_ImGuiInputTextCallbackData = {"_p_ImGuiInputTextCallbackData", "ImGuiInputTextCallbackData *", 0, 0, (void*)&_wrap_class_ImGuiInputTextCallbackData, 0};
static swig_type_info _swigt__p_ImGuiKeyData = {"_p_ImGuiKeyData", "ImGuiKeyData *", 0, 0, (void*)&_wrap_class_ImGuiKeyData, 0};
static swig_type_info _swigt__p_ImGuiListClipper = {"_p_ImGuiListClipper", "ImGuiListClipper *", 0, 0, (void*)&_wrap_class_ImGuiListClipper, 0};
static swig_type_info _swigt__p_ImGuiMultiSelectIO = {"_p_ImGuiMultiSelectIO", "ImGuiMultiSelectIO *", 0, 0, (void*)&_wrap_class_ImGuiMultiSelectIO, 0};
static swig_type_info _swigt__p_ImGuiOnceUponAFrame = {"_p_ImGuiOnceUponAFrame", "ImGuiOnceUponAFrame *", 0, 0, (void*)&_wrap_class_ImGuiOnceUponAFrame, 0};
static swig_type_info _swigt__p_ImGuiPayload = {"_p_ImGuiPayload", "ImGuiPayload *", 0, 0, (void*)&_wrap_class_ImGuiPayload, 0};
static swig_type_info _swigt__p_ImGuiPlatformIO = {"_p_ImGuiPlatformIO", "ImGuiPlatformIO *", 0, 0, (void*)&_wrap_class_ImGuiPlatformIO, 0};
static swig_type_info _swigt__p_ImGuiPlatformImeData = {"_p_ImGuiPlatformImeData", "ImGuiPlatformImeData *", 0, 0, (void*)&_wrap_class_ImGuiPlatformImeData, 0};
static swig_type_info _swigt__p_ImGuiPlatformMonitor = {"_p_ImGuiPlatformMonitor", "ImGuiPlatformMonitor *", 0, 0, (void*)&_wrap_class_ImGuiPlatformMonitor, 0};
static swig_type_info _swigt__p_ImGuiSelectionBasicStorage = {"_p_ImGuiSelectionBasicStorage", "ImGuiSelectionBasicStorage *", 0, 0, (void*)&_wrap_class_ImGuiSelectionBasicStorage, 0};
static swig_type_info _swigt__p_ImGuiSelectionExternalStorage = {"_p_ImGuiSelectionExternalStorage", "ImGuiSelectionExternalStorage *", 0, 0, (void*)&_wrap_class_ImGuiSelectionExternalStorage, 0};
static swig_type_info _swigt__p_ImGuiSelectionRequest = {"_p_ImGuiSelectionRequest", "ImGuiSelectionRequest *", 0, 0, (void*)&_wrap_class_ImGuiSelectionRequest, 0};
static swig_type_info _swigt__p_ImGuiSizeCallbackData = {"_p_ImGuiSizeCallbackData", "ImGuiSizeCallbackData *", 0, 0, (void*)&_wrap_class_ImGuiSizeCallbackData, 0};
static swig_type_info _swigt__p_ImGuiStorage = {"_p_ImGuiStorage", "ImGuiStorage *", 0, 0, (void*)&_wrap_class_ImGuiStorage, 0};
static swig_type_info _swigt__p_ImGuiStoragePair = {"_p_ImGuiStoragePair", "ImGuiStoragePair *", 0, 0, (void*)&_wrap_class_ImGuiStoragePair, 0};
static swig_type_info _swigt__p_ImGuiStyle = {"_p_ImGuiStyle", "ImGuiStyle *", 0, 0, (void*)&_wrap_class_ImGuiStyle, 0};
static swig_type_info _swigt__p_ImGuiTableColumnSortSpecs = {"_p_ImGuiTableColumnSortSpecs", "ImGuiTableColumnSortSpecs *", 0, 0, (void*)&_wrap_class_ImGuiTableColumnSortSpecs, 0};
static swig_type_info _swigt__p_ImGuiTableSortSpecs = {"_p_ImGuiTableSortSpecs", "ImGuiTableSortSpecs *", 0, 0, (void*)&_wrap_class_ImGuiTableSortSpecs, 0};
static swig_type_info _swigt__p_ImGuiTextBuffer = {"_p_ImGuiTextBuffer", "ImGuiTextBuffer *", 0, 0, (void*)&_wrap_class_ImGuiTextBuffer, 0};
static swig_type_info _swigt__p_ImGuiTextFilter = {"_p_ImGuiTextFilter", "ImGuiTextFilter *", 0, 0, (void*)&_wrap_class_ImGuiTextFilter, 0};
static swig_type_info _swigt__p_ImGuiViewport = {"_p_ImGuiViewport", "ImGuiViewport *", 0, 0, (void*)&_wrap_class_ImGuiViewport, 0};
static swig_type_info _swigt__p_ImGuiWindowClass = {"_p_ImGuiWindowClass", "ImGuiWindowClass *", 0, 0, (void*)&_wrap_class_ImGuiWindowClass, 0};
static swig_type_info _swigt__p_ImNewWrapper = {"_p_ImNewWrapper", "ImNewWrapper *", 0, 0, (void*)&_wrap_class_ImNewWrapper, 0};
static swig_type_info _swigt__p_ImVec2 = {"_p_ImVec2", "ImVec2 *", 0, 0, (void*)&_wrap_class_ImVec2, 0};
static swig_type_info _swigt__p_ImVec4 = {"_p_ImVec4", "ImVec4 *", 0, 0, (void*)&_wrap_class_ImVec4, 0};
static swig_type_info _swigt__p_ImVectorT_ImDrawChannel_t = {"_p_ImVectorT_ImDrawChannel_t", "ImVector< ImDrawChannel > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_ImDrawCmd_t = {"_p_ImVectorT_ImDrawCmd_t", "ImVector< ImDrawCmd > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_ImDrawList_p_t = {"_p_ImVectorT_ImDrawList_p_t", "ImVector< ImDrawList * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_ImDrawVert_t = {"_p_ImVectorT_ImDrawVert_t", "ImVector< ImDrawVert > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_ImFontAtlasCustomRect_t = {"_p_ImVectorT_ImFontAtlasCustomRect_t", "ImVector< ImFontAtlasCustomRect > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_ImFontConfig_t = {"_p_ImVectorT_ImFontConfig_t", "ImVector< ImFontConfig > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_ImFontGlyph_t = {"_p_ImVectorT_ImFontGlyph_t", "ImVector< ImFontGlyph > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_ImFont_p_t = {"_p_ImVectorT_ImFont_p_t", "ImVector< ImFont * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_ImGuiPlatformMonitor_t = {"_p_ImVectorT_ImGuiPlatformMonitor_t", "ImVector< ImGuiPlatformMonitor > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_ImGuiSelectionRequest_t = {"_p_ImVectorT_ImGuiSelectionRequest_t", "ImVector< ImGuiSelectionRequest > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_ImGuiStoragePair_t = {"_p_ImVectorT_ImGuiStoragePair_t", "ImVector< ImGuiStoragePair > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_ImGuiTextFilter__ImGuiTextRange_t = {"_p_ImVectorT_ImGuiTextFilter__ImGuiTextRange_t", "ImVector< ImGuiTextFilter::ImGuiTextRange > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_ImGuiViewport_p_t = {"_p_ImVectorT_ImGuiViewport_p_t", "ImVector< ImGuiViewport * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_ImVec2_t = {"_p_ImVectorT_ImVec2_t", "ImVector< ImVec2 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_ImVec4_t = {"_p_ImVectorT_ImVec4_t", "ImVector< ImVec4 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_char_t = {"_p_ImVectorT_char_t", "ImVector< char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_float_t = {"_p_ImVectorT_float_t", "ImVector< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_int_t = {"_p_ImVectorT_int_t", "ImVector< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_ofIndexType_t = {"_p_ImVectorT_ofIndexType_t", "ImVector< ofIndexType > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_unsigned_char_t = {"_p_ImVectorT_unsigned_char_t", "ImVector< ImU8 > *|ImVector< unsigned char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_unsigned_int_t = {"_p_ImVectorT_unsigned_int_t", "ImVector< ImU32 > *|ImVector< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImVectorT_unsigned_short_t = {"_p_ImVectorT_unsigned_short_t", "ImVector< ImWchar > *|ImVector< unsigned short > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_ImGuiContext__p_char = {"_p_f_p_ImGuiContext__p_char", "char *(*)(ImGuiContext *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_ImGuiContext_p_ImGuiViewport_p_ImGuiPlatformImeData__void = {"_p_f_p_ImGuiContext_p_ImGuiViewport_p_ImGuiPlatformImeData__void", "void (*)(ImGuiContext *,ImGuiViewport *,ImGuiPlatformImeData *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_ImGuiContext_p_q_const__char__bool = {"_p_f_p_ImGuiContext_p_q_const__char__bool", "bool (*)(ImGuiContext *,char const *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_ImGuiContext_p_q_const__char__void = {"_p_f_p_ImGuiContext_p_q_const__char__void", "void (*)(ImGuiContext *,char const *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_ImGuiInputTextCallbackData__int = {"_p_f_p_ImGuiInputTextCallbackData__int", "ImGuiInputTextCallback|int (*)(ImGuiInputTextCallbackData *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_ImGuiSelectionBasicStorage_int__unsigned_int = {"_p_f_p_ImGuiSelectionBasicStorage_int__unsigned_int", "ImGuiID (*)(ImGuiSelectionBasicStorage *,int)|unsigned int (*)(ImGuiSelectionBasicStorage *,int)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_ImGuiSelectionExternalStorage_int_bool__void = {"_p_f_p_ImGuiSelectionExternalStorage_int_bool__void", "void (*)(ImGuiSelectionExternalStorage *,int,bool)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_ImGuiSizeCallbackData__void = {"_p_f_p_ImGuiSizeCallbackData__void", "ImGuiSizeCallback|void (*)(ImGuiSizeCallbackData *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_ImGuiViewport_ImVec2__void = {"_p_f_p_ImGuiViewport_ImVec2__void", "void (*)(ImGuiViewport *,ImVec2)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_ImGuiViewport__ImVec2 = {"_p_f_p_ImGuiViewport__ImVec2", "ImVec2 (*)(ImGuiViewport *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_ImGuiViewport__ImVec4 = {"_p_f_p_ImGuiViewport__ImVec4", "ImVec4 (*)(ImGuiViewport *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_ImGuiViewport__bool = {"_p_f_p_ImGuiViewport__bool", "bool (*)(ImGuiViewport *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_ImGuiViewport__float = {"_p_f_p_ImGuiViewport__float", "float (*)(ImGuiViewport *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_ImGuiViewport__void = {"_p_f_p_ImGuiViewport__void", "void (*)(ImGuiViewport *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_ImGuiViewport_float__void = {"_p_f_p_ImGuiViewport_float__void", "void (*)(ImGuiViewport *,float)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_ImGuiViewport_p_q_const__char__void = {"_p_f_p_ImGuiViewport_p_q_const__char__void", "void (*)(ImGuiViewport *,char const *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_ImGuiViewport_p_void__void = {"_p_f_p_ImGuiViewport_p_void__void", "void (*)(ImGuiViewport *,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_ImGuiViewport_unsigned_long_long_p_q_const__void_p_unsigned_long_long__int = {"_p_f_p_ImGuiViewport_unsigned_long_long_p_q_const__void_p_unsigned_long_long__int", "int (*)(ImGuiViewport *,ImU64,void const *,ImU64 *)|int (*)(ImGuiViewport *,unsigned long long,void const *,unsigned long long *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_q_const__ImDrawList_p_q_const__ImDrawCmd__void = {"_p_f_p_q_const__ImDrawList_p_q_const__ImDrawCmd__void", "ImDrawCallback|void (*)(ImDrawList const *,ImDrawCmd const *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void__p_char = {"_p_f_p_void__p_char", "char *(*)(void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void_int__float = {"_p_f_p_void_int__float", "float (*)(void *,int)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void_int__p_char = {"_p_f_p_void_int__p_char", "char *(*)(void *,int)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void_int_p_p_q_const__char__bool = {"_p_f_p_void_int_p_p_q_const__char__bool", "bool (*)(void *,int,char const **)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void_p_q_const__char__void = {"_p_f_p_void_p_q_const__char__void", "void (*)(void *,char const *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void_p_void__void = {"_p_f_p_void_p_void__void", "ImGuiMemFreeFunc|void (*)(void *,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_unsigned_int_p_void__p_void = {"_p_f_unsigned_int_p_void__p_void", "ImGuiMemAllocFunc|void *(*)(unsigned int,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_glm__vec4 = {"_p_glm__vec4", "glm::vec4 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "ImDrawFlags *|ImDrawListFlags *|ImFontAtlasFlags *|ImGuiBackendFlags *|ImGuiButtonFlags *|ImGuiChildFlags *|ImGuiCol *|ImGuiColorEditFlags *|ImGuiComboFlags *|ImGuiCond *|ImGuiConfigFlags *|ImGuiDataType *|ImGuiDockNodeFlags *|ImGuiDragDropFlags *|ImGuiFocusedFlags *|ImGuiHoveredFlags *|ImGuiInputFlags *|ImGuiInputTextFlags *|ImGuiItemFlags *|ImGuiKeyChord *|ImGuiMouseButton *|ImGuiMouseCursor *|ImGuiMultiSelectFlags *|ImGuiPopupFlags *|ImGuiSelectableFlags *|ImGuiSliderFlags *|ImGuiStyleVar *|ImGuiTabBarFlags *|ImGuiTabItemFlags *|ImGuiTableBgTarget *|ImGuiTableColumnFlags *|ImGuiTableFlags *|ImGuiTableRowFlags *|ImGuiTreeNodeFlags *|ImGuiViewportFlags *|ImGuiWindowFlags *|ImS32 *|int32_t *|int_fast16_t *|int_fast32_t *|int_least32_t *|intptr_t *|int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "ImGuiSelectionUserData *|ImS64 *|int64_t *|int_fast64_t *|int_least64_t *|intmax_t *|long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofColor = {"_p_ofColor", "ofColor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofEventArgs = {"_p_ofEventArgs", "ofEventArgs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofFloatColor = {"_p_ofFloatColor", "ofFloatColor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofImage = {"_p_ofImage", "ofImage *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofIndexType = {"_p_ofIndexType", "ofIndexType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofPixels = {"_p_ofPixels", "ofPixels *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofRectangle = {"_p_ofRectangle", "ofRectangle *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofTexture = {"_p_ofTexture", "ofTexture *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofVec2f = {"_p_ofVec2f", "ofVec2f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofVec3f = {"_p_ofVec3f", "ofVec3f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofVec4f = {"_p_ofVec4f", "ofVec4f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofxImGuiContext = {"_p_ofxImGuiContext", "ofxImGuiContext *", 0, 0, (void*)&_wrap_class_ofxImGuiContext, 0};
static swig_type_info _swigt__p_ofxImGui__Gui = {"_p_ofxImGui__Gui", "ofxImGui::Gui *", 0, 0, (void*)&_wrap_class_Gui, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "char **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_f_p_void_p_void__void = {"_p_p_f_p_void_p_void__void", "ImGuiMemFreeFunc *|void (**)(void *,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_f_unsigned_int_p_void__p_void = {"_p_p_f_unsigned_int_p_void__p_void", "ImGuiMemAllocFunc *|void *(**)(unsigned int,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_unsigned_char = {"_p_p_unsigned_char", "unsigned char **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_void = {"_p_p_void", "void **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "ImS16 *|int16_t *|int_least16_t *|short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "ImS8 *|int8_t *|int_fast8_t *|int_least8_t *|signed char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_ofAppBaseWindow_t = {"_p_std__shared_ptrT_ofAppBaseWindow_t", "std::shared_ptr< ofAppBaseWindow > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)&_wrap_class_string, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "ImU8 *|uint8_t *|uint_fast8_t *|uint_least8_t *|unsigned char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "ImGuiID *|ImU32 *|ImWchar32 *|size_t *|uint32_t *|uint_fast16_t *|uint_fast32_t *|uint_least32_t *|uintptr_t *|unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "ImU64 *|uint64_t *|uint_fast64_t *|uint_least64_t *|uintmax_t *|unsigned long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "ImU16 *|ImWchar *|ImWchar16 *|uint16_t *|uint_least16_t *|unsigned short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_va_list = {"_p_va_list", "va_list *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_BaseTheme,
  &_swigt__p_GLuint,
  &_swigt__p_ImColor,
  &_swigt__p_ImDrawChannel,
  &_swigt__p_ImDrawCmd,
  &_swigt__p_ImDrawCmdHeader,
  &_swigt__p_ImDrawData,
  &_swigt__p_ImDrawList,
  &_swigt__p_ImDrawListSharedData,
  &_swigt__p_ImDrawListSplitter,
  &_swigt__p_ImDrawVert,
  &_swigt__p_ImFont,
  &_swigt__p_ImFontAtlas,
  &_swigt__p_ImFontAtlasCustomRect,
  &_swigt__p_ImFontBuilderIO,
  &_swigt__p_ImFontConfig,
  &_swigt__p_ImFontGlyph,
  &_swigt__p_ImFontGlyphRangesBuilder,
  &_swigt__p_ImGuiContext,
  &_swigt__p_ImGuiIO,
  &_swigt__p_ImGuiInputTextCallbackData,
  &_swigt__p_ImGuiKeyData,
  &_swigt__p_ImGuiListClipper,
  &_swigt__p_ImGuiMultiSelectIO,
  &_swigt__p_ImGuiOnceUponAFrame,
  &_swigt__p_ImGuiPayload,
  &_swigt__p_ImGuiPlatformIO,
  &_swigt__p_ImGuiPlatformImeData,
  &_swigt__p_ImGuiPlatformMonitor,
  &_swigt__p_ImGuiSelectionBasicStorage,
  &_swigt__p_ImGuiSelectionExternalStorage,
  &_swigt__p_ImGuiSelectionRequest,
  &_swigt__p_ImGuiSizeCallbackData,
  &_swigt__p_ImGuiStorage,
  &_swigt__p_ImGuiStoragePair,
  &_swigt__p_ImGuiStyle,
  &_swigt__p_ImGuiTableColumnSortSpecs,
  &_swigt__p_ImGuiTableSortSpecs,
  &_swigt__p_ImGuiTextBuffer,
  &_swigt__p_ImGuiTextFilter,
  &_swigt__p_ImGuiViewport,
  &_swigt__p_ImGuiWindowClass,
  &_swigt__p_ImNewWrapper,
  &_swigt__p_ImVec2,
  &_swigt__p_ImVec4,
  &_swigt__p_ImVectorT_ImDrawChannel_t,
  &_swigt__p_ImVectorT_ImDrawCmd_t,
  &_swigt__p_ImVectorT_ImDrawList_p_t,
  &_swigt__p_ImVectorT_ImDrawVert_t,
  &_swigt__p_ImVectorT_ImFontAtlasCustomRect_t,
  &_swigt__p_ImVectorT_ImFontConfig_t,
  &_swigt__p_ImVectorT_ImFontGlyph_t,
  &_swigt__p_ImVectorT_ImFont_p_t,
  &_swigt__p_ImVectorT_ImGuiPlatformMonitor_t,
  &_swigt__p_ImVectorT_ImGuiSelectionRequest_t,
  &_swigt__p_ImVectorT_ImGuiStoragePair_t,
  &_swigt__p_ImVectorT_ImGuiTextFilter__ImGuiTextRange_t,
  &_swigt__p_ImVectorT_ImGuiViewport_p_t,
  &_swigt__p_ImVectorT_ImVec2_t,
  &_swigt__p_ImVectorT_ImVec4_t,
  &_swigt__p_ImVectorT_char_t,
  &_swigt__p_ImVectorT_float_t,
  &_swigt__p_ImVectorT_int_t,
  &_swigt__p_ImVectorT_ofIndexType_t,
  &_swigt__p_ImVectorT_unsigned_char_t,
  &_swigt__p_ImVectorT_unsigned_int_t,
  &_swigt__p_ImVectorT_unsigned_short_t,
  &_swigt__p_bool,
  &_swigt__p_char,
  &_swigt__p_double,
  &_swigt__p_f_p_ImGuiContext__p_char,
  &_swigt__p_f_p_ImGuiContext_p_ImGuiViewport_p_ImGuiPlatformImeData__void,
  &_swigt__p_f_p_ImGuiContext_p_q_const__char__bool,
  &_swigt__p_f_p_ImGuiContext_p_q_const__char__void,
  &_swigt__p_f_p_ImGuiInputTextCallbackData__int,
  &_swigt__p_f_p_ImGuiSelectionBasicStorage_int__unsigned_int,
  &_swigt__p_f_p_ImGuiSelectionExternalStorage_int_bool__void,
  &_swigt__p_f_p_ImGuiSizeCallbackData__void,
  &_swigt__p_f_p_ImGuiViewport_ImVec2__void,
  &_swigt__p_f_p_ImGuiViewport__ImVec2,
  &_swigt__p_f_p_ImGuiViewport__ImVec4,
  &_swigt__p_f_p_ImGuiViewport__bool,
  &_swigt__p_f_p_ImGuiViewport__float,
  &_swigt__p_f_p_ImGuiViewport__void,
  &_swigt__p_f_p_ImGuiViewport_float__void,
  &_swigt__p_f_p_ImGuiViewport_p_q_const__char__void,
  &_swigt__p_f_p_ImGuiViewport_p_void__void,
  &_swigt__p_f_p_ImGuiViewport_unsigned_long_long_p_q_const__void_p_unsigned_long_long__int,
  &_swigt__p_f_p_q_const__ImDrawList_p_q_const__ImDrawCmd__void,
  &_swigt__p_f_p_void__p_char,
  &_swigt__p_f_p_void_int__float,
  &_swigt__p_f_p_void_int__p_char,
  &_swigt__p_f_p_void_int_p_p_q_const__char__bool,
  &_swigt__p_f_p_void_p_q_const__char__void,
  &_swigt__p_f_p_void_p_void__void,
  &_swigt__p_f_unsigned_int_p_void__p_void,
  &_swigt__p_float,
  &_swigt__p_glm__vec4,
  &_swigt__p_int,
  &_swigt__p_long_long,
  &_swigt__p_ofColor,
  &_swigt__p_ofEventArgs,
  &_swigt__p_ofFloatColor,
  &_swigt__p_ofImage,
  &_swigt__p_ofIndexType,
  &_swigt__p_ofPixels,
  &_swigt__p_ofRectangle,
  &_swigt__p_ofTexture,
  &_swigt__p_ofVec2f,
  &_swigt__p_ofVec3f,
  &_swigt__p_ofVec4f,
  &_swigt__p_ofxImGuiContext,
  &_swigt__p_ofxImGui__Gui,
  &_swigt__p_p_char,
  &_swigt__p_p_f_p_void_p_void__void,
  &_swigt__p_p_f_unsigned_int_p_void__p_void,
  &_swigt__p_p_unsigned_char,
  &_swigt__p_p_void,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_std__shared_ptrT_ofAppBaseWindow_t,
  &_swigt__p_std__string,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_va_list,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_BaseTheme[] = {  {&_swigt__p_BaseTheme, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GLuint[] = {  {&_swigt__p_GLuint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImColor[] = {  {&_swigt__p_ImColor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImDrawChannel[] = {  {&_swigt__p_ImDrawChannel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImDrawCmd[] = {  {&_swigt__p_ImDrawCmd, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImDrawCmdHeader[] = {  {&_swigt__p_ImDrawCmdHeader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImDrawData[] = {  {&_swigt__p_ImDrawData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImDrawList[] = {  {&_swigt__p_ImDrawList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImDrawListSharedData[] = {  {&_swigt__p_ImDrawListSharedData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImDrawListSplitter[] = {  {&_swigt__p_ImDrawListSplitter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImDrawVert[] = {  {&_swigt__p_ImDrawVert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImFont[] = {  {&_swigt__p_ImFont, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImFontAtlas[] = {  {&_swigt__p_ImFontAtlas, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImFontAtlasCustomRect[] = {  {&_swigt__p_ImFontAtlasCustomRect, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImFontBuilderIO[] = {  {&_swigt__p_ImFontBuilderIO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImFontConfig[] = {  {&_swigt__p_ImFontConfig, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImFontGlyph[] = {  {&_swigt__p_ImFontGlyph, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImFontGlyphRangesBuilder[] = {  {&_swigt__p_ImFontGlyphRangesBuilder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiContext[] = {  {&_swigt__p_ImGuiContext, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiIO[] = {  {&_swigt__p_ImGuiIO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiInputTextCallbackData[] = {  {&_swigt__p_ImGuiInputTextCallbackData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiKeyData[] = {  {&_swigt__p_ImGuiKeyData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiListClipper[] = {  {&_swigt__p_ImGuiListClipper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiMultiSelectIO[] = {  {&_swigt__p_ImGuiMultiSelectIO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiOnceUponAFrame[] = {  {&_swigt__p_ImGuiOnceUponAFrame, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiPayload[] = {  {&_swigt__p_ImGuiPayload, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiPlatformIO[] = {  {&_swigt__p_ImGuiPlatformIO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiPlatformImeData[] = {  {&_swigt__p_ImGuiPlatformImeData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiPlatformMonitor[] = {  {&_swigt__p_ImGuiPlatformMonitor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiSelectionBasicStorage[] = {  {&_swigt__p_ImGuiSelectionBasicStorage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiSelectionExternalStorage[] = {  {&_swigt__p_ImGuiSelectionExternalStorage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiSelectionRequest[] = {  {&_swigt__p_ImGuiSelectionRequest, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiSizeCallbackData[] = {  {&_swigt__p_ImGuiSizeCallbackData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiStorage[] = {  {&_swigt__p_ImGuiStorage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiStoragePair[] = {  {&_swigt__p_ImGuiStoragePair, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiStyle[] = {  {&_swigt__p_ImGuiStyle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiTableColumnSortSpecs[] = {  {&_swigt__p_ImGuiTableColumnSortSpecs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiTableSortSpecs[] = {  {&_swigt__p_ImGuiTableSortSpecs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiTextBuffer[] = {  {&_swigt__p_ImGuiTextBuffer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiTextFilter[] = {  {&_swigt__p_ImGuiTextFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiViewport[] = {  {&_swigt__p_ImGuiViewport, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImGuiWindowClass[] = {  {&_swigt__p_ImGuiWindowClass, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImNewWrapper[] = {  {&_swigt__p_ImNewWrapper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVec2[] = {  {&_swigt__p_ImVec2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVec4[] = {  {&_swigt__p_ImVec4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_ImDrawChannel_t[] = {  {&_swigt__p_ImVectorT_ImDrawChannel_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_ImDrawCmd_t[] = {  {&_swigt__p_ImVectorT_ImDrawCmd_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_ImDrawList_p_t[] = {  {&_swigt__p_ImVectorT_ImDrawList_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_ImDrawVert_t[] = {  {&_swigt__p_ImVectorT_ImDrawVert_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_ImFontAtlasCustomRect_t[] = {  {&_swigt__p_ImVectorT_ImFontAtlasCustomRect_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_ImFontConfig_t[] = {  {&_swigt__p_ImVectorT_ImFontConfig_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_ImFontGlyph_t[] = {  {&_swigt__p_ImVectorT_ImFontGlyph_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_ImFont_p_t[] = {  {&_swigt__p_ImVectorT_ImFont_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_ImGuiPlatformMonitor_t[] = {  {&_swigt__p_ImVectorT_ImGuiPlatformMonitor_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_ImGuiSelectionRequest_t[] = {  {&_swigt__p_ImVectorT_ImGuiSelectionRequest_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_ImGuiStoragePair_t[] = {  {&_swigt__p_ImVectorT_ImGuiStoragePair_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_ImGuiTextFilter__ImGuiTextRange_t[] = {  {&_swigt__p_ImVectorT_ImGuiTextFilter__ImGuiTextRange_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_ImGuiViewport_p_t[] = {  {&_swigt__p_ImVectorT_ImGuiViewport_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_ImVec2_t[] = {  {&_swigt__p_ImVectorT_ImVec2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_ImVec4_t[] = {  {&_swigt__p_ImVectorT_ImVec4_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_char_t[] = {  {&_swigt__p_ImVectorT_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_float_t[] = {  {&_swigt__p_ImVectorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_int_t[] = {  {&_swigt__p_ImVectorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_ofIndexType_t[] = {  {&_swigt__p_ImVectorT_ofIndexType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_unsigned_char_t[] = {  {&_swigt__p_ImVectorT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_unsigned_int_t[] = {  {&_swigt__p_ImVectorT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImVectorT_unsigned_short_t[] = {  {&_swigt__p_ImVectorT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_ImGuiContext__p_char[] = {  {&_swigt__p_f_p_ImGuiContext__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_ImGuiContext_p_ImGuiViewport_p_ImGuiPlatformImeData__void[] = {  {&_swigt__p_f_p_ImGuiContext_p_ImGuiViewport_p_ImGuiPlatformImeData__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_ImGuiContext_p_q_const__char__bool[] = {  {&_swigt__p_f_p_ImGuiContext_p_q_const__char__bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_ImGuiContext_p_q_const__char__void[] = {  {&_swigt__p_f_p_ImGuiContext_p_q_const__char__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_ImGuiInputTextCallbackData__int[] = {  {&_swigt__p_f_p_ImGuiInputTextCallbackData__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_ImGuiSelectionBasicStorage_int__unsigned_int[] = {  {&_swigt__p_f_p_ImGuiSelectionBasicStorage_int__unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_ImGuiSelectionExternalStorage_int_bool__void[] = {  {&_swigt__p_f_p_ImGuiSelectionExternalStorage_int_bool__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_ImGuiSizeCallbackData__void[] = {  {&_swigt__p_f_p_ImGuiSizeCallbackData__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_ImGuiViewport_ImVec2__void[] = {  {&_swigt__p_f_p_ImGuiViewport_ImVec2__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_ImGuiViewport__ImVec2[] = {  {&_swigt__p_f_p_ImGuiViewport__ImVec2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_ImGuiViewport__ImVec4[] = {  {&_swigt__p_f_p_ImGuiViewport__ImVec4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_ImGuiViewport__bool[] = {  {&_swigt__p_f_p_ImGuiViewport__bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_ImGuiViewport__float[] = {  {&_swigt__p_f_p_ImGuiViewport__float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_ImGuiViewport__void[] = {  {&_swigt__p_f_p_ImGuiViewport__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_ImGuiViewport_float__void[] = {  {&_swigt__p_f_p_ImGuiViewport_float__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_ImGuiViewport_p_q_const__char__void[] = {  {&_swigt__p_f_p_ImGuiViewport_p_q_const__char__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_ImGuiViewport_p_void__void[] = {  {&_swigt__p_f_p_ImGuiViewport_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_ImGuiViewport_unsigned_long_long_p_q_const__void_p_unsigned_long_long__int[] = {  {&_swigt__p_f_p_ImGuiViewport_unsigned_long_long_p_q_const__void_p_unsigned_long_long__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_q_const__ImDrawList_p_q_const__ImDrawCmd__void[] = {  {&_swigt__p_f_p_q_const__ImDrawList_p_q_const__ImDrawCmd__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void__p_char[] = {  {&_swigt__p_f_p_void__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void_int__float[] = {  {&_swigt__p_f_p_void_int__float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void_int__p_char[] = {  {&_swigt__p_f_p_void_int__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void_int_p_p_q_const__char__bool[] = {  {&_swigt__p_f_p_void_int_p_p_q_const__char__bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void_p_q_const__char__void[] = {  {&_swigt__p_f_p_void_p_q_const__char__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void_p_void__void[] = {  {&_swigt__p_f_p_void_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_unsigned_int_p_void__p_void[] = {  {&_swigt__p_f_unsigned_int_p_void__p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_glm__vec4[] = {  {&_swigt__p_glm__vec4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofColor[] = {  {&_swigt__p_ofColor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofEventArgs[] = {  {&_swigt__p_ofEventArgs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofFloatColor[] = {  {&_swigt__p_ofFloatColor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofImage[] = {  {&_swigt__p_ofImage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofIndexType[] = {  {&_swigt__p_ofIndexType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofPixels[] = {  {&_swigt__p_ofPixels, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofRectangle[] = {  {&_swigt__p_ofRectangle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofTexture[] = {  {&_swigt__p_ofTexture, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofVec2f[] = {  {&_swigt__p_ofVec2f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofVec3f[] = {  {&_swigt__p_ofVec3f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofVec4f[] = {  {&_swigt__p_ofVec4f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxImGuiContext[] = {  {&_swigt__p_ofxImGuiContext, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxImGui__Gui[] = {  {&_swigt__p_ofxImGui__Gui, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_f_p_void_p_void__void[] = {  {&_swigt__p_p_f_p_void_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_f_unsigned_int_p_void__p_void[] = {  {&_swigt__p_p_f_unsigned_int_p_void__p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_unsigned_char[] = {  {&_swigt__p_p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_ofAppBaseWindow_t[] = {  {&_swigt__p_std__shared_ptrT_ofAppBaseWindow_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_va_list[] = {  {&_swigt__p_va_list, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_BaseTheme,
  _swigc__p_GLuint,
  _swigc__p_ImColor,
  _swigc__p_ImDrawChannel,
  _swigc__p_ImDrawCmd,
  _swigc__p_ImDrawCmdHeader,
  _swigc__p_ImDrawData,
  _swigc__p_ImDrawList,
  _swigc__p_ImDrawListSharedData,
  _swigc__p_ImDrawListSplitter,
  _swigc__p_ImDrawVert,
  _swigc__p_ImFont,
  _swigc__p_ImFontAtlas,
  _swigc__p_ImFontAtlasCustomRect,
  _swigc__p_ImFontBuilderIO,
  _swigc__p_ImFontConfig,
  _swigc__p_ImFontGlyph,
  _swigc__p_ImFontGlyphRangesBuilder,
  _swigc__p_ImGuiContext,
  _swigc__p_ImGuiIO,
  _swigc__p_ImGuiInputTextCallbackData,
  _swigc__p_ImGuiKeyData,
  _swigc__p_ImGuiListClipper,
  _swigc__p_ImGuiMultiSelectIO,
  _swigc__p_ImGuiOnceUponAFrame,
  _swigc__p_ImGuiPayload,
  _swigc__p_ImGuiPlatformIO,
  _swigc__p_ImGuiPlatformImeData,
  _swigc__p_ImGuiPlatformMonitor,
  _swigc__p_ImGuiSelectionBasicStorage,
  _swigc__p_ImGuiSelectionExternalStorage,
  _swigc__p_ImGuiSelectionRequest,
  _swigc__p_ImGuiSizeCallbackData,
  _swigc__p_ImGuiStorage,
  _swigc__p_ImGuiStoragePair,
  _swigc__p_ImGuiStyle,
  _swigc__p_ImGuiTableColumnSortSpecs,
  _swigc__p_ImGuiTableSortSpecs,
  _swigc__p_ImGuiTextBuffer,
  _swigc__p_ImGuiTextFilter,
  _swigc__p_ImGuiViewport,
  _swigc__p_ImGuiWindowClass,
  _swigc__p_ImNewWrapper,
  _swigc__p_ImVec2,
  _swigc__p_ImVec4,
  _swigc__p_ImVectorT_ImDrawChannel_t,
  _swigc__p_ImVectorT_ImDrawCmd_t,
  _swigc__p_ImVectorT_ImDrawList_p_t,
  _swigc__p_ImVectorT_ImDrawVert_t,
  _swigc__p_ImVectorT_ImFontAtlasCustomRect_t,
  _swigc__p_ImVectorT_ImFontConfig_t,
  _swigc__p_ImVectorT_ImFontGlyph_t,
  _swigc__p_ImVectorT_ImFont_p_t,
  _swigc__p_ImVectorT_ImGuiPlatformMonitor_t,
  _swigc__p_ImVectorT_ImGuiSelectionRequest_t,
  _swigc__p_ImVectorT_ImGuiStoragePair_t,
  _swigc__p_ImVectorT_ImGuiTextFilter__ImGuiTextRange_t,
  _swigc__p_ImVectorT_ImGuiViewport_p_t,
  _swigc__p_ImVectorT_ImVec2_t,
  _swigc__p_ImVectorT_ImVec4_t,
  _swigc__p_ImVectorT_char_t,
  _swigc__p_ImVectorT_float_t,
  _swigc__p_ImVectorT_int_t,
  _swigc__p_ImVectorT_ofIndexType_t,
  _swigc__p_ImVectorT_unsigned_char_t,
  _swigc__p_ImVectorT_unsigned_int_t,
  _swigc__p_ImVectorT_unsigned_short_t,
  _swigc__p_bool,
  _swigc__p_char,
  _swigc__p_double,
  _swigc__p_f_p_ImGuiContext__p_char,
  _swigc__p_f_p_ImGuiContext_p_ImGuiViewport_p_ImGuiPlatformImeData__void,
  _swigc__p_f_p_ImGuiContext_p_q_const__char__bool,
  _swigc__p_f_p_ImGuiContext_p_q_const__char__void,
  _swigc__p_f_p_ImGuiInputTextCallbackData__int,
  _swigc__p_f_p_ImGuiSelectionBasicStorage_int__unsigned_int,
  _swigc__p_f_p_ImGuiSelectionExternalStorage_int_bool__void,
  _swigc__p_f_p_ImGuiSizeCallbackData__void,
  _swigc__p_f_p_ImGuiViewport_ImVec2__void,
  _swigc__p_f_p_ImGuiViewport__ImVec2,
  _swigc__p_f_p_ImGuiViewport__ImVec4,
  _swigc__p_f_p_ImGuiViewport__bool,
  _swigc__p_f_p_ImGuiViewport__float,
  _swigc__p_f_p_ImGuiViewport__void,
  _swigc__p_f_p_ImGuiViewport_float__void,
  _swigc__p_f_p_ImGuiViewport_p_q_const__char__void,
  _swigc__p_f_p_ImGuiViewport_p_void__void,
  _swigc__p_f_p_ImGuiViewport_unsigned_long_long_p_q_const__void_p_unsigned_long_long__int,
  _swigc__p_f_p_q_const__ImDrawList_p_q_const__ImDrawCmd__void,
  _swigc__p_f_p_void__p_char,
  _swigc__p_f_p_void_int__float,
  _swigc__p_f_p_void_int__p_char,
  _swigc__p_f_p_void_int_p_p_q_const__char__bool,
  _swigc__p_f_p_void_p_q_const__char__void,
  _swigc__p_f_p_void_p_void__void,
  _swigc__p_f_unsigned_int_p_void__p_void,
  _swigc__p_float,
  _swigc__p_glm__vec4,
  _swigc__p_int,
  _swigc__p_long_long,
  _swigc__p_ofColor,
  _swigc__p_ofEventArgs,
  _swigc__p_ofFloatColor,
  _swigc__p_ofImage,
  _swigc__p_ofIndexType,
  _swigc__p_ofPixels,
  _swigc__p_ofRectangle,
  _swigc__p_ofTexture,
  _swigc__p_ofVec2f,
  _swigc__p_ofVec3f,
  _swigc__p_ofVec4f,
  _swigc__p_ofxImGuiContext,
  _swigc__p_ofxImGui__Gui,
  _swigc__p_p_char,
  _swigc__p_p_f_p_void_p_void__void,
  _swigc__p_p_f_unsigned_int_p_void__p_void,
  _swigc__p_p_unsigned_char,
  _swigc__p_p_void,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_std__shared_ptrT_ofAppBaseWindow_t,
  _swigc__p_std__string,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_va_list,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

